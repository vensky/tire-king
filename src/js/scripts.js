
/**
 * Swiper 6.7.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * Copyright 2014-2021 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: May 31, 2021
 */

function _typeof(obj) { '@babel/helpers - typeof'; if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') { _typeof = function _typeof(obj) { return typeof obj } } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj } } return _typeof(obj) }

(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Swiper = factory());
})(void 0, function () {


    function _defineProperties(target, props) {
        for (let i = 0; i < props.length; i++) {
            const descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) { descriptor.writable = true }
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }

    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) { _defineProperties(Constructor.prototype, protoProps) }
        if (staticProps) { _defineProperties(Constructor, staticProps) }
        return Constructor;
    }

    function _extends() {
        _extends = Object.assign || function (target) {
            for (let i = 1; i < arguments.length; i++) {
                const source = arguments[i];

                for (const key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }

            return target;
        };

        return _extends.apply(this, arguments);
    }
    /**
   * SSR Window 3.0.0
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2020, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: November 9, 2020
   */

    /* eslint-disable no-param-reassign */


    function isObject$1(obj) {
        return obj !== null && _typeof(obj) === 'object' && 'constructor' in obj && obj.constructor === Object;
    }

    function extend$1(target, src) {
        if (target === void 0) {
            target = {};
        }

        if (src === void 0) {
            src = {};
        }

        Object.keys(src).forEach(function (key) {
            if (typeof target[key] === 'undefined') { target[key] = src[key] } else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {
                extend$1(target[key], src[key]);
            }
        });
    }

    const ssrDocument = {
        body: {},
        addEventListener: function addEventListener() {},
        removeEventListener: function removeEventListener() {},
        activeElement: {
            blur: function blur() {},
            nodeName: ''
        },
        querySelector: function querySelector() {
            return null;
        },
        querySelectorAll: function querySelectorAll() {
            return [];
        },
        getElementById: function getElementById() {
            return null;
        },
        createEvent: function createEvent() {
            return {
                initEvent: function initEvent() {}
            };
        },
        createElement: function createElement() {
            return {
                children: [],
                childNodes: [],
                style: {},
                setAttribute: function setAttribute() {},
                getElementsByTagName: function getElementsByTagName() {
                    return [];
                }
            };
        },
        createElementNS: function createElementNS() {
            return {};
        },
        importNode: function importNode() {
            return null;
        },
        location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: ''
        }
    };

    function getDocument() {
        const doc = typeof document !== 'undefined' ? document : {};
        extend$1(doc, ssrDocument);
        return doc;
    }

    const ssrWindow = {
        document: ssrDocument,
        navigator: {
            userAgent: ''
        },
        location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: ''
        },
        history: {
            replaceState: function replaceState() {},
            pushState: function pushState() {},
            go: function go() {},
            back: function back() {}
        },
        CustomEvent: function CustomEvent() {
            return this;
        },
        addEventListener: function addEventListener() {},
        removeEventListener: function removeEventListener() {},
        getComputedStyle: function getComputedStyle() {
            return {
                getPropertyValue: function getPropertyValue() {
                    return '';
                }
            };
        },
        Image: function Image() {},
        Date: function Date() {},
        screen: {},
        setTimeout: function setTimeout() {},
        clearTimeout: function clearTimeout() {},
        matchMedia: function matchMedia() {
            return {};
        },
        requestAnimationFrame: function requestAnimationFrame(callback) {
            if (typeof setTimeout === 'undefined') {
                callback();
                return null;
            }

            return setTimeout(callback, 0);
        },
        cancelAnimationFrame: function cancelAnimationFrame(id) {
            if (typeof setTimeout === 'undefined') {
                return;
            }

            clearTimeout(id);
        }
    };

    function getWindow() {
        const win = typeof window !== 'undefined' ? window : {};
        extend$1(win, ssrWindow);
        return win;
    }
    /**
   * Dom7 3.0.0
   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
   * https://framework7.io/docs/dom7.html
   *
   * Copyright 2020, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: November 9, 2020
   */


    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }

    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
        return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };

        return _setPrototypeOf(o, p);
    }

    function _isNativeReflectConstruct() {
        if (typeof Reflect === 'undefined' || !Reflect.construct) { return false }
        if (Reflect.construct.sham) { return false }
        if (typeof Proxy === 'function') { return true }

        try {
            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }

    function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
            _construct = Reflect.construct;
        } else {
            _construct = function _construct(Parent, args, Class) {
                const a = [null];
                a.push.apply(a, args);
                const Constructor = Function.bind.apply(Parent, a);
                const instance = new Constructor();
                if (Class) { _setPrototypeOf(instance, Class.prototype) }
                return instance;
            };
        }

        return _construct.apply(null, arguments);
    }

    function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf('[native code]') !== -1;
    }

    function _wrapNativeSuper(Class) {
        const _cache = typeof Map === 'function' ? new Map() : undefined;

        _wrapNativeSuper = function _wrapNativeSuper(Class) {
            if (Class === null || !_isNativeFunction(Class)) { return Class }

            if (typeof Class !== 'function') {
                throw new TypeError('Super expression must either be null or a function');
            }

            if (typeof _cache !== 'undefined') {
                if (_cache.has(Class)) { return _cache.get(Class) }

                _cache.set(Class, Wrapper);
            }

            function Wrapper() {
                return _construct(Class, arguments, _getPrototypeOf(this).constructor);
            }

            Wrapper.prototype = Object.create(Class.prototype, {
                constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            return _setPrototypeOf(Wrapper, Class);
        };

        return _wrapNativeSuper(Class);
    }

    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }

        return self;
    }
    /* eslint-disable no-proto */


    function makeReactive(obj) {
        const proto = obj.__proto__;
        Object.defineProperty(obj, '__proto__', {
            get: function get() {
                return proto;
            },
            set: function set(value) {
                proto.__proto__ = value;
            }
        });
    }

    const Dom7 = /* #__PURE__*/(function (_Array) {
        _inheritsLoose(Dom7, _Array);

        function Dom7(items) {
            let _this;

            _this = _Array.call.apply(_Array, [this].concat(items)) || this;
            makeReactive(_assertThisInitialized(_this));
            return _this;
        }

        return Dom7;
    }(/* #__PURE__*/_wrapNativeSuper(Array)));

    function arrayFlat(arr) {
        if (arr === void 0) {
            arr = [];
        }

        const res = [];
        arr.forEach(function (el) {
            if (Array.isArray(el)) {
                res.push.apply(res, arrayFlat(el));
            } else {
                res.push(el);
            }
        });
        return res;
    }

    function arrayFilter(arr, callback) {
        return Array.prototype.filter.call(arr, callback);
    }

    function arrayUnique(arr) {
        const uniqueArray = [];

        for (let i = 0; i < arr.length; i += 1) {
            if (uniqueArray.indexOf(arr[i]) === -1) { uniqueArray.push(arr[i]) }
        }

        return uniqueArray;
    }

    function qsa(selector, context) {
        if (typeof selector !== 'string') {
            return [selector];
        }

        const a = [];
        const res = context.querySelectorAll(selector);

        for (let i = 0; i < res.length; i += 1) {
            a.push(res[i]);
        }

        return a;
    }

    function $(selector, context) {
        const window = getWindow();
        const document = getDocument();
        let arr = [];

        if (!context && selector instanceof Dom7) {
            return selector;
        }

        if (!selector) {
            return new Dom7(arr);
        }

        if (typeof selector === 'string') {
            const html = selector.trim();

            if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
                let toCreate = 'div';
                if (html.indexOf('<li') === 0) { toCreate = 'ul' }
                if (html.indexOf('<tr') === 0) { toCreate = 'tbody' }
                if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) { toCreate = 'tr' }
                if (html.indexOf('<tbody') === 0) { toCreate = 'table' }
                if (html.indexOf('<option') === 0) { toCreate = 'select' }
                const tempParent = document.createElement(toCreate);
                tempParent.innerHTML = html;

                for (let i = 0; i < tempParent.childNodes.length; i += 1) {
                    arr.push(tempParent.childNodes[i]);
                }
            } else {
                arr = qsa(selector.trim(), context || document);
            } // arr = qsa(selector, document);

        } else if (selector.nodeType || selector === window || selector === document) {
            arr.push(selector);
        } else if (Array.isArray(selector)) {
            if (selector instanceof Dom7) { return selector }
            arr = selector;
        }

        return new Dom7(arrayUnique(arr));
    }

    $.fn = Dom7.prototype;

    function addClass() {
        for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
            classes[_key] = arguments[_key];
        }

        const classNames = arrayFlat(classes.map(function (c) {
            return c.split(' ');
        }));
        this.forEach(function (el) {
            let _el$classList;

            (_el$classList = el.classList).add.apply(_el$classList, classNames);
        });
        return this;
    }

    function removeClass() {
        for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            classes[_key2] = arguments[_key2];
        }

        const classNames = arrayFlat(classes.map(function (c) {
            return c.split(' ');
        }));
        this.forEach(function (el) {
            let _el$classList2;

            (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
        });
        return this;
    }

    function toggleClass() {
        for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            classes[_key3] = arguments[_key3];
        }

        const classNames = arrayFlat(classes.map(function (c) {
            return c.split(' ');
        }));
        this.forEach(function (el) {
            classNames.forEach(function (className) {
                el.classList.toggle(className);
            });
        });
    }

    function hasClass() {
        for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            classes[_key4] = arguments[_key4];
        }

        const classNames = arrayFlat(classes.map(function (c) {
            return c.split(' ');
        }));
        return arrayFilter(this, function (el) {
            return classNames.filter(function (className) {
                return el.classList.contains(className);
            }).length > 0;
        }).length > 0;
    }

    function attr(attrs, value) {
        if (arguments.length === 1 && typeof attrs === 'string') {
            // Get attr
            if (this[0]) { return this[0].getAttribute(attrs) }
            return undefined;
        } // Set attrs


        for (let i = 0; i < this.length; i += 1) {
            if (arguments.length === 2) {
                // String
                this[i].setAttribute(attrs, value);
            } else {
                // Object
                for (const attrName in attrs) {
                    this[i][attrName] = attrs[attrName];
                    this[i].setAttribute(attrName, attrs[attrName]);
                }
            }
        }

        return this;
    }

    function removeAttr(attr) {
        for (let i = 0; i < this.length; i += 1) {
            this[i].removeAttribute(attr);
        }

        return this;
    }

    function transform(transform) {
        for (let i = 0; i < this.length; i += 1) {
            this[i].style.transform = transform;
        }

        return this;
    }

    function transition$1(duration) {
        for (let i = 0; i < this.length; i += 1) {
            this[i].style.transitionDuration = typeof duration !== 'string' ? duration + 'ms' : duration;
        }

        return this;
    }

    function on() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        let eventType = args[0];
        let targetSelector = args[1];
        let listener = args[2];
        let capture = args[3];

        if (typeof args[1] === 'function') {
            eventType = args[0];
            listener = args[1];
            capture = args[2];
            targetSelector = undefined;
        }

        if (!capture) { capture = false }

        function handleLiveEvent(e) {
            const target = e.target;
            if (!target) { return }
            const eventData = e.target.dom7EventData || [];

            if (eventData.indexOf(e) < 0) {
                eventData.unshift(e);
            }

            if ($(target).is(targetSelector)) { listener.apply(target, eventData) } else {
        var _parents = $(target).parents(); // eslint-disable-line


                for (let k = 0; k < _parents.length; k += 1) {
                    if ($(_parents[k]).is(targetSelector)) { listener.apply(_parents[k], eventData) }
                }
            }
        }

        function handleEvent(e) {
            const eventData = e && e.target ? e.target.dom7EventData || [] : [];

            if (eventData.indexOf(e) < 0) {
                eventData.unshift(e);
            }

            listener.apply(this, eventData);
        }

        const events = eventType.split(' ');
        let j;

        for (let i = 0; i < this.length; i += 1) {
            const el = this[i];

            if (!targetSelector) {
                for (j = 0; j < events.length; j += 1) {
                    const event = events[j];
                    if (!el.dom7Listeners) { el.dom7Listeners = {} }
                    if (!el.dom7Listeners[event]) { el.dom7Listeners[event] = [] }
                    el.dom7Listeners[event].push({
                        listener,
                        proxyListener: handleEvent
                    });
                    el.addEventListener(event, handleEvent, capture);
                }
            } else {
                // Live events
                for (j = 0; j < events.length; j += 1) {
                    const _event = events[j];
                    if (!el.dom7LiveListeners) { el.dom7LiveListeners = {} }
                    if (!el.dom7LiveListeners[_event]) { el.dom7LiveListeners[_event] = [] }

                    el.dom7LiveListeners[_event].push({
                        listener,
                        proxyListener: handleLiveEvent
                    });

                    el.addEventListener(_event, handleLiveEvent, capture);
                }
            }
        }

        return this;
    }

    function off() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
        }

        let eventType = args[0];
        let targetSelector = args[1];
        let listener = args[2];
        let capture = args[3];

        if (typeof args[1] === 'function') {
            eventType = args[0];
            listener = args[1];
            capture = args[2];
            targetSelector = undefined;
        }

        if (!capture) { capture = false }
        const events = eventType.split(' ');

        for (let i = 0; i < events.length; i += 1) {
            const event = events[i];

            for (let j = 0; j < this.length; j += 1) {
                const el = this[j];
                let handlers = void 0;

                if (!targetSelector && el.dom7Listeners) {
                    handlers = el.dom7Listeners[event];
                } else if (targetSelector && el.dom7LiveListeners) {
                    handlers = el.dom7LiveListeners[event];
                }

                if (handlers && handlers.length) {
                    for (let k = handlers.length - 1; k >= 0; k -= 1) {
                        const handler = handlers[k];

                        if (listener && handler.listener === listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        } else if (!listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        }
                    }
                }
            }
        }

        return this;
    }

    function trigger() {
        const window = getWindow();

        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
        }

        const events = args[0].split(' ');
        const eventData = args[1];

        for (let i = 0; i < events.length; i += 1) {
            const event = events[i];

            for (let j = 0; j < this.length; j += 1) {
                const el = this[j];

                if (window.CustomEvent) {
                    const evt = new window.CustomEvent(event, {
                        detail: eventData,
                        bubbles: true,
                        cancelable: true
                    });
                    el.dom7EventData = args.filter(function (data, dataIndex) {
                        return dataIndex > 0;
                    });
                    el.dispatchEvent(evt);
                    el.dom7EventData = [];
                    delete el.dom7EventData;
                }
            }
        }

        return this;
    }

    function transitionEnd$1(callback) {
        const dom = this;

        function fireCallBack(e) {
            if (e.target !== this) { return }
            callback.call(this, e);
            dom.off('transitionend', fireCallBack);
        }

        if (callback) {
            dom.on('transitionend', fireCallBack);
        }

        return this;
    }

    function outerWidth(includeMargins) {
        if (this.length > 0) {
            if (includeMargins) {
                const _styles = this.styles();

                return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
            }

            return this[0].offsetWidth;
        }

        return null;
    }

    function outerHeight(includeMargins) {
        if (this.length > 0) {
            if (includeMargins) {
                const _styles2 = this.styles();

                return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
            }

            return this[0].offsetHeight;
        }

        return null;
    }

    function offset() {
        if (this.length > 0) {
            const window = getWindow();
            const document = getDocument();
            const el = this[0];
            const box = el.getBoundingClientRect();
            const body = document.body;
            const clientTop = el.clientTop || body.clientTop || 0;
            const clientLeft = el.clientLeft || body.clientLeft || 0;
            const scrollTop = el === window ? window.scrollY : el.scrollTop;
            const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
            return {
                top: box.top + scrollTop - clientTop,
                left: box.left + scrollLeft - clientLeft
            };
        }

        return null;
    }

    function styles() {
        const window = getWindow();
        if (this[0]) { return window.getComputedStyle(this[0], null) }
        return {};
    }

    function css(props, value) {
        const window = getWindow();
        let i;

        if (arguments.length === 1) {
            if (typeof props === 'string') {
                // .css('width')
                if (this[0]) { return window.getComputedStyle(this[0], null).getPropertyValue(props) }
            } else {
                // .css({ width: '100px' })
                for (i = 0; i < this.length; i += 1) {
                    for (const _prop in props) {
                        this[i].style[_prop] = props[_prop];
                    }
                }

                return this;
            }
        }

        if (arguments.length === 2 && typeof props === 'string') {
            // .css('width', '100px')
            for (i = 0; i < this.length; i += 1) {
                this[i].style[props] = value;
            }

            return this;
        }

        return this;
    }

    function each(callback) {
        if (!callback) { return this }
        this.forEach(function (el, index) {
            callback.apply(el, [el, index]);
        });
        return this;
    }

    function filter(callback) {
        const result = arrayFilter(this, callback);
        return $(result);
    }

    function html(html) {
        if (typeof html === 'undefined') {
            return this[0] ? this[0].innerHTML : null;
        }

        for (let i = 0; i < this.length; i += 1) {
            this[i].innerHTML = html;
        }

        return this;
    }

    function text(text) {
        if (typeof text === 'undefined') {
            return this[0] ? this[0].textContent.trim() : null;
        }

        for (let i = 0; i < this.length; i += 1) {
            this[i].textContent = text;
        }

        return this;
    }

    function is(selector) {
        const window = getWindow();
        const document = getDocument();
        const el = this[0];
        let compareWith;
        let i;
        if (!el || typeof selector === 'undefined') { return false }

        if (typeof selector === 'string') {
            if (el.matches) { return el.matches(selector) }
            if (el.webkitMatchesSelector) { return el.webkitMatchesSelector(selector) }
            if (el.msMatchesSelector) { return el.msMatchesSelector(selector) }
            compareWith = $(selector);

            for (i = 0; i < compareWith.length; i += 1) {
                if (compareWith[i] === el) { return true }
            }

            return false;
        }

        if (selector === document) {
            return el === document;
        }

        if (selector === window) {
            return el === window;
        }

        if (selector.nodeType || selector instanceof Dom7) {
            compareWith = selector.nodeType ? [selector] : selector;

            for (i = 0; i < compareWith.length; i += 1) {
                if (compareWith[i] === el) { return true }
            }

            return false;
        }

        return false;
    }

    function index() {
        let child = this[0];
        let i;

        if (child) {
            i = 0; // eslint-disable-next-line

            while ((child = child.previousSibling) !== null) {
                if (child.nodeType === 1) { i += 1 }
            }

            return i;
        }

        return undefined;
    }

    function eq(index) {
        if (typeof index === 'undefined') { return this }
        const length = this.length;

        if (index > length - 1) {
            return $([]);
        }

        if (index < 0) {
            const returnIndex = length + index;
            if (returnIndex < 0) { return $([]) }
            return $([this[returnIndex]]);
        }

        return $([this[index]]);
    }

    function append() {
        let newChild;
        const document = getDocument();

        for (let k = 0; k < arguments.length; k += 1) {
            newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

            for (let i = 0; i < this.length; i += 1) {
                if (typeof newChild === 'string') {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = newChild;

                    while (tempDiv.firstChild) {
                        this[i].appendChild(tempDiv.firstChild);
                    }
                } else if (newChild instanceof Dom7) {
                    for (let j = 0; j < newChild.length; j += 1) {
                        this[i].appendChild(newChild[j]);
                    }
                } else {
                    this[i].appendChild(newChild);
                }
            }
        }

        return this;
    }

    function prepend(newChild) {
        const document = getDocument();
        let i;
        let j;

        for (i = 0; i < this.length; i += 1) {
            if (typeof newChild === 'string') {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = newChild;

                for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
                    this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
                }
            } else if (newChild instanceof Dom7) {
                for (j = 0; j < newChild.length; j += 1) {
                    this[i].insertBefore(newChild[j], this[i].childNodes[0]);
                }
            } else {
                this[i].insertBefore(newChild, this[i].childNodes[0]);
            }
        }

        return this;
    }

    function next(selector) {
        if (this.length > 0) {
            if (selector) {
                if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
                    return $([this[0].nextElementSibling]);
                }

                return $([]);
            }

            if (this[0].nextElementSibling) { return $([this[0].nextElementSibling]) }
            return $([]);
        }

        return $([]);
    }

    function nextAll(selector) {
        const nextEls = [];
        let el = this[0];
        if (!el) { return $([]) }

        while (el.nextElementSibling) {
      var _next = el.nextElementSibling; // eslint-disable-line

            if (selector) {
                if ($(_next).is(selector)) { nextEls.push(_next) }
            } else { nextEls.push(_next) }

            el = _next;
        }

        return $(nextEls);
    }

    function prev(selector) {
        if (this.length > 0) {
            const el = this[0];

            if (selector) {
                if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
                    return $([el.previousElementSibling]);
                }

                return $([]);
            }

            if (el.previousElementSibling) { return $([el.previousElementSibling]) }
            return $([]);
        }

        return $([]);
    }

    function prevAll(selector) {
        const prevEls = [];
        let el = this[0];
        if (!el) { return $([]) }

        while (el.previousElementSibling) {
      var _prev = el.previousElementSibling; // eslint-disable-line

            if (selector) {
                if ($(_prev).is(selector)) { prevEls.push(_prev) }
            } else { prevEls.push(_prev) }

            el = _prev;
        }

        return $(prevEls);
    }

    function parent(selector) {
    var parents = []; // eslint-disable-line

        for (let i = 0; i < this.length; i += 1) {
            if (this[i].parentNode !== null) {
                if (selector) {
                    if ($(this[i].parentNode).is(selector)) { parents.push(this[i].parentNode) }
                } else {
                    parents.push(this[i].parentNode);
                }
            }
        }

        return $(parents);
    }

    function parents(selector) {
    var parents = []; // eslint-disable-line

        for (let i = 0; i < this.length; i += 1) {
      var _parent = this[i].parentNode; // eslint-disable-line

            while (_parent) {
                if (selector) {
                    if ($(_parent).is(selector)) { parents.push(_parent) }
                } else {
                    parents.push(_parent);
                }

                _parent = _parent.parentNode;
            }
        }

        return $(parents);
    }

    function closest(selector) {
    var closest = this; // eslint-disable-line

        if (typeof selector === 'undefined') {
            return $([]);
        }

        if (!closest.is(selector)) {
            closest = closest.parents(selector).eq(0);
        }

        return closest;
    }

    function find(selector) {
        const foundElements = [];

        for (let i = 0; i < this.length; i += 1) {
            try {
                var found = this[i].querySelectorAll(selector);
            } catch (err) {
                console.log(selector);
            }

            for (let j = 0; j < found.length; j += 1) {
                foundElements.push(found[j]);
            }
        }

        return $(foundElements);
    }

    function children(selector) {
    var children = []; // eslint-disable-line

        for (let i = 0; i < this.length; i += 1) {
            const childNodes = this[i].children;

            for (let j = 0; j < childNodes.length; j += 1) {
                if (!selector || $(childNodes[j]).is(selector)) {
                    children.push(childNodes[j]);
                }
            }
        }

        return $(children);
    }

    function remove() {
        for (let i = 0; i < this.length; i += 1) {
            if (this[i].parentNode) { this[i].parentNode.removeChild(this[i]) }
        }

        return this;
    }

    const Methods = {
        addClass,
        removeClass,
        hasClass,
        toggleClass,
        attr,
        removeAttr,
        transform,
        transition: transition$1,
        on,
        off,
        trigger,
        transitionEnd: transitionEnd$1,
        outerWidth,
        outerHeight,
        styles,
        offset,
        css,
        each,
        html,
        text,
        is,
        index,
        eq,
        append,
        prepend,
        next,
        nextAll,
        prev,
        prevAll,
        parent,
        parents,
        closest,
        find,
        children,
        filter,
        remove
    };
    Object.keys(Methods).forEach(function (methodName) {
        Object.defineProperty($.fn, methodName, {
            value: Methods[methodName],
            writable: true
        });
    });

    function deleteProps(obj) {
        const object = obj;
        Object.keys(object).forEach(function (key) {
            try {
                object[key] = null;
            } catch (e) { // no getter for object
            }

            try {
                delete object[key];
            } catch (e) { // something got wrong
            }
        });
    }

    function nextTick(callback, delay) {
        if (delay === void 0) {
            delay = 0;
        }

        return setTimeout(callback, delay);
    }

    function now() {
        return Date.now();
    }

    function getComputedStyle$1(el) {
        const window = getWindow();
        let style;

        if (window.getComputedStyle) {
            style = window.getComputedStyle(el, null);
        }

        if (!style && el.currentStyle) {
            style = el.currentStyle;
        }

        if (!style) {
            style = el.style;
        }

        return style;
    }

    function getTranslate(el, axis) {
        if (axis === void 0) {
            axis = 'x';
        }

        const window = getWindow();
        let matrix;
        let curTransform;
        let transformMatrix;
        const curStyle = getComputedStyle$1(el);

        if (window.WebKitCSSMatrix) {
            curTransform = curStyle.transform || curStyle.webkitTransform;

            if (curTransform.split(',').length > 6) {
                curTransform = curTransform.split(', ').map(function (a) {
                    return a.replace(',', '.');
                }).join(', ');
            } // Some old versions of Webkit choke when 'none' is passed; pass
            // empty string instead in this case


            transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
        } else {
            transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
            matrix = transformMatrix.toString().split(',');
        }

        if (axis === 'x') {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) { curTransform = transformMatrix.m41 } // Crazy IE10 Matrix
            else if (matrix.length === 16) { curTransform = parseFloat(matrix[12]) } // Normal Browsers
            else { curTransform = parseFloat(matrix[4]) }
        }

        if (axis === 'y') {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) { curTransform = transformMatrix.m42 } // Crazy IE10 Matrix
            else if (matrix.length === 16) { curTransform = parseFloat(matrix[13]) } // Normal Browsers
            else { curTransform = parseFloat(matrix[5]) }
        }

        return curTransform || 0;
    }

    function isObject(o) {
        return _typeof(o) === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
    }

    function extend() {
        const to = Object(arguments.length <= 0 ? undefined : arguments[0]);
        const noExtend = ['__proto__', 'constructor', 'prototype'];

        for (let i = 1; i < arguments.length; i += 1) {
            const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

            if (nextSource !== undefined && nextSource !== null) {
                const keysArray = Object.keys(Object(nextSource)).filter(function (key) {
                    return noExtend.indexOf(key) < 0;
                });

                for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
                    const nextKey = keysArray[nextIndex];
                    const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

                    if (desc !== undefined && desc.enumerable) {
                        if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                            if (nextSource[nextKey].__swiper__) {
                                to[nextKey] = nextSource[nextKey];
                            } else {
                                extend(to[nextKey], nextSource[nextKey]);
                            }
                        } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                            to[nextKey] = {};

                            if (nextSource[nextKey].__swiper__) {
                                to[nextKey] = nextSource[nextKey];
                            } else {
                                extend(to[nextKey], nextSource[nextKey]);
                            }
                        } else {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
        }

        return to;
    }

    function bindModuleMethods(instance, obj) {
        Object.keys(obj).forEach(function (key) {
            if (isObject(obj[key])) {
                Object.keys(obj[key]).forEach(function (subKey) {
                    if (typeof obj[key][subKey] === 'function') {
                        obj[key][subKey] = obj[key][subKey].bind(instance);
                    }
                });
            }

            instance[key] = obj[key];
        });
    }

    function classesToSelector(classes) {
        if (classes === void 0) {
            classes = '';
        }

    return "." + classes.trim().replace(/([\.:\/])/g, '\\$1') // eslint-disable-line
            .replace(/ /g, '.');
    }

    function createElementIfNotDefined($container, params, createElements, checkProps) {
        const document = getDocument();

        if (createElements) {
            Object.keys(checkProps).forEach(function (key) {
                if (!params[key] && params.auto === true) {
                    const element = document.createElement('div');
                    element.className = checkProps[key];
                    $container.append(element);
                    params[key] = element;
                }
            });
        }

        return params;
    }

    let support;

    function calcSupport() {
        const window = getWindow();
        const document = getDocument();
        return {
            touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
            pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
            observer: (function checkObserver() {
                return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
            }()),
            passiveListener: (function checkPassiveListener() {
                let supportsPassive = false;

                try {
                    const opts = Object.defineProperty({}, 'passive', {
                        // eslint-disable-next-line
            get: function get() {
                            supportsPassive = true;
                        }
                    });
                    window.addEventListener('testPassiveListener', null, opts);
                } catch (e) { // No support
                }

                return supportsPassive;
            }()),
            gestures: (function checkGestures() {
                return 'ongesturestart' in window;
            }())
        };
    }

    function getSupport() {
        if (!support) {
            support = calcSupport();
        }

        return support;
    }

    let device;

    function calcDevice(_temp) {
        const _ref = _temp === void 0 ? {} : _temp;
        const userAgent = _ref.userAgent;

        const support = getSupport();
        const window = getWindow();
        const platform = window.navigator.platform;
        const ua = userAgent || window.navigator.userAgent;
        const device = {
            ios: false,
            android: false
        };
        const screenWidth = window.screen.width;
        const screenHeight = window.screen.height;
    var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

        let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
        const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
        const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
        const windows = platform === 'Win32';
        let macos = platform === 'MacIntel'; // iPadOs 13 fix

        const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

        if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + 'x' + screenHeight) >= 0) {
            ipad = ua.match(/(Version)\/([\d.]+)/);
            if (!ipad) { ipad = [0, 1, '13_0_0'] }
            macos = false;
        } // Android


        if (android && !windows) {
            device.os = 'android';
            device.android = true;
        }

        if (ipad || iphone || ipod) {
            device.os = 'ios';
            device.ios = true;
        } // Export object


        return device;
    }

    function getDevice(overrides) {
        if (overrides === void 0) {
            overrides = {};
        }

        if (!device) {
            device = calcDevice(overrides);
        }

        return device;
    }

    let browser;

    function calcBrowser() {
        const window = getWindow();

        function isSafari() {
            const ua = window.navigator.userAgent.toLowerCase();
            return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
        }

        return {
            isEdge: !!window.navigator.userAgent.match(/Edge/g),
            isSafari: isSafari(),
            isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
        };
    }

    function getBrowser() {
        if (!browser) {
            browser = calcBrowser();
        }

        return browser;
    }

    const supportsResizeObserver = function supportsResizeObserver() {
        const window = getWindow();
        return typeof window.ResizeObserver !== 'undefined';
    };

    const Resize = {
        name: 'resize',
        create: function create() {
            const swiper = this;
            extend(swiper, {
                resize: {
                    observer: null,
                    createObserver: function createObserver() {
                        if (!swiper || swiper.destroyed || !swiper.initialized) { return }
                        swiper.resize.observer = new ResizeObserver(function (entries) {
                            const width = swiper.width;
                            const height = swiper.height;
                            let newWidth = width;
                            let newHeight = height;
                            entries.forEach(function (_ref) {
                                const contentBoxSize = _ref.contentBoxSize;
                                const contentRect = _ref.contentRect;
                                const target = _ref.target;
                                if (target && target !== swiper.el) { return }
                                newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
                                newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
                            });

                            if (newWidth !== width || newHeight !== height) {
                                swiper.resize.resizeHandler();
                            }
                        });
                        swiper.resize.observer.observe(swiper.el);
                    },
                    removeObserver: function removeObserver() {
                        if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
                            swiper.resize.observer.unobserve(swiper.el);
                            swiper.resize.observer = null;
                        }
                    },
                    resizeHandler: function resizeHandler() {
                        if (!swiper || swiper.destroyed || !swiper.initialized) { return }
                        swiper.emit('beforeResize');
                        swiper.emit('resize');
                    },
                    orientationChangeHandler: function orientationChangeHandler() {
                        if (!swiper || swiper.destroyed || !swiper.initialized) { return }
                        swiper.emit('orientationchange');
                    }
                }
            });
        },
        on: {
            init: function init(swiper) {
                const window = getWindow();

                if (swiper.params.resizeObserver && supportsResizeObserver()) {
                    swiper.resize.createObserver();
                    return;
                } // Emit resize


                window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

                window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
            },
            destroy: function destroy(swiper) {
                const window = getWindow();
                swiper.resize.removeObserver();
                window.removeEventListener('resize', swiper.resize.resizeHandler);
                window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
            }
        }
    };
    const Observer = {
        attach: function attach(target, options) {
            if (options === void 0) {
                options = {};
            }

            const window = getWindow();
            const swiper = this;
            const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
            const observer = new ObserverFunc(function (mutations) {
                // The observerUpdate event should only be triggered
                // once despite the number of mutations.  Additional
                // triggers are redundant and are very costly
                if (mutations.length === 1) {
                    swiper.emit('observerUpdate', mutations[0]);
                    return;
                }

                const observerUpdate = function observerUpdate() {
                    swiper.emit('observerUpdate', mutations[0]);
                };

                if (window.requestAnimationFrame) {
                    window.requestAnimationFrame(observerUpdate);
                } else {
                    window.setTimeout(observerUpdate, 0);
                }
            });
            observer.observe(target, {
                attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
                childList: typeof options.childList === 'undefined' ? true : options.childList,
                characterData: typeof options.characterData === 'undefined' ? true : options.characterData
            });
            swiper.observer.observers.push(observer);
        },
        init: function init() {
            const swiper = this;
            if (!swiper.support.observer || !swiper.params.observer) { return }

            if (swiper.params.observeParents) {
                const containerParents = swiper.$el.parents();

                for (let i = 0; i < containerParents.length; i += 1) {
                    swiper.observer.attach(containerParents[i]);
                }
            } // Observe container


            swiper.observer.attach(swiper.$el[0], {
                childList: swiper.params.observeSlideChildren
            }); // Observe wrapper

            swiper.observer.attach(swiper.$wrapperEl[0], {
                attributes: false
            });
        },
        destroy: function destroy() {
            const swiper = this;
            swiper.observer.observers.forEach(function (observer) {
                observer.disconnect();
            });
            swiper.observer.observers = [];
        }
    };
    const Observer$1 = {
        name: 'observer',
        params: {
            observer: false,
            observeParents: false,
            observeSlideChildren: false
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                observer: _extends({}, Observer, {
                    observers: []
                })
            });
        },
        on: {
            init: function init(swiper) {
                swiper.observer.init();
            },
            destroy: function destroy(swiper) {
                swiper.observer.destroy();
            }
        }
    };
    const modular = {
        useParams: function useParams(instanceParams) {
            const instance = this;
            if (!instance.modules) { return }
            Object.keys(instance.modules).forEach(function (moduleName) {
                const module = instance.modules[moduleName]; // Extend params

                if (module.params) {
                    extend(instanceParams, module.params);
                }
            });
        },
        useModules: function useModules(modulesParams) {
            if (modulesParams === void 0) {
                modulesParams = {};
            }

            const instance = this;
            if (!instance.modules) { return }
            Object.keys(instance.modules).forEach(function (moduleName) {
                const module = instance.modules[moduleName];
                const moduleParams = modulesParams[moduleName] || {}; // Add event listeners

                if (module.on && instance.on) {
                    Object.keys(module.on).forEach(function (moduleEventName) {
                        instance.on(moduleEventName, module.on[moduleEventName]);
                    });
                } // Module create callback


                if (module.create) {
                    module.create.bind(instance)(moduleParams);
                }
            });
        }
    };
    /* eslint-disable no-underscore-dangle */

    const eventsEmitter = {
        on: function on(events, handler, priority) {
            const self = this;
            if (typeof handler !== 'function') { return self }
            const method = priority ? 'unshift' : 'push';
            events.split(' ').forEach(function (event) {
                if (!self.eventsListeners[event]) { self.eventsListeners[event] = [] }
                self.eventsListeners[event][method](handler);
            });
            return self;
        },
        once: function once(events, handler, priority) {
            const self = this;
            if (typeof handler !== 'function') { return self }

            function onceHandler() {
                self.off(events, onceHandler);

                if (onceHandler.__emitterProxy) {
                    delete onceHandler.__emitterProxy;
                }

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                handler.apply(self, args);
            }

            onceHandler.__emitterProxy = handler;
            return self.on(events, onceHandler, priority);
        },
        onAny: function onAny(handler, priority) {
            const self = this;
            if (typeof handler !== 'function') { return self }
            const method = priority ? 'unshift' : 'push';

            if (self.eventsAnyListeners.indexOf(handler) < 0) {
                self.eventsAnyListeners[method](handler);
            }

            return self;
        },
        offAny: function offAny(handler) {
            const self = this;
            if (!self.eventsAnyListeners) { return self }
            const index = self.eventsAnyListeners.indexOf(handler);

            if (index >= 0) {
                self.eventsAnyListeners.splice(index, 1);
            }

            return self;
        },
        off: function off(events, handler) {
            const self = this;
            if (!self.eventsListeners) { return self }
            events.split(' ').forEach(function (event) {
                if (typeof handler === 'undefined') {
                    self.eventsListeners[event] = [];
                } else if (self.eventsListeners[event]) {
                    self.eventsListeners[event].forEach(function (eventHandler, index) {
                        if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
                            self.eventsListeners[event].splice(index, 1);
                        }
                    });
                }
            });
            return self;
        },
        emit: function emit() {
            const self = this;
            if (!self.eventsListeners) { return self }
            let events;
            let data;
            let context;

            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            if (typeof args[0] === 'string' || Array.isArray(args[0])) {
                events = args[0];
                data = args.slice(1, args.length);
                context = self;
            } else {
                events = args[0].events;
                data = args[0].data;
                context = args[0].context || self;
            }

            data.unshift(context);
            const eventsArray = Array.isArray(events) ? events : events.split(' ');
            eventsArray.forEach(function (event) {
                if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
                    self.eventsAnyListeners.forEach(function (eventHandler) {
                        eventHandler.apply(context, [event].concat(data));
                    });
                }

                if (self.eventsListeners && self.eventsListeners[event]) {
                    self.eventsListeners[event].forEach(function (eventHandler) {
                        eventHandler.apply(context, data);
                    });
                }
            });
            return self;
        }
    };

    function updateSize() {
        const swiper = this;
        let width;
        let height;
        const $el = swiper.$el;

        if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
            width = swiper.params.width;
        } else {
            width = $el[0].clientWidth;
        }

        if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
            height = swiper.params.height;
        } else {
            height = $el[0].clientHeight;
        }

        if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
            return;
        } // Subtract paddings


        width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
        height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
        if (Number.isNaN(width)) { width = 0 }
        if (Number.isNaN(height)) { height = 0 }
        extend(swiper, {
            width,
            height,
            size: swiper.isHorizontal() ? width : height
        });
    }

    function updateSlides() {
        const swiper = this;

        function getDirectionLabel(property) {
            if (swiper.isHorizontal()) {
                return property;
            } // prettier-ignore


            return {
                'width': 'height',
                'margin-top': 'margin-left',
                'margin-bottom ': 'margin-right',
                'margin-left': 'margin-top',
                'margin-right': 'margin-bottom',
                'padding-left': 'padding-top',
                'padding-right': 'padding-bottom',
                'marginRight': 'marginBottom'
            }[property];
        }

        function getDirectionPropertyValue(node, label) {
            return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
        }

        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const swiperSize = swiper.size;
        const rtl = swiper.rtlTranslate;
        const wrongRTL = swiper.wrongRTL;
        const isVirtual = swiper.virtual && params.virtual.enabled;
        const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
        const slides = $wrapperEl.children('.' + swiper.params.slideClass);
        const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
        let snapGrid = [];
        const slidesGrid = [];
        const slidesSizesGrid = [];
        let offsetBefore = params.slidesOffsetBefore;

        if (typeof offsetBefore === 'function') {
            offsetBefore = params.slidesOffsetBefore.call(swiper);
        }

        let offsetAfter = params.slidesOffsetAfter;

        if (typeof offsetAfter === 'function') {
            offsetAfter = params.slidesOffsetAfter.call(swiper);
        }

        const previousSnapGridLength = swiper.snapGrid.length;
        const previousSlidesGridLength = swiper.slidesGrid.length;
        let spaceBetween = params.spaceBetween;
        let slidePosition = -offsetBefore;
        let prevSlideSize = 0;
        let index = 0;

        if (typeof swiperSize === 'undefined') {
            return;
        }

        if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
            spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
        }

        swiper.virtualSize = -spaceBetween; // reset margins

        if (rtl) {
            slides.css({
                marginLeft: '',
                marginTop: ''
            });
        } else {
            slides.css({
                marginRight: '',
                marginBottom: ''
            });
        }
        let slidesNumberEvenToRows;

        if (params.slidesPerColumn > 1) {
            if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
                slidesNumberEvenToRows = slidesLength;
            } else {
                slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
            }

            if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
                slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
            }
        } // Calc slides


        let slideSize;
        const slidesPerColumn = params.slidesPerColumn;
        const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
        const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

        for (let i = 0; i < slidesLength; i += 1) {
            slideSize = 0;
            const slide = slides.eq(i);

            if (params.slidesPerColumn > 1) {
                // Set slides order
                let newSlideOrderIndex = void 0;
                let column = void 0;
                let row = void 0;

                if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
                    const groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
                    const slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
                    const columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
                    row = Math.floor(slideIndexInGroup / columnsInGroup);
                    column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
                    newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
                    slide.css({
                        'webkitBoxOrdinalGroup': newslideorderindex,
                        'mozBoxOrdinalGroup': newslideorderindex,
                        'msFlexOrder': newslideorderindex,
                        'webkitOrder': newslideorderindex,
                        'order': newslideorderindex
                    });
                } else if (params.slidesPerColumnFill === 'column') {
                    column = Math.floor(i / slidesPerColumn);
                    row = i - column * slidesPerColumn;

                    if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
                        row += 1;

                        if (row >= slidesPerColumn) {
                            row = 0;
                            column += 1;
                        }
                    }
                } else {
                    row = Math.floor(i / slidesPerRow);
                    column = i - row * slidesPerRow;
                }

                slide.css(getDirectionLabel('margin-top'), row !== 0 && params.spaceBetween && params.spaceBetween + 'px');
            }

      if (slide.css('display') === 'none') continue; // eslint-disable-line

            if (params.slidesPerView === 'auto') {
                const slideStyles = getComputedStyle(slide[0]);
                const currentTransform = slide[0].style.transform;
                const currentWebKitTransform = slide[0].style.webkitTransform;

                if (currentTransform) {
                    slide[0].style.transform = 'none';
                }

                if (currentWebKitTransform) {
                    slide[0].style.webkitTransform = 'none';
                }

                if (params.roundLengths) {
                    slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
                } else {
                    // eslint-disable-next-line
          var width = getDirectionPropertyValue(slideStyles, 'width');
                    const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
                    const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
                    const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
                    const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
                    const boxSizing = slideStyles.getPropertyValue('box-sizing');

                    if (boxSizing && boxSizing === 'border-box') {
                        slideSize = width + marginLeft + marginRight;
                    } else {
                        const _slide$ = slide[0];
                        const clientWidth = _slide$.clientWidth;
                        const offsetWidth = _slide$.offsetWidth;
                        slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
                    }
                }

                if (currentTransform) {
                    slide[0].style.transform = currentTransform;
                }

                if (currentWebKitTransform) {
                    slide[0].style.webkitTransform = currentWebKitTransform;
                }

                if (params.roundLengths) { slideSize = Math.floor(slideSize) }
            } else {
                slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
                if (params.roundLengths) { slideSize = Math.floor(slideSize) }

                if (slides[i]) {
                    slides[i].style[getDirectionLabel('width')] = slideSize + 'px';
                }
            }

            if (slides[i]) {
                slides[i].swiperSlideSize = slideSize;
            }

            slidesSizesGrid.push(slideSize);

            if (params.centeredSlides) {
                slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
                if (prevSlideSize === 0 && i !== 0) { slidePosition = slidePosition - swiperSize / 2 - spaceBetween }
                if (i === 0) { slidePosition = slidePosition - swiperSize / 2 - spaceBetween }
                if (Math.abs(slidePosition) < 1 / 1000) { slidePosition = 0 }
                if (params.roundLengths) { slidePosition = Math.floor(slidePosition) }
                if (index % params.slidesPerGroup === 0) { snapGrid.push(slidePosition) }
                slidesGrid.push(slidePosition);
            } else {
                if (params.roundLengths) { slidePosition = Math.floor(slidePosition) }
                if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) { snapGrid.push(slidePosition) }
                slidesGrid.push(slidePosition);
                slidePosition = slidePosition + slideSize + spaceBetween;
            }

            swiper.virtualSize += slideSize + spaceBetween;
            prevSlideSize = slideSize;
            index += 1;
        }

        swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
        let newSlidesGrid;

        if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
            $wrapperEl.css({
                width: swiper.virtualsize + params.spacebetween + 'px'
            });
        }

        if (params.setWrapperSize) {
            let _$wrapperEl$css;

            $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + 'px', _$wrapperEl$css));
        }

        if (params.slidesPerColumn > 1) {
            let _$wrapperEl$css2;

            swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
            swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
            $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + 'px', _$wrapperEl$css2));

            if (params.centeredSlides) {
                newSlidesGrid = [];

                for (let _i = 0; _i < snapGrid.length; _i += 1) {
                    let slidesGridItem = snapGrid[_i];
                    if (params.roundLengths) { slidesGridItem = Math.floor(slidesGridItem) }
                    if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) { newSlidesGrid.push(slidesGridItem) }
                }

                snapGrid = newSlidesGrid;
            }
        } // Remove last grid elements depending on width


        if (!params.centeredSlides) {
            newSlidesGrid = [];

            for (let _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
                let _slidesGridItem = snapGrid[_i2];
                if (params.roundLengths) { _slidesGridItem = Math.floor(_slidesGridItem) }

                if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
                    newSlidesGrid.push(_slidesGridItem);
                }
            }

            snapGrid = newSlidesGrid;

            if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
                snapGrid.push(swiper.virtualSize - swiperSize);
            }
        }

        if (snapGrid.length === 0) { snapGrid = [0] }

        if (params.spaceBetween !== 0) {
            let _slides$filter$css;

            const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
            slides.filter(function (_, slideIndex) {
                if (!params.cssMode) { return true }

                if (slideIndex === slides.length - 1) {
                    return false;
                }

                return true;
            }).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + 'px', _slides$filter$css));
        }

        if (params.centeredSlides && params.centeredSlidesBounds) {
            let allSlidesSize = 0;
            slidesSizesGrid.forEach(function (slideSizeValue) {
                allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
            });
            allSlidesSize -= params.spaceBetween;
            const maxSnap = allSlidesSize - swiperSize;
            snapGrid = snapGrid.map(function (snap) {
                if (snap < 0) { return -offsetBefore }
                if (snap > maxSnap) { return maxSnap + offsetAfter }
                return snap;
            });
        }

        if (params.centerInsufficientSlides) {
            let _allSlidesSize = 0;
            slidesSizesGrid.forEach(function (slideSizeValue) {
                _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
            });
            _allSlidesSize -= params.spaceBetween;

            if (_allSlidesSize < swiperSize) {
                const allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
                snapGrid.forEach(function (snap, snapIndex) {
                    snapGrid[snapIndex] = snap - allSlidesOffset;
                });
                slidesGrid.forEach(function (snap, snapIndex) {
                    slidesGrid[snapIndex] = snap + allSlidesOffset;
                });
            }
        }

        extend(swiper, {
            slides,
            snapGrid,
            slidesGrid,
            slidesSizesGrid
        });

        if (slidesLength !== previousSlidesLength) {
            swiper.emit('slidesLengthChange');
        }

        if (snapGrid.length !== previousSnapGridLength) {
            if (swiper.params.watchOverflow) { swiper.checkOverflow() }
            swiper.emit('snapGridLengthChange');
        }

        if (slidesGrid.length !== previousSlidesGridLength) {
            swiper.emit('slidesGridLengthChange');
        }

        if (params.watchSlidesProgress || params.watchSlidesVisibility) {
            swiper.updateSlidesOffset();
        }
    }

    function updateAutoHeight(speed) {
        const swiper = this;
        const activeSlides = [];
        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
        let newHeight = 0;
        let i;

        if (typeof speed === 'number') {
            swiper.setTransition(speed);
        } else if (speed === true) {
            swiper.setTransition(swiper.params.speed);
        }

        const getSlideByIndex = function getSlideByIndex(index) {
            if (isVirtual) {
                return swiper.slides.filter(function (el) {
                    return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;
                })[0];
            }

            return swiper.slides.eq(index)[0];
        }; // Find slides currently in view


        if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
            if (swiper.params.centeredSlides) {
                swiper.visibleSlides.each(function (slide) {
                    activeSlides.push(slide);
                });
            } else {
                for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                    const index = swiper.activeIndex + i;
                    if (index > swiper.slides.length && !isVirtual) { break }
                    activeSlides.push(getSlideByIndex(index));
                }
            }
        } else {
            activeSlides.push(getSlideByIndex(swiper.activeIndex));
        } // Find new height from highest slide in view


        for (i = 0; i < activeSlides.length; i += 1) {
            if (typeof activeSlides[i] !== 'undefined') {
                const height = activeSlides[i].offsetHeight;
                newHeight = height > newHeight ? height : newHeight;
            }
        } // Update Height


        if (newHeight) { swiper.$wrapperEl.css('height', newHeight + 'px') }
    }

    function updateSlidesOffset() {
        const swiper = this;
        const slides = swiper.slides;

        for (let i = 0; i < slides.length; i += 1) {
            slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
        }
    }

    function updateSlidesProgress(translate) {
        if (translate === void 0) {
            translate = this && this.translate || 0;
        }

        const swiper = this;
        const params = swiper.params;
        const slides = swiper.slides;
        const rtl = swiper.rtlTranslate;
        if (slides.length === 0) { return }
        if (typeof slides[0].swiperSlideOffset === 'undefined') { swiper.updateSlidesOffset() }
        let offsetCenter = -translate;
        if (rtl) { offsetCenter = translate } // Visible Slides

        slides.removeClass(params.slideVisibleClass);
        swiper.visibleSlidesIndexes = [];
        swiper.visibleSlides = [];

        for (let i = 0; i < slides.length; i += 1) {
            const slide = slides[i];
            const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

            if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
                const slideBefore = -(offsetCenter - slide.swiperSlideOffset);
                const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
                const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

                if (isVisible) {
                    swiper.visibleSlides.push(slide);
                    swiper.visibleSlidesIndexes.push(i);
                    slides.eq(i).addClass(params.slideVisibleClass);
                }
            }

            slide.progress = rtl ? -slideProgress : slideProgress;
        }

        swiper.visibleSlides = $(swiper.visibleSlides);
    }

    function updateProgress(translate) {
        const swiper = this;

        if (typeof translate === 'undefined') {
            const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

            translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
        }

        const params = swiper.params;
        const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
        let progress = swiper.progress;
        let isBeginning = swiper.isBeginning;
        let isEnd = swiper.isEnd;
        const wasBeginning = isBeginning;
        const wasEnd = isEnd;

        if (translatesDiff === 0) {
            progress = 0;
            isBeginning = true;
            isEnd = true;
        } else {
            progress = (translate - swiper.minTranslate()) / translatesDiff;
            isBeginning = progress <= 0;
            isEnd = progress >= 1;
        }

        extend(swiper, {
            progress,
            isBeginning,
            isEnd
        });
        if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) { swiper.updateSlidesProgress(translate) }

        if (isBeginning && !wasBeginning) {
            swiper.emit('reachBeginning toEdge');
        }

        if (isEnd && !wasEnd) {
            swiper.emit('reachEnd toEdge');
        }

        if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
            swiper.emit('fromEdge');
        }

        swiper.emit('progress', progress);
    }

    function updateSlidesClasses() {
        const swiper = this;
        const slides = swiper.slides;
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const activeIndex = swiper.activeIndex;
        const realIndex = swiper.realIndex;
        const isVirtual = swiper.virtual && params.virtual.enabled;
        slides.removeClass(params.slideActiveClass + ' ' + params.slideNextClass + ' ' + params.slidePrevClass + ' ' + params.slideDuplicateActiveClass + ' ' + params.slideDuplicateNextClass + ' ' + params.slideDuplicatePrevClass);
        let activeSlide;

        if (isVirtual) {
            activeSlide = swiper.$wrapperEl.find('.' + params.slideClass + '[data-swiper-slide-index="' + activeIndex + '"]');
        } else {
            activeSlide = slides.eq(activeIndex);
        } // Active classes


        activeSlide.addClass(params.slideActiveClass);

        if (params.loop) {
            // Duplicate to all looped slides
            if (activeSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl.children('.' + params.slideClass + ':not(.' + params.slideDuplicateClass + ')[data-swiper-slide-index="' + realIndex + '"]').addClass(params.slideDuplicateActiveClass);
            } else {
                $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass + '[data-swiper-slide-index="' + realIndex + '"]').addClass(params.slideDuplicateActiveClass);
            }
        } // Next Slide


        let nextSlide = activeSlide.nextAll('.' + params.slideClass).eq(0).addClass(params.slideNextClass);

        if (params.loop && nextSlide.length === 0) {
            nextSlide = slides.eq(0);
            nextSlide.addClass(params.slideNextClass);
        } // Prev Slide


        let prevSlide = activeSlide.prevAll('.' + params.slideClass).eq(0).addClass(params.slidePrevClass);

        if (params.loop && prevSlide.length === 0) {
            prevSlide = slides.eq(-1);
            prevSlide.addClass(params.slidePrevClass);
        }

        if (params.loop) {
            // Duplicate to all looped slides
            if (nextSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl.children('.' + params.slideClass + ':not(.' + params.slideDuplicateClass + ')[data-swiper-slide-index="' + nextSlide.attr('data-swiper-slide-index') + '"]').addClass(params.slideDuplicateNextClass);
            } else {
                $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass + '[data-swiper-slide-index="' + nextSlide.attr('data-swiper-slide-index') + '"]').addClass(params.slideDuplicateNextClass);
            }

            if (prevSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl.children('.' + params.slideClass + ':not(.' + params.slideDuplicateClass + ')[data-swiper-slide-index="' + prevSlide.attr('data-swiper-slide-index') + '"]').addClass(params.slideDuplicatePrevClass);
            } else {
                $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass + '[data-swiper-slide-index="' + prevSlide.attr('data-swiper-slide-index') + '"]').addClass(params.slideDuplicatePrevClass);
            }
        }

        swiper.emitSlidesClasses();
    }

    function updateActiveIndex(newActiveIndex) {
        const swiper = this;
        const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
        const slidesGrid = swiper.slidesGrid;
        const snapGrid = swiper.snapGrid;
        const params = swiper.params;
        const previousIndex = swiper.activeIndex;
        const previousRealIndex = swiper.realIndex;
        const previousSnapIndex = swiper.snapIndex;
        let activeIndex = newActiveIndex;
        let snapIndex;

        if (typeof activeIndex === 'undefined') {
            for (let i = 0; i < slidesGrid.length; i += 1) {
                if (typeof slidesGrid[i + 1] !== 'undefined') {
                    if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
                        activeIndex = i;
                    } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
                        activeIndex = i + 1;
                    }
                } else if (translate >= slidesGrid[i]) {
                    activeIndex = i;
                }
            } // Normalize slideIndex


            if (params.normalizeSlideIndex) {
                if (activeIndex < 0 || typeof activeIndex === 'undefined') { activeIndex = 0 }
            }
        }

        if (snapGrid.indexOf(translate) >= 0) {
            snapIndex = snapGrid.indexOf(translate);
        } else {
            const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
            snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
        }

        if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1 }

        if (activeIndex === previousIndex) {
            if (snapIndex !== previousSnapIndex) {
                swiper.snapIndex = snapIndex;
                swiper.emit('snapIndexChange');
            }

            return;
        } // Get real index


        const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
        extend(swiper, {
            snapIndex,
            realIndex,
            previousIndex,
            activeIndex
        });
        swiper.emit('activeIndexChange');
        swiper.emit('snapIndexChange');

        if (previousRealIndex !== realIndex) {
            swiper.emit('realIndexChange');
        }

        if (swiper.initialized || swiper.params.runCallbacksOnInit) {
            swiper.emit('slideChange');
        }
    }

    function updateClickedSlide(e) {
        const swiper = this;
        const params = swiper.params;
        const slide = $(e.target).closest('.' + params.slideClass)[0];
        let slideFound = false;
        let slideIndex;

        if (slide) {
            for (let i = 0; i < swiper.slides.length; i += 1) {
                if (swiper.slides[i] === slide) {
                    slideFound = true;
                    slideIndex = i;
                    break;
                }
            }
        }

        if (slide && slideFound) {
            swiper.clickedSlide = slide;

            if (swiper.virtual && swiper.params.virtual.enabled) {
                swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
            } else {
                swiper.clickedIndex = slideIndex;
            }
        } else {
            swiper.clickedSlide = undefined;
            swiper.clickedIndex = undefined;
            return;
        }

        if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
            swiper.slideToClickedSlide();
        }
    }

    const update = {
        updateSize,
        updateSlides,
        updateAutoHeight,
        updateSlidesOffset,
        updateSlidesProgress,
        updateProgress,
        updateSlidesClasses,
        updateActiveIndex,
        updateClickedSlide
    };

    function getSwiperTranslate(axis) {
        if (axis === void 0) {
            axis = this.isHorizontal() ? 'x' : 'y';
        }

        const swiper = this;
        const params = swiper.params;
        const rtl = swiper.rtlTranslate;
        const translate = swiper.translate;
        const $wrapperEl = swiper.$wrapperEl;

        if (params.virtualTranslate) {
            return rtl ? -translate : translate;
        }

        if (params.cssMode) {
            return translate;
        }

        let currentTranslate = getTranslate($wrapperEl[0], axis);
        if (rtl) { currentTranslate = -currentTranslate }
        return currentTranslate || 0;
    }

    function setTranslate(translate, byController) {
        const swiper = this;
        const rtl = swiper.rtlTranslate;
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const wrapperEl = swiper.wrapperEl;
        const progress = swiper.progress;
        let x = 0;
        let y = 0;
        const z = 0;

        if (swiper.isHorizontal()) {
            x = rtl ? -translate : translate;
        } else {
            y = translate;
        }

        if (params.roundLengths) {
            x = Math.floor(x);
            y = Math.floor(y);
        }

        if (params.cssMode) {
            wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
        } else if (!params.virtualTranslate) {
            $wrapperEl.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');
        }

        swiper.previousTranslate = swiper.translate;
        swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

        let newProgress;
        const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

        if (translatesDiff === 0) {
            newProgress = 0;
        } else {
            newProgress = (translate - swiper.minTranslate()) / translatesDiff;
        }

        if (newProgress !== progress) {
            swiper.updateProgress(translate);
        }

        swiper.emit('setTranslate', swiper.translate, byController);
    }

    function minTranslate() {
        return -this.snapGrid[0];
    }

    function maxTranslate() {
        return -this.snapGrid[this.snapGrid.length - 1];
    }

    function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
        if (translate === void 0) {
            translate = 0;
        }

        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        if (translateBounds === void 0) {
            translateBounds = true;
        }

        const swiper = this;
        const params = swiper.params;
        const wrapperEl = swiper.wrapperEl;

        if (swiper.animating && params.preventInteractionOnTransition) {
            return false;
        }

        const minTranslate = swiper.minTranslate();
        const maxTranslate = swiper.maxTranslate();
        let newTranslate;
        if (translateBounds && translate > minTranslate) { newTranslate = minTranslate } else if (translateBounds && translate < maxTranslate) { newTranslate = maxTranslate } else { newTranslate = translate } // Update progress

        swiper.updateProgress(newTranslate);

        if (params.cssMode) {
            const isH = swiper.isHorizontal();

            if (speed === 0) {
                wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
            } else {
                // eslint-disable-next-line
        if (wrapperEl.scrollTo) {
                    let _wrapperEl$scrollTo;

                    wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
                } else {
                    wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
                }
            }

            return true;
        }

        if (speed === 0) {
            swiper.setTransition(0);
            swiper.setTranslate(newTranslate);

            if (runCallbacks) {
                swiper.emit('beforeTransitionStart', speed, internal);
                swiper.emit('transitionEnd');
            }
        } else {
            swiper.setTransition(speed);
            swiper.setTranslate(newTranslate);

            if (runCallbacks) {
                swiper.emit('beforeTransitionStart', speed, internal);
                swiper.emit('transitionStart');
            }

            if (!swiper.animating) {
                swiper.animating = true;

                if (!swiper.onTranslateToWrapperTransitionEnd) {
                    swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
                        if (!swiper || swiper.destroyed) { return }
                        if (e.target !== this) { return }
                        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
                        swiper.onTranslateToWrapperTransitionEnd = null;
                        delete swiper.onTranslateToWrapperTransitionEnd;

                        if (runCallbacks) {
                            swiper.emit('transitionEnd');
                        }
                    };
                }

                swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
                swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
            }
        }

        return true;
    }

    const translate = {
        getTranslate: getSwiperTranslate,
        setTranslate,
        minTranslate,
        maxTranslate,
        translateTo
    };

    function setTransition(duration, byController) {
        const swiper = this;

        if (!swiper.params.cssMode) {
            swiper.$wrapperEl.transition(duration);
        }

        swiper.emit('setTransition', duration, byController);
    }

    function transitionStart(runCallbacks, direction) {
        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        const activeIndex = swiper.activeIndex;
        const params = swiper.params;
        const previousIndex = swiper.previousIndex;
        if (params.cssMode) { return }

        if (params.autoHeight) {
            swiper.updateAutoHeight();
        }

        let dir = direction;

        if (!dir) {
            if (activeIndex > previousIndex) { dir = 'next' } else if (activeIndex < previousIndex) { dir = 'prev' } else { dir = 'reset' }
        }

        swiper.emit('transitionStart');

        if (runCallbacks && activeIndex !== previousIndex) {
            if (dir === 'reset') {
                swiper.emit('slideResetTransitionStart');
                return;
            }

            swiper.emit('slideChangeTransitionStart');

            if (dir === 'next') {
                swiper.emit('slideNextTransitionStart');
            } else {
                swiper.emit('slidePrevTransitionStart');
            }
        }
    }

    function transitionEnd(runCallbacks, direction) {
        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        const activeIndex = swiper.activeIndex;
        const previousIndex = swiper.previousIndex;
        const params = swiper.params;
        swiper.animating = false;
        if (params.cssMode) { return }
        swiper.setTransition(0);
        let dir = direction;

        if (!dir) {
            if (activeIndex > previousIndex) { dir = 'next' } else if (activeIndex < previousIndex) { dir = 'prev' } else { dir = 'reset' }
        }

        swiper.emit('transitionEnd');

        if (runCallbacks && activeIndex !== previousIndex) {
            if (dir === 'reset') {
                swiper.emit('slideResetTransitionEnd');
                return;
            }

            swiper.emit('slideChangeTransitionEnd');

            if (dir === 'next') {
                swiper.emit('slideNextTransitionEnd');
            } else {
                swiper.emit('slidePrevTransitionEnd');
            }
        }
    }

    const transition = {
        setTransition,
        transitionStart,
        transitionEnd
    };

    function slideTo(index, speed, runCallbacks, internal, initial) {
        if (index === void 0) {
            index = 0;
        }

        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        if (typeof index !== 'number' && typeof index !== 'string') {
            throw new Error('The \'index\' argument cannot have type other than \'number\' or \'string\'. [' + _typeof(index) + '] given.');
        }

        if (typeof index === 'string') {
            /**
       * The `index` argument converted from `string` to `number`.
       * @type {number}
       */
            const indexAsNumber = parseInt(index, 10);
            /**
       * Determines whether the `index` argument is a valid `number`
       * after being converted from the `string` type.
       * @type {boolean}
       */

            const isValidNumber = isFinite(indexAsNumber);

            if (!isValidNumber) {
                throw new Error('The passed-in \'index\' (string) couldn\'t be converted to \'number\'. [' + index + '] given.');
            } // Knowing that the converted `index` is a valid number,
            // we can update the original argument's value.


            index = indexAsNumber;
        }

        const swiper = this;
        let slideIndex = index;
        if (slideIndex < 0) { slideIndex = 0 }
        const params = swiper.params;
        const snapGrid = swiper.snapGrid;
        const slidesGrid = swiper.slidesGrid;
        const previousIndex = swiper.previousIndex;
        const activeIndex = swiper.activeIndex;
        const rtl = swiper.rtlTranslate;
        const wrapperEl = swiper.wrapperEl;
        const enabled = swiper.enabled;

        if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
            return false;
        }

        const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
        let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
        if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1 }

        if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
            swiper.emit('beforeSlideChangeStart');
        }

        const translate = -snapGrid[snapIndex]; // Update progress

        swiper.updateProgress(translate); // Normalize slideIndex

        if (params.normalizeSlideIndex) {
            for (let i = 0; i < slidesGrid.length; i += 1) {
                const normalizedTranslate = -Math.floor(translate * 100);
                const normalizedGird = Math.floor(slidesGrid[i] * 100);
                const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

                if (typeof slidesGrid[i + 1] !== 'undefined') {
                    if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {
                        slideIndex = i;
                    } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {
                        slideIndex = i + 1;
                    }
                } else if (normalizedTranslate >= normalizedGird) {
                    slideIndex = i;
                }
            }
        } // Directions locks


        if (swiper.initialized && slideIndex !== activeIndex) {
            if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
                return false;
            }

            if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
                if ((activeIndex || 0) !== slideIndex) { return false }
            }
        }

        let direction;
        if (slideIndex > activeIndex) { direction = 'next' } else if (slideIndex < activeIndex) { direction = 'prev' } else { direction = 'reset' } // Update Index

        if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
            swiper.updateActiveIndex(slideIndex); // Update Height

            if (params.autoHeight) {
                swiper.updateAutoHeight();
            }

            swiper.updateSlidesClasses();

            if (params.effect !== 'slide') {
                swiper.setTranslate(translate);
            }

            if (direction !== 'reset') {
                swiper.transitionStart(runCallbacks, direction);
                swiper.transitionEnd(runCallbacks, direction);
            }

            return false;
        }

        if (params.cssMode) {
            const isH = swiper.isHorizontal();
            let t = -translate;

            if (rtl) {
                t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
            }

            if (speed === 0) {
                wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
            } else {
                // eslint-disable-next-line
        if (wrapperEl.scrollTo) {
                    let _wrapperEl$scrollTo;

                    wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
                } else {
                    wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
                }
            }

            return true;
        }

        if (speed === 0) {
            swiper.setTransition(0);
            swiper.setTranslate(translate);
            swiper.updateActiveIndex(slideIndex);
            swiper.updateSlidesClasses();
            swiper.emit('beforeTransitionStart', speed, internal);
            swiper.transitionStart(runCallbacks, direction);
            swiper.transitionEnd(runCallbacks, direction);
        } else {
            swiper.setTransition(speed);
            swiper.setTranslate(translate);
            swiper.updateActiveIndex(slideIndex);
            swiper.updateSlidesClasses();
            swiper.emit('beforeTransitionStart', speed, internal);
            swiper.transitionStart(runCallbacks, direction);

            if (!swiper.animating) {
                swiper.animating = true;

                if (!swiper.onSlideToWrapperTransitionEnd) {
                    swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
                        if (!swiper || swiper.destroyed) { return }
                        if (e.target !== this) { return }
                        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
                        swiper.onSlideToWrapperTransitionEnd = null;
                        delete swiper.onSlideToWrapperTransitionEnd;
                        swiper.transitionEnd(runCallbacks, direction);
                    };
                }

                swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
            }
        }

        return true;
    }

    function slideToLoop(index, speed, runCallbacks, internal) {
        if (index === void 0) {
            index = 0;
        }

        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        let newIndex = index;

        if (swiper.params.loop) {
            newIndex += swiper.loopedSlides;
        }

        return swiper.slideTo(newIndex, speed, runCallbacks, internal);
    }
    /* eslint no-unused-vars: "off" */


    function slideNext(speed, runCallbacks, internal) {
        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        const params = swiper.params;
        const animating = swiper.animating;
        const enabled = swiper.enabled;
        if (!enabled) { return swiper }
        const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

        if (params.loop) {
            if (animating && params.loopPreventsSlide) { return false }
            swiper.loopFix(); // eslint-disable-next-line

            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        }

        return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
    }
    /* eslint no-unused-vars: "off" */


    function slidePrev(speed, runCallbacks, internal) {
        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        const params = swiper.params;
        const animating = swiper.animating;
        const snapGrid = swiper.snapGrid;
        const slidesGrid = swiper.slidesGrid;
        const rtlTranslate = swiper.rtlTranslate;
        const enabled = swiper.enabled;
        if (!enabled) { return swiper }

        if (params.loop) {
            if (animating && params.loopPreventsSlide) { return false }
            swiper.loopFix(); // eslint-disable-next-line

            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        }

        const translate = rtlTranslate ? swiper.translate : -swiper.translate;

        function normalize(val) {
            if (val < 0) { return -Math.floor(Math.abs(val)) }
            return Math.floor(val);
        }

        const normalizedTranslate = normalize(translate);
        const normalizedSnapGrid = snapGrid.map(function (val) {
            return normalize(val);
        });
        snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
        let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

        if (typeof prevSnap === 'undefined' && params.cssMode) {
            snapGrid.forEach(function (snap) {
                if (!prevSnap && normalizedTranslate >= snap) { prevSnap = snap }
            });
        }

        let prevIndex;

        if (typeof prevSnap !== 'undefined') {
            prevIndex = slidesGrid.indexOf(prevSnap);
            if (prevIndex < 0) { prevIndex = swiper.activeIndex - 1 }
        }

        return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    }
    /* eslint no-unused-vars: "off" */


    function slideReset(speed, runCallbacks, internal) {
        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        const swiper = this;
        return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
    }
    /* eslint no-unused-vars: "off" */


    function slideToClosest(speed, runCallbacks, internal, threshold) {
        if (speed === void 0) {
            speed = this.params.speed;
        }

        if (runCallbacks === void 0) {
            runCallbacks = true;
        }

        if (threshold === void 0) {
            threshold = 0.5;
        }

        const swiper = this;
        let index = swiper.activeIndex;
        const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
        const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
        const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

        if (translate >= swiper.snapGrid[snapIndex]) {
            // The current translate is on or after the current snap index, so the choice
            // is between the current index and the one after it.
            const currentSnap = swiper.snapGrid[snapIndex];
            const nextSnap = swiper.snapGrid[snapIndex + 1];

            if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
                index += swiper.params.slidesPerGroup;
            }
        } else {
            // The current translate is before the current snap index, so the choice
            // is between the current index and the one before it.
            const prevSnap = swiper.snapGrid[snapIndex - 1];
            const _currentSnap = swiper.snapGrid[snapIndex];

            if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
                index -= swiper.params.slidesPerGroup;
            }
        }

        index = Math.max(index, 0);
        index = Math.min(index, swiper.slidesGrid.length - 1);
        return swiper.slideTo(index, speed, runCallbacks, internal);
    }

    function slideToClickedSlide() {
        const swiper = this;
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
        let slideToIndex = swiper.clickedIndex;
        let realIndex;

        if (params.loop) {
            if (swiper.animating) { return }
            realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

            if (params.centeredSlides) {
                if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
                    swiper.loopFix();
                    slideToIndex = $wrapperEl.children('.' + params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]:not(.' + params.slideDuplicateClass + ')').eq(0).index();
                    nextTick(function () {
                        swiper.slideTo(slideToIndex);
                    });
                } else {
                    swiper.slideTo(slideToIndex);
                }
            } else if (slideToIndex > swiper.slides.length - slidesPerView) {
                swiper.loopFix();
                slideToIndex = $wrapperEl.children('.' + params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]:not(.' + params.slideDuplicateClass + ')').eq(0).index();
                nextTick(function () {
                    swiper.slideTo(slideToIndex);
                });
            } else {
                swiper.slideTo(slideToIndex);
            }
        } else {
            swiper.slideTo(slideToIndex);
        }
    }

    const slide = {
        slideTo,
        slideToLoop,
        slideNext,
        slidePrev,
        slideReset,
        slideToClosest,
        slideToClickedSlide
    };

    function loopCreate() {
        const swiper = this;
        const document = getDocument();
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

        $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass).remove();
        let slides = $wrapperEl.children('.' + params.slideClass);

        if (params.loopFillGroupWithBlank) {
            const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

            if (blankSlidesNum !== params.slidesPerGroup) {
                for (let i = 0; i < blankSlidesNum; i += 1) {
                    const blankNode = $(document.createElement('div')).addClass(params.slideClass + ' ' + params.slideBlankClass);
                    $wrapperEl.append(blankNode);
                }

                slides = $wrapperEl.children('.' + params.slideClass);
            }
        }

        if (params.slidesPerView === 'auto' && !params.loopedSlides) { params.loopedSlides = slides.length }
        swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
        swiper.loopedSlides += params.loopAdditionalSlides;

        if (swiper.loopedSlides > slides.length) {
            swiper.loopedSlides = slides.length;
        }

        const prependSlides = [];
        const appendSlides = [];
        slides.each(function (el, index) {
            const slide = $(el);

            if (index < swiper.loopedSlides) {
                appendSlides.push(el);
            }

            if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
                prependSlides.push(el);
            }

            slide.attr('data-swiper-slide-index', index);
        });

        for (let _i = 0; _i < appendSlides.length; _i += 1) {
            $wrapperEl.append($(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
        }

        for (let _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
            $wrapperEl.prepend($(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
        }
    }

    function loopFix() {
        const swiper = this;
        swiper.emit('beforeLoopFix');
        const activeIndex = swiper.activeIndex;
        const slides = swiper.slides;
        const loopedSlides = swiper.loopedSlides;
        const allowSlidePrev = swiper.allowSlidePrev;
        const allowSlideNext = swiper.allowSlideNext;
        const snapGrid = swiper.snapGrid;
        const rtl = swiper.rtlTranslate;
        let newIndex;
        swiper.allowSlidePrev = true;
        swiper.allowSlideNext = true;
        const snapTranslate = -snapGrid[activeIndex];
        const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

        if (activeIndex < loopedSlides) {
            newIndex = slides.length - loopedSlides * 3 + activeIndex;
            newIndex += loopedSlides;
            const slideChanged = swiper.slideTo(newIndex, 0, false, true);

            if (slideChanged && diff !== 0) {
                swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            }
        } else if (activeIndex >= slides.length - loopedSlides) {
            // Fix For Positive Oversliding
            newIndex = -slides.length + activeIndex + loopedSlides;
            newIndex += loopedSlides;

            const _slideChanged = swiper.slideTo(newIndex, 0, false, true);

            if (_slideChanged && diff !== 0) {
                swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            }
        }

        swiper.allowSlidePrev = allowSlidePrev;
        swiper.allowSlideNext = allowSlideNext;
        swiper.emit('loopFix');
    }

    function loopDestroy() {
        const swiper = this;
        const $wrapperEl = swiper.$wrapperEl;
        const params = swiper.params;
        const slides = swiper.slides;
        $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass + ',.' + params.slideClass + '.' + params.slideBlankClass).remove();
        slides.removeAttr('data-swiper-slide-index');
    }

    const loop = {
        loopCreate,
        loopFix,
        loopDestroy
    };

    function setGrabCursor(moving) {
        const swiper = this;
        if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) { return }
        const el = swiper.el;
        el.style.cursor = 'move';
        el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
        el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
        el.style.cursor = moving ? 'grabbing' : 'grab';
    }

    function unsetGrabCursor() {
        const swiper = this;

        if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
            return;
        }

        swiper.el.style.cursor = '';
    }

    const grabCursor = {
        setGrabCursor,
        unsetGrabCursor
    };

    function appendSlide(slides) {
        const swiper = this;
        const $wrapperEl = swiper.$wrapperEl;
        const params = swiper.params;

        if (params.loop) {
            swiper.loopDestroy();
        }

        if (_typeof(slides) === 'object' && 'length' in slides) {
            for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) { $wrapperEl.append(slides[i]) }
            }
        } else {
            $wrapperEl.append(slides);
        }

        if (params.loop) {
            swiper.loopCreate();
        }

        if (!(params.observer && swiper.support.observer)) {
            swiper.update();
        }
    }

    function prependSlide(slides) {
        const swiper = this;
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const activeIndex = swiper.activeIndex;

        if (params.loop) {
            swiper.loopDestroy();
        }

        let newActiveIndex = activeIndex + 1;

        if (_typeof(slides) === 'object' && 'length' in slides) {
            for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) { $wrapperEl.prepend(slides[i]) }
            }

            newActiveIndex = activeIndex + slides.length;
        } else {
            $wrapperEl.prepend(slides);
        }

        if (params.loop) {
            swiper.loopCreate();
        }

        if (!(params.observer && swiper.support.observer)) {
            swiper.update();
        }

        swiper.slideTo(newActiveIndex, 0, false);
    }

    function addSlide(index, slides) {
        const swiper = this;
        const $wrapperEl = swiper.$wrapperEl;
        const params = swiper.params;
        const activeIndex = swiper.activeIndex;
        let activeIndexBuffer = activeIndex;

        if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.slides = $wrapperEl.children('.' + params.slideClass);
        }

        const baseLength = swiper.slides.length;

        if (index <= 0) {
            swiper.prependSlide(slides);
            return;
        }

        if (index >= baseLength) {
            swiper.appendSlide(slides);
            return;
        }

        let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
        const slidesBuffer = [];

        for (let i = baseLength - 1; i >= index; i -= 1) {
            const currentSlide = swiper.slides.eq(i);
            currentSlide.remove();
            slidesBuffer.unshift(currentSlide);
        }

        if (_typeof(slides) === 'object' && 'length' in slides) {
            for (let _i = 0; _i < slides.length; _i += 1) {
                if (slides[_i]) { $wrapperEl.append(slides[_i]) }
            }

            newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
        } else {
            $wrapperEl.append(slides);
        }

        for (let _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
            $wrapperEl.append(slidesBuffer[_i2]);
        }

        if (params.loop) {
            swiper.loopCreate();
        }

        if (!(params.observer && swiper.support.observer)) {
            swiper.update();
        }

        if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
        } else {
            swiper.slideTo(newActiveIndex, 0, false);
        }
    }

    function removeSlide(slidesIndexes) {
        const swiper = this;
        const params = swiper.params;
        const $wrapperEl = swiper.$wrapperEl;
        const activeIndex = swiper.activeIndex;
        let activeIndexBuffer = activeIndex;

        if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.slides = $wrapperEl.children('.' + params.slideClass);
        }

        let newActiveIndex = activeIndexBuffer;
        let indexToRemove;

        if (_typeof(slidesIndexes) === 'object' && 'length' in slidesIndexes) {
            for (let i = 0; i < slidesIndexes.length; i += 1) {
                indexToRemove = slidesIndexes[i];
                if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove() }
                if (indexToRemove < newActiveIndex) { newActiveIndex -= 1 }
            }

            newActiveIndex = Math.max(newActiveIndex, 0);
        } else {
            indexToRemove = slidesIndexes;
            if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove() }
            if (indexToRemove < newActiveIndex) { newActiveIndex -= 1 }
            newActiveIndex = Math.max(newActiveIndex, 0);
        }

        if (params.loop) {
            swiper.loopCreate();
        }

        if (!(params.observer && swiper.support.observer)) {
            swiper.update();
        }

        if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
        } else {
            swiper.slideTo(newActiveIndex, 0, false);
        }
    }

    function removeAllSlides() {
        const swiper = this;
        const slidesIndexes = [];

        for (let i = 0; i < swiper.slides.length; i += 1) {
            slidesIndexes.push(i);
        }

        swiper.removeSlide(slidesIndexes);
    }

    const manipulation = {
        appendSlide,
        prependSlide,
        addSlide,
        removeSlide,
        removeAllSlides
    };

    function onTouchStart(event) {
        const swiper = this;
        const document = getDocument();
        const window = getWindow();
        const data = swiper.touchEventsData;
        const params = swiper.params;
        const touches = swiper.touches;
        const enabled = swiper.enabled;
        if (!enabled) { return }

        if (swiper.animating && params.preventInteractionOnTransition) {
            return;
        }

        let e = event;
        if (e.originalEvent) { e = e.originalEvent }
        let $targetEl = $(e.target);

        if (params.touchEventsTarget === 'wrapper') {
            if (!$targetEl.closest(swiper.wrapperEl).length) { return }
        }

        data.isTouchEvent = e.type === 'touchstart';
        if (!data.isTouchEvent && 'which' in e && e.which === 3) { return }
        if (!data.isTouchEvent && 'button' in e && e.button > 0) { return }
        if (data.isTouched && data.isMoved) { return } // change target el for shadow root componenet

        const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';

        if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {
            $targetEl = $(event.path[0]);
        }

        if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : '.' + params.noSwipingClass)[0]) {
            swiper.allowClick = true;
            return;
        }

        if (params.swipeHandler) {
            if (!$targetEl.closest(params.swipeHandler)[0]) { return }
        }

        touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
        touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
        const startX = touches.currentX;
        const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

        const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
        const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

        if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
            if (edgeSwipeDetection === 'prevent') {
                event.preventDefault();
            } else {
                return;
            }
        }

        extend(data, {
            isTouched: true,
            isMoved: false,
            allowTouchCallbacks: true,
            isScrolling: undefined,
            startMoving: undefined
        });
        touches.startX = startX;
        touches.startY = startY;
        data.touchStartTime = now();
        swiper.allowClick = true;
        swiper.updateSize();
        swiper.swipeDirection = undefined;
        if (params.threshold > 0) { data.allowThresholdMove = false }

        if (e.type !== 'touchstart') {
            let preventDefault = true;
            if ($targetEl.is(data.formElements)) { preventDefault = false }

            if (document.activeElement && $(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {
                document.activeElement.blur();
            }

            const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

            if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
                e.preventDefault();
            }
        }

        swiper.emit('touchStart', e);
    }

    function onTouchMove(event) {
        const document = getDocument();
        const swiper = this;
        const data = swiper.touchEventsData;
        const params = swiper.params;
        const touches = swiper.touches;
        const rtl = swiper.rtlTranslate;
        const enabled = swiper.enabled;
        if (!enabled) { return }
        let e = event;
        if (e.originalEvent) { e = e.originalEvent }

        if (!data.isTouched) {
            if (data.startMoving && data.isScrolling) {
                swiper.emit('touchMoveOpposite', e);
            }

            return;
        }

        if (data.isTouchEvent && e.type !== 'touchmove') { return }
        const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
        const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
        const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

        if (e.preventedByNestedSwiper) {
            touches.startX = pageX;
            touches.startY = pageY;
            return;
        }

        if (!swiper.allowTouchMove) {
            // isMoved = true;
            swiper.allowClick = false;

            if (data.isTouched) {
                extend(touches, {
                    startX: pageX,
                    startY: pageY,
                    currentX: pageX,
                    currentY: pageY
                });
                data.touchStartTime = now();
            }

            return;
        }

        if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
            if (swiper.isVertical()) {
                // Vertical
                if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
                    data.isTouched = false;
                    data.isMoved = false;
                    return;
                }
            } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
                return;
            }
        }

        if (data.isTouchEvent && document.activeElement) {
            if (e.target === document.activeElement && $(e.target).is(data.formElements)) {
                data.isMoved = true;
                swiper.allowClick = false;
                return;
            }
        }

        if (data.allowTouchCallbacks) {
            swiper.emit('touchMove', e);
        }

        if (e.targetTouches && e.targetTouches.length > 1) { return }
        touches.currentX = pageX;
        touches.currentY = pageY;
        const diffX = touches.currentX - touches.startX;
        const diffY = touches.currentY - touches.startY;
        if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) { return }

        if (typeof data.isScrolling === 'undefined') {
            let touchAngle;

            if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
                data.isScrolling = false;
            } else {
                // eslint-disable-next-line
        if (diffX * diffX + diffY * diffY >= 25) {
                    touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
                    data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
                }
            }
        }

        if (data.isScrolling) {
            swiper.emit('touchMoveOpposite', e);
        }

        if (typeof data.startMoving === 'undefined') {
            if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
                data.startMoving = true;
            }
        }

        if (data.isScrolling) {
            data.isTouched = false;
            return;
        }

        if (!data.startMoving) {
            return;
        }

        swiper.allowClick = false;

        if (!params.cssMode && e.cancelable) {
            e.preventDefault();
        }

        if (params.touchMoveStopPropagation && !params.nested) {
            e.stopPropagation();
        }

        if (!data.isMoved) {
            if (params.loop) {
                swiper.loopFix();
            }

            data.startTranslate = swiper.getTranslate();
            swiper.setTransition(0);

            if (swiper.animating) {
                swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
            }

            data.allowMomentumBounce = false; // Grab Cursor

            if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
                swiper.setGrabCursor(true);
            }

            swiper.emit('sliderFirstMove', e);
        }

        swiper.emit('sliderMove', e);
        data.isMoved = true;
        let diff = swiper.isHorizontal() ? diffX : diffY;
        touches.diff = diff;
        diff *= params.touchRatio;
        if (rtl) { diff = -diff }
        swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
        data.currentTranslate = diff + data.startTranslate;
        let disableParentSwiper = true;
        let resistanceRatio = params.resistanceRatio;

        if (params.touchReleaseOnEdges) {
            resistanceRatio = 0;
        }

        if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
            disableParentSwiper = false;
            if (params.resistance) { data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio) }
        } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
            disableParentSwiper = false;
            if (params.resistance) { data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio) }
        }

        if (disableParentSwiper) {
            e.preventedByNestedSwiper = true;
        } // Directions locks


        if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
            data.currentTranslate = data.startTranslate;
        }

        if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
            data.currentTranslate = data.startTranslate;
        }

        if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
            data.currentTranslate = data.startTranslate;
        } // Threshold


        if (params.threshold > 0) {
            if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
                if (!data.allowThresholdMove) {
                    data.allowThresholdMove = true;
                    touches.startX = touches.currentX;
                    touches.startY = touches.currentY;
                    data.currentTranslate = data.startTranslate;
                    touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
                    return;
                }
            } else {
                data.currentTranslate = data.startTranslate;
                return;
            }
        }

        if (!params.followFinger || params.cssMode) { return } // Update active index in free mode

        if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
        }

        if (params.freeMode) {
            // Velocity
            if (data.velocities.length === 0) {
                data.velocities.push({
                    position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
                    time: data.touchStartTime
                });
            }

            data.velocities.push({
                position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
                time: now()
            });
        } // Update progress


        swiper.updateProgress(data.currentTranslate); // Update translate

        swiper.setTranslate(data.currentTranslate);
    }

    function onTouchEnd(event) {
        const swiper = this;
        const data = swiper.touchEventsData;
        const params = swiper.params;
        const touches = swiper.touches;
        const rtl = swiper.rtlTranslate;
        const $wrapperEl = swiper.$wrapperEl;
        const slidesGrid = swiper.slidesGrid;
        const snapGrid = swiper.snapGrid;
        const enabled = swiper.enabled;
        if (!enabled) { return }
        let e = event;
        if (e.originalEvent) { e = e.originalEvent }

        if (data.allowTouchCallbacks) {
            swiper.emit('touchEnd', e);
        }

        data.allowTouchCallbacks = false;

        if (!data.isTouched) {
            if (data.isMoved && params.grabCursor) {
                swiper.setGrabCursor(false);
            }

            data.isMoved = false;
            data.startMoving = false;
            return;
        } // Return Grab Cursor


        if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
            swiper.setGrabCursor(false);
        } // Time diff


        const touchEndTime = now();
        const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

        if (swiper.allowClick) {
            swiper.updateClickedSlide(e);
            swiper.emit('tap click', e);

            if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
                swiper.emit('doubleTap doubleClick', e);
            }
        }

        data.lastClickTime = now();
        nextTick(function () {
            if (!swiper.destroyed) { swiper.allowClick = true }
        });

        if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            return;
        }

        data.isTouched = false;
        data.isMoved = false;
        data.startMoving = false;
        let currentPos;

        if (params.followFinger) {
            currentPos = rtl ? swiper.translate : -swiper.translate;
        } else {
            currentPos = -data.currentTranslate;
        }

        if (params.cssMode) {
            return;
        }

        if (params.freeMode) {
            if (currentPos < -swiper.minTranslate()) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }

            if (currentPos > -swiper.maxTranslate()) {
                if (swiper.slides.length < snapGrid.length) {
                    swiper.slideTo(snapGrid.length - 1);
                } else {
                    swiper.slideTo(swiper.slides.length - 1);
                }

                return;
            }

            if (params.freeModeMomentum) {
                if (data.velocities.length > 1) {
                    const lastMoveEvent = data.velocities.pop();
                    const velocityEvent = data.velocities.pop();
                    const distance = lastMoveEvent.position - velocityEvent.position;
                    const time = lastMoveEvent.time - velocityEvent.time;
                    swiper.velocity = distance / time;
                    swiper.velocity /= 2;

                    if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
                        swiper.velocity = 0;
                    } // this implies that the user stopped moving a finger then released.
                    // There would be no events with distance zero, so the last event is stale.


                    if (time > 150 || now() - lastMoveEvent.time > 300) {
                        swiper.velocity = 0;
                    }
                } else {
                    swiper.velocity = 0;
                }

                swiper.velocity *= params.freeModeMomentumVelocityRatio;
                data.velocities.length = 0;
                let momentumDuration = 1000 * params.freeModeMomentumRatio;
                const momentumDistance = swiper.velocity * momentumDuration;
                let newPosition = swiper.translate + momentumDistance;
                if (rtl) { newPosition = -newPosition }
                let doBounce = false;
                let afterBouncePosition;
                const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
                let needsLoopFix;

                if (newPosition < swiper.maxTranslate()) {
                    if (params.freeModeMomentumBounce) {
                        if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                            newPosition = swiper.maxTranslate() - bounceAmount;
                        }

                        afterBouncePosition = swiper.maxTranslate();
                        doBounce = true;
                        data.allowMomentumBounce = true;
                    } else {
                        newPosition = swiper.maxTranslate();
                    }

                    if (params.loop && params.centeredSlides) { needsLoopFix = true }
                } else if (newPosition > swiper.minTranslate()) {
                    if (params.freeModeMomentumBounce) {
                        if (newPosition - swiper.minTranslate() > bounceAmount) {
                            newPosition = swiper.minTranslate() + bounceAmount;
                        }

                        afterBouncePosition = swiper.minTranslate();
                        doBounce = true;
                        data.allowMomentumBounce = true;
                    } else {
                        newPosition = swiper.minTranslate();
                    }

                    if (params.loop && params.centeredSlides) { needsLoopFix = true }
                } else if (params.freeModeSticky) {
                    let nextSlide;

                    for (let j = 0; j < snapGrid.length; j += 1) {
                        if (snapGrid[j] > -newPosition) {
                            nextSlide = j;
                            break;
                        }
                    }

                    if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
                        newPosition = snapGrid[nextSlide];
                    } else {
                        newPosition = snapGrid[nextSlide - 1];
                    }

                    newPosition = -newPosition;
                }

                if (needsLoopFix) {
                    swiper.once('transitionEnd', function () {
                        swiper.loopFix();
                    });
                } // Fix duration


                if (swiper.velocity !== 0) {
                    if (rtl) {
                        momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
                    } else {
                        momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
                    }

                    if (params.freeModeSticky) {
                        // If freeModeSticky is active and the user ends a swipe with a slow-velocity
                        // event, then durations can be 20+ seconds to slide one (or zero!) slides.
                        // It's easy to see this when simulating touch with mouse events. To fix this,
                        // limit single-slide swipes to the default slide duration. This also has the
                        // nice side effect of matching slide speed if the user stopped moving before
                        // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
                        // For faster swipes, also apply limits (albeit higher ones).
                        const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
                        const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

                        if (moveDistance < currentSlideSize) {
                            momentumDuration = params.speed;
                        } else if (moveDistance < 2 * currentSlideSize) {
                            momentumDuration = params.speed * 1.5;
                        } else {
                            momentumDuration = params.speed * 2.5;
                        }
                    }
                } else if (params.freeModeSticky) {
                    swiper.slideToClosest();
                    return;
                }

                if (params.freeModeMomentumBounce && doBounce) {
                    swiper.updateProgress(afterBouncePosition);
                    swiper.setTransition(momentumDuration);
                    swiper.setTranslate(newPosition);
                    swiper.transitionStart(true, swiper.swipeDirection);
                    swiper.animating = true;
                    $wrapperEl.transitionEnd(function () {
                        if (!swiper || swiper.destroyed || !data.allowMomentumBounce) { return }
                        swiper.emit('momentumBounce');
                        swiper.setTransition(params.speed);
                        setTimeout(function () {
                            swiper.setTranslate(afterBouncePosition);
                            $wrapperEl.transitionEnd(function () {
                                if (!swiper || swiper.destroyed) { return }
                                swiper.transitionEnd();
                            });
                        }, 0);
                    });
                } else if (swiper.velocity) {
                    swiper.updateProgress(newPosition);
                    swiper.setTransition(momentumDuration);
                    swiper.setTranslate(newPosition);
                    swiper.transitionStart(true, swiper.swipeDirection);

                    if (!swiper.animating) {
                        swiper.animating = true;
                        $wrapperEl.transitionEnd(function () {
                            if (!swiper || swiper.destroyed) { return }
                            swiper.transitionEnd();
                        });
                    }
                } else {
                    swiper.emit('_freeModeNoMomentumRelease');
                    swiper.updateProgress(newPosition);
                }

                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            } else if (params.freeModeSticky) {
                swiper.slideToClosest();
                return;
            } else if (params.freeMode) {
                swiper.emit('_freeModeNoMomentumRelease');
            }

            if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
                swiper.updateProgress();
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }

            return;
        } // Find current slide


        let stopIndex = 0;
        let groupSize = swiper.slidesSizesGrid[0];

        for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
            const _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

            if (typeof slidesGrid[i + _increment] !== 'undefined') {
                if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
                    stopIndex = i;
                    groupSize = slidesGrid[i + _increment] - slidesGrid[i];
                }
            } else if (currentPos >= slidesGrid[i]) {
                stopIndex = i;
                groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
            }
        } // Find current slide size


        const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
        const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

        if (timeDiff > params.longSwipesMs) {
            // Long touches
            if (!params.longSwipes) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }

            if (swiper.swipeDirection === 'next') {
                if (ratio >= params.longSwipesRatio) { swiper.slideTo(stopIndex + increment) } else { swiper.slideTo(stopIndex) }
            }

            if (swiper.swipeDirection === 'prev') {
                if (ratio > 1 - params.longSwipesRatio) { swiper.slideTo(stopIndex + increment) } else { swiper.slideTo(stopIndex) }
            }
        } else {
            // Short swipes
            if (!params.shortSwipes) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }

            const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

            if (!isNavButtonTarget) {
                if (swiper.swipeDirection === 'next') {
                    swiper.slideTo(stopIndex + increment);
                }

                if (swiper.swipeDirection === 'prev') {
                    swiper.slideTo(stopIndex);
                }
            } else if (e.target === swiper.navigation.nextEl) {
                swiper.slideTo(stopIndex + increment);
            } else {
                swiper.slideTo(stopIndex);
            }
        }
    }

    function onResize() {
        const swiper = this;
        const params = swiper.params;
        const el = swiper.el;
        if (el && el.offsetWidth === 0) { return } // Breakpoints

        if (params.breakpoints) {
            swiper.setBreakpoint();
        } // Save locks


        const allowSlideNext = swiper.allowSlideNext;
        const allowSlidePrev = swiper.allowSlidePrev;
        const snapGrid = swiper.snapGrid; // Disable locks on resize

        swiper.allowSlideNext = true;
        swiper.allowSlidePrev = true;
        swiper.updateSize();
        swiper.updateSlides();
        swiper.updateSlidesClasses();

        if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
            swiper.slideTo(swiper.slides.length - 1, 0, false, true);
        } else {
            swiper.slideTo(swiper.activeIndex, 0, false, true);
        }

        if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
            swiper.autoplay.run();
        } // Return locks after resize


        swiper.allowSlidePrev = allowSlidePrev;
        swiper.allowSlideNext = allowSlideNext;

        if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
            swiper.checkOverflow();
        }
    }

    function onClick(e) {
        const swiper = this;
        if (!swiper.enabled) { return }

        if (!swiper.allowClick) {
            if (swiper.params.preventClicks) { e.preventDefault() }

            if (swiper.params.preventClicksPropagation && swiper.animating) {
                e.stopPropagation();
                e.stopImmediatePropagation();
            }
        }
    }

    function onScroll() {
        const swiper = this;
        const wrapperEl = swiper.wrapperEl;
        const rtlTranslate = swiper.rtlTranslate;
        const enabled = swiper.enabled;
        if (!enabled) { return }
        swiper.previousTranslate = swiper.translate;

        if (swiper.isHorizontal()) {
            if (rtlTranslate) {
                swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
            } else {
                swiper.translate = -wrapperEl.scrollLeft;
            }
        } else {
            swiper.translate = -wrapperEl.scrollTop;
        } // eslint-disable-next-line


        if (swiper.translate === -0) { swiper.translate = 0 }
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
        let newProgress;
        const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

        if (translatesDiff === 0) {
            newProgress = 0;
        } else {
            newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
        }

        if (newProgress !== swiper.progress) {
            swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
        }

        swiper.emit('setTranslate', swiper.translate, false);
    }

    let dummyEventAttached = false;

    function dummyEventListener() {}

    function attachEvents() {
        const swiper = this;
        const document = getDocument();
        const params = swiper.params;
        const touchEvents = swiper.touchEvents;
        const el = swiper.el;
        const wrapperEl = swiper.wrapperEl;
        const device = swiper.device;
        const support = swiper.support;
        swiper.onTouchStart = onTouchStart.bind(swiper);
        swiper.onTouchMove = onTouchMove.bind(swiper);
        swiper.onTouchEnd = onTouchEnd.bind(swiper);

        if (params.cssMode) {
            swiper.onScroll = onScroll.bind(swiper);
        }

        swiper.onClick = onClick.bind(swiper);
        const capture = !!params.nested; // Touch Events

        if (!support.touch && support.pointerEvents) {
            el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
            document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
            document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
        } else {
            if (support.touch) {
                const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners
                    ? {
                        passive: true,
                        capture: false
                    }
                    : false;
                el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener
                    ? {
                        passive: false,
                        capture
                    }
                    : capture);
                el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

                if (touchEvents.cancel) {
                    el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
                }

                if (!dummyEventAttached) {
                    document.addEventListener('touchstart', dummyEventListener);
                    dummyEventAttached = true;
                }
            }

            if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
                el.addEventListener('mousedown', swiper.onTouchStart, false);
                document.addEventListener('mousemove', swiper.onTouchMove, capture);
                document.addEventListener('mouseup', swiper.onTouchEnd, false);
            }
        } // Prevent Links Clicks


        if (params.preventClicks || params.preventClicksPropagation) {
            el.addEventListener('click', swiper.onClick, true);
        }

        if (params.cssMode) {
            wrapperEl.addEventListener('scroll', swiper.onScroll);
        } // Resize handler


        if (params.updateOnWindowResize) {
            swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
        } else {
            swiper.on('observerUpdate', onResize, true);
        }
    }

    function detachEvents() {
        const swiper = this;
        const document = getDocument();
        const params = swiper.params;
        const touchEvents = swiper.touchEvents;
        const el = swiper.el;
        const wrapperEl = swiper.wrapperEl;
        const device = swiper.device;
        const support = swiper.support;
        const capture = !!params.nested; // Touch Events

        if (!support.touch && support.pointerEvents) {
            el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
            document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
            document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
        } else {
            if (support.touch) {
                const passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners
                    ? {
                        passive: true,
                        capture: false
                    }
                    : false;
                el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
                el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

                if (touchEvents.cancel) {
                    el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
                }
            }

            if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
                el.removeEventListener('mousedown', swiper.onTouchStart, false);
                document.removeEventListener('mousemove', swiper.onTouchMove, capture);
                document.removeEventListener('mouseup', swiper.onTouchEnd, false);
            }
        } // Prevent Links Clicks


        if (params.preventClicks || params.preventClicksPropagation) {
            el.removeEventListener('click', swiper.onClick, true);
        }

        if (params.cssMode) {
            wrapperEl.removeEventListener('scroll', swiper.onScroll);
        } // Resize handler


        swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);
    }

    const events = {
        attachEvents,
        detachEvents
    };

    function setBreakpoint() {
        const swiper = this;
        const activeIndex = swiper.activeIndex;
        const initialized = swiper.initialized;
        const _swiper$loopedSlides = swiper.loopedSlides;
        const loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides;
        const params = swiper.params;
        const $el = swiper.$el;
        const breakpoints = params.breakpoints;
        if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) { return } // Get breakpoint for window width and update parameters

        const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
        if (!breakpoint || swiper.currentBreakpoint === breakpoint) { return }
        const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

        if (breakpointOnlyParams) {
            ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
                const paramValue = breakpointOnlyParams[param];
                if (typeof paramValue === 'undefined') { return }

                if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
                    breakpointOnlyParams[param] = 'auto';
                } else if (param === 'slidesPerView') {
                    breakpointOnlyParams[param] = parseFloat(paramValue);
                } else {
                    breakpointOnlyParams[param] = parseInt(paramValue, 10);
                }
            });
        }

        const breakpointParams = breakpointOnlyParams || swiper.originalParams;
        const wasMultiRow = params.slidesPerColumn > 1;
        const isMultiRow = breakpointParams.slidesPerColumn > 1;
        const wasEnabled = params.enabled;

        if (wasMultiRow && !isMultiRow) {
            $el.removeClass(params.containerModifierClass + 'multirow ' + params.containerModifierClass + 'multirow-column');
            swiper.emitContainerClasses();
        } else if (!wasMultiRow && isMultiRow) {
            $el.addClass(params.containerModifierClass + 'multirow');

            if (breakpointParams.slidesPerColumnFill === 'column') {
                $el.addClass(params.containerModifierClass + 'multirow-column');
            }

            swiper.emitContainerClasses();
        }

        const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
        const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

        if (directionChanged && initialized) {
            swiper.changeDirection();
        }

        extend(swiper.params, breakpointParams);
        const isEnabled = swiper.params.enabled;
        extend(swiper, {
            allowTouchMove: swiper.params.allowTouchMove,
            allowSlideNext: swiper.params.allowSlideNext,
            allowSlidePrev: swiper.params.allowSlidePrev
        });

        if (wasEnabled && !isEnabled) {
            swiper.disable();
        } else if (!wasEnabled && isEnabled) {
            swiper.enable();
        }

        swiper.currentBreakpoint = breakpoint;
        swiper.emit('_beforeBreakpoint', breakpointParams);

        if (needsReLoop && initialized) {
            swiper.loopDestroy();
            swiper.loopCreate();
            swiper.updateSlides();
            swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
        }

        swiper.emit('breakpoint', breakpointParams);
    }

    function getBreakpoint(breakpoints, base, containerEl) {
        if (base === void 0) {
            base = 'window';
        }

        if (!breakpoints || base === 'container' && !containerEl) { return undefined }
        let breakpoint = false;
        const window = getWindow();
        const currentWidth = base === 'window' ? window.innerWidth : containerEl.clientWidth;
        const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
        const points = Object.keys(breakpoints).map(function (point) {
            if (typeof point === 'string' && point.indexOf('@') === 0) {
                const minRatio = parseFloat(point.substr(1));
                const value = currentHeight * minRatio;
                return {
                    value,
                    point
                };
            }

            return {
                value: point,
                point
            };
        });
        points.sort(function (a, b) {
            return parseInt(a.value, 10) - parseInt(b.value, 10);
        });

        for (let i = 0; i < points.length; i += 1) {
            const _points$i = points[i];
            const point = _points$i.point;
            const value = _points$i.value;

            if (value <= currentWidth) {
                breakpoint = point;
            }
        }

        return breakpoint || 'max';
    }

    const breakpoints = {
        setBreakpoint,
        getBreakpoint
    };

    function prepareClasses(entries, prefix) {
        const resultClasses = [];
        entries.forEach(function (item) {
            if (_typeof(item) === 'object') {
                Object.keys(item).forEach(function (classNames) {
                    if (item[classNames]) {
                        resultClasses.push(prefix + classNames);
                    }
                });
            } else if (typeof item === 'string') {
                resultClasses.push(prefix + item);
            }
        });
        return resultClasses;
    }

    function addClasses() {
        const swiper = this;
        const classNames = swiper.classNames;
        const params = swiper.params;
        const rtl = swiper.rtl;
        const $el = swiper.$el;
        const device = swiper.device;
        const support = swiper.support; // prettier-ignore

        const suffixes = prepareClasses(['initialized', params.direction, {
            'pointer-events': support.pointerEvents && !support.touch
        }, {
            'free-mode': params.freeMode
        }, {
            'autoheight': params.autoHeight
        }, {
            'rtl': rtl
        }, {
            'multirow': params.slidesPerColumn > 1
        }, {
            'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'
        }, {
            'android': device.android
        }, {
            'ios': device.ios
        }, {
            'css-mode': params.cssMode
        }], params.containerModifierClass);
        classNames.push.apply(classNames, suffixes);
        $el.addClass([].concat(classNames).join(' '));
        swiper.emitContainerClasses();
    }

    function removeClasses() {
        const swiper = this;
        const $el = swiper.$el;
        const classNames = swiper.classNames;
        $el.removeClass(classNames.join(' '));
        swiper.emitContainerClasses();
    }

    const classes = {
        addClasses,
        removeClasses
    };

    function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
        const window = getWindow();
        let image;

        function onReady() {
            if (callback) { callback() }
        }

        const isPicture = $(imageEl).parent('picture')[0];

        if (!isPicture && (!imageEl.complete || !checkForComplete)) {
            if (src) {
                image = new window.Image();
                image.onload = onReady;
                image.onerror = onReady;

                if (sizes) {
                    image.sizes = sizes;
                }

                if (srcset) {
                    image.srcset = srcset;
                }

                if (src) {
                    image.src = src;
                }
            } else {
                onReady();
            }
        } else {
            // image already loaded...
            onReady();
        }
    }

    function preloadImages() {
        const swiper = this;
        swiper.imagesToLoad = swiper.$el.find('img');

        function onReady() {
            if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) { return }
            if (swiper.imagesLoaded !== undefined) { swiper.imagesLoaded += 1 }

            if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
                if (swiper.params.updateOnImagesReady) { swiper.update() }
                swiper.emit('imagesReady');
            }
        }

        for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {
            const imageEl = swiper.imagesToLoad[i];
            swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
        }
    }

    const images = {
        loadImage,
        preloadImages
    };

    function checkOverflow() {
        const swiper = this;
        const params = swiper.params;
        const wasLocked = swiper.isLocked;
        const lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

        if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
            swiper.isLocked = lastSlidePosition <= swiper.size;
        } else {
            swiper.isLocked = swiper.snapGrid.length === 1;
        }

        swiper.allowSlideNext = !swiper.isLocked;
        swiper.allowSlidePrev = !swiper.isLocked; // events

        if (wasLocked !== swiper.isLocked) { swiper.emit(swiper.isLocked ? 'lock' : 'unlock') }

        if (wasLocked && wasLocked !== swiper.isLocked) {
            swiper.isEnd = false;
            if (swiper.navigation) { swiper.navigation.update() }
        }
    }

    const checkOverflow$1 = {
        checkOverflow
    };
    const defaults = {
        init: true,
        direction: 'horizontal',
        touchEventsTarget: 'container',
        initialSlide: 0,
        speed: 300,
        cssMode: false,
        updateOnWindowResize: true,
        resizeObserver: false,
        nested: false,
        createElements: false,
        enabled: true,
        // Overrides
        width: null,
        height: null,
        //
        preventInteractionOnTransition: false,
        // ssr
        userAgent: null,
        url: null,
        // To support iOS's swipe-to-go-back gesture (when being used in-app).
        edgeSwipeDetection: false,
        edgeSwipeThreshold: 20,
        // Free mode
        freeMode: false,
        freeModeMomentum: true,
        freeModeMomentumRatio: 1,
        freeModeMomentumBounce: true,
        freeModeMomentumBounceRatio: 1,
        freeModeMomentumVelocityRatio: 1,
        freeModeSticky: false,
        freeModeMinimumVelocity: 0.02,
        // Autoheight
        autoHeight: false,
        // Set wrapper width
        setWrapperSize: false,
        // Virtual Translate
        virtualTranslate: false,
        // Effects
        effect: 'slide',
        // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
        // Breakpoints
        breakpoints: undefined,
        breakpointsBase: 'window',
        // Slides grid
        spaceBetween: 0,
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerColumnFill: 'column',
        slidesPerGroup: 1,
        slidesPerGroupSkip: 0,
        centeredSlides: false,
        centeredSlidesBounds: false,
        slidesOffsetBefore: 0,
        // in px
        slidesOffsetAfter: 0,
        // in px
        normalizeSlideIndex: true,
        centerInsufficientSlides: false,
        // Disable swiper and hide navigation when container not overflow
        watchOverflow: false,
        // Round length
        roundLengths: false,
        // Touches
        touchRatio: 1,
        touchAngle: 45,
        simulateTouch: true,
        shortSwipes: true,
        longSwipes: true,
        longSwipesRatio: 0.5,
        longSwipesMs: 300,
        followFinger: true,
        allowTouchMove: true,
        threshold: 0,
        touchMoveStopPropagation: false,
        touchStartPreventDefault: true,
        touchStartForcePreventDefault: false,
        touchReleaseOnEdges: false,
        // Unique Navigation Elements
        uniqueNavElements: true,
        // Resistance
        resistance: true,
        resistanceRatio: 0.85,
        // Progress
        watchSlidesProgress: false,
        watchSlidesVisibility: false,
        // Cursor
        grabCursor: false,
        // Clicks
        preventClicks: true,
        preventClicksPropagation: true,
        slideToClickedSlide: false,
        // Images
        preloadImages: true,
        updateOnImagesReady: true,
        // loop
        loop: false,
        loopAdditionalSlides: 0,
        loopedSlides: null,
        loopFillGroupWithBlank: false,
        loopPreventsSlide: true,
        // Swiping/no swiping
        allowSlidePrev: true,
        allowSlideNext: true,
        swipeHandler: null,
        // '.swipe-handler',
        noSwiping: true,
        noSwipingClass: 'swiper-no-swiping',
        noSwipingSelector: null,
        // Passive Listeners
        passiveListeners: true,
        // NS
        containerModifierClass: 'swiper-container-',
        // NEW
        slideClass: 'swiper-slide',
        slideBlankClass: 'swiper-slide-invisible-blank',
        slideActiveClass: 'swiper-slide-active',
        slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
        slideVisibleClass: 'swiper-slide-visible',
        slideDuplicateClass: 'swiper-slide-duplicate',
        slideNextClass: 'swiper-slide-next',
        slideDuplicateNextClass: 'swiper-slide-duplicate-next',
        slidePrevClass: 'swiper-slide-prev',
        slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
        wrapperClass: 'swiper-wrapper',
        // Callbacks
        runCallbacksOnInit: true,
        // Internals
        _emitClasses: false
    };
    const prototypes = {
        modular,
        eventsEmitter,
        update,
        translate,
        transition,
        slide,
        loop,
        grabCursor,
        manipulation,
        events,
        breakpoints,
        checkOverflow: checkOverflow$1,
        classes,
        images
    };
    const extendedDefaults = {};

    const Swiper = /* #__PURE__*/(function () {
        function Swiper() {
            let el;
            let params;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
                params = args[0];
            } else {
                el = args[0];
                params = args[1];
            }

            if (!params) { params = {} }
            params = extend({}, params);
            if (el && !params.el) { params.el = el }

            if (params.el && $(params.el).length > 1) {
                const swipers = [];
                $(params.el).each(function (containerEl) {
                    const newParams = extend({}, params, {
                        el: containerEl
                    });
                    swipers.push(new Swiper(newParams));
                });
                return swipers;
            } // Swiper Instance


            const swiper = this;
            swiper.__swiper__ = true;
            swiper.support = getSupport();
            swiper.device = getDevice({
                userAgent: params.userAgent
            });
            swiper.browser = getBrowser();
            swiper.eventsListeners = {};
            swiper.eventsAnyListeners = [];

            if (typeof swiper.modules === 'undefined') {
                swiper.modules = {};
            }

            Object.keys(swiper.modules).forEach(function (moduleName) {
                const module = swiper.modules[moduleName];

                if (module.params) {
                    const moduleParamName = Object.keys(module.params)[0];
                    const moduleParams = module.params[moduleParamName];
                    if (_typeof(moduleParams) !== 'object' || moduleParams === null) { return }

                    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
                        params[moduleParamName] = {
                            auto: true
                        };
                    }

                    if (!(moduleParamName in params && 'enabled' in moduleParams)) { return }

                    if (params[moduleParamName] === true) {
                        params[moduleParamName] = {
                            enabled: true
                        };
                    }

                    if (_typeof(params[moduleParamName]) === 'object' && !('enabled' in params[moduleParamName])) {
                        params[moduleParamName].enabled = true;
                    }

                    if (!params[moduleParamName]) {
                        params[moduleParamName] = {
                            enabled: false
                        };
                    }
                }
            }); // Extend defaults with modules params

            const swiperParams = extend({}, defaults);
            swiper.useParams(swiperParams); // Extend defaults with passed params

            swiper.params = extend({}, swiperParams, extendedDefaults, params);
            swiper.originalParams = extend({}, swiper.params);
            swiper.passedParams = extend({}, params); // add event listeners

            if (swiper.params && swiper.params.on) {
                Object.keys(swiper.params.on).forEach(function (eventName) {
                    swiper.on(eventName, swiper.params.on[eventName]);
                });
            }

            if (swiper.params && swiper.params.onAny) {
                swiper.onAny(swiper.params.onAny);
            } // Save Dom lib


            swiper.$ = $; // Extend Swiper

            extend(swiper, {
                enabled: swiper.params.enabled,
                el,
                // Classes
                classNames: [],
                // Slides
                slides: $(),
                slidesGrid: [],
                snapGrid: [],
                slidesSizesGrid: [],
                // isDirection
                isHorizontal: function isHorizontal() {
                    return swiper.params.direction === 'horizontal';
                },
                isVertical: function isVertical() {
                    return swiper.params.direction === 'vertical';
                },
                // Indexes
                activeIndex: 0,
                realIndex: 0,
                //
                isBeginning: true,
                isEnd: false,
                // Props
                translate: 0,
                previousTranslate: 0,
                progress: 0,
                velocity: 0,
                animating: false,
                // Locks
                allowSlideNext: swiper.params.allowSlideNext,
                allowSlidePrev: swiper.params.allowSlidePrev,
                // Touch Events
                touchEvents: (function touchEvents() {
                    const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
                    let desktop = ['mousedown', 'mousemove', 'mouseup'];

                    if (swiper.support.pointerEvents) {
                        desktop = ['pointerdown', 'pointermove', 'pointerup'];
                    }

                    swiper.touchEventsTouch = {
                        start: touch[0],
                        move: touch[1],
                        end: touch[2],
                        cancel: touch[3]
                    };
                    swiper.touchEventsDesktop = {
                        start: desktop[0],
                        move: desktop[1],
                        end: desktop[2]
                    };
                    return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
                }()),
                touchEventsData: {
                    isTouched: undefined,
                    isMoved: undefined,
                    allowTouchCallbacks: undefined,
                    touchStartTime: undefined,
                    isScrolling: undefined,
                    currentTranslate: undefined,
                    startTranslate: undefined,
                    allowThresholdMove: undefined,
                    // Form elements to match
                    formElements: 'input, select, option, textarea, button, video, label',
                    // Last click time
                    lastClickTime: now(),
                    clickTimeout: undefined,
                    // Velocities
                    velocities: [],
                    allowMomentumBounce: undefined,
                    isTouchEvent: undefined,
                    startMoving: undefined
                },
                // Clicks
                allowClick: true,
                // Touches
                allowTouchMove: swiper.params.allowTouchMove,
                touches: {
                    startX: 0,
                    startY: 0,
                    currentX: 0,
                    currentY: 0,
                    diff: 0
                },
                // Images
                imagesToLoad: [],
                imagesLoaded: 0
            }); // Install Modules

            swiper.useModules();
            swiper.emit('_swiper'); // Init

            if (swiper.params.init) {
                swiper.init();
            } // Return app instance


            return swiper;
        }

        const _proto = Swiper.prototype;

        _proto.enable = function enable() {
            const swiper = this;
            if (swiper.enabled) { return }
            swiper.enabled = true;

            if (swiper.params.grabCursor) {
                swiper.setGrabCursor();
            }

            swiper.emit('enable');
        };

        _proto.disable = function disable() {
            const swiper = this;
            if (!swiper.enabled) { return }
            swiper.enabled = false;

            if (swiper.params.grabCursor) {
                swiper.unsetGrabCursor();
            }

            swiper.emit('disable');
        };

        _proto.setProgress = function setProgress(progress, speed) {
            const swiper = this;
            progress = Math.min(Math.max(progress, 0), 1);
            const min = swiper.minTranslate();
            const max = swiper.maxTranslate();
            const current = (max - min) * progress + min;
            swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
        };

        _proto.emitContainerClasses = function emitContainerClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) { return }
            const classes = swiper.el.className.split(' ').filter(function (className) {
                return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
            });
            swiper.emit('_containerClasses', classes.join(' '));
        };

        _proto.getSlideClasses = function getSlideClasses(slideEl) {
            const swiper = this;
            return slideEl.className.split(' ').filter(function (className) {
                return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
            }).join(' ');
        };

        _proto.emitSlidesClasses = function emitSlidesClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) { return }
            const updates = [];
            swiper.slides.each(function (slideEl) {
                const classNames = swiper.getSlideClasses(slideEl);
                updates.push({
                    slideEl,
                    classNames
                });
                swiper.emit('_slideClass', slideEl, classNames);
            });
            swiper.emit('_slideClasses', updates);
        };

        _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
            const swiper = this;
            const params = swiper.params;
            const slides = swiper.slides;
            const slidesGrid = swiper.slidesGrid;
            const swiperSize = swiper.size;
            const activeIndex = swiper.activeIndex;
            let spv = 1;

            if (params.centeredSlides) {
                let slideSize = slides[activeIndex].swiperSlideSize;
                let breakLoop;

                for (let i = activeIndex + 1; i < slides.length; i += 1) {
                    if (slides[i] && !breakLoop) {
                        slideSize += slides[i].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) { breakLoop = true }
                    }
                }

                for (let _i = activeIndex - 1; _i >= 0; _i -= 1) {
                    if (slides[_i] && !breakLoop) {
                        slideSize += slides[_i].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) { breakLoop = true }
                    }
                }
            } else {
                for (let _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
                    if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
                        spv += 1;
                    }
                }
            }

            return spv;
        };

        _proto.update = function update() {
            const swiper = this;
            if (!swiper || swiper.destroyed) { return }
            const snapGrid = swiper.snapGrid;
            const params = swiper.params; // Breakpoints

            if (params.breakpoints) {
                swiper.setBreakpoint();
            }

            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateProgress();
            swiper.updateSlidesClasses();

            function setTranslate() {
                const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
                const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
                swiper.setTranslate(newTranslate);
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }

            let translated;

            if (swiper.params.freeMode) {
                setTranslate();

                if (swiper.params.autoHeight) {
                    swiper.updateAutoHeight();
                }
            } else {
                if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
                    translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
                } else {
                    translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
                }

                if (!translated) {
                    setTranslate();
                }
            }

            if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
                swiper.checkOverflow();
            }

            swiper.emit('update');
        };

        _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
            if (needUpdate === void 0) {
                needUpdate = true;
            }

            const swiper = this;
            const currentDirection = swiper.params.direction;

            if (!newDirection) {
                // eslint-disable-next-line
        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
            }

            if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
                return swiper;
            }

            swiper.$el.removeClass('' + swiper.params.containerModifierClass + currentDirection).addClass('' + swiper.params.containerModifierClass + newDirection);
            swiper.emitContainerClasses();
            swiper.params.direction = newDirection;
            swiper.slides.each(function (slideEl) {
                if (newDirection === 'vertical') {
                    slideEl.style.width = '';
                } else {
                    slideEl.style.height = '';
                }
            });
            swiper.emit('changeDirection');
            if (needUpdate) { swiper.update() }
            return swiper;
        };

        _proto.mount = function mount(el) {
            const swiper = this;
            if (swiper.mounted) { return true } // Find el

            const $el = $(el || swiper.params.el);
            el = $el[0];

            if (!el) {
                return false;
            }

            el.swiper = swiper;

            const getWrapper = function getWrapper() {
                if (el && el.shadowRoot && el.shadowRoot.querySelector) {
                    const res = $(el.shadowRoot.querySelector('.' + swiper.params.wrapperClass)); // Children needs to return slot items

                    res.children = function (options) {
                        return $el.children(options);
                    };

                    return res;
                }

                return $el.children('.' + swiper.params.wrapperClass);
            }; // Find Wrapper


            let $wrapperEl = getWrapper();

            if ($wrapperEl.length === 0 && swiper.params.createElements) {
                const document = getDocument();
                const wrapper = document.createElement('div');
                $wrapperEl = $(wrapper);
                wrapper.className = swiper.params.wrapperClass;
                $el.append(wrapper);
                $el.children('.' + swiper.params.slideClass).each(function (slideEl) {
                    $wrapperEl.append(slideEl);
                });
            }

            extend(swiper, {
                $el,
                el,
                $wrapperEl,
                wrapperEl: $wrapperEl[0],
                mounted: true,
                // RTL
                rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
                rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
                wrongRTL: $wrapperEl.css('display') === '-webkit-box'
            });
            return true;
        };

        _proto.init = function init(el) {
            const swiper = this;
            if (swiper.initialized) { return swiper }
            const mounted = swiper.mount(el);
            if (mounted === false) { return swiper }
            swiper.emit('beforeInit'); // Set breakpoint

            if (swiper.params.breakpoints) {
                swiper.setBreakpoint();
            } // Add Classes


            swiper.addClasses(); // Create loop

            if (swiper.params.loop) {
                swiper.loopCreate();
            } // Update size


            swiper.updateSize(); // Update slides

            swiper.updateSlides();

            if (swiper.params.watchOverflow) {
                swiper.checkOverflow();
            } // Set Grab Cursor


            if (swiper.params.grabCursor && swiper.enabled) {
                swiper.setGrabCursor();
            }

            if (swiper.params.preloadImages) {
                swiper.preloadImages();
            } // Slide To Initial Slide


            if (swiper.params.loop) {
                swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
            } else {
                swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
            } // Attach events


            swiper.attachEvents(); // Init Flag

            swiper.initialized = true; // Emit

            swiper.emit('init');
            swiper.emit('afterInit');
            return swiper;
        };

        _proto.destroy = function destroy(deleteInstance, cleanStyles) {
            if (deleteInstance === void 0) {
                deleteInstance = true;
            }

            if (cleanStyles === void 0) {
                cleanStyles = true;
            }

            const swiper = this;
            const params = swiper.params;
            const $el = swiper.$el;
            const $wrapperEl = swiper.$wrapperEl;
            const slides = swiper.slides;

            if (typeof swiper.params === 'undefined' || swiper.destroyed) {
                return null;
            }

            swiper.emit('beforeDestroy'); // Init Flag

            swiper.initialized = false; // Detach events

            swiper.detachEvents(); // Destroy loop

            if (params.loop) {
                swiper.loopDestroy();
            } // Cleanup styles


            if (cleanStyles) {
                swiper.removeClasses();
                $el.removeAttr('style');
                $wrapperEl.removeAttr('style');

                if (slides && slides.length) {
                    slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
                }
            }

            swiper.emit('destroy'); // Detach emitter events

            Object.keys(swiper.eventsListeners).forEach(function (eventName) {
                swiper.off(eventName);
            });

            if (deleteInstance !== false) {
                swiper.$el[0].swiper = null;
                deleteProps(swiper);
            }

            swiper.destroyed = true;
            return null;
        };

        Swiper.extendDefaults = function extendDefaults(newDefaults) {
            extend(extendedDefaults, newDefaults);
        };

        Swiper.installModule = function installModule(module) {
            if (!Swiper.prototype.modules) { Swiper.prototype.modules = {} }
            const name = module.name || Object.keys(Swiper.prototype.modules).length + '_' + now();
            Swiper.prototype.modules[name] = module;
        };

        Swiper.use = function use(module) {
            if (Array.isArray(module)) {
                module.forEach(function (m) {
                    return Swiper.installModule(m);
                });
                return Swiper;
            }

            Swiper.installModule(module);
            return Swiper;
        };

        _createClass(Swiper, null, [{
            key: 'extendedDefaults',
            get: function get() {
                return extendedDefaults;
            }
        }, {
            key: 'defaults',
            get: function get() {
                return defaults;
            }
        }]);

        return Swiper;
    }());

    Object.keys(prototypes).forEach(function (prototypeGroup) {
        Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
            Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
        });
    });
    Swiper.use([Resize, Observer$1]);
    const Virtual = {
        update: function update(force) {
            const swiper = this;
            const _swiper$params = swiper.params;
            const slidesPerView = _swiper$params.slidesPerView;
            const slidesPerGroup = _swiper$params.slidesPerGroup;
            const centeredSlides = _swiper$params.centeredSlides;
            const _swiper$params$virtua = swiper.params.virtual;
            const addSlidesBefore = _swiper$params$virtua.addSlidesBefore;
            const addSlidesAfter = _swiper$params$virtua.addSlidesAfter;
            const _swiper$virtual = swiper.virtual;
            const previousFrom = _swiper$virtual.from;
            const previousTo = _swiper$virtual.to;
            const slides = _swiper$virtual.slides;
            const previousSlidesGrid = _swiper$virtual.slidesGrid;
            const renderSlide = _swiper$virtual.renderSlide;
            const previousOffset = _swiper$virtual.offset;
            swiper.updateActiveIndex();
            const activeIndex = swiper.activeIndex || 0;
            let offsetProp;
            if (swiper.rtlTranslate) { offsetProp = 'right' } else { offsetProp = swiper.isHorizontal() ? 'left' : 'top' }
            let slidesAfter;
            let slidesBefore;

            if (centeredSlides) {
                slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
                slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
            } else {
                slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
                slidesBefore = slidesPerGroup + addSlidesBefore;
            }

            const from = Math.max((activeIndex || 0) - slidesBefore, 0);
            const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
            const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
            extend(swiper.virtual, {
                from,
                to,
                offset,
                slidesGrid: swiper.slidesGrid
            });

            function onRendered() {
                swiper.updateSlides();
                swiper.updateProgress();
                swiper.updateSlidesClasses();

                if (swiper.lazy && swiper.params.lazy.enabled) {
                    swiper.lazy.load();
                }
            }

            if (previousFrom === from && previousTo === to && !force) {
                if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
                    swiper.slides.css(offsetProp, offset + 'px');
                }

                swiper.updateProgress();
                return;
            }

            if (swiper.params.virtual.renderExternal) {
                swiper.params.virtual.renderExternal.call(swiper, {
                    offset,
                    from,
                    to,
                    slides: (function getSlides() {
                        const slidesToRender = [];

                        for (let i = from; i <= to; i += 1) {
                            slidesToRender.push(slides[i]);
                        }

                        return slidesToRender;
                    }())
                });

                if (swiper.params.virtual.renderExternalUpdate) {
                    onRendered();
                }

                return;
            }

            const prependIndexes = [];
            const appendIndexes = [];

            if (force) {
                swiper.$wrapperEl.find('.' + swiper.params.slideClass).remove();
            } else {
                for (let i = previousFrom; i <= previousTo; i += 1) {
                    if (i < from || i > to) {
                        swiper.$wrapperEl.find('.' + swiper.params.slideClass + '[data-swiper-slide-index="' + i + '"]').remove();
                    }
                }
            }

            for (let _i = 0; _i < slides.length; _i += 1) {
                if (_i >= from && _i <= to) {
                    if (typeof previousTo === 'undefined' || force) {
                        appendIndexes.push(_i);
                    } else {
                        if (_i > previousTo) { appendIndexes.push(_i) }
                        if (_i < previousFrom) { prependIndexes.push(_i) }
                    }
                }
            }

            appendIndexes.forEach(function (index) {
                swiper.$wrapperEl.append(renderSlide(slides[index], index));
            });
            prependIndexes.sort(function (a, b) {
                return b - a;
            }).forEach(function (index) {
                swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
            });
            swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, offset + 'px');
            onRendered();
        },
        renderSlide: function renderSlide(slide, index) {
            const swiper = this;
            const params = swiper.params.virtual;

            if (params.cache && swiper.virtual.cache[index]) {
                return swiper.virtual.cache[index];
            }

            const $slideEl = params.renderSlide ? $(params.renderSlide.call(swiper, slide, index)) : $('<div class="' + swiper.params.slideClass + '" data-swiper-slide-index="' + index + '">' + slide + '</div>');
            if (!$slideEl.attr('data-swiper-slide-index')) { $slideEl.attr('data-swiper-slide-index', index) }
            if (params.cache) { swiper.virtual.cache[index] = $slideEl }
            return $slideEl;
        },
        appendSlide: function appendSlide(slides) {
            const swiper = this;

            if (_typeof(slides) === 'object' && 'length' in slides) {
                for (let i = 0; i < slides.length; i += 1) {
                    if (slides[i]) { swiper.virtual.slides.push(slides[i]) }
                }
            } else {
                swiper.virtual.slides.push(slides);
            }

            swiper.virtual.update(true);
        },
        prependSlide: function prependSlide(slides) {
            const swiper = this;
            const activeIndex = swiper.activeIndex;
            let newActiveIndex = activeIndex + 1;
            let numberOfNewSlides = 1;

            if (Array.isArray(slides)) {
                for (let i = 0; i < slides.length; i += 1) {
                    if (slides[i]) { swiper.virtual.slides.unshift(slides[i]) }
                }

                newActiveIndex = activeIndex + slides.length;
                numberOfNewSlides = slides.length;
            } else {
                swiper.virtual.slides.unshift(slides);
            }

            if (swiper.params.virtual.cache) {
                const cache = swiper.virtual.cache;
                const newCache = {};
                Object.keys(cache).forEach(function (cachedIndex) {
                    const $cachedEl = cache[cachedIndex];
                    const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');

                    if (cachedElIndex) {
                        $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + 1);
                    }

                    newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;
                });
                swiper.virtual.cache = newCache;
            }

            swiper.virtual.update(true);
            swiper.slideTo(newActiveIndex, 0);
        },
        removeSlide: function removeSlide(slidesIndexes) {
            const swiper = this;
            if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) { return }
            let activeIndex = swiper.activeIndex;

            if (Array.isArray(slidesIndexes)) {
                for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
                    swiper.virtual.slides.splice(slidesIndexes[i], 1);

                    if (swiper.params.virtual.cache) {
                        delete swiper.virtual.cache[slidesIndexes[i]];
                    }

                    if (slidesIndexes[i] < activeIndex) { activeIndex -= 1 }
                    activeIndex = Math.max(activeIndex, 0);
                }
            } else {
                swiper.virtual.slides.splice(slidesIndexes, 1);

                if (swiper.params.virtual.cache) {
                    delete swiper.virtual.cache[slidesIndexes];
                }

                if (slidesIndexes < activeIndex) { activeIndex -= 1 }
                activeIndex = Math.max(activeIndex, 0);
            }

            swiper.virtual.update(true);
            swiper.slideTo(activeIndex, 0);
        },
        removeAllSlides: function removeAllSlides() {
            const swiper = this;
            swiper.virtual.slides = [];

            if (swiper.params.virtual.cache) {
                swiper.virtual.cache = {};
            }

            swiper.virtual.update(true);
            swiper.slideTo(0, 0);
        }
    };
    const Virtual$1 = {
        name: 'virtual',
        params: {
            virtual: {
                enabled: false,
                slides: [],
                cache: true,
                renderSlide: null,
                renderExternal: null,
                renderExternalUpdate: true,
                addSlidesBefore: 0,
                addSlidesAfter: 0
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                virtual: _extends({}, Virtual, {
                    slides: swiper.params.virtual.slides,
                    cache: {}
                })
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (!swiper.params.virtual.enabled) { return }
                swiper.classNames.push(swiper.params.containerModifierClass + 'virtual');
                const overwriteParams = {
                    watchSlidesProgress: true
                };
                extend(swiper.params, overwriteParams);
                extend(swiper.originalParams, overwriteParams);

                if (!swiper.params.initialSlide) {
                    swiper.virtual.update();
                }
            },
            setTranslate: function setTranslate(swiper) {
                if (!swiper.params.virtual.enabled) { return }
                swiper.virtual.update();
            }
        }
    };
    const Keyboard = {
        handle: function handle(event) {
            const swiper = this;
            if (!swiper.enabled) { return }
            const window = getWindow();
            const document = getDocument();
            const rtl = swiper.rtlTranslate;
            let e = event;
            if (e.originalEvent) { e = e.originalEvent } // jquery fix

            const kc = e.keyCode || e.charCode;
            const pageUpDown = swiper.params.keyboard.pageUpDown;
            const isPageUp = pageUpDown && kc === 33;
            const isPageDown = pageUpDown && kc === 34;
            const isArrowLeft = kc === 37;
            const isArrowRight = kc === 39;
            const isArrowUp = kc === 38;
            const isArrowDown = kc === 40; // Directions locks

            if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
                return false;
            }

            if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
                return false;
            }

            if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
                return undefined;
            }

            if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
                return undefined;
            }

            if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
                let inView = false; // Check that swiper should be inside of visible area of window

                if (swiper.$el.parents('.' + swiper.params.slideClass).length > 0 && swiper.$el.parents('.' + swiper.params.slideActiveClass).length === 0) {
                    return undefined;
                }

                const $el = swiper.$el;
                const swiperWidth = $el[0].clientWidth;
                const swiperHeight = $el[0].clientHeight;
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                const swiperOffset = swiper.$el.offset();
                if (rtl) { swiperOffset.left -= swiper.$el[0].scrollLeft }
                const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];

                for (let i = 0; i < swiperCoord.length; i += 1) {
                    const point = swiperCoord[i];

                    if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
            if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

                        inView = true;
                    }
                }

                if (!inView) { return undefined }
            }

            if (swiper.isHorizontal()) {
                if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
                    if (e.preventDefault) { e.preventDefault() } else { e.returnValue = false }
                }

                if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) { swiper.slideNext() }
                if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) { swiper.slidePrev() }
            } else {
                if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
                    if (e.preventDefault) { e.preventDefault() } else { e.returnValue = false }
                }

                if (isPageDown || isArrowDown) { swiper.slideNext() }
                if (isPageUp || isArrowUp) { swiper.slidePrev() }
            }

            swiper.emit('keyPress', kc);
            return undefined;
        },
        enable: function enable() {
            const swiper = this;
            const document = getDocument();
            if (swiper.keyboard.enabled) { return }
            $(document).on('keydown', swiper.keyboard.handle);
            swiper.keyboard.enabled = true;
        },
        disable: function disable() {
            const swiper = this;
            const document = getDocument();
            if (!swiper.keyboard.enabled) { return }
            $(document).off('keydown', swiper.keyboard.handle);
            swiper.keyboard.enabled = false;
        }
    };
    const Keyboard$1 = {
        name: 'keyboard',
        params: {
            keyboard: {
                enabled: false,
                onlyInViewport: true,
                pageUpDown: true
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                keyboard: _extends({
                    enabled: false
                }, Keyboard)
            });
        },
        on: {
            init: function init(swiper) {
                if (swiper.params.keyboard.enabled) {
                    swiper.keyboard.enable();
                }
            },
            destroy: function destroy(swiper) {
                if (swiper.keyboard.enabled) {
                    swiper.keyboard.disable();
                }
            }
        }
    };
    /* eslint-disable consistent-return */

    function isEventSupported() {
        const document = getDocument();
        const eventName = 'onwheel';
        let isSupported = (eventName in document);

        if (!isSupported) {
            const element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }

        if (!isSupported && document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true) {
            // This is the only way to test support for the `wheel` event in IE9+.
            isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
        }

        return isSupported;
    }

    var Mousewheel = {
        lastScrollTime: now(),
        lastEventBeforeSnap: undefined,
        recentWheelEvents: [],
        event: function event() {
            const window = getWindow();
            if (window.navigator.userAgent.indexOf('firefox') > -1) { return 'DOMMouseScroll' }
            return isEventSupported() ? 'wheel' : 'mousewheel';
        },
        normalize: function normalize(e) {
            // Reasonable defaults
            const PIXEL_STEP = 10;
            const LINE_HEIGHT = 40;
            const PAGE_HEIGHT = 800;
            let sX = 0;
            let sY = 0; // spinX, spinY

            let pX = 0;
            let pY = 0; // pixelX, pixelY
            // Legacy

            if ('detail' in e) {
                sY = e.detail;
            }

            if ('wheelDelta' in e) {
                sY = -e.wheelDelta / 120;
            }

            if ('wheelDeltaY' in e) {
                sY = -e.wheelDeltaY / 120;
            }

            if ('wheelDeltaX' in e) {
                sX = -e.wheelDeltaX / 120;
            } // side scrolling on FF with DOMMouseScroll


            if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
                sX = sY;
                sY = 0;
            }

            pX = sX * PIXEL_STEP;
            pY = sY * PIXEL_STEP;

            if ('deltaY' in e) {
                pY = e.deltaY;
            }

            if ('deltaX' in e) {
                pX = e.deltaX;
            }

            if (e.shiftKey && !pX) {
                // if user scrolls with shift he wants horizontal scroll
                pX = pY;
                pY = 0;
            }

            if ((pX || pY) && e.deltaMode) {
                if (e.deltaMode === 1) {
                    // delta in LINE units
                    pX *= LINE_HEIGHT;
                    pY *= LINE_HEIGHT;
                } else {
                    // delta in PAGE units
                    pX *= PAGE_HEIGHT;
                    pY *= PAGE_HEIGHT;
                }
            } // Fall-back if spin cannot be determined


            if (pX && !sX) {
                sX = pX < 1 ? -1 : 1;
            }

            if (pY && !sY) {
                sY = pY < 1 ? -1 : 1;
            }

            return {
                spinX: sX,
                spinY: sY,
                pixelX: pX,
                pixelY: pY
            };
        },
        handleMouseEnter: function handleMouseEnter() {
            const swiper = this;
            if (!swiper.enabled) { return }
            swiper.mouseEntered = true;
        },
        handleMouseLeave: function handleMouseLeave() {
            const swiper = this;
            if (!swiper.enabled) { return }
            swiper.mouseEntered = false;
        },
        handle: function handle(event) {
            let e = event;
            let disableParentSwiper = true;
            const swiper = this;
            if (!swiper.enabled) { return }
            const params = swiper.params.mousewheel;

            if (swiper.params.cssMode) {
                e.preventDefault();
            }

            let target = swiper.$el;

            if (swiper.params.mousewheel.eventsTarget !== 'container') {
                target = $(swiper.params.mousewheel.eventsTarget);
            }

            if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) { return true }
            if (e.originalEvent) { e = e.originalEvent } // jquery fix

            let delta = 0;
            const rtlFactor = swiper.rtlTranslate ? -1 : 1;
            const data = Mousewheel.normalize(e);

            if (params.forceToAxis) {
                if (swiper.isHorizontal()) {
                    if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) { delta = -data.pixelX * rtlFactor } else { return true }
                } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) { delta = -data.pixelY } else { return true }
            } else {
                delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
            }

            if (delta === 0) { return true }
            if (params.invert) { delta = -delta } // Get the scroll positions

            let positions = swiper.getTranslate() + delta * params.sensitivity;
            if (positions >= swiper.minTranslate()) { positions = swiper.minTranslate() }
            if (positions <= swiper.maxTranslate()) { positions = swiper.maxTranslate() } // When loop is true:
            //     the disableParentSwiper will be true.
            // When loop is false:
            //     if the scroll positions is not on edge,
            //     then the disableParentSwiper will be true.
            //     if the scroll on edge positions,
            //     then the disableParentSwiper will be false.

            disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());
            if (disableParentSwiper && swiper.params.nested) { e.stopPropagation() }

            if (!swiper.params.freeMode) {
                // Register the new event in a variable which stores the relevant data
                const newEvent = {
                    time: now(),
                    delta: Math.abs(delta),
                    direction: Math.sign(delta),
                    raw: event
                }; // Keep the most recent events

                const recentWheelEvents = swiper.mousewheel.recentWheelEvents;

                if (recentWheelEvents.length >= 2) {
                    recentWheelEvents.shift(); // only store the last N events
                }

                const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
                recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:
                //   If direction has changed or
                //   if the scroll is quicker than the previous one:
                //     Animate the slider.
                // Else (this is the first time the wheel is moved):
                //     Animate the slider.

                if (prevEvent) {
                    if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
                        swiper.mousewheel.animateSlider(newEvent);
                    }
                } else {
                    swiper.mousewheel.animateSlider(newEvent);
                } // If it's time to release the scroll:
                //   Return now so you don't hit the preventDefault.


                if (swiper.mousewheel.releaseScroll(newEvent)) {
                    return true;
                }
            } else {
                // Freemode or scrollContainer:
                // If we recently snapped after a momentum scroll, then ignore wheel events
                // to give time for the deceleration to finish. Stop ignoring after 500 msecs
                // or if it's a new scroll (larger delta or inverse sign as last event before
                // an end-of-momentum snap).
                const _newEvent = {
                    time: now(),
                    delta: Math.abs(delta),
                    direction: Math.sign(delta)
                };
                const lastEventBeforeSnap = swiper.mousewheel.lastEventBeforeSnap;
                const ignoreWheelEvents = lastEventBeforeSnap && _newEvent.time < lastEventBeforeSnap.time + 500 && _newEvent.delta <= lastEventBeforeSnap.delta && _newEvent.direction === lastEventBeforeSnap.direction;

                if (!ignoreWheelEvents) {
                    swiper.mousewheel.lastEventBeforeSnap = undefined;

                    if (swiper.params.loop) {
                        swiper.loopFix();
                    }

                    let position = swiper.getTranslate() + delta * params.sensitivity;
                    const wasBeginning = swiper.isBeginning;
                    const wasEnd = swiper.isEnd;
                    if (position >= swiper.minTranslate()) { position = swiper.minTranslate() }
                    if (position <= swiper.maxTranslate()) { position = swiper.maxTranslate() }
                    swiper.setTransition(0);
                    swiper.setTranslate(position);
                    swiper.updateProgress();
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();

                    if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
                        swiper.updateSlidesClasses();
                    }

                    if (swiper.params.freeModeSticky) {
                        // When wheel scrolling starts with sticky (aka snap) enabled, then detect
                        // the end of a momentum scroll by storing recent (N=15?) wheel events.
                        // 1. do all N events have decreasing or same (absolute value) delta?
                        // 2. did all N events arrive in the last M (M=500?) msecs?
                        // 3. does the earliest event have an (absolute value) delta that's
                        //    at least P (P=1?) larger than the most recent event's delta?
                        // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
                        // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
                        // Snap immediately and ignore remaining wheel events in this scroll.
                        // See comment above for "remaining wheel events in this scroll" determination.
                        // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
                        clearTimeout(swiper.mousewheel.timeout);
                        swiper.mousewheel.timeout = undefined;
                        const _recentWheelEvents = swiper.mousewheel.recentWheelEvents;

                        if (_recentWheelEvents.length >= 15) {
                            _recentWheelEvents.shift(); // only store the last N events

                        }

                        const _prevEvent = _recentWheelEvents.length ? _recentWheelEvents[_recentWheelEvents.length - 1] : undefined;

                        const firstEvent = _recentWheelEvents[0];

                        _recentWheelEvents.push(_newEvent);

                        if (_prevEvent && (_newEvent.delta > _prevEvent.delta || _newEvent.direction !== _prevEvent.direction)) {
                            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
                            _recentWheelEvents.splice(0);
                        } else if (_recentWheelEvents.length >= 15 && _newEvent.time - firstEvent.time < 500 && firstEvent.delta - _newEvent.delta >= 1 && _newEvent.delta <= 6) {
                            // We're at the end of the deceleration of a momentum scroll, so there's no need
                            // to wait for more events. Snap ASAP on the next tick.
                            // Also, because there's some remaining momentum we'll bias the snap in the
                            // direction of the ongoing scroll because it's better UX for the scroll to snap
                            // in the same direction as the scroll instead of reversing to snap.  Therefore,
                            // if it's already scrolled more than 20% in the current direction, keep going.
                            const snapToThreshold = delta > 0 ? 0.8 : 0.2;
                            swiper.mousewheel.lastEventBeforeSnap = _newEvent;

                            _recentWheelEvents.splice(0);

                            swiper.mousewheel.timeout = nextTick(function () {
                                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
                            }, 0); // no delay; move on next tick
                        }

                        if (!swiper.mousewheel.timeout) {
                            // if we get here, then we haven't detected the end of a momentum scroll, so
                            // we'll consider a scroll "complete" when there haven't been any wheel events
                            // for 500ms.
                            swiper.mousewheel.timeout = nextTick(function () {
                                const snapToThreshold = 0.5;
                                swiper.mousewheel.lastEventBeforeSnap = _newEvent;

                                _recentWheelEvents.splice(0);

                                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
                            }, 500);
                        }
                    } // Emit event


                    if (!ignoreWheelEvents) { swiper.emit('scroll', e) } // Stop autoplay

                    if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) { swiper.autoplay.stop() } // Return page scroll on edge positions

                    if (position === swiper.minTranslate() || position === swiper.maxTranslate()) { return true }
                }
            }

            if (e.preventDefault) { e.preventDefault() } else { e.returnValue = false }
            return false;
        },
        animateSlider: function animateSlider(newEvent) {
            const swiper = this;
            const window = getWindow();

            if (this.params.mousewheel.thresholdDelta && newEvent.delta < this.params.mousewheel.thresholdDelta) {
                // Prevent if delta of wheel scroll delta is below configured threshold
                return false;
            }

            if (this.params.mousewheel.thresholdTime && now() - swiper.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) {
                // Prevent if time between scrolls is below configured threshold
                return false;
            } // If the movement is NOT big enough and
            // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
            //   Don't go any further (avoid insignificant scroll movement).


            if (newEvent.delta >= 6 && now() - swiper.mousewheel.lastScrollTime < 60) {
                // Return false as a default
                return true;
            } // If user is scrolling towards the end:
            //   If the slider hasn't hit the latest slide or
            //   if the slider is a loop and
            //   if the slider isn't moving right now:
            //     Go to next slide and
            //     emit a scroll event.
            // Else (the user is scrolling towards the beginning) and
            // if the slider hasn't hit the first slide or
            // if the slider is a loop and
            // if the slider isn't moving right now:
            //   Go to prev slide and
            //   emit a scroll event.


            if (newEvent.direction < 0) {
                if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                    swiper.slideNext();
                    swiper.emit('scroll', newEvent.raw);
                }
            } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
                swiper.slidePrev();
                swiper.emit('scroll', newEvent.raw);
            } // If you got here is because an animation has been triggered so store the current time


            swiper.mousewheel.lastScrollTime = new window.Date().getTime(); // Return false as a default

            return false;
        },
        releaseScroll: function releaseScroll(newEvent) {
            const swiper = this;
            const params = swiper.params.mousewheel;

            if (newEvent.direction < 0) {
                if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
                    // Return true to animate scroll on edges
                    return true;
                }
            } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
                // Return true to animate scroll on edges
                return true;
            }

            return false;
        },
        enable: function enable() {
            const swiper = this;
            const event = Mousewheel.event();

            if (swiper.params.cssMode) {
                swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);
                return true;
            }

            if (!event) { return false }
            if (swiper.mousewheel.enabled) { return false }
            let target = swiper.$el;

            if (swiper.params.mousewheel.eventsTarget !== 'container') {
                target = $(swiper.params.mousewheel.eventsTarget);
            }

            target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
            target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
            target.on(event, swiper.mousewheel.handle);
            swiper.mousewheel.enabled = true;
            return true;
        },
        disable: function disable() {
            const swiper = this;
            const event = Mousewheel.event();

            if (swiper.params.cssMode) {
                swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);
                return true;
            }

            if (!event) { return false }
            if (!swiper.mousewheel.enabled) { return false }
            let target = swiper.$el;

            if (swiper.params.mousewheel.eventsTarget !== 'container') {
                target = $(swiper.params.mousewheel.eventsTarget);
            }

            target.off(event, swiper.mousewheel.handle);
            swiper.mousewheel.enabled = false;
            return true;
        }
    };
    const Mousewheel$1 = {
        name: 'mousewheel',
        params: {
            mousewheel: {
                enabled: false,
                releaseOnEdges: false,
                invert: false,
                forceToAxis: false,
                sensitivity: 1,
                eventsTarget: 'container',
                thresholdDelta: null,
                thresholdTime: null
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                mousewheel: {
                    enabled: false,
                    lastScrollTime: now(),
                    lastEventBeforeSnap: undefined,
                    recentWheelEvents: [],
                    enable: Mousewheel.enable,
                    disable: Mousewheel.disable,
                    handle: Mousewheel.handle,
                    handleMouseEnter: Mousewheel.handleMouseEnter,
                    handleMouseLeave: Mousewheel.handleMouseLeave,
                    animateSlider: Mousewheel.animateSlider,
                    releaseScroll: Mousewheel.releaseScroll
                }
            });
        },
        on: {
            init: function init(swiper) {
                if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
                    swiper.mousewheel.disable();
                }

                if (swiper.params.mousewheel.enabled) { swiper.mousewheel.enable() }
            },
            destroy: function destroy(swiper) {
                if (swiper.params.cssMode) {
                    swiper.mousewheel.enable();
                }

                if (swiper.mousewheel.enabled) { swiper.mousewheel.disable() }
            }
        }
    };
    const Navigation = {
        toggleEl: function toggleEl($el, disabled) {
            $el[disabled ? 'addClass' : 'removeClass'](this.params.navigation.disabledClass);
            if ($el[0] && $el[0].tagName === 'BUTTON') { $el[0].disabled = disabled }
        },
        update: function update() {
            // Update Navigation Buttons
            const swiper = this;
            const params = swiper.params.navigation;
            const toggleEl = swiper.navigation.toggleEl;
            if (swiper.params.loop) { return }
            const _swiper$navigation = swiper.navigation;
            const $nextEl = _swiper$navigation.$nextEl;
            const $prevEl = _swiper$navigation.$prevEl;

            if ($prevEl && $prevEl.length > 0) {
                if (swiper.isBeginning) {
                    toggleEl($prevEl, true);
                } else {
                    toggleEl($prevEl, false);
                }

                if (swiper.params.watchOverflow && swiper.enabled) {
                    $prevEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
                }
            }

            if ($nextEl && $nextEl.length > 0) {
                if (swiper.isEnd) {
                    toggleEl($nextEl, true);
                } else {
                    toggleEl($nextEl, false);
                }

                if (swiper.params.watchOverflow && swiper.enabled) {
                    $nextEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
                }
            }
        },
        onPrevClick: function onPrevClick(e) {
            const swiper = this;
            e.preventDefault();
            if (swiper.isBeginning && !swiper.params.loop) { return }
            swiper.slidePrev();
        },
        onNextClick: function onNextClick(e) {
            const swiper = this;
            e.preventDefault();
            if (swiper.isEnd && !swiper.params.loop) { return }
            swiper.slideNext();
        },
        init: function init() {
            const swiper = this;
            const params = swiper.params.navigation;
            swiper.params.navigation = createElementIfNotDefined(swiper.$el, swiper.params.navigation, swiper.params.createElements, {
                nextEl: 'swiper-button-next',
                prevEl: 'swiper-button-prev'
            });
            if (!(params.nextEl || params.prevEl)) { return }
            let $nextEl;
            let $prevEl;

            if (params.nextEl) {
                $nextEl = $(params.nextEl);

                if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
                    $nextEl = swiper.$el.find(params.nextEl);
                }
            }

            if (params.prevEl) {
                $prevEl = $(params.prevEl);

                if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
                    $prevEl = swiper.$el.find(params.prevEl);
                }
            }

            if ($nextEl && $nextEl.length > 0) {
                $nextEl.on('click', swiper.navigation.onNextClick);
            }

            if ($prevEl && $prevEl.length > 0) {
                $prevEl.on('click', swiper.navigation.onPrevClick);
            }

            extend(swiper.navigation, {
                $nextEl,
                nextEl: $nextEl && $nextEl[0],
                $prevEl,
                prevEl: $prevEl && $prevEl[0]
            });

            if (!swiper.enabled) {
                if ($nextEl) { $nextEl.addClass(params.lockClass) }
                if ($prevEl) { $prevEl.addClass(params.lockClass) }
            }
        },
        destroy: function destroy() {
            const swiper = this;
            const _swiper$navigation2 = swiper.navigation;
            const $nextEl = _swiper$navigation2.$nextEl;
            const $prevEl = _swiper$navigation2.$prevEl;

            if ($nextEl && $nextEl.length) {
                $nextEl.off('click', swiper.navigation.onNextClick);
                $nextEl.removeClass(swiper.params.navigation.disabledClass);
            }

            if ($prevEl && $prevEl.length) {
                $prevEl.off('click', swiper.navigation.onPrevClick);
                $prevEl.removeClass(swiper.params.navigation.disabledClass);
            }
        }
    };
    const Navigation$1 = {
        name: 'navigation',
        params: {
            navigation: {
                nextEl: null,
                prevEl: null,
                hideOnClick: false,
                disabledClass: 'swiper-button-disabled',
                hiddenClass: 'swiper-button-hidden',
                lockClass: 'swiper-button-lock'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                navigation: _extends({}, Navigation)
            });
        },
        on: {
            'init': function init(swiper) {
                swiper.navigation.init();
                swiper.navigation.update();
            },
            'toEdge': function toEdge(swiper) {
                swiper.navigation.update();
            },
            'fromEdge': function fromEdge(swiper) {
                swiper.navigation.update();
            },
            'destroy': function destroy(swiper) {
                swiper.navigation.destroy();
            },
            'enable disable': function enableDisable(swiper) {
                const _swiper$navigation3 = swiper.navigation;
                const $nextEl = _swiper$navigation3.$nextEl;
                const $prevEl = _swiper$navigation3.$prevEl;

                if ($nextEl) {
                    $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
                }

                if ($prevEl) {
                    $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
                }
            },
            'click': function click(swiper, e) {
                const _swiper$navigation4 = swiper.navigation;
                const $nextEl = _swiper$navigation4.$nextEl;
                const $prevEl = _swiper$navigation4.$prevEl;
                const targetEl = e.target;

                if (swiper.params.navigation.hideOnClick && !$(targetEl).is($prevEl) && !$(targetEl).is($nextEl)) {
                    if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) { return }
                    let isHidden;

                    if ($nextEl) {
                        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
                    } else if ($prevEl) {
                        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
                    }

                    if (isHidden === true) {
                        swiper.emit('navigationShow');
                    } else {
                        swiper.emit('navigationHide');
                    }

                    if ($nextEl) {
                        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }

                    if ($prevEl) {
                        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }
                }
            }
        }
    };
    const Pagination = {
        update: function update() {
            // Render || Update Pagination bullets/items
            const swiper = this;
            const rtl = swiper.rtl;
            const params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return }
            const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
            const $el = swiper.pagination.$el; // Current/Total

            let current;
            const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

            if (swiper.params.loop) {
                current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

                if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
                    current -= slidesLength - swiper.loopedSlides * 2;
                }

                if (current > total - 1) { current -= total }
                if (current < 0 && swiper.params.paginationType !== 'bullets') { current = total + current }
            } else if (typeof swiper.snapIndex !== 'undefined') {
                current = swiper.snapIndex;
            } else {
                current = swiper.activeIndex || 0;
            } // Types


            if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
                const bullets = swiper.pagination.bullets;
                let firstIndex;
                let lastIndex;
                let midIndex;

                if (params.dynamicBullets) {
                    swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
                    $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + 'px');

                    if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
                        swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

                        if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
                            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
                        } else if (swiper.pagination.dynamicBulletIndex < 0) {
                            swiper.pagination.dynamicBulletIndex = 0;
                        }
                    }

                    firstIndex = current - swiper.pagination.dynamicBulletIndex;
                    lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
                    midIndex = (lastIndex + firstIndex) / 2;
                }

                bullets.removeClass(params.bulletActiveClass + ' ' + params.bulletActiveClass + '-next ' + params.bulletActiveClass + '-next-next ' + params.bulletActiveClass + '-prev ' + params.bulletActiveClass + '-prev-prev ' + params.bulletActiveClass + '-main');

                if ($el.length > 1) {
                    bullets.each(function (bullet) {
                        const $bullet = $(bullet);
                        const bulletIndex = $bullet.index();

                        if (bulletIndex === current) {
                            $bullet.addClass(params.bulletActiveClass);
                        }

                        if (params.dynamicBullets) {
                            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                                $bullet.addClass(params.bulletActiveClass + '-main');
                            }

                            if (bulletIndex === firstIndex) {
                                $bullet.prev().addClass(params.bulletActiveClass + '-prev').prev().addClass(params.bulletActiveClass + '-prev-prev');
                            }

                            if (bulletIndex === lastIndex) {
                                $bullet.next().addClass(params.bulletActiveClass + '-next').next().addClass(params.bulletActiveClass + '-next-next');
                            }
                        }
                    });
                } else {
                    const $bullet = bullets.eq(current);
                    const bulletIndex = $bullet.index();
                    $bullet.addClass(params.bulletActiveClass);

                    if (params.dynamicBullets) {
                        const $firstDisplayedBullet = bullets.eq(firstIndex);
                        const $lastDisplayedBullet = bullets.eq(lastIndex);

                        for (let i = firstIndex; i <= lastIndex; i += 1) {
                            bullets.eq(i).addClass(params.bulletActiveClass + '-main');
                        }

                        if (swiper.params.loop) {
                            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
                                for (let _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                                    bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + '-main');
                                }

                                bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + '-prev');
                            } else {
                                $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + '-prev').prev().addClass(params.bulletActiveClass + '-prev-prev');
                                $lastDisplayedBullet.next().addClass(params.bulletActiveClass + '-next').next().addClass(params.bulletActiveClass + '-next-next');
                            }
                        } else {
                            $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + '-prev').prev().addClass(params.bulletActiveClass + '-prev-prev');
                            $lastDisplayedBullet.next().addClass(params.bulletActiveClass + '-next').next().addClass(params.bulletActiveClass + '-next-next');
                        }
                    }
                }

                if (params.dynamicBullets) {
                    const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
                    const bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
                    const offsetProp = rtl ? 'right' : 'left';
                    bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + 'px');
                }
            }

            if (params.type === 'fraction') {
                $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));
                $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));
            }

            if (params.type === 'progressbar') {
                let progressbarDirection;

                if (params.progressbarOpposite) {
                    progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
                } else {
                    progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
                }

                const scale = (current + 1) / total;
                let scaleX = 1;
                let scaleY = 1;

                if (progressbarDirection === 'horizontal') {
                    scaleX = scale;
                } else {
                    scaleY = scale;
                }

                $el.find(classesToSelector(params.progressbarFillClass)).transform('translate3d(0,0,0) scaleX(' + scaleX + ') scaleY(' + scaleY + ')').transition(swiper.params.speed);
            }

            if (params.type === 'custom' && params.renderCustom) {
                $el.html(params.renderCustom(swiper, current + 1, total));
                swiper.emit('paginationRender', $el[0]);
            } else {
                swiper.emit('paginationUpdate', $el[0]);
            }

            if (swiper.params.watchOverflow && swiper.enabled) {
                $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
            }
        },
        render: function render() {
            // Render Container
            const swiper = this;
            const params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return }
            const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
            const $el = swiper.pagination.$el;
            let paginationHTML = '';

            if (params.type === 'bullets') {
                let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

                if (swiper.params.freeMode && !swiper.params.loop && numberOfBullets > slidesLength) {
                    numberOfBullets = slidesLength;
                }

                for (let i = 0; i < numberOfBullets; i += 1) {
                    if (params.renderBullet) {
                        paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
                    } else {
                        paginationHTML += '<' + params.bulletElement + ' class="' + params.bulletClass + '"></' + params.bulletElement + '>';
                    }
                }

                $el.html(paginationHTML);
                swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));
            }

            if (params.type === 'fraction') {
                if (params.renderFraction) {
                    paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
                } else {
                    paginationHTML = '<span class="' + params.currentClass + '"></span>' + ' / ' + ('<span class="' + params.totalClass + '"></span>');
                }

                $el.html(paginationHTML);
            }

            if (params.type === 'progressbar') {
                if (params.renderProgressbar) {
                    paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
                } else {
                    paginationHTML = '<span class="' + params.progressbarFillClass + '"></span>';
                }

                $el.html(paginationHTML);
            }

            if (params.type !== 'custom') {
                swiper.emit('paginationRender', swiper.pagination.$el[0]);
            }
        },
        init: function init() {
            const swiper = this;
            swiper.params.pagination = createElementIfNotDefined(swiper.$el, swiper.params.pagination, swiper.params.createElements, {
                el: 'swiper-pagination'
            });
            const params = swiper.params.pagination;
            if (!params.el) { return }
            let $el = $(params.el);
            if ($el.length === 0) { return }

            if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
                $el = swiper.$el.find(params.el);
            }

            if (params.type === 'bullets' && params.clickable) {
                $el.addClass(params.clickableClass);
            }

            $el.addClass(params.modifierClass + params.type);

            if (params.type === 'bullets' && params.dynamicBullets) {
                $el.addClass('' + params.modifierClass + params.type + '-dynamic');
                swiper.pagination.dynamicBulletIndex = 0;

                if (params.dynamicMainBullets < 1) {
                    params.dynamicMainBullets = 1;
                }
            }

            if (params.type === 'progressbar' && params.progressbarOpposite) {
                $el.addClass(params.progressbarOppositeClass);
            }

            if (params.clickable) {
                $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {
                    e.preventDefault();
                    let index = $(this).index() * swiper.params.slidesPerGroup;
                    if (swiper.params.loop) { index += swiper.loopedSlides }
                    swiper.slideTo(index);
                });
            }

            extend(swiper.pagination, {
                $el,
                el: $el[0]
            });

            if (!swiper.enabled) {
                $el.addClass(params.lockClass);
            }
        },
        destroy: function destroy() {
            const swiper = this;
            const params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return }
            const $el = swiper.pagination.$el;
            $el.removeClass(params.hiddenClass);
            $el.removeClass(params.modifierClass + params.type);
            if (swiper.pagination.bullets) { swiper.pagination.bullets.removeClass(params.bulletActiveClass) }

            if (params.clickable) {
                $el.off('click', classesToSelector(params.bulletClass));
            }
        }
    };
    const Pagination$1 = {
        name: 'pagination',
        params: {
            pagination: {
                el: null,
                bulletElement: 'span',
                clickable: false,
                hideOnClick: false,
                renderBullet: null,
                renderProgressbar: null,
                renderFraction: null,
                renderCustom: null,
                progressbarOpposite: false,
                type: 'bullets',
                // 'bullets' or 'progressbar' or 'fraction' or 'custom'
                dynamicBullets: false,
                dynamicMainBullets: 1,
                formatFractionCurrent: function formatFractionCurrent(number) {
                    return number;
                },
                formatFractionTotal: function formatFractionTotal(number) {
                    return number;
                },
                bulletClass: 'swiper-pagination-bullet',
                bulletActiveClass: 'swiper-pagination-bullet-active',
                modifierClass: 'swiper-pagination-',
                // NEW
                currentClass: 'swiper-pagination-current',
                totalClass: 'swiper-pagination-total',
                hiddenClass: 'swiper-pagination-hidden',
                progressbarFillClass: 'swiper-pagination-progressbar-fill',
                progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
                clickableClass: 'swiper-pagination-clickable',
                // NEW
                lockClass: 'swiper-pagination-lock'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                pagination: _extends({
                    dynamicBulletIndex: 0
                }, Pagination)
            });
        },
        on: {
            'init': function init(swiper) {
                swiper.pagination.init();
                swiper.pagination.render();
                swiper.pagination.update();
            },
            'activeIndexChange': function activeIndexChange(swiper) {
                if (swiper.params.loop) {
                    swiper.pagination.update();
                } else if (typeof swiper.snapIndex === 'undefined') {
                    swiper.pagination.update();
                }
            },
            'snapIndexChange': function snapIndexChange(swiper) {
                if (!swiper.params.loop) {
                    swiper.pagination.update();
                }
            },
            'slidesLengthChange': function slidesLengthChange(swiper) {
                if (swiper.params.loop) {
                    swiper.pagination.render();
                    swiper.pagination.update();
                }
            },
            'snapGridLengthChange': function snapGridLengthChange(swiper) {
                if (!swiper.params.loop) {
                    swiper.pagination.render();
                    swiper.pagination.update();
                }
            },
            'destroy': function destroy(swiper) {
                swiper.pagination.destroy();
            },
            'enable disable': function enableDisable(swiper) {
                const $el = swiper.pagination.$el;

                if ($el) {
                    $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
                }
            },
            'click': function click(swiper, e) {
                const targetEl = e.target;

                if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !$(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
                    if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) { return }
                    const isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

                    if (isHidden === true) {
                        swiper.emit('paginationShow');
                    } else {
                        swiper.emit('paginationHide');
                    }

                    swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
                }
            }
        }
    };
    const Scrollbar = {
        setTranslate: function setTranslate() {
            const swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return }
            const scrollbar = swiper.scrollbar;
            const rtl = swiper.rtlTranslate;
            const progress = swiper.progress;
            const dragSize = scrollbar.dragSize;
            const trackSize = scrollbar.trackSize;
            const $dragEl = scrollbar.$dragEl;
            const $el = scrollbar.$el;
            const params = swiper.params.scrollbar;
            let newSize = dragSize;
            let newPos = (trackSize - dragSize) * progress;

            if (rtl) {
                newPos = -newPos;

                if (newPos > 0) {
                    newSize = dragSize - newPos;
                    newPos = 0;
                } else if (-newPos + dragSize > trackSize) {
                    newSize = trackSize + newPos;
                }
            } else if (newPos < 0) {
                newSize = dragSize + newPos;
                newPos = 0;
            } else if (newPos + dragSize > trackSize) {
                newSize = trackSize - newPos;
            }

            if (swiper.isHorizontal()) {
                $dragEl.transform('translate3d(' + newPos + 'px, 0, 0)');
                $dragEl[0].style.width = newSize + 'px';
            } else {
                $dragEl.transform('translate3d(0px, ' + newPos + 'px, 0)');
                $dragEl[0].style.height = newSize + 'px';
            }

            if (params.hide) {
                clearTimeout(swiper.scrollbar.timeout);
                $el[0].style.opacity = 1;
                swiper.scrollbar.timeout = setTimeout(function () {
                    $el[0].style.opacity = 0;
                    $el.transition(400);
                }, 1000);
            }
        },
        setTransition: function setTransition(duration) {
            const swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return }
            swiper.scrollbar.$dragEl.transition(duration);
        },
        updateSize: function updateSize() {
            const swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return }
            const scrollbar = swiper.scrollbar;
            const $dragEl = scrollbar.$dragEl;
            const $el = scrollbar.$el;
            $dragEl[0].style.width = '';
            $dragEl[0].style.height = '';
            const trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
            const divider = swiper.size / swiper.virtualSize;
            const moveDivider = divider * (trackSize / swiper.size);
            let dragSize;

            if (swiper.params.scrollbar.dragSize === 'auto') {
                dragSize = trackSize * divider;
            } else {
                dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
            }

            if (swiper.isHorizontal()) {
                $dragEl[0].style.width = dragSize + 'px';
            } else {
                $dragEl[0].style.height = dragSize + 'px';
            }

            if (divider >= 1) {
                $el[0].style.display = 'none';
            } else {
                $el[0].style.display = '';
            }

            if (swiper.params.scrollbar.hide) {
                $el[0].style.opacity = 0;
            }

            extend(scrollbar, {
                trackSize,
                divider,
                moveDivider,
                dragSize
            });

            if (swiper.params.watchOverflow && swiper.enabled) {
                scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
            }
        },
        getPointerPosition: function getPointerPosition(e) {
            const swiper = this;

            if (swiper.isHorizontal()) {
                return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;
            }

            return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;
        },
        setDragPosition: function setDragPosition(e) {
            const swiper = this;
            const scrollbar = swiper.scrollbar;
            const rtl = swiper.rtlTranslate;
            const $el = scrollbar.$el;
            const dragSize = scrollbar.dragSize;
            const trackSize = scrollbar.trackSize;
            const dragStartPos = scrollbar.dragStartPos;
            let positionRatio;
            positionRatio = (scrollbar.getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
            positionRatio = Math.max(Math.min(positionRatio, 1), 0);

            if (rtl) {
                positionRatio = 1 - positionRatio;
            }

            const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
            swiper.updateProgress(position);
            swiper.setTranslate(position);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
        },
        onDragStart: function onDragStart(e) {
            const swiper = this;
            const params = swiper.params.scrollbar;
            const scrollbar = swiper.scrollbar;
            const $wrapperEl = swiper.$wrapperEl;
            const $el = scrollbar.$el;
            const $dragEl = scrollbar.$dragEl;
            swiper.scrollbar.isTouched = true;
            swiper.scrollbar.dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
            e.preventDefault();
            e.stopPropagation();
            $wrapperEl.transition(100);
            $dragEl.transition(100);
            scrollbar.setDragPosition(e);
            clearTimeout(swiper.scrollbar.dragTimeout);
            $el.transition(0);

            if (params.hide) {
                $el.css('opacity', 1);
            }

            if (swiper.params.cssMode) {
                swiper.$wrapperEl.css('scroll-snap-type', 'none');
            }

            swiper.emit('scrollbarDragStart', e);
        },
        onDragMove: function onDragMove(e) {
            const swiper = this;
            const scrollbar = swiper.scrollbar;
            const $wrapperEl = swiper.$wrapperEl;
            const $el = scrollbar.$el;
            const $dragEl = scrollbar.$dragEl;
            if (!swiper.scrollbar.isTouched) { return }
            if (e.preventDefault) { e.preventDefault() } else { e.returnValue = false }
            scrollbar.setDragPosition(e);
            $wrapperEl.transition(0);
            $el.transition(0);
            $dragEl.transition(0);
            swiper.emit('scrollbarDragMove', e);
        },
        onDragEnd: function onDragEnd(e) {
            const swiper = this;
            const params = swiper.params.scrollbar;
            const scrollbar = swiper.scrollbar;
            const $wrapperEl = swiper.$wrapperEl;
            const $el = scrollbar.$el;
            if (!swiper.scrollbar.isTouched) { return }
            swiper.scrollbar.isTouched = false;

            if (swiper.params.cssMode) {
                swiper.$wrapperEl.css('scroll-snap-type', '');
                $wrapperEl.transition('');
            }

            if (params.hide) {
                clearTimeout(swiper.scrollbar.dragTimeout);
                swiper.scrollbar.dragTimeout = nextTick(function () {
                    $el.css('opacity', 0);
                    $el.transition(400);
                }, 1000);
            }

            swiper.emit('scrollbarDragEnd', e);

            if (params.snapOnRelease) {
                swiper.slideToClosest();
            }
        },
        enableDraggable: function enableDraggable() {
            const swiper = this;
            if (!swiper.params.scrollbar.el) { return }
            const document = getDocument();
            const scrollbar = swiper.scrollbar;
            const touchEventsTouch = swiper.touchEventsTouch;
            const touchEventsDesktop = swiper.touchEventsDesktop;
            const params = swiper.params;
            const support = swiper.support;
            const $el = scrollbar.$el;
            const target = $el[0];
            const activeListener = support.passiveListener && params.passiveListeners
                ? {
                    passive: false,
                    capture: false
                }
                : false;
            const passiveListener = support.passiveListener && params.passiveListeners
                ? {
                    passive: true,
                    capture: false
                }
                : false;
            if (!target) { return }

            if (!support.touch) {
                target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
                document.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
                document.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
            } else {
                target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
                target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
                target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
            }
        },
        disableDraggable: function disableDraggable() {
            const swiper = this;
            if (!swiper.params.scrollbar.el) { return }
            const document = getDocument();
            const scrollbar = swiper.scrollbar;
            const touchEventsTouch = swiper.touchEventsTouch;
            const touchEventsDesktop = swiper.touchEventsDesktop;
            const params = swiper.params;
            const support = swiper.support;
            const $el = scrollbar.$el;
            const target = $el[0];
            const activeListener = support.passiveListener && params.passiveListeners
                ? {
                    passive: false,
                    capture: false
                }
                : false;
            const passiveListener = support.passiveListener && params.passiveListeners
                ? {
                    passive: true,
                    capture: false
                }
                : false;
            if (!target) { return }

            if (!support.touch) {
                target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
                document.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
                document.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
            } else {
                target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
                target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
                target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
            }
        },
        init: function init() {
            const swiper = this;
            const scrollbar = swiper.scrollbar;
            const $swiperEl = swiper.$el;
            swiper.params.scrollbar = createElementIfNotDefined($swiperEl, swiper.params.scrollbar, swiper.params.createElements, {
                el: 'swiper-scrollbar'
            });
            const params = swiper.params.scrollbar;
            if (!params.el) { return }
            let $el = $(params.el);

            if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
                $el = $swiperEl.find(params.el);
            }

            let $dragEl = $el.find('.' + swiper.params.scrollbar.dragClass);

            if ($dragEl.length === 0) {
                $dragEl = $('<div class="' + swiper.params.scrollbar.dragClass + '"></div>');
                $el.append($dragEl);
            }

            extend(scrollbar, {
                $el,
                el: $el[0],
                $dragEl,
                dragEl: $dragEl[0]
            });

            if (params.draggable) {
                scrollbar.enableDraggable();
            }

            if ($el) {
                $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
            }
        },
        destroy: function destroy() {
            const swiper = this;
            swiper.scrollbar.disableDraggable();
        }
    };
    const Scrollbar$1 = {
        name: 'scrollbar',
        params: {
            scrollbar: {
                el: null,
                dragSize: 'auto',
                hide: false,
                draggable: false,
                snapOnRelease: true,
                lockClass: 'swiper-scrollbar-lock',
                dragClass: 'swiper-scrollbar-drag'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                scrollbar: _extends({
                    isTouched: false,
                    timeout: null,
                    dragTimeout: null
                }, Scrollbar)
            });
        },
        on: {
            'init': function init(swiper) {
                swiper.scrollbar.init();
                swiper.scrollbar.updateSize();
                swiper.scrollbar.setTranslate();
            },
            'update': function update(swiper) {
                swiper.scrollbar.updateSize();
            },
            'resize': function resize(swiper) {
                swiper.scrollbar.updateSize();
            },
            'observerUpdate': function observerUpdate(swiper) {
                swiper.scrollbar.updateSize();
            },
            'setTranslate': function setTranslate(swiper) {
                swiper.scrollbar.setTranslate();
            },
            'setTransition': function setTransition(swiper, duration) {
                swiper.scrollbar.setTransition(duration);
            },
            'enable disable': function enableDisable(swiper) {
                const $el = swiper.scrollbar.$el;

                if ($el) {
                    $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
                }
            },
            'destroy': function destroy(swiper) {
                swiper.scrollbar.destroy();
            }
        }
    };
    const Parallax = {
        setTransform: function setTransform(el, progress) {
            const swiper = this;
            const rtl = swiper.rtl;
            const $el = $(el);
            const rtlFactor = rtl ? -1 : 1;
            const p = $el.attr('data-swiper-parallax') || '0';
            let x = $el.attr('data-swiper-parallax-x');
            let y = $el.attr('data-swiper-parallax-y');
            const scale = $el.attr('data-swiper-parallax-scale');
            const opacity = $el.attr('data-swiper-parallax-opacity');

            if (x || y) {
                x = x || '0';
                y = y || '0';
            } else if (swiper.isHorizontal()) {
                x = p;
                y = '0';
            } else {
                y = p;
                x = '0';
            }

            if (x.indexOf('%') >= 0) {
                x = parseInt(x, 10) * progress * rtlFactor + '%';
            } else {
                x = x * progress * rtlFactor + 'px';
            }

            if (y.indexOf('%') >= 0) {
                y = parseInt(y, 10) * progress + '%';
            } else {
                y = y * progress + 'px';
            }

            if (typeof opacity !== 'undefined' && opacity !== null) {
                const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
                $el[0].style.opacity = currentOpacity;
            }

            if (typeof scale === 'undefined' || scale === null) {
                $el.transform('translate3d(' + x + ', ' + y + ', 0px)');
            } else {
                const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
                $el.transform('translate3d(' + x + ', ' + y + ', 0px) scale(' + currentScale + ')');
            }
        },
        setTranslate: function setTranslate() {
            const swiper = this;
            const $el = swiper.$el;
            const slides = swiper.slides;
            const progress = swiper.progress;
            const snapGrid = swiper.snapGrid;
            $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
                swiper.parallax.setTransform(el, progress);
            });
            slides.each(function (slideEl, slideIndex) {
                let slideProgress = slideEl.progress;

                if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
                    slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
                }

                slideProgress = Math.min(Math.max(slideProgress, -1), 1);
                $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
                    swiper.parallax.setTransform(el, slideProgress);
                });
            });
        },
        setTransition: function setTransition(duration) {
            if (duration === void 0) {
                duration = this.params.speed;
            }

            const swiper = this;
            const $el = swiper.$el;
            $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (parallaxEl) {
                const $parallaxEl = $(parallaxEl);
                let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
                if (duration === 0) { parallaxDuration = 0 }
                $parallaxEl.transition(parallaxDuration);
            });
        }
    };
    const Parallax$1 = {
        name: 'parallax',
        params: {
            parallax: {
                enabled: false
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                parallax: _extends({}, Parallax)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (!swiper.params.parallax.enabled) { return }
                swiper.params.watchSlidesProgress = true;
                swiper.originalParams.watchSlidesProgress = true;
            },
            init: function init(swiper) {
                if (!swiper.params.parallax.enabled) { return }
                swiper.parallax.setTranslate();
            },
            setTranslate: function setTranslate(swiper) {
                if (!swiper.params.parallax.enabled) { return }
                swiper.parallax.setTranslate();
            },
            setTransition: function setTransition(swiper, duration) {
                if (!swiper.params.parallax.enabled) { return }
                swiper.parallax.setTransition(duration);
            }
        }
    };
    var Zoom = {
    // Calc Scale From Multi-touches
        'getDistanceBetweenTouches': function getDistanceBetweenTouches(e) {
            if (e.targetTouches.length < 2) { return 1 }
            const x1 = e.targetTouches[0].pageX;
            const y1 = e.targetTouches[0].pageY;
            const x2 = e.targetTouches[1].pageX;
            const y2 = e.targetTouches[1].pageY;
            const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            return distance;
        },
        // Events
        'onGestureStart': function onGestureStart(e) {
            const swiper = this;
            const support = swiper.support;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;
            zoom.fakeGestureTouched = false;
            zoom.fakeGestureMoved = false;

            if (!support.gestures) {
                if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {
                    return;
                }

                zoom.fakeGestureTouched = true;
                gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
            }

            if (!gesture.$slideEl || !gesture.$slideEl.length) {
                gesture.$slideEl = $(e.target).closest('.' + swiper.params.slideClass);
                if (gesture.$slideEl.length === 0) { gesture.$slideEl = swiper.slides.eq(swiper.activeIndex) }
                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
                gesture.$imageWrapEl = gesture.$imageEl.parent('.' + params.containerClass);
                gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

                if (gesture.$imageWrapEl.length === 0) {
                    gesture.$imageEl = undefined;
                    return;
                }
            }

            if (gesture.$imageEl) {
                gesture.$imageEl.transition(0);
            }

            swiper.zoom.isScaling = true;
        },
        'onGestureChange': function onGestureChange(e) {
            const swiper = this;
            const support = swiper.support;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;

            if (!support.gestures) {
                if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {
                    return;
                }

                zoom.fakeGestureMoved = true;
                gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
            }

            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                if (e.type === 'gesturechange') { zoom.onGestureStart(e) }
                return;
            }

            if (support.gestures) {
                zoom.scale = e.scale * zoom.currentScale;
            } else {
                zoom.scale = gesture.scaleMove / gesture.scaleStart * zoom.currentScale;
            }

            if (zoom.scale > gesture.maxRatio) {
                zoom.scale = gesture.maxRatio - 1 + Math.pow(zoom.scale - gesture.maxRatio + 1, 0.5);
            }

            if (zoom.scale < params.minRatio) {
                zoom.scale = params.minRatio + 1 - Math.pow(params.minRatio - zoom.scale + 1, 0.5);
            }

            gesture.$imageEl.transform('translate3d(0,0,0) scale(' + zoom.scale + ')');
        },
        'onGestureEnd': function onGestureEnd(e) {
            const swiper = this;
            const device = swiper.device;
            const support = swiper.support;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;

            if (!support.gestures) {
                if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
                    return;
                }

                if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {
                    return;
                }

                zoom.fakeGestureTouched = false;
                zoom.fakeGestureMoved = false;
            }

            if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return }
            zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
            gesture.$imageEl.transition(swiper.params.speed).transform('translate3d(0,0,0) scale(' + zoom.scale + ')');
            zoom.currentScale = zoom.scale;
            zoom.isScaling = false;
            if (zoom.scale === 1) { gesture.$slideEl = undefined }
        },
        'onTouchStart': function onTouchStart(e) {
            const swiper = this;
            const device = swiper.device;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;
            const image = zoom.image;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return }
            if (image.isTouched) { return }
            if (device.android && e.cancelable) { e.preventDefault() }
            image.isTouched = true;
            image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
            image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
        },
        'onTouchMove': function onTouchMove(e) {
            const swiper = this;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;
            const image = zoom.image;
            const velocity = zoom.velocity;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return }
            swiper.allowClick = false;
            if (!image.isTouched || !gesture.$slideEl) { return }

            if (!image.isMoved) {
                image.width = gesture.$imageEl[0].offsetWidth;
                image.height = gesture.$imageEl[0].offsetHeight;
                image.startX = getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
                image.startY = getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
                gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
                gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
                gesture.$imageWrapEl.transition(0);

                if (swiper.rtl) {
                    image.startX = -image.startX;
                    image.startY = -image.startY;
                }
            } // Define if we need image drag


            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) { return }
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
            image.maxY = -image.minY;
            image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
            image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

            if (!image.isMoved && !zoom.isScaling) {
                if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
                    image.isTouched = false;
                    return;
                }

                if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
                    image.isTouched = false;
                    return;
                }
            }

            if (e.cancelable) {
                e.preventDefault();
            }

            e.stopPropagation();
            image.isMoved = true;
            image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;
            image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;

            if (image.currentX < image.minX) {
                image.currentX = image.minX + 1 - Math.pow(image.minX - image.currentX + 1, 0.8);
            }

            if (image.currentX > image.maxX) {
                image.currentX = image.maxX - 1 + Math.pow(image.currentX - image.maxX + 1, 0.8);
            }

            if (image.currentY < image.minY) {
                image.currentY = image.minY + 1 - Math.pow(image.minY - image.currentY + 1, 0.8);
            }

            if (image.currentY > image.maxY) {
                image.currentY = image.maxY - 1 + Math.pow(image.currentY - image.maxY + 1, 0.8);
            } // Velocity


            if (!velocity.prevPositionX) { velocity.prevPositionX = image.touchesCurrent.x }
            if (!velocity.prevPositionY) { velocity.prevPositionY = image.touchesCurrent.y }
            if (!velocity.prevTime) { velocity.prevTime = Date.now() }
            velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
            velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
            if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) { velocity.x = 0 }
            if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) { velocity.y = 0 }
            velocity.prevPositionX = image.touchesCurrent.x;
            velocity.prevPositionY = image.touchesCurrent.y;
            velocity.prevTime = Date.now();
            gesture.$imageWrapEl.transform('translate3d(' + image.currentX + 'px, ' + image.currentY + 'px,0)');
        },
        'onTouchEnd': function onTouchEnd() {
            const swiper = this;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;
            const image = zoom.image;
            const velocity = zoom.velocity;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return }

            if (!image.isTouched || !image.isMoved) {
                image.isTouched = false;
                image.isMoved = false;
                return;
            }

            image.isTouched = false;
            image.isMoved = false;
            let momentumDurationX = 300;
            let momentumDurationY = 300;
            const momentumDistanceX = velocity.x * momentumDurationX;
            const newPositionX = image.currentX + momentumDistanceX;
            const momentumDistanceY = velocity.y * momentumDurationY;
            const newPositionY = image.currentY + momentumDistanceY; // Fix duration

            if (velocity.x !== 0) { momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x) }
            if (velocity.y !== 0) { momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y) }
            const momentumDuration = Math.max(momentumDurationX, momentumDurationY);
            image.currentX = newPositionX;
            image.currentY = newPositionY; // Define if we need image drag

            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
            image.maxY = -image.minY;
            image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
            image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
            gesture.$imageWrapEl.transition(momentumDuration).transform('translate3d(' + image.currentX + 'px, ' + image.currentY + 'px,0)');
        },
        'onTransitionEnd': function onTransitionEnd() {
            const swiper = this;
            const zoom = swiper.zoom;
            const gesture = zoom.gesture;

            if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
                if (gesture.$imageEl) {
                    gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
                }

                if (gesture.$imageWrapEl) {
                    gesture.$imageWrapEl.transform('translate3d(0,0,0)');
                }

                zoom.scale = 1;
                zoom.currentScale = 1;
                gesture.$slideEl = undefined;
                gesture.$imageEl = undefined;
                gesture.$imageWrapEl = undefined;
            }
        },
        // Toggle Zoom
        'toggle': function toggle(e) {
            const swiper = this;
            const zoom = swiper.zoom;

            if (zoom.scale && zoom.scale !== 1) {
                // Zoom Out
                zoom.out();
            } else {
                // Zoom In
                zoom.in(e);
            }
        },
        'in': function _in(e) {
            const swiper = this;
            const window = getWindow();
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            const gesture = zoom.gesture;
            const image = zoom.image;

            if (!gesture.$slideEl) {
                if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
                    gesture.$slideEl = swiper.$wrapperEl.children('.' + swiper.params.slideActiveClass);
                } else {
                    gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                }

                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
                gesture.$imageWrapEl = gesture.$imageEl.parent('.' + params.containerClass);
            }

            if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) { return }
            gesture.$slideEl.addClass('' + params.zoomedSlideClass);
            let touchX;
            let touchY;
            let offsetX;
            let offsetY;
            let diffX;
            let diffY;
            let translateX;
            let translateY;
            let imageWidth;
            let imageHeight;
            let scaledWidth;
            let scaledHeight;
            let translateMinX;
            let translateMinY;
            let translateMaxX;
            let translateMaxY;
            let slideWidth;
            let slideHeight;

            if (typeof image.touchesStart.x === 'undefined' && e) {
                touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
                touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
            } else {
                touchX = image.touchesStart.x;
                touchY = image.touchesStart.y;
            }

            zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
            zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

            if (e) {
                slideWidth = gesture.$slideEl[0].offsetWidth;
                slideHeight = gesture.$slideEl[0].offsetHeight;
                offsetX = gesture.$slideEl.offset().left + window.scrollX;
                offsetY = gesture.$slideEl.offset().top + window.scrollY;
                diffX = offsetX + slideWidth / 2 - touchX;
                diffY = offsetY + slideHeight / 2 - touchY;
                imageWidth = gesture.$imageEl[0].offsetWidth;
                imageHeight = gesture.$imageEl[0].offsetHeight;
                scaledWidth = imageWidth * zoom.scale;
                scaledHeight = imageHeight * zoom.scale;
                translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
                translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
                translateMaxX = -translateMinX;
                translateMaxY = -translateMinY;
                translateX = diffX * zoom.scale;
                translateY = diffY * zoom.scale;

                if (translateX < translateMinX) {
                    translateX = translateMinX;
                }

                if (translateX > translateMaxX) {
                    translateX = translateMaxX;
                }

                if (translateY < translateMinY) {
                    translateY = translateMinY;
                }

                if (translateY > translateMaxY) {
                    translateY = translateMaxY;
                }
            } else {
                translateX = 0;
                translateY = 0;
            }

            gesture.$imageWrapEl.transition(300).transform('translate3d(' + translateX + 'px, ' + translateY + 'px,0)');
            gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(' + zoom.scale + ')');
        },
        'out': function out() {
            const swiper = this;
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            const gesture = zoom.gesture;

            if (!gesture.$slideEl) {
                if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
                    gesture.$slideEl = swiper.$wrapperEl.children('.' + swiper.params.slideActiveClass);
                } else {
                    gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                }

                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
                gesture.$imageWrapEl = gesture.$imageEl.parent('.' + params.containerClass);
            }

            if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) { return }
            zoom.scale = 1;
            zoom.currentScale = 1;
            gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
            gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
            gesture.$slideEl.removeClass('' + params.zoomedSlideClass);
            gesture.$slideEl = undefined;
        },
        'toggleGestures': function toggleGestures(method) {
            const swiper = this;
            const zoom = swiper.zoom;
            const selector = zoom.slideSelector;
            const passive = zoom.passiveListener;
            swiper.$wrapperEl[method]('gesturestart', selector, zoom.onGestureStart, passive);
            swiper.$wrapperEl[method]('gesturechange', selector, zoom.onGestureChange, passive);
            swiper.$wrapperEl[method]('gestureend', selector, zoom.onGestureEnd, passive);
        },
        'enableGestures': function enableGestures() {
            if (this.zoom.gesturesEnabled) { return }
            this.zoom.gesturesEnabled = true;
            this.zoom.toggleGestures('on');
        },
        'disableGestures': function disableGestures() {
            if (!this.zoom.gesturesEnabled) { return }
            this.zoom.gesturesEnabled = false;
            this.zoom.toggleGestures('off');
        },
        // Attach/Detach Events
        'enable': function enable() {
            const swiper = this;
            const support = swiper.support;
            const zoom = swiper.zoom;
            if (zoom.enabled) { return }
            zoom.enabled = true;
            const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners
                ? {
                    passive: true,
                    capture: false
                }
                : false;
            const activeListenerWithCapture = support.passiveListener
                ? {
                    passive: false,
                    capture: true
                }
                : true;
            const slideSelector = '.' + swiper.params.slideClass;
            swiper.zoom.passiveListener = passiveListener;
            swiper.zoom.slideSelector = slideSelector; // Scale image

            if (support.gestures) {
                swiper.$wrapperEl.on(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
                swiper.$wrapperEl.on(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
            } else if (swiper.touchEvents.start === 'touchstart') {
                swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
                swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

                if (swiper.touchEvents.cancel) {
                    swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
                }
            } // Move image


            swiper.$wrapperEl.on(swiper.touchEvents.move, '.' + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
        },
        'disable': function disable() {
            const swiper = this;
            const zoom = swiper.zoom;
            if (!zoom.enabled) { return }
            const support = swiper.support;
            swiper.zoom.enabled = false;
            const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners
                ? {
                    passive: true,
                    capture: false
                }
                : false;
            const activeListenerWithCapture = support.passiveListener
                ? {
                    passive: false,
                    capture: true
                }
                : true;
            const slideSelector = '.' + swiper.params.slideClass; // Scale image

            if (support.gestures) {
                swiper.$wrapperEl.off(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
                swiper.$wrapperEl.off(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
            } else if (swiper.touchEvents.start === 'touchstart') {
                swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
                swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

                if (swiper.touchEvents.cancel) {
                    swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
                }
            } // Move image


            swiper.$wrapperEl.off(swiper.touchEvents.move, '.' + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
        }
    };
    const Zoom$1 = {
        name: 'zoom',
        params: {
            zoom: {
                enabled: false,
                maxRatio: 3,
                minRatio: 1,
                toggle: true,
                containerClass: 'swiper-zoom-container',
                zoomedSlideClass: 'swiper-slide-zoomed'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                zoom: _extends({
                    enabled: false,
                    scale: 1,
                    currentScale: 1,
                    isScaling: false,
                    gesture: {
                        $slideEl: undefined,
                        slideWidth: undefined,
                        slideHeight: undefined,
                        $imageEl: undefined,
                        $imageWrapEl: undefined,
                        maxRatio: 3
                    },
                    image: {
                        isTouched: undefined,
                        isMoved: undefined,
                        currentX: undefined,
                        currentY: undefined,
                        minX: undefined,
                        minY: undefined,
                        maxX: undefined,
                        maxY: undefined,
                        width: undefined,
                        height: undefined,
                        startX: undefined,
                        startY: undefined,
                        touchesStart: {},
                        touchesCurrent: {}
                    },
                    velocity: {
                        x: undefined,
                        y: undefined,
                        prevPositionX: undefined,
                        prevPositionY: undefined,
                        prevTime: undefined
                    }
                }, Zoom)
            });
            let scale = 1;
            Object.defineProperty(swiper.zoom, 'scale', {
                get: function get() {
                    return scale;
                },
                set: function set(value) {
                    if (scale !== value) {
                        const imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
                        const slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
                        swiper.emit('zoomChange', value, imageEl, slideEl);
                    }

                    scale = value;
                }
            });
        },
        on: {
            init: function init(swiper) {
                if (swiper.params.zoom.enabled) {
                    swiper.zoom.enable();
                }
            },
            destroy: function destroy(swiper) {
                swiper.zoom.disable();
            },
            touchStart: function touchStart(swiper, e) {
                if (!swiper.zoom.enabled) { return }
                swiper.zoom.onTouchStart(e);
            },
            touchEnd: function touchEnd(swiper, e) {
                if (!swiper.zoom.enabled) { return }
                swiper.zoom.onTouchEnd(e);
            },
            doubleTap: function doubleTap(swiper, e) {
                if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
                    swiper.zoom.toggle(e);
                }
            },
            transitionEnd: function transitionEnd(swiper) {
                if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
                    swiper.zoom.onTransitionEnd();
                }
            },
            slideChange: function slideChange(swiper) {
                if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
                    swiper.zoom.onTransitionEnd();
                }
            }
        }
    };
    const Lazy = {
        loadInSlide: function loadInSlide(index, loadInDuplicate) {
            if (loadInDuplicate === void 0) {
                loadInDuplicate = true;
            }

            const swiper = this;
            const params = swiper.params.lazy;
            if (typeof index === 'undefined') { return }
            if (swiper.slides.length === 0) { return }
            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            const $slideEl = isVirtual ? swiper.$wrapperEl.children('.' + swiper.params.slideClass + '[data-swiper-slide-index="' + index + '"]') : swiper.slides.eq(index);
            const $images = $slideEl.find('.' + params.elementClass + ':not(.' + params.loadedClass + '):not(.' + params.loadingClass + ')');

            if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
                $images.push($slideEl[0]);
            }

            if ($images.length === 0) { return }
            $images.each(function (imageEl) {
                const $imageEl = $(imageEl);
                $imageEl.addClass(params.loadingClass);
                const background = $imageEl.attr('data-background');
                const src = $imageEl.attr('data-src');
                const srcset = $imageEl.attr('data-srcset');
                const sizes = $imageEl.attr('data-sizes');
                const $pictureEl = $imageEl.parent('picture');
                swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {
                    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) { return }

                    if (background) {
                        $imageEl.css('background-image', 'url("' + background + '")');
                        $imageEl.removeAttr('data-background');
                    } else {
                        if (srcset) {
                            $imageEl.attr('srcset', srcset);
                            $imageEl.removeAttr('data-srcset');
                        }

                        if (sizes) {
                            $imageEl.attr('sizes', sizes);
                            $imageEl.removeAttr('data-sizes');
                        }

                        if ($pictureEl.length) {
                            $pictureEl.children('source').each(function (sourceEl) {
                                const $source = $(sourceEl);

                                if ($source.attr('data-srcset')) {
                                    $source.attr('srcset', $source.attr('data-srcset'));
                                    $source.removeAttr('data-srcset');
                                }
                            });
                        }

                        if (src) {
                            $imageEl.attr('src', src);
                            $imageEl.removeAttr('data-src');
                        }
                    }

                    $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
                    $slideEl.find('.' + params.preloaderClass).remove();

                    if (swiper.params.loop && loadInDuplicate) {
                        const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

                        if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
                            const originalSlide = swiper.$wrapperEl.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + swiper.params.slideDuplicateClass + ')');
                            swiper.lazy.loadInSlide(originalSlide.index(), false);
                        } else {
                            const duplicatedSlide = swiper.$wrapperEl.children('.' + swiper.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');
                            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
                        }
                    }

                    swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);

                    if (swiper.params.autoHeight) {
                        swiper.updateAutoHeight();
                    }
                });
                swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
            });
        },
        load: function load() {
            const swiper = this;
            const $wrapperEl = swiper.$wrapperEl;
            const swiperParams = swiper.params;
            const slides = swiper.slides;
            const activeIndex = swiper.activeIndex;
            const isVirtual = swiper.virtual && swiperParams.virtual.enabled;
            const params = swiperParams.lazy;
            let slidesPerView = swiperParams.slidesPerView;

            if (slidesPerView === 'auto') {
                slidesPerView = 0;
            }

            function slideExist(index) {
                if (isVirtual) {
                    if ($wrapperEl.children('.' + swiperParams.slideClass + '[data-swiper-slide-index="' + index + '"]').length) {
                        return true;
                    }
                } else if (slides[index]) { return true }

                return false;
            }

            function slideIndex(slideEl) {
                if (isVirtual) {
                    return $(slideEl).attr('data-swiper-slide-index');
                }

                return $(slideEl).index();
            }

            if (!swiper.lazy.initialImageLoaded) { swiper.lazy.initialImageLoaded = true }

            if (swiper.params.watchSlidesVisibility) {
                $wrapperEl.children('.' + swiperParams.slideVisibleClass).each(function (slideEl) {
                    const index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();
                    swiper.lazy.loadInSlide(index);
                });
            } else if (slidesPerView > 1) {
                for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
                    if (slideExist(i)) { swiper.lazy.loadInSlide(i) }
                }
            } else {
                swiper.lazy.loadInSlide(activeIndex);
            }

            if (params.loadPrevNext) {
                if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
                    const amount = params.loadPrevNextAmount;
                    const spv = slidesPerView;
                    const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
                    const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

                    for (let _i = activeIndex + slidesPerView; _i < maxIndex; _i += 1) {
                        if (slideExist(_i)) { swiper.lazy.loadInSlide(_i) }
                    } // Prev Slides


                    for (let _i2 = minIndex; _i2 < activeIndex; _i2 += 1) {
                        if (slideExist(_i2)) { swiper.lazy.loadInSlide(_i2) }
                    }
                } else {
                    const nextSlide = $wrapperEl.children('.' + swiperParams.slideNextClass);
                    if (nextSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(nextSlide)) }
                    const prevSlide = $wrapperEl.children('.' + swiperParams.slidePrevClass);
                    if (prevSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(prevSlide)) }
                }
            }
        },
        checkInViewOnLoad: function checkInViewOnLoad() {
            const window = getWindow();
            const swiper = this;
            if (!swiper || swiper.destroyed) { return }
            const $scrollElement = swiper.params.lazy.scrollingElement ? $(swiper.params.lazy.scrollingElement) : $(window);
            const isWindow = $scrollElement[0] === window;
            const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;
            const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;
            const swiperOffset = swiper.$el.offset();
            const rtl = swiper.rtlTranslate;
            let inView = false;
            if (rtl) { swiperOffset.left -= swiper.$el[0].scrollLeft }
            const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

            for (let i = 0; i < swiperCoord.length; i += 1) {
                const point = swiperCoord[i];

                if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {
          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

                    inView = true;
                }
            }

            const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners
                ? {
                    passive: true,
                    capture: false
                }
                : false;

            if (inView) {
                swiper.lazy.load();
                $scrollElement.off('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
            } else if (!swiper.lazy.scrollHandlerAttached) {
                swiper.lazy.scrollHandlerAttached = true;
                $scrollElement.on('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
            }
        }
    };
    const Lazy$1 = {
        name: 'lazy',
        params: {
            lazy: {
                checkInView: false,
                enabled: false,
                loadPrevNext: false,
                loadPrevNextAmount: 1,
                loadOnTransitionStart: false,
                scrollingElement: '',
                elementClass: 'swiper-lazy',
                loadingClass: 'swiper-lazy-loading',
                loadedClass: 'swiper-lazy-loaded',
                preloaderClass: 'swiper-lazy-preloader'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                lazy: _extends({
                    initialImageLoaded: false
                }, Lazy)
            });
        },
        on: {
            'beforeInit': function beforeInit(swiper) {
                if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
                    swiper.params.preloadImages = false;
                }
            },
            'init': function init(swiper) {
                if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
                    if (swiper.params.lazy.checkInView) {
                        swiper.lazy.checkInViewOnLoad();
                    } else {
                        swiper.lazy.load();
                    }
                }
            },
            'scroll': function scroll(swiper) {
                if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
                    swiper.lazy.load();
                }
            },
            'scrollbarDragMove resize _freeModeNoMomentumRelease': function lazyLoad(swiper) {
                if (swiper.params.lazy.enabled) {
                    swiper.lazy.load();
                }
            },
            'transitionStart': function transitionStart(swiper) {
                if (swiper.params.lazy.enabled) {
                    if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {
                        swiper.lazy.load();
                    }
                }
            },
            'transitionEnd': function transitionEnd(swiper) {
                if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
                    swiper.lazy.load();
                }
            },
            'slideChange': function slideChange(swiper) {
                if (swiper.params.lazy.enabled && swiper.params.cssMode) {
                    swiper.lazy.load();
                }
            }
        }
    };
    var Controller = {
        LinearSpline: function LinearSpline(x, y) {
            const binarySearch = (function search() {
                let maxIndex;
                let minIndex;
                let guess;
                return function (array, val) {
                    minIndex = -1;
                    maxIndex = array.length;

                    while (maxIndex - minIndex > 1) {
                        guess = maxIndex + minIndex >> 1;

                        if (array[guess] <= val) {
                            minIndex = guess;
                        } else {
                            maxIndex = guess;
                        }
                    }

                    return maxIndex;
                };
            }());

            this.x = x;
            this.y = y;
            this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
            // (x1,y1) is the known point before given value,
            // (x3,y3) is the known point after given value.

            let i1;
            let i3;

            this.interpolate = function interpolate(x2) {
                if (!x2) { return 0 } // Get the indexes of x1 and x3 (the array indexes before and after given x2):

                i3 = binarySearch(this.x, x2);
                i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
                // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

                return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
            };

            return this;
        },
        // xxx: for now i will just save one spline function to to
        getInterpolateFunction: function getInterpolateFunction(c) {
            const swiper = this;

            if (!swiper.controller.spline) {
                swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
            }
        },
        setTranslate: function setTranslate(_setTranslate, byController) {
            const swiper = this;
            const controlled = swiper.controller.control;
            let multiplier;
            let controlledTranslate;
            const Swiper = swiper.constructor;

            function setControlledTranslate(c) {
                // this will create an Interpolate function based on the snapGrids
                // x is the Grid of the scrolled scroller and y will be the controlled scroller
                // it makes sense to create this only once and recall it for the interpolation
                // the function does a lot of value caching for performance
                const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

                if (swiper.params.controller.by === 'slide') {
                    swiper.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
                    // but it did not work out

                    controlledTranslate = -swiper.controller.spline.interpolate(-translate);
                }

                if (!controlledTranslate || swiper.params.controller.by === 'container') {
                    multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
                    controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
                }

                if (swiper.params.controller.inverse) {
                    controlledTranslate = c.maxTranslate() - controlledTranslate;
                }

                c.updateProgress(controlledTranslate);
                c.setTranslate(controlledTranslate, swiper);
                c.updateActiveIndex();
                c.updateSlidesClasses();
            }

            if (Array.isArray(controlled)) {
                for (let i = 0; i < controlled.length; i += 1) {
                    if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                        setControlledTranslate(controlled[i]);
                    }
                }
            } else if (controlled instanceof Swiper && byController !== controlled) {
                setControlledTranslate(controlled);
            }
        },
        setTransition: function setTransition(duration, byController) {
            const swiper = this;
            const Swiper = swiper.constructor;
            const controlled = swiper.controller.control;
            let i;

            function setControlledTransition(c) {
                c.setTransition(duration, swiper);

                if (duration !== 0) {
                    c.transitionStart();

                    if (c.params.autoHeight) {
                        nextTick(function () {
                            c.updateAutoHeight();
                        });
                    }

                    c.$wrapperEl.transitionEnd(function () {
                        if (!controlled) { return }

                        if (c.params.loop && swiper.params.controller.by === 'slide') {
                            c.loopFix();
                        }

                        c.transitionEnd();
                    });
                }
            }

            if (Array.isArray(controlled)) {
                for (i = 0; i < controlled.length; i += 1) {
                    if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                        setControlledTransition(controlled[i]);
                    }
                }
            } else if (controlled instanceof Swiper && byController !== controlled) {
                setControlledTransition(controlled);
            }
        }
    };
    const Controller$1 = {
        name: 'controller',
        params: {
            controller: {
                control: undefined,
                inverse: false,
                by: 'slide' // or 'container'

            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                controller: _extends({
                    control: swiper.params.controller.control
                }, Controller)
            });
        },
        on: {
            update: function update(swiper) {
                if (!swiper.controller.control) { return }

                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            resize: function resize(swiper) {
                if (!swiper.controller.control) { return }

                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            observerUpdate: function observerUpdate(swiper) {
                if (!swiper.controller.control) { return }

                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            setTranslate: function setTranslate(swiper, translate, byController) {
                if (!swiper.controller.control) { return }
                swiper.controller.setTranslate(translate, byController);
            },
            setTransition: function setTransition(swiper, duration, byController) {
                if (!swiper.controller.control) { return }
                swiper.controller.setTransition(duration, byController);
            }
        }
    };
    const A11y = {
        getRandomNumber: function getRandomNumber(size) {
            if (size === void 0) {
                size = 16;
            }

            const randomChar = function randomChar() {
                return Math.round(16 * Math.random()).toString(16);
            };

            return 'x'.repeat(size).replace(/x/g, randomChar);
        },
        makeElFocusable: function makeElFocusable($el) {
            $el.attr('tabIndex', '0');
            return $el;
        },
        makeElNotFocusable: function makeElNotFocusable($el) {
            $el.attr('tabIndex', '-1');
            return $el;
        },
        addElRole: function addElRole($el, role) {
            $el.attr('role', role);
            return $el;
        },
        addElRoleDescription: function addElRoleDescription($el, description) {
            $el.attr('aria-roledescription', description);
            return $el;
        },
        addElControls: function addElControls($el, controls) {
            $el.attr('aria-controls', controls);
            return $el;
        },
        addElLabel: function addElLabel($el, label) {
            $el.attr('aria-label', label);
            return $el;
        },
        addElId: function addElId($el, id) {
            $el.attr('id', id);
            return $el;
        },
        addElLive: function addElLive($el, live) {
            $el.attr('aria-live', live);
            return $el;
        },
        disableEl: function disableEl($el) {
            $el.attr('aria-disabled', true);
            return $el;
        },
        enableEl: function enableEl($el) {
            $el.attr('aria-disabled', false);
            return $el;
        },
        onEnterOrSpaceKey: function onEnterOrSpaceKey(e) {
            if (e.keyCode !== 13 && e.keyCode !== 32) { return }
            const swiper = this;
            const params = swiper.params.a11y;
            const $targetEl = $(e.target);

            if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
                if (!(swiper.isEnd && !swiper.params.loop)) {
                    swiper.slideNext();
                }

                if (swiper.isEnd) {
                    swiper.a11y.notify(params.lastSlideMessage);
                } else {
                    swiper.a11y.notify(params.nextSlideMessage);
                }
            }

            if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
                if (!(swiper.isBeginning && !swiper.params.loop)) {
                    swiper.slidePrev();
                }

                if (swiper.isBeginning) {
                    swiper.a11y.notify(params.firstSlideMessage);
                } else {
                    swiper.a11y.notify(params.prevSlideMessage);
                }
            }

            if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {
                $targetEl[0].click();
            }
        },
        notify: function notify(message) {
            const swiper = this;
            const notification = swiper.a11y.liveRegion;
            if (notification.length === 0) { return }
            notification.html('');
            notification.html(message);
        },
        updateNavigation: function updateNavigation() {
            const swiper = this;
            if (swiper.params.loop || !swiper.navigation) { return }
            const _swiper$navigation = swiper.navigation;
            const $nextEl = _swiper$navigation.$nextEl;
            const $prevEl = _swiper$navigation.$prevEl;

            if ($prevEl && $prevEl.length > 0) {
                if (swiper.isBeginning) {
                    swiper.a11y.disableEl($prevEl);
                    swiper.a11y.makeElNotFocusable($prevEl);
                } else {
                    swiper.a11y.enableEl($prevEl);
                    swiper.a11y.makeElFocusable($prevEl);
                }
            }

            if ($nextEl && $nextEl.length > 0) {
                if (swiper.isEnd) {
                    swiper.a11y.disableEl($nextEl);
                    swiper.a11y.makeElNotFocusable($nextEl);
                } else {
                    swiper.a11y.enableEl($nextEl);
                    swiper.a11y.makeElFocusable($nextEl);
                }
            }
        },
        updatePagination: function updatePagination() {
            const swiper = this;
            const params = swiper.params.a11y;

            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.bullets.each(function (bulletEl) {
                    const $bulletEl = $(bulletEl);
                    swiper.a11y.makeElFocusable($bulletEl);

                    if (!swiper.params.pagination.renderBullet) {
                        swiper.a11y.addElRole($bulletEl, 'button');
                        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, $bulletEl.index() + 1));
                    }
                });
            }
        },
        init: function init() {
            const swiper = this;
            const params = swiper.params.a11y;
            swiper.$el.append(swiper.a11y.liveRegion); // Container

            const $containerEl = swiper.$el;

            if (params.containerRoleDescriptionMessage) {
                swiper.a11y.addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);
            }

            if (params.containerMessage) {
                swiper.a11y.addElLabel($containerEl, params.containerMessage);
            } // Wrapper


            const $wrapperEl = swiper.$wrapperEl;
            const wrapperId = $wrapperEl.attr('id') || 'swiper-wrapper-' + swiper.a11y.getRandomNumber(16);
            const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';
            swiper.a11y.addElId($wrapperEl, wrapperId);
            swiper.a11y.addElLive($wrapperEl, live); // Slide

            if (params.itemRoleDescriptionMessage) {
                swiper.a11y.addElRoleDescription($(swiper.slides), params.itemRoleDescriptionMessage);
            }

            swiper.a11y.addElRole($(swiper.slides), params.slideRole);
            swiper.slides.each(function (slideEl) {
                const $slideEl = $(slideEl);
                const ariaLabelMessage = params.slideLabelMessage.replace(/\{\{index\}\}/, $slideEl.index() + 1).replace(/\{\{slidesLength\}\}/, swiper.slides.length);
                swiper.a11y.addElLabel($slideEl, ariaLabelMessage);
            }); // Navigation

            let $nextEl;
            let $prevEl;

            if (swiper.navigation && swiper.navigation.$nextEl) {
                $nextEl = swiper.navigation.$nextEl;
            }

            if (swiper.navigation && swiper.navigation.$prevEl) {
                $prevEl = swiper.navigation.$prevEl;
            }

            if ($nextEl && $nextEl.length) {
                swiper.a11y.makeElFocusable($nextEl);

                if ($nextEl[0].tagName !== 'BUTTON') {
                    swiper.a11y.addElRole($nextEl, 'button');
                    $nextEl.on('keydown', swiper.a11y.onEnterOrSpaceKey);
                }

                swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
                swiper.a11y.addElControls($nextEl, wrapperId);
            }

            if ($prevEl && $prevEl.length) {
                swiper.a11y.makeElFocusable($prevEl);

                if ($prevEl[0].tagName !== 'BUTTON') {
                    swiper.a11y.addElRole($prevEl, 'button');
                    $prevEl.on('keydown', swiper.a11y.onEnterOrSpaceKey);
                }

                swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
                swiper.a11y.addElControls($prevEl, wrapperId);
            } // Pagination


            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.$el.on('keydown', classesToSelector(swiper.params.pagination.bulletClass), swiper.a11y.onEnterOrSpaceKey);
            }
        },
        destroy: function destroy() {
            const swiper = this;
            if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) { swiper.a11y.liveRegion.remove() }
            let $nextEl;
            let $prevEl;

            if (swiper.navigation && swiper.navigation.$nextEl) {
                $nextEl = swiper.navigation.$nextEl;
            }

            if (swiper.navigation && swiper.navigation.$prevEl) {
                $prevEl = swiper.navigation.$prevEl;
            }

            if ($nextEl) {
                $nextEl.off('keydown', swiper.a11y.onEnterOrSpaceKey);
            }

            if ($prevEl) {
                $prevEl.off('keydown', swiper.a11y.onEnterOrSpaceKey);
            } // Pagination


            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.$el.off('keydown', classesToSelector(swiper.params.pagination.bulletClass), swiper.a11y.onEnterOrSpaceKey);
            }
        }
    };
    const A11y$1 = {
        name: 'a11y',
        params: {
            a11y: {
                enabled: true,
                notificationClass: 'swiper-notification',
                prevSlideMessage: 'Previous slide',
                nextSlideMessage: 'Next slide',
                firstSlideMessage: 'This is the first slide',
                lastSlideMessage: 'This is the last slide',
                paginationBulletMessage: 'Go to slide {{index}}',
                slideLabelMessage: '{{index}} / {{slidesLength}}',
                containerMessage: null,
                containerRoleDescriptionMessage: null,
                itemRoleDescriptionMessage: null,
                slideRole: 'group'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                a11y: _extends({}, A11y, {
                    liveRegion: $('<span class="' + swiper.params.a11y.notificationClass + '" aria-live="assertive" aria-atomic="true"></span>')
                })
            });
        },
        on: {
            afterInit: function afterInit(swiper) {
                if (!swiper.params.a11y.enabled) { return }
                swiper.a11y.init();
                swiper.a11y.updateNavigation();
            },
            toEdge: function toEdge(swiper) {
                if (!swiper.params.a11y.enabled) { return }
                swiper.a11y.updateNavigation();
            },
            fromEdge: function fromEdge(swiper) {
                if (!swiper.params.a11y.enabled) { return }
                swiper.a11y.updateNavigation();
            },
            paginationUpdate: function paginationUpdate(swiper) {
                if (!swiper.params.a11y.enabled) { return }
                swiper.a11y.updatePagination();
            },
            destroy: function destroy(swiper) {
                if (!swiper.params.a11y.enabled) { return }
                swiper.a11y.destroy();
            }
        }
    };
    var History = {
        init: function init() {
            const swiper = this;
            const window = getWindow();
            if (!swiper.params.history) { return }

            if (!window.history || !window.history.pushState) {
                swiper.params.history.enabled = false;
                swiper.params.hashNavigation.enabled = true;
                return;
            }

            const history = swiper.history;
            history.initialized = true;
            history.paths = History.getPathValues(swiper.params.url);
            if (!history.paths.key && !history.paths.value) { return }
            history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);

            if (!swiper.params.history.replaceState) {
                window.addEventListener('popstate', swiper.history.setHistoryPopState);
            }
        },
        destroy: function destroy() {
            const swiper = this;
            const window = getWindow();

            if (!swiper.params.history.replaceState) {
                window.removeEventListener('popstate', swiper.history.setHistoryPopState);
            }
        },
        setHistoryPopState: function setHistoryPopState() {
            const swiper = this;
            swiper.history.paths = History.getPathValues(swiper.params.url);
            swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
        },
        getPathValues: function getPathValues(urlOverride) {
            const window = getWindow();
            let location;

            if (urlOverride) {
                location = new URL(urlOverride);
            } else {
                location = window.location;
            }

            const pathArray = location.pathname.slice(1).split('/').filter(function (part) {
                return part !== '';
            });
            const total = pathArray.length;
            const key = pathArray[total - 2];
            const value = pathArray[total - 1];
            return {
                key,
                value
            };
        },
        setHistory: function setHistory(key, index) {
            const swiper = this;
            const window = getWindow();
            if (!swiper.history.initialized || !swiper.params.history.enabled) { return }
            let location;

            if (swiper.params.url) {
                location = new URL(swiper.params.url);
            } else {
                location = window.location;
            }

            const slide = swiper.slides.eq(index);
            let value = History.slugify(slide.attr('data-history'));

            if (swiper.params.history.root.length > 0) {
                let root = swiper.params.history.root;
                if (root[root.length - 1] === '/') { root = root.slice(0, root.length - 1) }
                value = root + '/' + key + '/' + value;
            } else if (!location.pathname.includes(key)) {
                value = key + '/' + value;
            }

            const currentState = window.history.state;

            if (currentState && currentState.value === value) {
                return;
            }

            if (swiper.params.history.replaceState) {
                window.history.replaceState({
                    value
                }, null, value);
            } else {
                window.history.pushState({
                    value
                }, null, value);
            }
        },
        slugify: function slugify(text) {
            return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
        },
        scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
            const swiper = this;

            if (value) {
                for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
                    const slide = swiper.slides.eq(i);
                    const slideHistory = History.slugify(slide.attr('data-history'));

                    if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                        const index = slide.index();
                        swiper.slideTo(index, speed, runCallbacks);
                    }
                }
            } else {
                swiper.slideTo(0, speed, runCallbacks);
            }
        }
    };
    const History$1 = {
        name: 'history',
        params: {
            history: {
                enabled: false,
                root: '',
                replaceState: false,
                key: 'slides'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                history: _extends({}, History)
            });
        },
        on: {
            'init': function init(swiper) {
                if (swiper.params.history.enabled) {
                    swiper.history.init();
                }
            },
            'destroy': function destroy(swiper) {
                if (swiper.params.history.enabled) {
                    swiper.history.destroy();
                }
            },
            'transitionEnd _freeModeNoMomentumRelease': function transitionEnd_freeModeNoMomentumRelease(swiper) {
                if (swiper.history.initialized) {
                    swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
                }
            },
            'slideChange': function slideChange(swiper) {
                if (swiper.history.initialized && swiper.params.cssMode) {
                    swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
                }
            }
        }
    };
    const HashNavigation = {
        onHashCange: function onHashCange() {
            const swiper = this;
            const document = getDocument();
            swiper.emit('hashChange');
            const newHash = document.location.hash.replace('#', '');
            const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');

            if (newHash !== activeSlideHash) {
                const newIndex = swiper.$wrapperEl.children('.' + swiper.params.slideClass + '[data-hash="' + newHash + '"]').index();
                if (typeof newIndex === 'undefined') { return }
                swiper.slideTo(newIndex);
            }
        },
        setHash: function setHash() {
            const swiper = this;
            const window = getWindow();
            const document = getDocument();
            if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) { return }

            if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {
                window.history.replaceState(null, null, '#' + swiper.slides.eq(swiper.activeIndex).attr('data-hash') || '');
                swiper.emit('hashSet');
            } else {
                const slide = swiper.slides.eq(swiper.activeIndex);
                const hash = slide.attr('data-hash') || slide.attr('data-history');
                document.location.hash = hash || '';
                swiper.emit('hashSet');
            }
        },
        init: function init() {
            const swiper = this;
            const document = getDocument();
            const window = getWindow();
            if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) { return }
            swiper.hashNavigation.initialized = true;
            const hash = document.location.hash.replace('#', '');

            if (hash) {
                const speed = 0;

                for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
                    const slide = swiper.slides.eq(i);
                    const slideHash = slide.attr('data-hash') || slide.attr('data-history');

                    if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                        const index = slide.index();
                        swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
                    }
                }
            }

            if (swiper.params.hashNavigation.watchState) {
                $(window).on('hashchange', swiper.hashNavigation.onHashCange);
            }
        },
        destroy: function destroy() {
            const swiper = this;
            const window = getWindow();

            if (swiper.params.hashNavigation.watchState) {
                $(window).off('hashchange', swiper.hashNavigation.onHashCange);
            }
        }
    };
    const HashNavigation$1 = {
        name: 'hash-navigation',
        params: {
            hashNavigation: {
                enabled: false,
                replaceState: false,
                watchState: false
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                hashNavigation: _extends({
                    initialized: false
                }, HashNavigation)
            });
        },
        on: {
            'init': function init(swiper) {
                if (swiper.params.hashNavigation.enabled) {
                    swiper.hashNavigation.init();
                }
            },
            'destroy': function destroy(swiper) {
                if (swiper.params.hashNavigation.enabled) {
                    swiper.hashNavigation.destroy();
                }
            },
            'transitionEnd _freeModeNoMomentumRelease': function transitionEnd_freeModeNoMomentumRelease(swiper) {
                if (swiper.hashNavigation.initialized) {
                    swiper.hashNavigation.setHash();
                }
            },
            'slideChange': function slideChange(swiper) {
                if (swiper.hashNavigation.initialized && swiper.params.cssMode) {
                    swiper.hashNavigation.setHash();
                }
            }
        }
    };
    const Autoplay = {
        run: function run() {
            const swiper = this;
            const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
            let delay = swiper.params.autoplay.delay;

            if ($activeSlideEl.attr('data-swiper-autoplay')) {
                delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
            }

            clearTimeout(swiper.autoplay.timeout);
            swiper.autoplay.timeout = nextTick(function () {
                let autoplayResult;

                if (swiper.params.autoplay.reverseDirection) {
                    if (swiper.params.loop) {
                        swiper.loopFix();
                        autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else if (!swiper.isBeginning) {
                        autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else if (!swiper.params.autoplay.stopOnLastSlide) {
                        autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else {
                        swiper.autoplay.stop();
                    }
                } else if (swiper.params.loop) {
                    swiper.loopFix();
                    autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else if (!swiper.isEnd) {
                    autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                    autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else {
                    swiper.autoplay.stop();
                }

                if (swiper.params.cssMode && swiper.autoplay.running) { swiper.autoplay.run() } else if (autoplayResult === false) {
                    swiper.autoplay.run();
                }
            }, delay);
        },
        start: function start() {
            const swiper = this;
            if (typeof swiper.autoplay.timeout !== 'undefined') { return false }
            if (swiper.autoplay.running) { return false }
            swiper.autoplay.running = true;
            swiper.emit('autoplayStart');
            swiper.autoplay.run();
            return true;
        },
        stop: function stop() {
            const swiper = this;
            if (!swiper.autoplay.running) { return false }
            if (typeof swiper.autoplay.timeout === 'undefined') { return false }

            if (swiper.autoplay.timeout) {
                clearTimeout(swiper.autoplay.timeout);
                swiper.autoplay.timeout = undefined;
            }

            swiper.autoplay.running = false;
            swiper.emit('autoplayStop');
            return true;
        },
        pause: function pause(speed) {
            const swiper = this;
            if (!swiper.autoplay.running) { return }
            if (swiper.autoplay.paused) { return }
            if (swiper.autoplay.timeout) { clearTimeout(swiper.autoplay.timeout) }
            swiper.autoplay.paused = true;

            if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
                swiper.autoplay.paused = false;
                swiper.autoplay.run();
            } else {
                ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
                    swiper.$wrapperEl[0].addEventListener(event, swiper.autoplay.onTransitionEnd);
                });
            }
        },
        onVisibilityChange: function onVisibilityChange() {
            const swiper = this;
            const document = getDocument();

            if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
                swiper.autoplay.pause();
            }

            if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
                swiper.autoplay.run();
                swiper.autoplay.paused = false;
            }
        },
        onTransitionEnd: function onTransitionEnd(e) {
            const swiper = this;
            if (!swiper || swiper.destroyed || !swiper.$wrapperEl) { return }
            if (e.target !== swiper.$wrapperEl[0]) { return }
            ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
                swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
            });
            swiper.autoplay.paused = false;

            if (!swiper.autoplay.running) {
                swiper.autoplay.stop();
            } else {
                swiper.autoplay.run();
            }
        },
        onMouseEnter: function onMouseEnter() {
            const swiper = this;

            if (swiper.params.autoplay.disableOnInteraction) {
                swiper.autoplay.stop();
            } else {
                swiper.autoplay.pause();
            }

            ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
                swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
            });
        },
        onMouseLeave: function onMouseLeave() {
            const swiper = this;

            if (swiper.params.autoplay.disableOnInteraction) {
                return;
            }

            swiper.autoplay.paused = false;
            swiper.autoplay.run();
        },
        attachMouseEvents: function attachMouseEvents() {
            const swiper = this;

            if (swiper.params.autoplay.pauseOnMouseEnter) {
                swiper.$el.on('mouseenter', swiper.autoplay.onMouseEnter);
                swiper.$el.on('mouseleave', swiper.autoplay.onMouseLeave);
            }
        },
        detachMouseEvents: function detachMouseEvents() {
            const swiper = this;
            swiper.$el.off('mouseenter', swiper.autoplay.onMouseEnter);
            swiper.$el.off('mouseleave', swiper.autoplay.onMouseLeave);
        }
    };
    const Autoplay$1 = {
        name: 'autoplay',
        params: {
            autoplay: {
                enabled: false,
                delay: 3000,
                waitForTransition: true,
                disableOnInteraction: true,
                stopOnLastSlide: false,
                reverseDirection: false,
                pauseOnMouseEnter: false
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                autoplay: _extends({}, Autoplay, {
                    running: false,
                    paused: false
                })
            });
        },
        on: {
            init: function init(swiper) {
                if (swiper.params.autoplay.enabled) {
                    swiper.autoplay.start();
                    const document = getDocument();
                    document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
                    swiper.autoplay.attachMouseEvents();
                }
            },
            beforeTransitionStart: function beforeTransitionStart(swiper, speed, internal) {
                if (swiper.autoplay.running) {
                    if (internal || !swiper.params.autoplay.disableOnInteraction) {
                        swiper.autoplay.pause(speed);
                    } else {
                        swiper.autoplay.stop();
                    }
                }
            },
            sliderFirstMove: function sliderFirstMove(swiper) {
                if (swiper.autoplay.running) {
                    if (swiper.params.autoplay.disableOnInteraction) {
                        swiper.autoplay.stop();
                    } else {
                        swiper.autoplay.pause();
                    }
                }
            },
            touchEnd: function touchEnd(swiper) {
                if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
                    swiper.autoplay.run();
                }
            },
            destroy: function destroy(swiper) {
                swiper.autoplay.detachMouseEvents();

                if (swiper.autoplay.running) {
                    swiper.autoplay.stop();
                }

                const document = getDocument();
                document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
            }
        }
    };
    const Fade = {
        setTranslate: function setTranslate() {
            const swiper = this;
            const slides = swiper.slides;

            for (let i = 0; i < slides.length; i += 1) {
                const $slideEl = swiper.slides.eq(i);
                const offset = $slideEl[0].swiperSlideOffset;
                let tx = -offset;
                if (!swiper.params.virtualTranslate) { tx -= swiper.translate }
                let ty = 0;

                if (!swiper.isHorizontal()) {
                    ty = tx;
                    tx = 0;
                }

                const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
                $slideEl.css({
                    opacity: slideopacity
                }).transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');
            }
        },
        setTransition: function setTransition(duration) {
            const swiper = this;
            const slides = swiper.slides;
            const $wrapperEl = swiper.$wrapperEl;
            slides.transition(duration);

            if (swiper.params.virtualTranslate && duration !== 0) {
                let eventTriggered = false;
                slides.transitionEnd(function () {
                    if (eventTriggered) { return }
                    if (!swiper || swiper.destroyed) { return }
                    eventTriggered = true;
                    swiper.animating = false;
                    const triggerEvents = ['webkitTransitionEnd', 'transitionend'];

                    for (let i = 0; i < triggerEvents.length; i += 1) {
                        $wrapperEl.trigger(triggerEvents[i]);
                    }
                });
            }
        }
    };
    const EffectFade = {
        name: 'effect-fade',
        params: {
            fadeEffect: {
                crossFade: false
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                fadeEffect: _extends({}, Fade)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (swiper.params.effect !== 'fade') { return }
                swiper.classNames.push(swiper.params.containerModifierClass + 'fade');
                const overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: true
                };
                extend(swiper.params, overwriteParams);
                extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate(swiper) {
                if (swiper.params.effect !== 'fade') { return }
                swiper.fadeEffect.setTranslate();
            },
            setTransition: function setTransition(swiper, duration) {
                if (swiper.params.effect !== 'fade') { return }
                swiper.fadeEffect.setTransition(duration);
            }
        }
    };
    const Cube = {
        setTranslate: function setTranslate() {
            const swiper = this;
            const $el = swiper.$el;
            const $wrapperEl = swiper.$wrapperEl;
            const slides = swiper.slides;
            const swiperWidth = swiper.width;
            const swiperHeight = swiper.height;
            const rtl = swiper.rtlTranslate;
            const swiperSize = swiper.size;
            const browser = swiper.browser;
            const params = swiper.params.cubeEffect;
            const isHorizontal = swiper.isHorizontal();
            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            let wrapperRotate = 0;
            let $cubeShadowEl;

            if (params.shadow) {
                if (isHorizontal) {
                    $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');

                    if ($cubeShadowEl.length === 0) {
                        $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
                        $wrapperEl.append($cubeShadowEl);
                    }

                    $cubeShadowEl.css({
                        height: swiperwidth + 'px'
                    });
                } else {
                    $cubeShadowEl = $el.find('.swiper-cube-shadow');

                    if ($cubeShadowEl.length === 0) {
                        $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
                        $el.append($cubeShadowEl);
                    }
                }
            }

            for (let i = 0; i < slides.length; i += 1) {
                const $slideEl = slides.eq(i);
                let slideIndex = i;

                if (isVirtual) {
                    slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
                }

                let slideAngle = slideIndex * 90;
                let round = Math.floor(slideAngle / 360);

                if (rtl) {
                    slideAngle = -slideAngle;
                    round = Math.floor(-slideAngle / 360);
                }

                const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                let tx = 0;
                let ty = 0;
                let tz = 0;

                if (slideIndex % 4 === 0) {
                    tx = -round * 4 * swiperSize;
                    tz = 0;
                } else if ((slideIndex - 1) % 4 === 0) {
                    tx = 0;
                    tz = -round * 4 * swiperSize;
                } else if ((slideIndex - 2) % 4 === 0) {
                    tx = swiperSize + round * 4 * swiperSize;
                    tz = swiperSize;
                } else if ((slideIndex - 3) % 4 === 0) {
                    tx = -swiperSize;
                    tz = 3 * swiperSize + swiperSize * 4 * round;
                }

                if (rtl) {
                    tx = -tx;
                }

                if (!isHorizontal) {
                    ty = tx;
                    tx = 0;
                }

                const transform = 'rotateX(' + (isHorizontal ? 0 : -slideAngle) + 'deg) rotateY(' + (isHorizontal ? slideAngle : 0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';

                if (progress <= 1 && progress > -1) {
                    wrapperRotate = slideIndex * 90 + progress * 90;
                    if (rtl) { wrapperRotate = -slideIndex * 90 - progress * 90 }
                }

                $slideEl.transform(transform);

                if (params.slideShadows) {
                    // Set shadows
                    let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                    if (shadowBefore.length === 0) {
                        shadowBefore = $('<div class="swiper-slide-shadow-' + (isHorizontal ? 'left' : 'top') + '"></div>');
                        $slideEl.append(shadowBefore);
                    }

                    if (shadowAfter.length === 0) {
                        shadowAfter = $('<div class="swiper-slide-shadow-' + (isHorizontal ? 'right' : 'bottom') + '"></div>');
                        $slideEl.append(shadowAfter);
                    }

                    if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0) }
                    if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0) }
                }
            }

            $wrapperEl.css({
                'webkitTransformOrigin': '50% 50% -' + swipersize / 2 + 'px',
                'mozTransformOrigin': '50% 50% -' + swipersize / 2 + 'px',
                'msTransformOrigin': '50% 50% -' + swipersize / 2 + 'px',
                'transformOrigin': '50% 50% -' + swipersize / 2 + 'px'
            });

            if (params.shadow) {
                if (isHorizontal) {
                    $cubeShadowEl.transform('translate3d(0px, ' + (swiperWidth / 2 + params.shadowOffset) + 'px, ' + -swiperWidth / 2 + 'px) rotateX(90deg) rotateZ(0deg) scale(' + params.shadowScale + ')');
                } else {
                    const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
                    const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
                    const scale1 = params.shadowScale;
                    const scale2 = params.shadowScale / multiplier;
                    const offset = params.shadowOffset;
                    $cubeShadowEl.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (swiperHeight / 2 + offset) + 'px, ' + -swiperHeight / 2 / scale2 + 'px) rotateX(-90deg)');
                }
            }

            const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;
            $wrapperEl.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (swiper.isHorizontal() ? 0 : wrapperRotate) + 'deg) rotateY(' + (swiper.isHorizontal() ? -wrapperRotate : 0) + 'deg)');
        },
        setTransition: function setTransition(duration) {
            const swiper = this;
            const $el = swiper.$el;
            const slides = swiper.slides;
            slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

            if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
                $el.find('.swiper-cube-shadow').transition(duration);
            }
        }
    };
    const EffectCube = {
        name: 'effect-cube',
        params: {
            cubeEffect: {
                slideShadows: true,
                shadow: true,
                shadowOffset: 20,
                shadowScale: 0.94
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                cubeEffect: _extends({}, Cube)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (swiper.params.effect !== 'cube') { return }
                swiper.classNames.push(swiper.params.containerModifierClass + 'cube');
                swiper.classNames.push(swiper.params.containerModifierClass + '3d');
                const overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    resistanceRatio: 0,
                    spaceBetween: 0,
                    centeredSlides: false,
                    virtualTranslate: true
                };
                extend(swiper.params, overwriteParams);
                extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate(swiper) {
                if (swiper.params.effect !== 'cube') { return }
                swiper.cubeEffect.setTranslate();
            },
            setTransition: function setTransition(swiper, duration) {
                if (swiper.params.effect !== 'cube') { return }
                swiper.cubeEffect.setTransition(duration);
            }
        }
    };
    const Flip = {
        setTranslate: function setTranslate() {
            const swiper = this;
            const slides = swiper.slides;
            const rtl = swiper.rtlTranslate;

            for (let i = 0; i < slides.length; i += 1) {
                const $slideEl = slides.eq(i);
                let progress = $slideEl[0].progress;

                if (swiper.params.flipEffect.limitRotation) {
                    progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                }

                const offset = $slideEl[0].swiperSlideOffset;
                const rotate = -180 * progress;
                let rotateY = rotate;
                let rotateX = 0;
                let tx = -offset;
                let ty = 0;

                if (!swiper.isHorizontal()) {
                    ty = tx;
                    tx = 0;
                    rotateX = -rotateY;
                    rotateY = 0;
                } else if (rtl) {
                    rotateY = -rotateY;
                }

                $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

                if (swiper.params.flipEffect.slideShadows) {
                    // Set shadows
                    let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                    if (shadowBefore.length === 0) {
                        shadowBefore = $('<div class="swiper-slide-shadow-' + (swiper.isHorizontal() ? 'left' : 'top') + '"></div>');
                        $slideEl.append(shadowBefore);
                    }

                    if (shadowAfter.length === 0) {
                        shadowAfter = $('<div class="swiper-slide-shadow-' + (swiper.isHorizontal() ? 'right' : 'bottom') + '"></div>');
                        $slideEl.append(shadowAfter);
                    }

                    if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0) }
                    if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0) }
                }

                $slideEl.transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px) rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)');
            }
        },
        setTransition: function setTransition(duration) {
            const swiper = this;
            const slides = swiper.slides;
            const activeIndex = swiper.activeIndex;
            const $wrapperEl = swiper.$wrapperEl;
            slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

            if (swiper.params.virtualTranslate && duration !== 0) {
                let eventTriggered = false; // eslint-disable-next-line

                slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
                    if (eventTriggered) { return }
                    if (!swiper || swiper.destroyed) { return } // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

                    eventTriggered = true;
                    swiper.animating = false;
                    const triggerEvents = ['webkitTransitionEnd', 'transitionend'];

                    for (let i = 0; i < triggerEvents.length; i += 1) {
                        $wrapperEl.trigger(triggerEvents[i]);
                    }
                });
            }
        }
    };
    const EffectFlip = {
        name: 'effect-flip',
        params: {
            flipEffect: {
                slideShadows: true,
                limitRotation: true
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                flipEffect: _extends({}, Flip)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (swiper.params.effect !== 'flip') { return }
                swiper.classNames.push(swiper.params.containerModifierClass + 'flip');
                swiper.classNames.push(swiper.params.containerModifierClass + '3d');
                const overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: true
                };
                extend(swiper.params, overwriteParams);
                extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate(swiper) {
                if (swiper.params.effect !== 'flip') { return }
                swiper.flipEffect.setTranslate();
            },
            setTransition: function setTransition(swiper, duration) {
                if (swiper.params.effect !== 'flip') { return }
                swiper.flipEffect.setTransition(duration);
            }
        }
    };
    const Coverflow = {
        setTranslate: function setTranslate() {
            const swiper = this;
            const swiperWidth = swiper.width;
            const swiperHeight = swiper.height;
            const slides = swiper.slides;
            const slidesSizesGrid = swiper.slidesSizesGrid;
            const params = swiper.params.coverflowEffect;
            const isHorizontal = swiper.isHorizontal();
            const transform = swiper.translate;
            const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
            const rotate = isHorizontal ? params.rotate : -params.rotate;
            const translate = params.depth; // Each slide offset from center

            for (let i = 0, length = slides.length; i < length; i += 1) {
                const $slideEl = slides.eq(i);
                const slideSize = slidesSizesGrid[i];
                const slideOffset = $slideEl[0].swiperSlideOffset;
                const offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;
                let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
                let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0

                let translateZ = -translate * Math.abs(offsetMultiplier);
                let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders

                if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
                    stretch = parseFloat(params.stretch) / 100 * slideSize;
                }

                let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
                let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
                let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values

                if (Math.abs(translateX) < 0.001) { translateX = 0 }
                if (Math.abs(translateY) < 0.001) { translateY = 0 }
                if (Math.abs(translateZ) < 0.001) { translateZ = 0 }
                if (Math.abs(rotateY) < 0.001) { rotateY = 0 }
                if (Math.abs(rotateX) < 0.001) { rotateX = 0 }
                if (Math.abs(scale) < 0.001) { scale = 0 }
                const slideTransform = 'translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg) scale(' + scale + ')';
                $slideEl.transform(slideTransform);
                $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;

                if (params.slideShadows) {
                    // Set shadows
                    let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                    if ($shadowBeforeEl.length === 0) {
                        $shadowBeforeEl = $('<div class="swiper-slide-shadow-' + (isHorizontal ? 'left' : 'top') + '"></div>');
                        $slideEl.append($shadowBeforeEl);
                    }

                    if ($shadowAfterEl.length === 0) {
                        $shadowAfterEl = $('<div class="swiper-slide-shadow-' + (isHorizontal ? 'right' : 'bottom') + '"></div>');
                        $slideEl.append($shadowAfterEl);
                    }

                    if ($shadowBeforeEl.length) { $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0 }
                    if ($shadowAfterEl.length) { $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0 }
                }
            }
        },
        setTransition: function setTransition(duration) {
            const swiper = this;
            swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
        }
    };
    const EffectCoverflow = {
        name: 'effect-coverflow',
        params: {
            coverflowEffect: {
                rotate: 50,
                stretch: 0,
                depth: 100,
                scale: 1,
                modifier: 1,
                slideShadows: true
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                coverflowEffect: _extends({}, Coverflow)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                if (swiper.params.effect !== 'coverflow') { return }
                swiper.classNames.push(swiper.params.containerModifierClass + 'coverflow');
                swiper.classNames.push(swiper.params.containerModifierClass + '3d');
                swiper.params.watchSlidesProgress = true;
                swiper.originalParams.watchSlidesProgress = true;
            },
            setTranslate: function setTranslate(swiper) {
                if (swiper.params.effect !== 'coverflow') { return }
                swiper.coverflowEffect.setTranslate();
            },
            setTransition: function setTransition(swiper, duration) {
                if (swiper.params.effect !== 'coverflow') { return }
                swiper.coverflowEffect.setTransition(duration);
            }
        }
    };
    const Thumbs = {
        init: function init() {
            const swiper = this;
            const thumbsParams = swiper.params.thumbs;
            if (swiper.thumbs.initialized) { return false }
            swiper.thumbs.initialized = true;
            const SwiperClass = swiper.constructor;

            if (thumbsParams.swiper instanceof SwiperClass) {
                swiper.thumbs.swiper = thumbsParams.swiper;
                extend(swiper.thumbs.swiper.originalParams, {
                    watchSlidesProgress: true,
                    slideToClickedSlide: false
                });
                extend(swiper.thumbs.swiper.params, {
                    watchSlidesProgress: true,
                    slideToClickedSlide: false
                });
            } else if (isObject(thumbsParams.swiper)) {
                swiper.thumbs.swiper = new SwiperClass(extend({}, thumbsParams.swiper, {
                    watchSlidesVisibility: true,
                    watchSlidesProgress: true,
                    slideToClickedSlide: false
                }));
                swiper.thumbs.swiperCreated = true;
            }

            swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
            swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
            return true;
        },
        onThumbClick: function onThumbClick() {
            const swiper = this;
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper) { return }
            const clickedIndex = thumbsSwiper.clickedIndex;
            const clickedSlide = thumbsSwiper.clickedSlide;
            if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) { return }
            if (typeof clickedIndex === 'undefined' || clickedIndex === null) { return }
            let slideToIndex;

            if (thumbsSwiper.params.loop) {
                slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
            } else {
                slideToIndex = clickedIndex;
            }

            if (swiper.params.loop) {
                let currentIndex = swiper.activeIndex;

                if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
                    swiper.loopFix(); // eslint-disable-next-line

                    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
                    currentIndex = swiper.activeIndex;
                }

                const prevIndex = swiper.slides.eq(currentIndex).prevAll('[data-swiper-slide-index="' + slideToIndex + '"]').eq(0).index();
                const nextIndex = swiper.slides.eq(currentIndex).nextAll('[data-swiper-slide-index="' + slideToIndex + '"]').eq(0).index();
                if (typeof prevIndex === 'undefined') { slideToIndex = nextIndex } else if (typeof nextIndex === 'undefined') { slideToIndex = prevIndex } else if (nextIndex - currentIndex < currentIndex - prevIndex) { slideToIndex = nextIndex } else { slideToIndex = prevIndex }
            }

            swiper.slideTo(slideToIndex);
        },
        update: function update(initial) {
            const swiper = this;
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper) { return }
            const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
            const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
            const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;

            if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
                let currentThumbsIndex = thumbsSwiper.activeIndex;
                let newThumbsIndex;
                let direction;

                if (thumbsSwiper.params.loop) {
                    if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
                        thumbsSwiper.loopFix(); // eslint-disable-next-line

                        thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
                        currentThumbsIndex = thumbsSwiper.activeIndex;
                    } // Find actual thumbs index to slide to


                    const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll('[data-swiper-slide-index="' + swiper.realIndex + '"]').eq(0).index();
                    const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll('[data-swiper-slide-index="' + swiper.realIndex + '"]').eq(0).index();

                    if (typeof prevThumbsIndex === 'undefined') {
                        newThumbsIndex = nextThumbsIndex;
                    } else if (typeof nextThumbsIndex === 'undefined') {
                        newThumbsIndex = prevThumbsIndex;
                    } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {
                        newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;
                    } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {
                        newThumbsIndex = nextThumbsIndex;
                    } else {
                        newThumbsIndex = prevThumbsIndex;
                    }

                    direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
                } else {
                    newThumbsIndex = swiper.realIndex;
                    direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
                }

                if (useOffset) {
                    newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
                }

                if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
                    if (thumbsSwiper.params.centeredSlides) {
                        if (newThumbsIndex > currentThumbsIndex) {
                            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
                        } else {
                            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
                        }
                    } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {}

                    thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
                }
            } // Activate thumbs


            let thumbsToActivate = 1;
            const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

            if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
                thumbsToActivate = swiper.params.slidesPerView;
            }

            if (!swiper.params.thumbs.multipleActiveThumbs) {
                thumbsToActivate = 1;
            }

            thumbsToActivate = Math.floor(thumbsToActivate);
            thumbsSwiper.slides.removeClass(thumbActiveClass);

            if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
                for (let i = 0; i < thumbsToActivate; i += 1) {
                    thumbsSwiper.$wrapperEl.children('[data-swiper-slide-index="' + (swiper.realIndex + i) + '"]').addClass(thumbActiveClass);
                }
            } else {
                for (let _i = 0; _i < thumbsToActivate; _i += 1) {
                    thumbsSwiper.slides.eq(swiper.realIndex + _i).addClass(thumbActiveClass);
                }
            }
        }
    };
    const Thumbs$1 = {
        name: 'thumbs',
        params: {
            thumbs: {
                swiper: null,
                multipleActiveThumbs: true,
                autoScrollOffset: 0,
                slideThumbActiveClass: 'swiper-slide-thumb-active',
                thumbsContainerClass: 'swiper-container-thumbs'
            }
        },
        create: function create() {
            const swiper = this;
            bindModuleMethods(swiper, {
                thumbs: _extends({
                    swiper: null,
                    initialized: false
                }, Thumbs)
            });
        },
        on: {
            beforeInit: function beforeInit(swiper) {
                const thumbs = swiper.params.thumbs;
                if (!thumbs || !thumbs.swiper) { return }
                swiper.thumbs.init();
                swiper.thumbs.update(true);
            },
            slideChange: function slideChange(swiper) {
                if (!swiper.thumbs.swiper) { return }
                swiper.thumbs.update();
            },
            update: function update(swiper) {
                if (!swiper.thumbs.swiper) { return }
                swiper.thumbs.update();
            },
            resize: function resize(swiper) {
                if (!swiper.thumbs.swiper) { return }
                swiper.thumbs.update();
            },
            observerUpdate: function observerUpdate(swiper) {
                if (!swiper.thumbs.swiper) { return }
                swiper.thumbs.update();
            },
            setTransition: function setTransition(swiper, duration) {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper) { return }
                thumbsSwiper.setTransition(duration);
            },
            beforeDestroy: function beforeDestroy(swiper) {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper) { return }

                if (swiper.thumbs.swiperCreated && thumbsSwiper) {
                    thumbsSwiper.destroy();
                }
            }
        }
    }; // Swiper Class

    const components = [Virtual$1, Keyboard$1, Mousewheel$1, Navigation$1, Pagination$1, Scrollbar$1, Parallax$1, Zoom$1, Lazy$1, Controller$1, A11y$1, History$1, HashNavigation$1, Autoplay$1, EffectFade, EffectCube, EffectFlip, EffectCoverflow, Thumbs$1];
    Swiper.use(components);
    return Swiper;
});

const swiper = new Swiper('.swiper-container', {
    loop: true,
    pagination: {
        el: '.swiper-pagination',
        clickable: true
    },
    navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
    }
});

const initCustomSelect = function initCustomSelect(el) {
    const $selectNative = el.querySelector('.select-native');
    const $selectCustom = el.querySelector('.select-custom');
    const $selectCustomTrigger = $selectCustom.querySelector('.select-custom__trigger');
    const $selectCustomOptions = $selectCustom.querySelector('.select-custom__options');
    const optionsCount = $selectCustomOptions.children.length;
    let optionSelected = '';

    const watchClickOutside = function watchClickOutside(e) {
        const didClickedOutside = !$selectCustom.contains(event.target);

        if (didClickedOutside) {
            closeSelectCustom();
        }
    };

    const openSelectCustom = function openSelectCustom() {
        $selectCustom.classList.add('select-custom--active');
        $selectCustom.setAttribute('aria-hidden', false);

        if (optionSelected) {}

        document.addEventListener('click', watchClickOutside);
    };

    var closeSelectCustom = function closeSelectCustom() {
        $selectCustom.classList.remove('select-custom--active');
        $selectCustom.setAttribute('aria-hidden', true);
        document.removeEventListener('click', watchClickOutside);
    };

    const updateSelectOption = function updateSelectOption(value) {
        const prevValue = optionSelected;
        const $prevOption = $selectCustomOptions.querySelector('[data-value="'.concat(prevValue, '"'));
        const $option = $selectCustomOptions.querySelector('[data-value="'.concat(value, '"'));

        if ($prevOption) {
            $prevOption.classList.remove('select-custom__option--active');
        }

        if ($option) {
            $option.classList.add('select-custom__option--active');
        }

        $selectNative.value = value;
        $selectCustomTrigger.textContent = $option.textContent;
        optionSelected = value;
    };

    $selectCustomTrigger.addEventListener('click', function (e) {
        const isSelectClosed = !$selectCustom.classList.contains('select-custom--active');
        isSelectClosed ? openSelectCustom() : closeSelectCustom();
    });
    $selectNative.addEventListener('change', function (e) {
        updateCustomSelectChecked(e.target.value);
    });
    $selectCustomOptions.addEventListener('click', function (e) {
        if (e.target.dataset.value) {
            updateSelectOption(e.target.dataset.value);
        }

        closeSelectCustom();
    });
};

const selectTask = document.getElementById('selectTask');
const selectDeadline = document.getElementById('selectDeadline');
initCustomSelect(selectTask);
initCustomSelect(selectDeadline);
// # sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImdsb2JhbFRoaXMiLCJzZWxmIiwiU3dpcGVyIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJpc09iamVjdCQxIiwib2JqIiwiY29uc3RydWN0b3IiLCJleHRlbmQkMSIsInNyYyIsImtleXMiLCJmb3JFYWNoIiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsImRvYyIsImRvY3VtZW50Iiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX19wcm90b19fIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJ0b1N0cmluZyIsImUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiYXJncyIsIkNsYXNzIiwiYSIsInB1c2giLCJGdW5jdGlvbiIsImJpbmQiLCJpbnN0YW5jZSIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiZm4iLCJpbmRleE9mIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJ2YWx1ZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIm1ha2VSZWFjdGl2ZSIsInByb3RvIiwiRG9tNyIsIl9BcnJheSIsIml0ZW1zIiwiX3RoaXMiLCJjb25jYXQiLCJBcnJheSIsImFycmF5RmxhdCIsImFyciIsInJlcyIsImVsIiwiaXNBcnJheSIsImFycmF5RmlsdGVyIiwiZmlsdGVyIiwiYXJyYXlVbmlxdWUiLCJ1bmlxdWVBcnJheSIsInFzYSIsInNlbGVjdG9yIiwiY29udGV4dCIsIiQiLCJodG1sIiwidHJpbSIsInRvQ3JlYXRlIiwidGVtcFBhcmVudCIsImlubmVySFRNTCIsIm5vZGVUeXBlIiwiYWRkQ2xhc3MiLCJfbGVuIiwiY2xhc3NlcyIsIl9rZXkiLCJjbGFzc05hbWVzIiwibWFwIiwiYyIsInNwbGl0IiwiX2VsJGNsYXNzTGlzdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwiX2xlbjIiLCJfa2V5MiIsIl9lbCRjbGFzc0xpc3QyIiwicmVtb3ZlIiwidG9nZ2xlQ2xhc3MiLCJfbGVuMyIsIl9rZXkzIiwiY2xhc3NOYW1lIiwidG9nZ2xlIiwiaGFzQ2xhc3MiLCJfbGVuNCIsIl9rZXk0IiwiY29udGFpbnMiLCJhdHRyIiwiYXR0cnMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uJDEiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsIm9uIiwiX2xlbjUiLCJfa2V5NSIsImV2ZW50VHlwZSIsInRhcmdldFNlbGVjdG9yIiwibGlzdGVuZXIiLCJjYXB0dXJlIiwiaGFuZGxlTGl2ZUV2ZW50IiwiZXZlbnREYXRhIiwiZG9tN0V2ZW50RGF0YSIsInVuc2hpZnQiLCJpcyIsIl9wYXJlbnRzIiwicGFyZW50cyIsImsiLCJoYW5kbGVFdmVudCIsImV2ZW50cyIsImoiLCJldmVudCIsImRvbTdMaXN0ZW5lcnMiLCJwcm94eUxpc3RlbmVyIiwiX2V2ZW50IiwiZG9tN0xpdmVMaXN0ZW5lcnMiLCJvZmYiLCJfbGVuNiIsIl9rZXk2IiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwic3BsaWNlIiwiZG9tN3Byb3h5IiwidHJpZ2dlciIsIl9sZW45IiwiX2tleTkiLCJldnQiLCJkZXRhaWwiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRhdGEiLCJkYXRhSW5kZXgiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZCQxIiwiZG9tIiwiZmlyZUNhbGxCYWNrIiwib3V0ZXJXaWR0aCIsImluY2x1ZGVNYXJnaW5zIiwiX3N0eWxlcyIsInN0eWxlcyIsIm9mZnNldFdpZHRoIiwicGFyc2VGbG9hdCIsIm91dGVySGVpZ2h0IiwiX3N0eWxlczIiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImNzcyIsIl9wcm9wIiwiZWFjaCIsImluZGV4IiwicmVzdWx0IiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVxIiwicmV0dXJuSW5kZXgiLCJhcHBlbmQiLCJuZXdDaGlsZCIsInRlbXBEaXYiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHRBbGwiLCJuZXh0RWxzIiwiX25leHQiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwiX3ByZXYiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiX3BhcmVudCIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInJlbW92ZUNoaWxkIiwiTWV0aG9kcyIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwibWV0aG9kTmFtZSIsImRlbGV0ZVByb3BzIiwib2JqZWN0IiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsImdldENvbXB1dGVkU3R5bGUkMSIsImN1cnJlbnRTdHlsZSIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIndlYmtpdFRyYW5zZm9ybSIsInJlcGxhY2UiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJtNDEiLCJtNDIiLCJpc09iamVjdCIsInNsaWNlIiwiZXh0ZW5kIiwidG8iLCJub0V4dGVuZCIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fc3dpcGVyX18iLCJiaW5kTW9kdWxlTWV0aG9kcyIsInN1YktleSIsImNsYXNzZXNUb1NlbGVjdG9yIiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsIiRjb250YWluZXIiLCJwYXJhbXMiLCJjcmVhdGVFbGVtZW50cyIsImNoZWNrUHJvcHMiLCJhdXRvIiwiZWxlbWVudCIsInN1cHBvcnQiLCJjYWxjU3VwcG9ydCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm9ic2VydmVyIiwiY2hlY2tPYnNlcnZlciIsInBhc3NpdmVMaXN0ZW5lciIsImNoZWNrUGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdlc3R1cmVzIiwiY2hlY2tHZXN0dXJlcyIsImdldFN1cHBvcnQiLCJkZXZpY2UiLCJjYWxjRGV2aWNlIiwiX3RlbXAiLCJfcmVmIiwicGxhdGZvcm0iLCJ1YSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsImlQYWRTY3JlZW5zIiwib3MiLCJnZXREZXZpY2UiLCJvdmVycmlkZXMiLCJicm93c2VyIiwiY2FsY0Jyb3dzZXIiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiaXNFZGdlIiwiaXNXZWJWaWV3IiwidGVzdCIsImdldEJyb3dzZXIiLCJzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJSZXNpemUiLCJuYW1lIiwic3dpcGVyIiwicmVzaXplIiwiY3JlYXRlT2JzZXJ2ZXIiLCJkZXN0cm95ZWQiLCJpbml0aWFsaXplZCIsImVudHJpZXMiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwicmVzaXplSGFuZGxlciIsIm9ic2VydmUiLCJyZW1vdmVPYnNlcnZlciIsInVub2JzZXJ2ZSIsImVtaXQiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJpbml0IiwicmVzaXplT2JzZXJ2ZXIiLCJkZXN0cm95IiwiT2JzZXJ2ZXIiLCJhdHRhY2giLCJvcHRpb25zIiwiT2JzZXJ2ZXJGdW5jIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZVBhcmVudHMiLCJjb250YWluZXJQYXJlbnRzIiwiJGVsIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCIkd3JhcHBlckVsIiwiZGlzY29ubmVjdCIsIk9ic2VydmVyJDEiLCJtb2R1bGFyIiwidXNlUGFyYW1zIiwiaW5zdGFuY2VQYXJhbXMiLCJtb2R1bGVzIiwibW9kdWxlTmFtZSIsInVzZU1vZHVsZXMiLCJtb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1zIiwibW9kdWxlRXZlbnROYW1lIiwiZXZlbnRzRW1pdHRlciIsInByaW9yaXR5IiwibWV0aG9kIiwiZXZlbnRzTGlzdGVuZXJzIiwib25jZSIsIm9uY2VIYW5kbGVyIiwiX19lbWl0dGVyUHJveHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsImV2ZW50SGFuZGxlciIsImV2ZW50c0FycmF5IiwidXBkYXRlU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInBhcnNlSW50IiwiTnVtYmVyIiwiaXNOYU4iLCJzaXplIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJwcm9wZXJ0eSIsImdldERpcmVjdGlvblByb3BlcnR5VmFsdWUiLCJub2RlIiwibGFiZWwiLCJzd2lwZXJTaXplIiwicnRsIiwicnRsVHJhbnNsYXRlIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsInNsaWRlc051bWJlckV2ZW5Ub1Jvd3MiLCJzbGlkZXNQZXJDb2x1bW4iLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJtYXgiLCJzbGlkZVNpemUiLCJzbGlkZXNQZXJSb3ciLCJudW1GdWxsQ29sdW1ucyIsInNsaWRlIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93Iiwic2xpZGVzUGVyR3JvdXAiLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIm1pbiIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwiX3NsaWRlJCIsInN3aXBlclNsaWRlU2l6ZSIsImNlbnRlcmVkU2xpZGVzIiwiYWJzIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwibmV3U2xpZGVzR3JpZCIsImVmZmVjdCIsInNldFdyYXBwZXJTaXplIiwiXyR3cmFwcGVyRWwkY3NzIiwiXyR3cmFwcGVyRWwkY3NzMiIsIl9pIiwic2xpZGVzR3JpZEl0ZW0iLCJfaTIiLCJfc2xpZGVzR3JpZEl0ZW0iLCJfc2xpZGVzJGZpbHRlciRjc3MiLCJfIiwic2xpZGVJbmRleCIsImNzc01vZGUiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiX2FsbFNsaWRlc1NpemUiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVBdXRvSGVpZ2h0Iiwic3BlZWQiLCJhY3RpdmVTbGlkZXMiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwidmlzaWJsZVNsaWRlcyIsImFjdGl2ZUluZGV4Iiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsImF1dG9IZWlnaHQiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJpc1Zpc2libGUiLCJwcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJyZWFsSW5kZXgiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsInNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlRHVwbGljYXRlUHJldkNsYXNzIiwiYWN0aXZlU2xpZGUiLCJsb29wIiwic2xpZGVEdXBsaWNhdGVDbGFzcyIsIm5leHRTbGlkZSIsInByZXZTbGlkZSIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsInNraXAiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInVwZGF0ZSIsImdldFN3aXBlclRyYW5zbGF0ZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwid3JhcHBlckVsIiwieCIsInkiLCJ6IiwicHJldmlvdXNUcmFuc2xhdGUiLCJuZXdQcm9ncmVzcyIsInRyYW5zbGF0ZVRvIiwicnVuQ2FsbGJhY2tzIiwidHJhbnNsYXRlQm91bmRzIiwiaW50ZXJuYWwiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJuZXdUcmFuc2xhdGUiLCJpc0giLCJzY3JvbGxUbyIsIl93cmFwcGVyRWwkc2Nyb2xsVG8iLCJiZWhhdmlvciIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25TdGFydCIsImRpcmVjdGlvbiIsImRpciIsInNsaWRlVG8iLCJpbml0aWFsIiwiRXJyb3IiLCJpbmRleEFzTnVtYmVyIiwiaXNWYWxpZE51bWJlciIsImlzRmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHaXJkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInQiLCJzY3JvbGxXaWR0aCIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsImxvb3BlZFNsaWRlcyIsInNsaWRlTmV4dCIsImluY3JlbWVudCIsImxvb3BQcmV2ZW50c1NsaWRlIiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2SW5kZXgiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJ0aHJlc2hvbGQiLCJjdXJyZW50U25hcCIsIm5leHRTbmFwIiwiX2N1cnJlbnRTbmFwIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJzbGlkZVRvSW5kZXgiLCJsb29wQ3JlYXRlIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImJsYW5rU2xpZGVzTnVtIiwiYmxhbmtOb2RlIiwic2xpZGVCbGFua0NsYXNzIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwiY2xvbmVOb2RlIiwic25hcFRyYW5zbGF0ZSIsImRpZmYiLCJzbGlkZUNoYW5nZWQiLCJfc2xpZGVDaGFuZ2VkIiwibG9vcERlc3Ryb3kiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwic2ltdWxhdGVUb3VjaCIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiZ3JhYkN1cnNvciIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlQWxsU2xpZGVzIiwibWFuaXB1bGF0aW9uIiwib25Ub3VjaFN0YXJ0IiwidG91Y2hFdmVudHNEYXRhIiwidG91Y2hlcyIsIm9yaWdpbmFsRXZlbnQiLCIkdGFyZ2V0RWwiLCJ0b3VjaEV2ZW50c1RhcmdldCIsImlzVG91Y2hFdmVudCIsInR5cGUiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwic2hhZG93Um9vdCIsInBhdGgiLCJub1N3aXBpbmciLCJub1N3aXBpbmdTZWxlY3RvciIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsImN1cnJlbnRZIiwicGFnZVkiLCJzdGFydFgiLCJzdGFydFkiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJpT1NFZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJpT1NFZGdlU3dpcGVUaHJlc2hvbGQiLCJpbm5lcldpZHRoIiwicHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwic3dpcGVEaXJlY3Rpb24iLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb3JtRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwicG93IiwidG91Y2hBbmdsZSIsImF0YW4yIiwiUEkiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJ0b3VjaFJhdGlvIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJmcmVlTW9kZSIsInZlbG9jaXRpZXMiLCJwb3NpdGlvbiIsInRpbWUiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJsYXN0Q2xpY2tUaW1lIiwiY3VycmVudFBvcyIsImZyZWVNb2RlTW9tZW50dW0iLCJsYXN0TW92ZUV2ZW50IiwicG9wIiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwidmVsb2NpdHkiLCJmcmVlTW9kZU1pbmltdW1WZWxvY2l0eSIsImZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvIiwibW9tZW50dW1EdXJhdGlvbiIsImZyZWVNb2RlTW9tZW50dW1SYXRpbyIsIm1vbWVudHVtRGlzdGFuY2UiLCJuZXdQb3NpdGlvbiIsImRvQm91bmNlIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsImJvdW5jZUFtb3VudCIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbyIsIm5lZWRzTG9vcEZpeCIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2UiLCJmcmVlTW9kZVN0aWNreSIsIm1vdmVEaXN0YW5jZSIsImN1cnJlbnRTbGlkZVNpemUiLCJsb25nU3dpcGVzTXMiLCJzdG9wSW5kZXgiLCJncm91cFNpemUiLCJfaW5jcmVtZW50IiwicmF0aW8iLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJpc05hdkJ1dHRvblRhcmdldCIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJvblJlc2l6ZSIsImJyZWFrcG9pbnRzIiwic2V0QnJlYWtwb2ludCIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsInJ1biIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJkdW1teUV2ZW50QXR0YWNoZWQiLCJkdW1teUV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudHMiLCJ0b3VjaEV2ZW50cyIsInN0YXJ0IiwibW92ZSIsImVuZCIsInBhc3NpdmVMaXN0ZW5lcnMiLCJwYXNzaXZlIiwiY2FuY2VsIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJkZXRhY2hFdmVudHMiLCJfc3dpcGVyJGxvb3BlZFNsaWRlcyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiYnJlYWtwb2ludHNCYXNlIiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsInBhcmFtIiwicGFyYW1WYWx1ZSIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0VuYWJsZWQiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJkaXNhYmxlIiwiZW5hYmxlIiwiYmFzZSIsImNvbnRhaW5lckVsIiwiY3VycmVudFdpZHRoIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInNvcnQiLCJiIiwiX3BvaW50cyRpIiwicHJlcGFyZUNsYXNzZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwiaXRlbSIsImFkZENsYXNzZXMiLCJzdWZmaXhlcyIsInJlbW92ZUNsYXNzZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiaXNQaWN0dXJlIiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwicHJlbG9hZEltYWdlcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJjdXJyZW50U3JjIiwiaW1hZ2VzIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUG9zaXRpb24iLCJjaGVja092ZXJmbG93JDEiLCJkZWZhdWx0cyIsInVybCIsInVuaXF1ZU5hdkVsZW1lbnRzIiwid3JhcHBlckNsYXNzIiwiX2VtaXRDbGFzc2VzIiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwiZGVza3RvcCIsInRvdWNoRXZlbnRzVG91Y2giLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJjbGlja1RpbWVvdXQiLCJfcHJvdG8iLCJzZXRQcm9ncmVzcyIsImN1cnJlbnQiLCJnZXRTbGlkZUNsYXNzZXMiLCJzbGlkZUVsIiwidXBkYXRlcyIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsIm5ld0RpcmVjdGlvbiIsIm5lZWRVcGRhdGUiLCJjdXJyZW50RGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwiZ2V0V3JhcHBlciIsIndyYXBwZXIiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJtIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIlZpcnR1YWwiLCJmb3JjZSIsIl9zd2lwZXIkcGFyYW1zIiwiX3N3aXBlciRwYXJhbXMkdmlydHVhIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJfc3dpcGVyJHZpcnR1YWwiLCJwcmV2aW91c0Zyb20iLCJmcm9tIiwicHJldmlvdXNUbyIsInByZXZpb3VzU2xpZGVzR3JpZCIsInJlbmRlclNsaWRlIiwicHJldmlvdXNPZmZzZXQiLCJvZmZzZXRQcm9wIiwic2xpZGVzQWZ0ZXIiLCJzbGlkZXNCZWZvcmUiLCJvblJlbmRlcmVkIiwibGF6eSIsImxvYWQiLCJyZW5kZXJFeHRlcm5hbCIsImdldFNsaWRlcyIsInNsaWRlc1RvUmVuZGVyIiwicmVuZGVyRXh0ZXJuYWxVcGRhdGUiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJjYWNoZSIsIiRzbGlkZUVsIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiJGNhY2hlZEVsIiwiY2FjaGVkRWxJbmRleCIsIlZpcnR1YWwkMSIsImJlZm9yZUluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJLZXlib2FyZCIsImhhbmRsZSIsImtjIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGFnZVVwRG93biIsImtleWJvYXJkIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJvbmx5SW5WaWV3cG9ydCIsImluVmlldyIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsInJldHVyblZhbHVlIiwiS2V5Ym9hcmQkMSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJpc1N1cHBvcnRlZCIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsIk1vdXNld2hlZWwiLCJsYXN0U2Nyb2xsVGltZSIsImxhc3RFdmVudEJlZm9yZVNuYXAiLCJyZWNlbnRXaGVlbEV2ZW50cyIsIlBJWEVMX1NURVAiLCJMSU5FX0hFSUdIVCIsIlBBR0VfSEVJR0hUIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1vdXNld2hlZWwiLCJldmVudHNUYXJnZXQiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJwb3NpdGlvbnMiLCJzZW5zaXRpdml0eSIsIm5ld0V2ZW50Iiwic2lnbiIsInJhdyIsInNoaWZ0IiwicHJldkV2ZW50IiwiYW5pbWF0ZVNsaWRlciIsInJlbGVhc2VTY3JvbGwiLCJfbmV3RXZlbnQiLCJpZ25vcmVXaGVlbEV2ZW50cyIsInRpbWVvdXQiLCJfcmVjZW50V2hlZWxFdmVudHMiLCJfcHJldkV2ZW50IiwiZmlyc3RFdmVudCIsInNuYXBUb1RocmVzaG9sZCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwidGhyZXNob2xkRGVsdGEiLCJ0aHJlc2hvbGRUaW1lIiwiZ2V0VGltZSIsIk1vdXNld2hlZWwkMSIsIk5hdmlnYXRpb24iLCJ0b2dnbGVFbCIsImRpc2FibGVkIiwiZGlzYWJsZWRDbGFzcyIsInRhZ05hbWUiLCJfc3dpcGVyJG5hdmlnYXRpb24iLCIkbmV4dEVsIiwiJHByZXZFbCIsImxvY2tDbGFzcyIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJfc3dpcGVyJG5hdmlnYXRpb24yIiwiTmF2aWdhdGlvbiQxIiwiaGlkZU9uQ2xpY2siLCJoaWRkZW5DbGFzcyIsInRvRWRnZSIsImZyb21FZGdlIiwiZW5hYmxlRGlzYWJsZSIsIl9zd2lwZXIkbmF2aWdhdGlvbjMiLCJjbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjQiLCJ0YXJnZXRFbCIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsIlBhZ2luYXRpb24iLCJ0b3RhbCIsInBhZ2luYXRpb25UeXBlIiwiYnVsbGV0cyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJjdXJyZW50Q2xhc3MiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJ0b3RhbENsYXNzIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJyZW5kZXJDdXN0b20iLCJyZW5kZXIiLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyIsInJlbmRlckJ1bGxldCIsImJ1bGxldENsYXNzIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJjbGlja2FibGVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJQYWdpbmF0aW9uJDEiLCJudW1iZXIiLCJhY3RpdmVJbmRleENoYW5nZSIsInNuYXBJbmRleENoYW5nZSIsInNsaWRlc0xlbmd0aENoYW5nZSIsInNuYXBHcmlkTGVuZ3RoQ2hhbmdlIiwiU2Nyb2xsYmFyIiwic2Nyb2xsYmFyIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCIkZHJhZ0VsIiwibmV3U2l6ZSIsIm5ld1BvcyIsImhpZGUiLCJvcGFjaXR5IiwiZGl2aWRlciIsIm1vdmVEaXZpZGVyIiwiZGlzcGxheSIsImdldFBvaW50ZXJQb3NpdGlvbiIsImNsaWVudFgiLCJjbGllbnRZIiwic2V0RHJhZ1Bvc2l0aW9uIiwiZHJhZ1N0YXJ0UG9zIiwicG9zaXRpb25SYXRpbyIsIm9uRHJhZ1N0YXJ0IiwiZHJhZ1RpbWVvdXQiLCJvbkRyYWdNb3ZlIiwib25EcmFnRW5kIiwic25hcE9uUmVsZWFzZSIsImVuYWJsZURyYWdnYWJsZSIsImFjdGl2ZUxpc3RlbmVyIiwiZGlzYWJsZURyYWdnYWJsZSIsIiRzd2lwZXJFbCIsImRyYWdDbGFzcyIsImRyYWdFbCIsImRyYWdnYWJsZSIsIlNjcm9sbGJhciQxIiwiUGFyYWxsYXgiLCJzZXRUcmFuc2Zvcm0iLCJjdXJyZW50T3BhY2l0eSIsImN1cnJlbnRTY2FsZSIsInBhcmFsbGF4IiwicGFyYWxsYXhFbCIsIiRwYXJhbGxheEVsIiwicGFyYWxsYXhEdXJhdGlvbiIsIlBhcmFsbGF4JDEiLCJab29tIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwib25HZXN0dXJlU3RhcnQiLCJ6b29tIiwiZ2VzdHVyZSIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJzY2FsZVN0YXJ0IiwiJGltYWdlRWwiLCIkaW1hZ2VXcmFwRWwiLCJjb250YWluZXJDbGFzcyIsIm1heFJhdGlvIiwiaXNTY2FsaW5nIiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwib25HZXN0dXJlRW5kIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvblRyYW5zaXRpb25FbmQiLCJvdXQiLCJfaW4iLCJ6b29tZWRTbGlkZUNsYXNzIiwidG91Y2hYIiwidG91Y2hZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJ0b2dnbGVHZXN0dXJlcyIsInNsaWRlU2VsZWN0b3IiLCJlbmFibGVHZXN0dXJlcyIsImdlc3R1cmVzRW5hYmxlZCIsImRpc2FibGVHZXN0dXJlcyIsImFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUiLCJab29tJDEiLCJ0b3VjaFN0YXJ0IiwidG91Y2hFbmQiLCJkb3VibGVUYXAiLCJzbGlkZUNoYW5nZSIsIkxhenkiLCJsb2FkSW5TbGlkZSIsImxvYWRJbkR1cGxpY2F0ZSIsIiRpbWFnZXMiLCJlbGVtZW50Q2xhc3MiLCJsb2FkZWRDbGFzcyIsImxvYWRpbmdDbGFzcyIsImJhY2tncm91bmQiLCIkcGljdHVyZUVsIiwic291cmNlRWwiLCIkc291cmNlIiwicHJlbG9hZGVyQ2xhc3MiLCJzbGlkZU9yaWdpbmFsSW5kZXgiLCJvcmlnaW5hbFNsaWRlIiwiZHVwbGljYXRlZFNsaWRlIiwic2xpZGVFeGlzdCIsImluaXRpYWxJbWFnZUxvYWRlZCIsImxvYWRQcmV2TmV4dCIsImxvYWRQcmV2TmV4dEFtb3VudCIsImFtb3VudCIsIm1heEluZGV4IiwibWluSW5kZXgiLCJjaGVja0luVmlld09uTG9hZCIsIiRzY3JvbGxFbGVtZW50Iiwic2Nyb2xsaW5nRWxlbWVudCIsImlzV2luZG93Iiwic2Nyb2xsRWxlbWVudFdpZHRoIiwic2Nyb2xsRWxlbWVudEhlaWdodCIsInNjcm9sbEhhbmRsZXJBdHRhY2hlZCIsIkxhenkkMSIsImNoZWNrSW5WaWV3IiwibG9hZE9uVHJhbnNpdGlvblN0YXJ0Iiwic2Nyb2xsIiwibGF6eUxvYWQiLCJDb250cm9sbGVyIiwiTGluZWFyU3BsaW5lIiwiYmluYXJ5U2VhcmNoIiwiZ3Vlc3MiLCJhcnJheSIsImkxIiwiaTMiLCJpbnRlcnBvbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJjb250cm9sbGVyIiwic3BsaW5lIiwiX3NldFRyYW5zbGF0ZSIsImNvbnRyb2xsZWQiLCJjb250cm9sIiwiY29udHJvbGxlZFRyYW5zbGF0ZSIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJieSIsImludmVyc2UiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIkNvbnRyb2xsZXIkMSIsIkExMXkiLCJnZXRSYW5kb21OdW1iZXIiLCJyYW5kb21DaGFyIiwicm91bmQiLCJyYW5kb20iLCJyZXBlYXQiLCJtYWtlRWxGb2N1c2FibGUiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsQ29udHJvbHMiLCJjb250cm9scyIsImFkZEVsTGFiZWwiLCJhZGRFbElkIiwiYWRkRWxMaXZlIiwibGl2ZSIsImRpc2FibGVFbCIsImVuYWJsZUVsIiwib25FbnRlck9yU3BhY2VLZXkiLCJhMTF5Iiwibm90aWZ5IiwibGFzdFNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsInByZXZTbGlkZU1lc3NhZ2UiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwiYnVsbGV0RWwiLCIkYnVsbGV0RWwiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsIiRjb250YWluZXJFbCIsImNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJjb250YWluZXJNZXNzYWdlIiwid3JhcHBlcklkIiwiaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJzbGlkZVJvbGUiLCJhcmlhTGFiZWxNZXNzYWdlIiwic2xpZGVMYWJlbE1lc3NhZ2UiLCJBMTF5JDEiLCJub3RpZmljYXRpb25DbGFzcyIsImFmdGVySW5pdCIsInBhZ2luYXRpb25VcGRhdGUiLCJIaXN0b3J5IiwiaGFzaE5hdmlnYXRpb24iLCJwYXRocyIsImdldFBhdGhWYWx1ZXMiLCJzY3JvbGxUb1NsaWRlIiwic2V0SGlzdG9yeVBvcFN0YXRlIiwidXJsT3ZlcnJpZGUiLCJVUkwiLCJwYXRoQXJyYXkiLCJwYXJ0Iiwic2V0SGlzdG9yeSIsInNsdWdpZnkiLCJyb290IiwiaW5jbHVkZXMiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNsaWRlSGlzdG9yeSIsIkhpc3RvcnkkMSIsInRyYW5zaXRpb25FbmRfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwiYWN0aXZlU2xpZGVIYXNoIiwic2V0SGFzaCIsInNsaWRlSGFzaCIsIndhdGNoU3RhdGUiLCJIYXNoTmF2aWdhdGlvbiQxIiwiQXV0b3BsYXkiLCIkYWN0aXZlU2xpZGVFbCIsImF1dG9wbGF5UmVzdWx0IiwicmV2ZXJzZURpcmVjdGlvbiIsInN0b3BPbkxhc3RTbGlkZSIsInBhdXNlIiwid2FpdEZvclRyYW5zaXRpb24iLCJvblZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJvbk1vdXNlRW50ZXIiLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsIm9uTW91c2VMZWF2ZSIsImF0dGFjaE1vdXNlRXZlbnRzIiwicGF1c2VPbk1vdXNlRW50ZXIiLCJkZXRhY2hNb3VzZUV2ZW50cyIsIkF1dG9wbGF5JDEiLCJiZWZvcmVUcmFuc2l0aW9uU3RhcnQiLCJzbGlkZXJGaXJzdE1vdmUiLCJGYWRlIiwidHgiLCJ0eSIsInNsaWRlT3BhY2l0eSIsImZhZGVFZmZlY3QiLCJjcm9zc0ZhZGUiLCJldmVudFRyaWdnZXJlZCIsInRyaWdnZXJFdmVudHMiLCJFZmZlY3RGYWRlIiwiQ3ViZSIsImN1YmVFZmZlY3QiLCJ3cmFwcGVyUm90YXRlIiwiJGN1YmVTaGFkb3dFbCIsInNoYWRvdyIsInNsaWRlQW5nbGUiLCJ0eiIsInNsaWRlU2hhZG93cyIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJzaGFkb3dBbmdsZSIsInNpbiIsImNvcyIsInNjYWxlMSIsInNjYWxlMiIsInpGYWN0b3IiLCJFZmZlY3RDdWJlIiwiRmxpcCIsImZsaXBFZmZlY3QiLCJsaW1pdFJvdGF0aW9uIiwicm90YXRlIiwicm90YXRlWSIsInJvdGF0ZVgiLCJ6SW5kZXgiLCJFZmZlY3RGbGlwIiwiQ292ZXJmbG93IiwiY292ZXJmbG93RWZmZWN0IiwiY2VudGVyIiwiZGVwdGgiLCJzbGlkZU9mZnNldCIsIm9mZnNldE11bHRpcGxpZXIiLCJtb2RpZmllciIsInRyYW5zbGF0ZVoiLCJzdHJldGNoIiwic2xpZGVUcmFuc2Zvcm0iLCIkc2hhZG93QmVmb3JlRWwiLCIkc2hhZG93QWZ0ZXJFbCIsIkVmZmVjdENvdmVyZmxvdyIsIlRodW1icyIsInRodW1ic1BhcmFtcyIsInRodW1icyIsIlN3aXBlckNsYXNzIiwic3dpcGVyQ3JlYXRlZCIsInRodW1ic0NvbnRhaW5lckNsYXNzIiwib25UaHVtYkNsaWNrIiwidGh1bWJzU3dpcGVyIiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwiY3VycmVudEluZGV4IiwiYXV0b1Njcm9sbE9mZnNldCIsInVzZU9mZnNldCIsImN1cnJlbnRUaHVtYnNJbmRleCIsIm5ld1RodW1ic0luZGV4IiwicHJldlRodW1ic0luZGV4IiwibmV4dFRodW1ic0luZGV4IiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJtdWx0aXBsZUFjdGl2ZVRodW1icyIsIlRodW1icyQxIiwiYmVmb3JlRGVzdHJveSIsImNvbXBvbmVudHMiLCJpbml0Q3VzdG9tU2VsZWN0IiwiJHNlbGVjdE5hdGl2ZSIsIiRzZWxlY3RDdXN0b20iLCIkc2VsZWN0Q3VzdG9tVHJpZ2dlciIsIiRzZWxlY3RDdXN0b21PcHRpb25zIiwib3B0aW9uc0NvdW50Iiwib3B0aW9uU2VsZWN0ZWQiLCJ3YXRjaENsaWNrT3V0c2lkZSIsImRpZENsaWNrZWRPdXRzaWRlIiwiY2xvc2VTZWxlY3RDdXN0b20iLCJvcGVuU2VsZWN0Q3VzdG9tIiwidXBkYXRlU2VsZWN0T3B0aW9uIiwicHJldlZhbHVlIiwiJHByZXZPcHRpb24iLCIkb3B0aW9uIiwiaXNTZWxlY3RDbG9zZWQiLCJ1cGRhdGVDdXN0b21TZWxlY3RDaGVja2VkIiwiZGF0YXNldCIsInNlbGVjdFRhc2siLCJzZWxlY3REZWFkbGluZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBRUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDMUIsVUFBT0MsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUFuQixJQUErQixPQUFPQyxNQUFQLEtBQWtCLFdBQWpELEdBQStEQSxNQUFNLENBQUNELE9BQVAsR0FBaUJELE9BQU8sRUFBdkYsR0FDQSxPQUFPRyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNDLEdBQXZDLEdBQTZDRCxNQUFNLENBQUNILE9BQUQsQ0FBbkQsSUFDQ0QsTUFBTSxHQUFHLE9BQU9NLFVBQVAsS0FBc0IsV0FBdEIsR0FBb0NBLFVBQXBDLEdBQWlETixNQUFNLElBQUlPLElBQXBFLEVBQTBFUCxNQUFNLENBQUNRLE1BQVAsR0FBZ0JQLE9BQU8sRUFEbEcsQ0FEQTtBQUdELENBSkEsVUFJUSxZQUFZO0FBQUU7O0FBRXJCLFdBQVNRLGlCQUFULENBQTJCQyxNQUEzQixFQUFtQ0MsS0FBbkMsRUFBMEM7QUFDeEMsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxLQUFLLENBQUNFLE1BQTFCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLFVBQUlFLFVBQVUsR0FBR0gsS0FBSyxDQUFDQyxDQUFELENBQXRCO0FBQ0FFLE1BQUFBLFVBQVUsQ0FBQ0MsVUFBWCxHQUF3QkQsVUFBVSxDQUFDQyxVQUFYLElBQXlCLEtBQWpEO0FBQ0FELE1BQUFBLFVBQVUsQ0FBQ0UsWUFBWCxHQUEwQixJQUExQjtBQUNBLFVBQUksV0FBV0YsVUFBZixFQUEyQkEsVUFBVSxDQUFDRyxRQUFYLEdBQXNCLElBQXRCO0FBQzNCQyxNQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JULE1BQXRCLEVBQThCSSxVQUFVLENBQUNNLEdBQXpDLEVBQThDTixVQUE5QztBQUNEO0FBQ0Y7O0FBRUQsV0FBU08sWUFBVCxDQUFzQkMsV0FBdEIsRUFBbUNDLFVBQW5DLEVBQStDQyxXQUEvQyxFQUE0RDtBQUMxRCxRQUFJRCxVQUFKLEVBQWdCZCxpQkFBaUIsQ0FBQ2EsV0FBVyxDQUFDRyxTQUFiLEVBQXdCRixVQUF4QixDQUFqQjtBQUNoQixRQUFJQyxXQUFKLEVBQWlCZixpQkFBaUIsQ0FBQ2EsV0FBRCxFQUFjRSxXQUFkLENBQWpCO0FBQ2pCLFdBQU9GLFdBQVA7QUFDRDs7QUFFRCxXQUFTSSxRQUFULEdBQW9CO0FBQ2xCQSxJQUFBQSxRQUFRLEdBQUdSLE1BQU0sQ0FBQ1MsTUFBUCxJQUFpQixVQUFVakIsTUFBVixFQUFrQjtBQUM1QyxXQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdnQixTQUFTLENBQUNmLE1BQTlCLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDLFlBQUlpQixNQUFNLEdBQUdELFNBQVMsQ0FBQ2hCLENBQUQsQ0FBdEI7O0FBRUEsYUFBSyxJQUFJUSxHQUFULElBQWdCUyxNQUFoQixFQUF3QjtBQUN0QixjQUFJWCxNQUFNLENBQUNPLFNBQVAsQ0FBaUJLLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ0YsTUFBckMsRUFBNkNULEdBQTdDLENBQUosRUFBdUQ7QUFDckRWLFlBQUFBLE1BQU0sQ0FBQ1UsR0FBRCxDQUFOLEdBQWNTLE1BQU0sQ0FBQ1QsR0FBRCxDQUFwQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxhQUFPVixNQUFQO0FBQ0QsS0FaRDs7QUFjQSxXQUFPZ0IsUUFBUSxDQUFDTSxLQUFULENBQWUsSUFBZixFQUFxQkosU0FBckIsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFRTs7O0FBQ0EsV0FBU0ssVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDdkIsV0FBT0EsR0FBRyxLQUFLLElBQVIsSUFBZ0IsUUFBT0EsR0FBUCxNQUFlLFFBQS9CLElBQTJDLGlCQUFpQkEsR0FBNUQsSUFBbUVBLEdBQUcsQ0FBQ0MsV0FBSixLQUFvQmpCLE1BQTlGO0FBQ0Q7O0FBRUQsV0FBU2tCLFFBQVQsQ0FBa0IxQixNQUFsQixFQUEwQjJCLEdBQTFCLEVBQStCO0FBQzdCLFFBQUkzQixNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQkEsTUFBQUEsTUFBTSxHQUFHLEVBQVQ7QUFDRDs7QUFFRCxRQUFJMkIsR0FBRyxLQUFLLEtBQUssQ0FBakIsRUFBb0I7QUFDbEJBLE1BQUFBLEdBQUcsR0FBRyxFQUFOO0FBQ0Q7O0FBRURuQixJQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlELEdBQVosRUFBaUJFLE9BQWpCLENBQXlCLFVBQVVuQixHQUFWLEVBQWU7QUFDdEMsVUFBSSxPQUFPVixNQUFNLENBQUNVLEdBQUQsQ0FBYixLQUF1QixXQUEzQixFQUF3Q1YsTUFBTSxDQUFDVSxHQUFELENBQU4sR0FBY2lCLEdBQUcsQ0FBQ2pCLEdBQUQsQ0FBakIsQ0FBeEMsS0FBb0UsSUFBSWEsVUFBVSxDQUFDSSxHQUFHLENBQUNqQixHQUFELENBQUosQ0FBVixJQUF3QmEsVUFBVSxDQUFDdkIsTUFBTSxDQUFDVSxHQUFELENBQVAsQ0FBbEMsSUFBbURGLE1BQU0sQ0FBQ29CLElBQVAsQ0FBWUQsR0FBRyxDQUFDakIsR0FBRCxDQUFmLEVBQXNCUCxNQUF0QixHQUErQixDQUF0RixFQUF5RjtBQUMzSnVCLFFBQUFBLFFBQVEsQ0FBQzFCLE1BQU0sQ0FBQ1UsR0FBRCxDQUFQLEVBQWNpQixHQUFHLENBQUNqQixHQUFELENBQWpCLENBQVI7QUFDRDtBQUNGLEtBSkQ7QUFLRDs7QUFFRCxNQUFJb0IsV0FBVyxHQUFHO0FBQ2hCQyxJQUFBQSxJQUFJLEVBQUUsRUFEVTtBQUVoQkMsSUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEIsQ0FBRSxDQUZoQztBQUdoQkMsSUFBQUEsbUJBQW1CLEVBQUUsU0FBU0EsbUJBQVQsR0FBK0IsQ0FBRSxDQUh0QztBQUloQkMsSUFBQUEsYUFBYSxFQUFFO0FBQ2JDLE1BQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCLENBQUUsQ0FEWDtBQUViQyxNQUFBQSxRQUFRLEVBQUU7QUFGRyxLQUpDO0FBUWhCQyxJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxHQUF5QjtBQUN0QyxhQUFPLElBQVA7QUFDRCxLQVZlO0FBV2hCQyxJQUFBQSxnQkFBZ0IsRUFBRSxTQUFTQSxnQkFBVCxHQUE0QjtBQUM1QyxhQUFPLEVBQVA7QUFDRCxLQWJlO0FBY2hCQyxJQUFBQSxjQUFjLEVBQUUsU0FBU0EsY0FBVCxHQUEwQjtBQUN4QyxhQUFPLElBQVA7QUFDRCxLQWhCZTtBQWlCaEJDLElBQUFBLFdBQVcsRUFBRSxTQUFTQSxXQUFULEdBQXVCO0FBQ2xDLGFBQU87QUFDTEMsUUFBQUEsU0FBUyxFQUFFLFNBQVNBLFNBQVQsR0FBcUIsQ0FBRTtBQUQ3QixPQUFQO0FBR0QsS0FyQmU7QUFzQmhCQyxJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxHQUF5QjtBQUN0QyxhQUFPO0FBQ0xDLFFBQUFBLFFBQVEsRUFBRSxFQURMO0FBRUxDLFFBQUFBLFVBQVUsRUFBRSxFQUZQO0FBR0xDLFFBQUFBLEtBQUssRUFBRSxFQUhGO0FBSUxDLFFBQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULEdBQXdCLENBQUUsQ0FKbkM7QUFLTEMsUUFBQUEsb0JBQW9CLEVBQUUsU0FBU0Esb0JBQVQsR0FBZ0M7QUFDcEQsaUJBQU8sRUFBUDtBQUNEO0FBUEksT0FBUDtBQVNELEtBaENlO0FBaUNoQkMsSUFBQUEsZUFBZSxFQUFFLFNBQVNBLGVBQVQsR0FBMkI7QUFDMUMsYUFBTyxFQUFQO0FBQ0QsS0FuQ2U7QUFvQ2hCQyxJQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxHQUFzQjtBQUNoQyxhQUFPLElBQVA7QUFDRCxLQXRDZTtBQXVDaEJDLElBQUFBLFFBQVEsRUFBRTtBQUNSQyxNQUFBQSxJQUFJLEVBQUUsRUFERTtBQUVSQyxNQUFBQSxJQUFJLEVBQUUsRUFGRTtBQUdSQyxNQUFBQSxRQUFRLEVBQUUsRUFIRjtBQUlSQyxNQUFBQSxJQUFJLEVBQUUsRUFKRTtBQUtSQyxNQUFBQSxNQUFNLEVBQUUsRUFMQTtBQU1SQyxNQUFBQSxRQUFRLEVBQUUsRUFORjtBQU9SQyxNQUFBQSxRQUFRLEVBQUUsRUFQRjtBQVFSQyxNQUFBQSxNQUFNLEVBQUU7QUFSQTtBQXZDTSxHQUFsQjs7QUFtREEsV0FBU0MsV0FBVCxHQUF1QjtBQUNyQixRQUFJQyxHQUFHLEdBQUcsT0FBT0MsUUFBUCxLQUFvQixXQUFwQixHQUFrQ0EsUUFBbEMsR0FBNkMsRUFBdkQ7QUFDQW5DLElBQUFBLFFBQVEsQ0FBQ2tDLEdBQUQsRUFBTTlCLFdBQU4sQ0FBUjtBQUNBLFdBQU84QixHQUFQO0FBQ0Q7O0FBRUQsTUFBSUUsU0FBUyxHQUFHO0FBQ2RELElBQUFBLFFBQVEsRUFBRS9CLFdBREk7QUFFZGlDLElBQUFBLFNBQVMsRUFBRTtBQUNUQyxNQUFBQSxTQUFTLEVBQUU7QUFERixLQUZHO0FBS2RkLElBQUFBLFFBQVEsRUFBRTtBQUNSQyxNQUFBQSxJQUFJLEVBQUUsRUFERTtBQUVSQyxNQUFBQSxJQUFJLEVBQUUsRUFGRTtBQUdSQyxNQUFBQSxRQUFRLEVBQUUsRUFIRjtBQUlSQyxNQUFBQSxJQUFJLEVBQUUsRUFKRTtBQUtSQyxNQUFBQSxNQUFNLEVBQUUsRUFMQTtBQU1SQyxNQUFBQSxRQUFRLEVBQUUsRUFORjtBQU9SQyxNQUFBQSxRQUFRLEVBQUUsRUFQRjtBQVFSQyxNQUFBQSxNQUFNLEVBQUU7QUFSQSxLQUxJO0FBZWRPLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QixDQUFFLENBRGpDO0FBRVBDLE1BQUFBLFNBQVMsRUFBRSxTQUFTQSxTQUFULEdBQXFCLENBQUUsQ0FGM0I7QUFHUEMsTUFBQUEsRUFBRSxFQUFFLFNBQVNBLEVBQVQsR0FBYyxDQUFFLENBSGI7QUFJUEMsTUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsR0FBZ0IsQ0FBRTtBQUpqQixLQWZLO0FBcUJkQyxJQUFBQSxXQUFXLEVBQUUsU0FBU0EsV0FBVCxHQUF1QjtBQUNsQyxhQUFPLElBQVA7QUFDRCxLQXZCYTtBQXdCZHRDLElBQUFBLGdCQUFnQixFQUFFLFNBQVNBLGdCQUFULEdBQTRCLENBQUUsQ0F4QmxDO0FBeUJkQyxJQUFBQSxtQkFBbUIsRUFBRSxTQUFTQSxtQkFBVCxHQUErQixDQUFFLENBekJ4QztBQTBCZHNDLElBQUFBLGdCQUFnQixFQUFFLFNBQVNBLGdCQUFULEdBQTRCO0FBQzVDLGFBQU87QUFDTEMsUUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEI7QUFDNUMsaUJBQU8sRUFBUDtBQUNEO0FBSEksT0FBUDtBQUtELEtBaENhO0FBaUNkQyxJQUFBQSxLQUFLLEVBQUUsU0FBU0EsS0FBVCxHQUFpQixDQUFFLENBakNaO0FBa0NkQyxJQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQixDQUFFLENBbENWO0FBbUNkQyxJQUFBQSxNQUFNLEVBQUUsRUFuQ007QUFvQ2RDLElBQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULEdBQXNCLENBQUUsQ0FwQ3RCO0FBcUNkQyxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QixDQUFFLENBckMxQjtBQXNDZEMsSUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsR0FBc0I7QUFDaEMsYUFBTyxFQUFQO0FBQ0QsS0F4Q2E7QUF5Q2RDLElBQUFBLHFCQUFxQixFQUFFLFNBQVNBLHFCQUFULENBQStCQyxRQUEvQixFQUF5QztBQUM5RCxVQUFJLE9BQU9KLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDckNJLFFBQUFBLFFBQVE7QUFDUixlQUFPLElBQVA7QUFDRDs7QUFFRCxhQUFPSixVQUFVLENBQUNJLFFBQUQsRUFBVyxDQUFYLENBQWpCO0FBQ0QsS0FoRGE7QUFpRGRDLElBQUFBLG9CQUFvQixFQUFFLFNBQVNBLG9CQUFULENBQThCQyxFQUE5QixFQUFrQztBQUN0RCxVQUFJLE9BQU9OLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDckM7QUFDRDs7QUFFREMsTUFBQUEsWUFBWSxDQUFDSyxFQUFELENBQVo7QUFDRDtBQXZEYSxHQUFoQjs7QUEwREEsV0FBU0MsU0FBVCxHQUFxQjtBQUNuQixRQUFJQyxHQUFHLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUMsRUFBbkQ7QUFDQTNELElBQUFBLFFBQVEsQ0FBQzBELEdBQUQsRUFBTXRCLFNBQU4sQ0FBUjtBQUNBLFdBQU9zQixHQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFRSxXQUFTRSxjQUFULENBQXdCQyxRQUF4QixFQUFrQ0MsVUFBbEMsRUFBOEM7QUFDNUNELElBQUFBLFFBQVEsQ0FBQ3hFLFNBQVQsR0FBcUJQLE1BQU0sQ0FBQ2lGLE1BQVAsQ0FBY0QsVUFBVSxDQUFDekUsU0FBekIsQ0FBckI7QUFDQXdFLElBQUFBLFFBQVEsQ0FBQ3hFLFNBQVQsQ0FBbUJVLFdBQW5CLEdBQWlDOEQsUUFBakM7QUFDQUEsSUFBQUEsUUFBUSxDQUFDRyxTQUFULEdBQXFCRixVQUFyQjtBQUNEOztBQUVELFdBQVNHLGVBQVQsQ0FBeUJDLENBQXpCLEVBQTRCO0FBQzFCRCxJQUFBQSxlQUFlLEdBQUduRixNQUFNLENBQUNxRixjQUFQLEdBQXdCckYsTUFBTSxDQUFDc0YsY0FBL0IsR0FBZ0QsU0FBU0gsZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEI7QUFDNUYsYUFBT0EsQ0FBQyxDQUFDRixTQUFGLElBQWVsRixNQUFNLENBQUNzRixjQUFQLENBQXNCRixDQUF0QixDQUF0QjtBQUNELEtBRkQ7QUFHQSxXQUFPRCxlQUFlLENBQUNDLENBQUQsQ0FBdEI7QUFDRDs7QUFFRCxXQUFTRyxlQUFULENBQXlCSCxDQUF6QixFQUE0QkksQ0FBNUIsRUFBK0I7QUFDN0JELElBQUFBLGVBQWUsR0FBR3ZGLE1BQU0sQ0FBQ3FGLGNBQVAsSUFBeUIsU0FBU0UsZUFBVCxDQUF5QkgsQ0FBekIsRUFBNEJJLENBQTVCLEVBQStCO0FBQ3hFSixNQUFBQSxDQUFDLENBQUNGLFNBQUYsR0FBY00sQ0FBZDtBQUNBLGFBQU9KLENBQVA7QUFDRCxLQUhEOztBQUtBLFdBQU9HLGVBQWUsQ0FBQ0gsQ0FBRCxFQUFJSSxDQUFKLENBQXRCO0FBQ0Q7O0FBRUQsV0FBU0MseUJBQVQsR0FBcUM7QUFDbkMsUUFBSSxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLElBQWtDLENBQUNBLE9BQU8sQ0FBQ0MsU0FBL0MsRUFBMEQsT0FBTyxLQUFQO0FBQzFELFFBQUlELE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkMsSUFBdEIsRUFBNEIsT0FBTyxLQUFQO0FBQzVCLFFBQUksT0FBT0MsS0FBUCxLQUFpQixVQUFyQixFQUFpQyxPQUFPLElBQVA7O0FBRWpDLFFBQUk7QUFDRjNCLE1BQUFBLElBQUksQ0FBQzNELFNBQUwsQ0FBZXVGLFFBQWYsQ0FBd0JqRixJQUF4QixDQUE2QjZFLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQnpCLElBQWxCLEVBQXdCLEVBQXhCLEVBQTRCLFlBQVksQ0FBRSxDQUExQyxDQUE3QjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBSEQsQ0FHRSxPQUFPNkIsQ0FBUCxFQUFVO0FBQ1YsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTQyxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsSUFBNUIsRUFBa0NDLEtBQWxDLEVBQXlDO0FBQ3ZDLFFBQUlWLHlCQUF5QixFQUE3QixFQUFpQztBQUMvQk8sTUFBQUEsVUFBVSxHQUFHTixPQUFPLENBQUNDLFNBQXJCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xLLE1BQUFBLFVBQVUsR0FBRyxTQUFTQSxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsSUFBNUIsRUFBa0NDLEtBQWxDLEVBQXlDO0FBQ3BELFlBQUlDLENBQUMsR0FBRyxDQUFDLElBQUQsQ0FBUjtBQUNBQSxRQUFBQSxDQUFDLENBQUNDLElBQUYsQ0FBT3ZGLEtBQVAsQ0FBYXNGLENBQWIsRUFBZ0JGLElBQWhCO0FBQ0EsWUFBSTlGLFdBQVcsR0FBR2tHLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjekYsS0FBZCxDQUFvQm1GLE1BQXBCLEVBQTRCRyxDQUE1QixDQUFsQjtBQUNBLFlBQUlJLFFBQVEsR0FBRyxJQUFJcEcsV0FBSixFQUFmO0FBQ0EsWUFBSStGLEtBQUosRUFBV1osZUFBZSxDQUFDaUIsUUFBRCxFQUFXTCxLQUFLLENBQUM1RixTQUFqQixDQUFmO0FBQ1gsZUFBT2lHLFFBQVA7QUFDRCxPQVBEO0FBUUQ7O0FBRUQsV0FBT1IsVUFBVSxDQUFDbEYsS0FBWCxDQUFpQixJQUFqQixFQUF1QkosU0FBdkIsQ0FBUDtBQUNEOztBQUVELFdBQVMrRixpQkFBVCxDQUEyQkMsRUFBM0IsRUFBK0I7QUFDN0IsV0FBT0osUUFBUSxDQUFDUixRQUFULENBQWtCakYsSUFBbEIsQ0FBdUI2RixFQUF2QixFQUEyQkMsT0FBM0IsQ0FBbUMsZUFBbkMsTUFBd0QsQ0FBQyxDQUFoRTtBQUNEOztBQUVELFdBQVNDLGdCQUFULENBQTBCVCxLQUExQixFQUFpQztBQUMvQixRQUFJVSxNQUFNLEdBQUcsT0FBT0MsR0FBUCxLQUFlLFVBQWYsR0FBNEIsSUFBSUEsR0FBSixFQUE1QixHQUF3Q0MsU0FBckQ7O0FBRUFILElBQUFBLGdCQUFnQixHQUFHLFNBQVNBLGdCQUFULENBQTBCVCxLQUExQixFQUFpQztBQUNsRCxVQUFJQSxLQUFLLEtBQUssSUFBVixJQUFrQixDQUFDTSxpQkFBaUIsQ0FBQ04sS0FBRCxDQUF4QyxFQUFpRCxPQUFPQSxLQUFQOztBQUVqRCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0IsY0FBTSxJQUFJYSxTQUFKLENBQWMsb0RBQWQsQ0FBTjtBQUNEOztBQUVELFVBQUksT0FBT0gsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxZQUFJQSxNQUFNLENBQUNJLEdBQVAsQ0FBV2QsS0FBWCxDQUFKLEVBQXVCLE9BQU9VLE1BQU0sQ0FBQ0ssR0FBUCxDQUFXZixLQUFYLENBQVA7O0FBRXZCVSxRQUFBQSxNQUFNLENBQUNNLEdBQVAsQ0FBV2hCLEtBQVgsRUFBa0JpQixPQUFsQjtBQUNEOztBQUVELGVBQVNBLE9BQVQsR0FBbUI7QUFDakIsZUFBT3BCLFVBQVUsQ0FBQ0csS0FBRCxFQUFRekYsU0FBUixFQUFtQnlFLGVBQWUsQ0FBQyxJQUFELENBQWYsQ0FBc0JsRSxXQUF6QyxDQUFqQjtBQUNEOztBQUVEbUcsTUFBQUEsT0FBTyxDQUFDN0csU0FBUixHQUFvQlAsTUFBTSxDQUFDaUYsTUFBUCxDQUFja0IsS0FBSyxDQUFDNUYsU0FBcEIsRUFBK0I7QUFDakRVLFFBQUFBLFdBQVcsRUFBRTtBQUNYb0csVUFBQUEsS0FBSyxFQUFFRCxPQURJO0FBRVh2SCxVQUFBQSxVQUFVLEVBQUUsS0FGRDtBQUdYRSxVQUFBQSxRQUFRLEVBQUUsSUFIQztBQUlYRCxVQUFBQSxZQUFZLEVBQUU7QUFKSDtBQURvQyxPQUEvQixDQUFwQjtBQVFBLGFBQU95RixlQUFlLENBQUM2QixPQUFELEVBQVVqQixLQUFWLENBQXRCO0FBQ0QsS0ExQkQ7O0FBNEJBLFdBQU9TLGdCQUFnQixDQUFDVCxLQUFELENBQXZCO0FBQ0Q7O0FBRUQsV0FBU21CLHNCQUFULENBQWdDakksSUFBaEMsRUFBc0M7QUFDcEMsUUFBSUEsSUFBSSxLQUFLLEtBQUssQ0FBbEIsRUFBcUI7QUFDbkIsWUFBTSxJQUFJa0ksY0FBSixDQUFtQiwyREFBbkIsQ0FBTjtBQUNEOztBQUVELFdBQU9sSSxJQUFQO0FBQ0Q7QUFDRDs7O0FBR0EsV0FBU21JLFlBQVQsQ0FBc0J4RyxHQUF0QixFQUEyQjtBQUN6QixRQUFJeUcsS0FBSyxHQUFHekcsR0FBRyxDQUFDa0UsU0FBaEI7QUFDQWxGLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmUsR0FBdEIsRUFBMkIsV0FBM0IsRUFBd0M7QUFDdENrRyxNQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLGVBQU9PLEtBQVA7QUFDRCxPQUhxQztBQUl0Q04sTUFBQUEsR0FBRyxFQUFFLFNBQVNBLEdBQVQsQ0FBYUUsS0FBYixFQUFvQjtBQUN2QkksUUFBQUEsS0FBSyxDQUFDdkMsU0FBTixHQUFrQm1DLEtBQWxCO0FBQ0Q7QUFOcUMsS0FBeEM7QUFRRDs7QUFFRCxNQUFJSyxJQUFJLEdBQUcsYUFBYSxVQUFVQyxNQUFWLEVBQWtCO0FBQ3hDN0MsSUFBQUEsY0FBYyxDQUFDNEMsSUFBRCxFQUFPQyxNQUFQLENBQWQ7O0FBRUEsYUFBU0QsSUFBVCxDQUFjRSxLQUFkLEVBQXFCO0FBQ25CLFVBQUlDLEtBQUo7O0FBRUFBLE1BQUFBLEtBQUssR0FBR0YsTUFBTSxDQUFDOUcsSUFBUCxDQUFZQyxLQUFaLENBQWtCNkcsTUFBbEIsRUFBMEIsQ0FBQyxJQUFELEVBQU9HLE1BQVAsQ0FBY0YsS0FBZCxDQUExQixLQUFtRCxJQUEzRDtBQUNBSixNQUFBQSxZQUFZLENBQUNGLHNCQUFzQixDQUFDTyxLQUFELENBQXZCLENBQVo7QUFDQSxhQUFPQSxLQUFQO0FBQ0Q7O0FBRUQsV0FBT0gsSUFBUDtBQUNELEdBWnVCLEVBWXJCLGFBQWFkLGdCQUFnQixDQUFDbUIsS0FBRCxDQVpSLENBQXhCOztBQWNBLFdBQVNDLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCO0FBQ3RCLFFBQUlBLEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0FBQ2xCQSxNQUFBQSxHQUFHLEdBQUcsRUFBTjtBQUNEOztBQUVELFFBQUlDLEdBQUcsR0FBRyxFQUFWO0FBQ0FELElBQUFBLEdBQUcsQ0FBQzVHLE9BQUosQ0FBWSxVQUFVOEcsRUFBVixFQUFjO0FBQ3hCLFVBQUlKLEtBQUssQ0FBQ0ssT0FBTixDQUFjRCxFQUFkLENBQUosRUFBdUI7QUFDckJELFFBQUFBLEdBQUcsQ0FBQzdCLElBQUosQ0FBU3ZGLEtBQVQsQ0FBZW9ILEdBQWYsRUFBb0JGLFNBQVMsQ0FBQ0csRUFBRCxDQUE3QjtBQUNELE9BRkQsTUFFTztBQUNMRCxRQUFBQSxHQUFHLENBQUM3QixJQUFKLENBQVM4QixFQUFUO0FBQ0Q7QUFDRixLQU5EO0FBT0EsV0FBT0QsR0FBUDtBQUNEOztBQUVELFdBQVNHLFdBQVQsQ0FBcUJKLEdBQXJCLEVBQTBCekQsUUFBMUIsRUFBb0M7QUFDbEMsV0FBT3VELEtBQUssQ0FBQ3hILFNBQU4sQ0FBZ0IrSCxNQUFoQixDQUF1QnpILElBQXZCLENBQTRCb0gsR0FBNUIsRUFBaUN6RCxRQUFqQyxDQUFQO0FBQ0Q7O0FBRUQsV0FBUytELFdBQVQsQ0FBcUJOLEdBQXJCLEVBQTBCO0FBQ3hCLFFBQUlPLFdBQVcsR0FBRyxFQUFsQjs7QUFFQSxTQUFLLElBQUk5SSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUksR0FBRyxDQUFDdEksTUFBeEIsRUFBZ0NELENBQUMsSUFBSSxDQUFyQyxFQUF3QztBQUN0QyxVQUFJOEksV0FBVyxDQUFDN0IsT0FBWixDQUFvQnNCLEdBQUcsQ0FBQ3ZJLENBQUQsQ0FBdkIsTUFBZ0MsQ0FBQyxDQUFyQyxFQUF3QzhJLFdBQVcsQ0FBQ25DLElBQVosQ0FBaUI0QixHQUFHLENBQUN2SSxDQUFELENBQXBCO0FBQ3pDOztBQUVELFdBQU84SSxXQUFQO0FBQ0Q7O0FBRUQsV0FBU0MsR0FBVCxDQUFhQyxRQUFiLEVBQXVCQyxPQUF2QixFQUFnQztBQUM5QixRQUFJLE9BQU9ELFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDaEMsYUFBTyxDQUFDQSxRQUFELENBQVA7QUFDRDs7QUFFRCxRQUFJdEMsQ0FBQyxHQUFHLEVBQVI7QUFDQSxRQUFJOEIsR0FBRyxHQUFHUyxPQUFPLENBQUM3RyxnQkFBUixDQUF5QjRHLFFBQXpCLENBQVY7O0FBRUEsU0FBSyxJQUFJaEosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3dJLEdBQUcsQ0FBQ3ZJLE1BQXhCLEVBQWdDRCxDQUFDLElBQUksQ0FBckMsRUFBd0M7QUFDdEMwRyxNQUFBQSxDQUFDLENBQUNDLElBQUYsQ0FBTzZCLEdBQUcsQ0FBQ3hJLENBQUQsQ0FBVjtBQUNEOztBQUVELFdBQU8wRyxDQUFQO0FBQ0Q7O0FBRUQsV0FBU3dDLENBQVQsQ0FBV0YsUUFBWCxFQUFxQkMsT0FBckIsRUFBOEI7QUFDNUIsUUFBSTlELE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUl0QixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQSxRQUFJOEUsR0FBRyxHQUFHLEVBQVY7O0FBRUEsUUFBSSxDQUFDVSxPQUFELElBQVlELFFBQVEsWUFBWWhCLElBQXBDLEVBQTBDO0FBQ3hDLGFBQU9nQixRQUFQO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYixhQUFPLElBQUloQixJQUFKLENBQVNPLEdBQVQsQ0FBUDtBQUNEOztBQUVELFFBQUksT0FBT1MsUUFBUCxLQUFvQixRQUF4QixFQUFrQztBQUNoQyxVQUFJRyxJQUFJLEdBQUdILFFBQVEsQ0FBQ0ksSUFBVCxFQUFYOztBQUVBLFVBQUlELElBQUksQ0FBQ2xDLE9BQUwsQ0FBYSxHQUFiLEtBQXFCLENBQXJCLElBQTBCa0MsSUFBSSxDQUFDbEMsT0FBTCxDQUFhLEdBQWIsS0FBcUIsQ0FBbkQsRUFBc0Q7QUFDcEQsWUFBSW9DLFFBQVEsR0FBRyxLQUFmO0FBQ0EsWUFBSUYsSUFBSSxDQUFDbEMsT0FBTCxDQUFhLEtBQWIsTUFBd0IsQ0FBNUIsRUFBK0JvQyxRQUFRLEdBQUcsSUFBWDtBQUMvQixZQUFJRixJQUFJLENBQUNsQyxPQUFMLENBQWEsS0FBYixNQUF3QixDQUE1QixFQUErQm9DLFFBQVEsR0FBRyxPQUFYO0FBQy9CLFlBQUlGLElBQUksQ0FBQ2xDLE9BQUwsQ0FBYSxLQUFiLE1BQXdCLENBQXhCLElBQTZCa0MsSUFBSSxDQUFDbEMsT0FBTCxDQUFhLEtBQWIsTUFBd0IsQ0FBekQsRUFBNERvQyxRQUFRLEdBQUcsSUFBWDtBQUM1RCxZQUFJRixJQUFJLENBQUNsQyxPQUFMLENBQWEsUUFBYixNQUEyQixDQUEvQixFQUFrQ29DLFFBQVEsR0FBRyxPQUFYO0FBQ2xDLFlBQUlGLElBQUksQ0FBQ2xDLE9BQUwsQ0FBYSxTQUFiLE1BQTRCLENBQWhDLEVBQW1Db0MsUUFBUSxHQUFHLFFBQVg7QUFDbkMsWUFBSUMsVUFBVSxHQUFHM0YsUUFBUSxDQUFDbkIsYUFBVCxDQUF1QjZHLFFBQXZCLENBQWpCO0FBQ0FDLFFBQUFBLFVBQVUsQ0FBQ0MsU0FBWCxHQUF1QkosSUFBdkI7O0FBRUEsYUFBSyxJQUFJbkosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3NKLFVBQVUsQ0FBQzVHLFVBQVgsQ0FBc0J6QyxNQUExQyxFQUFrREQsQ0FBQyxJQUFJLENBQXZELEVBQTBEO0FBQ3hEdUksVUFBQUEsR0FBRyxDQUFDNUIsSUFBSixDQUFTMkMsVUFBVSxDQUFDNUcsVUFBWCxDQUFzQjFDLENBQXRCLENBQVQ7QUFDRDtBQUNGLE9BYkQsTUFhTztBQUNMdUksUUFBQUEsR0FBRyxHQUFHUSxHQUFHLENBQUNDLFFBQVEsQ0FBQ0ksSUFBVCxFQUFELEVBQWtCSCxPQUFPLElBQUl0RixRQUE3QixDQUFUO0FBQ0QsT0FsQitCLENBa0I5Qjs7QUFFSCxLQXBCRCxNQW9CTyxJQUFJcUYsUUFBUSxDQUFDUSxRQUFULElBQXFCUixRQUFRLEtBQUs3RCxNQUFsQyxJQUE0QzZELFFBQVEsS0FBS3JGLFFBQTdELEVBQXVFO0FBQzVFNEUsTUFBQUEsR0FBRyxDQUFDNUIsSUFBSixDQUFTcUMsUUFBVDtBQUNELEtBRk0sTUFFQSxJQUFJWCxLQUFLLENBQUNLLE9BQU4sQ0FBY00sUUFBZCxDQUFKLEVBQTZCO0FBQ2xDLFVBQUlBLFFBQVEsWUFBWWhCLElBQXhCLEVBQThCLE9BQU9nQixRQUFQO0FBQzlCVCxNQUFBQSxHQUFHLEdBQUdTLFFBQU47QUFDRDs7QUFFRCxXQUFPLElBQUloQixJQUFKLENBQVNhLFdBQVcsQ0FBQ04sR0FBRCxDQUFwQixDQUFQO0FBQ0Q7O0FBRURXLEVBQUFBLENBQUMsQ0FBQ2xDLEVBQUYsR0FBT2dCLElBQUksQ0FBQ25ILFNBQVo7O0FBRUEsV0FBUzRJLFFBQVQsR0FBb0I7QUFDbEIsU0FBSyxJQUFJQyxJQUFJLEdBQUcxSSxTQUFTLENBQUNmLE1BQXJCLEVBQTZCMEosT0FBTyxHQUFHLElBQUl0QixLQUFKLENBQVVxQixJQUFWLENBQXZDLEVBQXdERSxJQUFJLEdBQUcsQ0FBcEUsRUFBdUVBLElBQUksR0FBR0YsSUFBOUUsRUFBb0ZFLElBQUksRUFBeEYsRUFBNEY7QUFDMUZELE1BQUFBLE9BQU8sQ0FBQ0MsSUFBRCxDQUFQLEdBQWdCNUksU0FBUyxDQUFDNEksSUFBRCxDQUF6QjtBQUNEOztBQUVELFFBQUlDLFVBQVUsR0FBR3ZCLFNBQVMsQ0FBQ3FCLE9BQU8sQ0FBQ0csR0FBUixDQUFZLFVBQVVDLENBQVYsRUFBYTtBQUNsRCxhQUFPQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSxHQUFSLENBQVA7QUFDRCxLQUYwQixDQUFELENBQTFCO0FBR0EsU0FBS3JJLE9BQUwsQ0FBYSxVQUFVOEcsRUFBVixFQUFjO0FBQ3pCLFVBQUl3QixhQUFKOztBQUVBLE9BQUNBLGFBQWEsR0FBR3hCLEVBQUUsQ0FBQ3lCLFNBQXBCLEVBQStCQyxHQUEvQixDQUFtQy9JLEtBQW5DLENBQXlDNkksYUFBekMsRUFBd0RKLFVBQXhEO0FBQ0QsS0FKRDtBQUtBLFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNPLFdBQVQsR0FBdUI7QUFDckIsU0FBSyxJQUFJQyxLQUFLLEdBQUdySixTQUFTLENBQUNmLE1BQXRCLEVBQThCMEosT0FBTyxHQUFHLElBQUl0QixLQUFKLENBQVVnQyxLQUFWLENBQXhDLEVBQTBEQyxLQUFLLEdBQUcsQ0FBdkUsRUFBMEVBLEtBQUssR0FBR0QsS0FBbEYsRUFBeUZDLEtBQUssRUFBOUYsRUFBa0c7QUFDaEdYLE1BQUFBLE9BQU8sQ0FBQ1csS0FBRCxDQUFQLEdBQWlCdEosU0FBUyxDQUFDc0osS0FBRCxDQUExQjtBQUNEOztBQUVELFFBQUlULFVBQVUsR0FBR3ZCLFNBQVMsQ0FBQ3FCLE9BQU8sQ0FBQ0csR0FBUixDQUFZLFVBQVVDLENBQVYsRUFBYTtBQUNsRCxhQUFPQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSxHQUFSLENBQVA7QUFDRCxLQUYwQixDQUFELENBQTFCO0FBR0EsU0FBS3JJLE9BQUwsQ0FBYSxVQUFVOEcsRUFBVixFQUFjO0FBQ3pCLFVBQUk4QixjQUFKOztBQUVBLE9BQUNBLGNBQWMsR0FBRzlCLEVBQUUsQ0FBQ3lCLFNBQXJCLEVBQWdDTSxNQUFoQyxDQUF1Q3BKLEtBQXZDLENBQTZDbUosY0FBN0MsRUFBNkRWLFVBQTdEO0FBQ0QsS0FKRDtBQUtBLFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNZLFdBQVQsR0FBdUI7QUFDckIsU0FBSyxJQUFJQyxLQUFLLEdBQUcxSixTQUFTLENBQUNmLE1BQXRCLEVBQThCMEosT0FBTyxHQUFHLElBQUl0QixLQUFKLENBQVVxQyxLQUFWLENBQXhDLEVBQTBEQyxLQUFLLEdBQUcsQ0FBdkUsRUFBMEVBLEtBQUssR0FBR0QsS0FBbEYsRUFBeUZDLEtBQUssRUFBOUYsRUFBa0c7QUFDaEdoQixNQUFBQSxPQUFPLENBQUNnQixLQUFELENBQVAsR0FBaUIzSixTQUFTLENBQUMySixLQUFELENBQTFCO0FBQ0Q7O0FBRUQsUUFBSWQsVUFBVSxHQUFHdkIsU0FBUyxDQUFDcUIsT0FBTyxDQUFDRyxHQUFSLENBQVksVUFBVUMsQ0FBVixFQUFhO0FBQ2xELGFBQU9BLENBQUMsQ0FBQ0MsS0FBRixDQUFRLEdBQVIsQ0FBUDtBQUNELEtBRjBCLENBQUQsQ0FBMUI7QUFHQSxTQUFLckksT0FBTCxDQUFhLFVBQVU4RyxFQUFWLEVBQWM7QUFDekJvQixNQUFBQSxVQUFVLENBQUNsSSxPQUFYLENBQW1CLFVBQVVpSixTQUFWLEVBQXFCO0FBQ3RDbkMsUUFBQUEsRUFBRSxDQUFDeUIsU0FBSCxDQUFhVyxNQUFiLENBQW9CRCxTQUFwQjtBQUNELE9BRkQ7QUFHRCxLQUpEO0FBS0Q7O0FBRUQsV0FBU0UsUUFBVCxHQUFvQjtBQUNsQixTQUFLLElBQUlDLEtBQUssR0FBRy9KLFNBQVMsQ0FBQ2YsTUFBdEIsRUFBOEIwSixPQUFPLEdBQUcsSUFBSXRCLEtBQUosQ0FBVTBDLEtBQVYsQ0FBeEMsRUFBMERDLEtBQUssR0FBRyxDQUF2RSxFQUEwRUEsS0FBSyxHQUFHRCxLQUFsRixFQUF5RkMsS0FBSyxFQUE5RixFQUFrRztBQUNoR3JCLE1BQUFBLE9BQU8sQ0FBQ3FCLEtBQUQsQ0FBUCxHQUFpQmhLLFNBQVMsQ0FBQ2dLLEtBQUQsQ0FBMUI7QUFDRDs7QUFFRCxRQUFJbkIsVUFBVSxHQUFHdkIsU0FBUyxDQUFDcUIsT0FBTyxDQUFDRyxHQUFSLENBQVksVUFBVUMsQ0FBVixFQUFhO0FBQ2xELGFBQU9BLENBQUMsQ0FBQ0MsS0FBRixDQUFRLEdBQVIsQ0FBUDtBQUNELEtBRjBCLENBQUQsQ0FBMUI7QUFHQSxXQUFPckIsV0FBVyxDQUFDLElBQUQsRUFBTyxVQUFVRixFQUFWLEVBQWM7QUFDckMsYUFBT29CLFVBQVUsQ0FBQ2pCLE1BQVgsQ0FBa0IsVUFBVWdDLFNBQVYsRUFBcUI7QUFDNUMsZUFBT25DLEVBQUUsQ0FBQ3lCLFNBQUgsQ0FBYWUsUUFBYixDQUFzQkwsU0FBdEIsQ0FBUDtBQUNELE9BRk0sRUFFSjNLLE1BRkksR0FFSyxDQUZaO0FBR0QsS0FKaUIsQ0FBWCxDQUlKQSxNQUpJLEdBSUssQ0FKWjtBQUtEOztBQUVELFdBQVNpTCxJQUFULENBQWNDLEtBQWQsRUFBcUJ4RCxLQUFyQixFQUE0QjtBQUMxQixRQUFJM0csU0FBUyxDQUFDZixNQUFWLEtBQXFCLENBQXJCLElBQTBCLE9BQU9rTCxLQUFQLEtBQWlCLFFBQS9DLEVBQXlEO0FBQ3ZEO0FBQ0EsVUFBSSxLQUFLLENBQUwsQ0FBSixFQUFhLE9BQU8sS0FBSyxDQUFMLEVBQVFDLFlBQVIsQ0FBcUJELEtBQXJCLENBQVA7QUFDYixhQUFPOUQsU0FBUDtBQUNELEtBTHlCLENBS3hCOzs7QUFHRixTQUFLLElBQUlySCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsVUFBSWdCLFNBQVMsQ0FBQ2YsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQjtBQUNBLGFBQUtELENBQUwsRUFBUTRDLFlBQVIsQ0FBcUJ1SSxLQUFyQixFQUE0QnhELEtBQTVCO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQSxhQUFLLElBQUkwRCxRQUFULElBQXFCRixLQUFyQixFQUE0QjtBQUMxQixlQUFLbkwsQ0FBTCxFQUFRcUwsUUFBUixJQUFvQkYsS0FBSyxDQUFDRSxRQUFELENBQXpCO0FBQ0EsZUFBS3JMLENBQUwsRUFBUTRDLFlBQVIsQ0FBcUJ5SSxRQUFyQixFQUErQkYsS0FBSyxDQUFDRSxRQUFELENBQXBDO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNDLFVBQVQsQ0FBb0JKLElBQXBCLEVBQTBCO0FBQ3hCLFNBQUssSUFBSWxMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0MsTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxXQUFLQSxDQUFMLEVBQVF1TCxlQUFSLENBQXdCTCxJQUF4QjtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNNLFNBQVQsQ0FBbUJBLFNBQW5CLEVBQThCO0FBQzVCLFNBQUssSUFBSXhMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0MsTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxXQUFLQSxDQUFMLEVBQVEyQyxLQUFSLENBQWM2SSxTQUFkLEdBQTBCQSxTQUExQjtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNDLFlBQVQsQ0FBc0JDLFFBQXRCLEVBQWdDO0FBQzlCLFNBQUssSUFBSTFMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0MsTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxXQUFLQSxDQUFMLEVBQVEyQyxLQUFSLENBQWNnSixrQkFBZCxHQUFtQyxPQUFPRCxRQUFQLEtBQW9CLFFBQXBCLEdBQStCQSxRQUFRLEdBQUcsSUFBMUMsR0FBaURBLFFBQXBGO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU0UsRUFBVCxHQUFjO0FBQ1osU0FBSyxJQUFJQyxLQUFLLEdBQUc3SyxTQUFTLENBQUNmLE1BQXRCLEVBQThCdUcsSUFBSSxHQUFHLElBQUk2QixLQUFKLENBQVV3RCxLQUFWLENBQXJDLEVBQXVEQyxLQUFLLEdBQUcsQ0FBcEUsRUFBdUVBLEtBQUssR0FBR0QsS0FBL0UsRUFBc0ZDLEtBQUssRUFBM0YsRUFBK0Y7QUFDN0Z0RixNQUFBQSxJQUFJLENBQUNzRixLQUFELENBQUosR0FBYzlLLFNBQVMsQ0FBQzhLLEtBQUQsQ0FBdkI7QUFDRDs7QUFFRCxRQUFJQyxTQUFTLEdBQUd2RixJQUFJLENBQUMsQ0FBRCxDQUFwQjtBQUFBLFFBQ0l3RixjQUFjLEdBQUd4RixJQUFJLENBQUMsQ0FBRCxDQUR6QjtBQUFBLFFBRUl5RixRQUFRLEdBQUd6RixJQUFJLENBQUMsQ0FBRCxDQUZuQjtBQUFBLFFBR0kwRixPQUFPLEdBQUcxRixJQUFJLENBQUMsQ0FBRCxDQUhsQjs7QUFLQSxRQUFJLE9BQU9BLElBQUksQ0FBQyxDQUFELENBQVgsS0FBbUIsVUFBdkIsRUFBbUM7QUFDakN1RixNQUFBQSxTQUFTLEdBQUd2RixJQUFJLENBQUMsQ0FBRCxDQUFoQjtBQUNBeUYsTUFBQUEsUUFBUSxHQUFHekYsSUFBSSxDQUFDLENBQUQsQ0FBZjtBQUNBMEYsTUFBQUEsT0FBTyxHQUFHMUYsSUFBSSxDQUFDLENBQUQsQ0FBZDtBQUNBd0YsTUFBQUEsY0FBYyxHQUFHM0UsU0FBakI7QUFDRDs7QUFFRCxRQUFJLENBQUM2RSxPQUFMLEVBQWNBLE9BQU8sR0FBRyxLQUFWOztBQUVkLGFBQVNDLGVBQVQsQ0FBeUI5RixDQUF6QixFQUE0QjtBQUMxQixVQUFJdkcsTUFBTSxHQUFHdUcsQ0FBQyxDQUFDdkcsTUFBZjtBQUNBLFVBQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ2IsVUFBSXNNLFNBQVMsR0FBRy9GLENBQUMsQ0FBQ3ZHLE1BQUYsQ0FBU3VNLGFBQVQsSUFBMEIsRUFBMUM7O0FBRUEsVUFBSUQsU0FBUyxDQUFDbkYsT0FBVixDQUFrQlosQ0FBbEIsSUFBdUIsQ0FBM0IsRUFBOEI7QUFDNUIrRixRQUFBQSxTQUFTLENBQUNFLE9BQVYsQ0FBa0JqRyxDQUFsQjtBQUNEOztBQUVELFVBQUk2QyxDQUFDLENBQUNwSixNQUFELENBQUQsQ0FBVXlNLEVBQVYsQ0FBYVAsY0FBYixDQUFKLEVBQWtDQyxRQUFRLENBQUM3SyxLQUFULENBQWV0QixNQUFmLEVBQXVCc00sU0FBdkIsRUFBbEMsS0FBeUU7QUFDdkUsWUFBSUksUUFBUSxHQUFHdEQsQ0FBQyxDQUFDcEosTUFBRCxDQUFELENBQVUyTSxPQUFWLEVBQWYsQ0FEdUUsQ0FDbkM7OztBQUdwQyxhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLFFBQVEsQ0FBQ3ZNLE1BQTdCLEVBQXFDeU0sQ0FBQyxJQUFJLENBQTFDLEVBQTZDO0FBQzNDLGNBQUl4RCxDQUFDLENBQUNzRCxRQUFRLENBQUNFLENBQUQsQ0FBVCxDQUFELENBQWVILEVBQWYsQ0FBa0JQLGNBQWxCLENBQUosRUFBdUNDLFFBQVEsQ0FBQzdLLEtBQVQsQ0FBZW9MLFFBQVEsQ0FBQ0UsQ0FBRCxDQUF2QixFQUE0Qk4sU0FBNUI7QUFDeEM7QUFDRjtBQUNGOztBQUVELGFBQVNPLFdBQVQsQ0FBcUJ0RyxDQUFyQixFQUF3QjtBQUN0QixVQUFJK0YsU0FBUyxHQUFHL0YsQ0FBQyxJQUFJQSxDQUFDLENBQUN2RyxNQUFQLEdBQWdCdUcsQ0FBQyxDQUFDdkcsTUFBRixDQUFTdU0sYUFBVCxJQUEwQixFQUExQyxHQUErQyxFQUEvRDs7QUFFQSxVQUFJRCxTQUFTLENBQUNuRixPQUFWLENBQWtCWixDQUFsQixJQUF1QixDQUEzQixFQUE4QjtBQUM1QitGLFFBQUFBLFNBQVMsQ0FBQ0UsT0FBVixDQUFrQmpHLENBQWxCO0FBQ0Q7O0FBRUQ0RixNQUFBQSxRQUFRLENBQUM3SyxLQUFULENBQWUsSUFBZixFQUFxQmdMLFNBQXJCO0FBQ0Q7O0FBRUQsUUFBSVEsTUFBTSxHQUFHYixTQUFTLENBQUMvQixLQUFWLENBQWdCLEdBQWhCLENBQWI7QUFDQSxRQUFJNkMsQ0FBSjs7QUFFQSxTQUFLLElBQUk3TSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsVUFBSXlJLEVBQUUsR0FBRyxLQUFLekksQ0FBTCxDQUFUOztBQUVBLFVBQUksQ0FBQ2dNLGNBQUwsRUFBcUI7QUFDbkIsYUFBS2EsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHRCxNQUFNLENBQUMzTSxNQUF2QixFQUErQjRNLENBQUMsSUFBSSxDQUFwQyxFQUF1QztBQUNyQyxjQUFJQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0MsQ0FBRCxDQUFsQjtBQUNBLGNBQUksQ0FBQ3BFLEVBQUUsQ0FBQ3NFLGFBQVIsRUFBdUJ0RSxFQUFFLENBQUNzRSxhQUFILEdBQW1CLEVBQW5CO0FBQ3ZCLGNBQUksQ0FBQ3RFLEVBQUUsQ0FBQ3NFLGFBQUgsQ0FBaUJELEtBQWpCLENBQUwsRUFBOEJyRSxFQUFFLENBQUNzRSxhQUFILENBQWlCRCxLQUFqQixJQUEwQixFQUExQjtBQUM5QnJFLFVBQUFBLEVBQUUsQ0FBQ3NFLGFBQUgsQ0FBaUJELEtBQWpCLEVBQXdCbkcsSUFBeEIsQ0FBNkI7QUFDM0JzRixZQUFBQSxRQUFRLEVBQUVBLFFBRGlCO0FBRTNCZSxZQUFBQSxhQUFhLEVBQUVMO0FBRlksV0FBN0I7QUFJQWxFLFVBQUFBLEVBQUUsQ0FBQzNHLGdCQUFILENBQW9CZ0wsS0FBcEIsRUFBMkJILFdBQTNCLEVBQXdDVCxPQUF4QztBQUNEO0FBQ0YsT0FYRCxNQVdPO0FBQ0w7QUFDQSxhQUFLVyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdELE1BQU0sQ0FBQzNNLE1BQXZCLEVBQStCNE0sQ0FBQyxJQUFJLENBQXBDLEVBQXVDO0FBQ3JDLGNBQUlJLE1BQU0sR0FBR0wsTUFBTSxDQUFDQyxDQUFELENBQW5CO0FBQ0EsY0FBSSxDQUFDcEUsRUFBRSxDQUFDeUUsaUJBQVIsRUFBMkJ6RSxFQUFFLENBQUN5RSxpQkFBSCxHQUF1QixFQUF2QjtBQUMzQixjQUFJLENBQUN6RSxFQUFFLENBQUN5RSxpQkFBSCxDQUFxQkQsTUFBckIsQ0FBTCxFQUFtQ3hFLEVBQUUsQ0FBQ3lFLGlCQUFILENBQXFCRCxNQUFyQixJQUErQixFQUEvQjs7QUFFbkN4RSxVQUFBQSxFQUFFLENBQUN5RSxpQkFBSCxDQUFxQkQsTUFBckIsRUFBNkJ0RyxJQUE3QixDQUFrQztBQUNoQ3NGLFlBQUFBLFFBQVEsRUFBRUEsUUFEc0I7QUFFaENlLFlBQUFBLGFBQWEsRUFBRWI7QUFGaUIsV0FBbEM7O0FBS0ExRCxVQUFBQSxFQUFFLENBQUMzRyxnQkFBSCxDQUFvQm1MLE1BQXBCLEVBQTRCZCxlQUE1QixFQUE2Q0QsT0FBN0M7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU2lCLEdBQVQsR0FBZTtBQUNiLFNBQUssSUFBSUMsS0FBSyxHQUFHcE0sU0FBUyxDQUFDZixNQUF0QixFQUE4QnVHLElBQUksR0FBRyxJQUFJNkIsS0FBSixDQUFVK0UsS0FBVixDQUFyQyxFQUF1REMsS0FBSyxHQUFHLENBQXBFLEVBQXVFQSxLQUFLLEdBQUdELEtBQS9FLEVBQXNGQyxLQUFLLEVBQTNGLEVBQStGO0FBQzdGN0csTUFBQUEsSUFBSSxDQUFDNkcsS0FBRCxDQUFKLEdBQWNyTSxTQUFTLENBQUNxTSxLQUFELENBQXZCO0FBQ0Q7O0FBRUQsUUFBSXRCLFNBQVMsR0FBR3ZGLElBQUksQ0FBQyxDQUFELENBQXBCO0FBQUEsUUFDSXdGLGNBQWMsR0FBR3hGLElBQUksQ0FBQyxDQUFELENBRHpCO0FBQUEsUUFFSXlGLFFBQVEsR0FBR3pGLElBQUksQ0FBQyxDQUFELENBRm5CO0FBQUEsUUFHSTBGLE9BQU8sR0FBRzFGLElBQUksQ0FBQyxDQUFELENBSGxCOztBQUtBLFFBQUksT0FBT0EsSUFBSSxDQUFDLENBQUQsQ0FBWCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ3VGLE1BQUFBLFNBQVMsR0FBR3ZGLElBQUksQ0FBQyxDQUFELENBQWhCO0FBQ0F5RixNQUFBQSxRQUFRLEdBQUd6RixJQUFJLENBQUMsQ0FBRCxDQUFmO0FBQ0EwRixNQUFBQSxPQUFPLEdBQUcxRixJQUFJLENBQUMsQ0FBRCxDQUFkO0FBQ0F3RixNQUFBQSxjQUFjLEdBQUczRSxTQUFqQjtBQUNEOztBQUVELFFBQUksQ0FBQzZFLE9BQUwsRUFBY0EsT0FBTyxHQUFHLEtBQVY7QUFDZCxRQUFJVSxNQUFNLEdBQUdiLFNBQVMsQ0FBQy9CLEtBQVYsQ0FBZ0IsR0FBaEIsQ0FBYjs7QUFFQSxTQUFLLElBQUloSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNE0sTUFBTSxDQUFDM00sTUFBM0IsRUFBbUNELENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxVQUFJOE0sS0FBSyxHQUFHRixNQUFNLENBQUM1TSxDQUFELENBQWxCOztBQUVBLFdBQUssSUFBSTZNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBSzVNLE1BQXpCLEVBQWlDNE0sQ0FBQyxJQUFJLENBQXRDLEVBQXlDO0FBQ3ZDLFlBQUlwRSxFQUFFLEdBQUcsS0FBS29FLENBQUwsQ0FBVDtBQUNBLFlBQUlTLFFBQVEsR0FBRyxLQUFLLENBQXBCOztBQUVBLFlBQUksQ0FBQ3RCLGNBQUQsSUFBbUJ2RCxFQUFFLENBQUNzRSxhQUExQixFQUF5QztBQUN2Q08sVUFBQUEsUUFBUSxHQUFHN0UsRUFBRSxDQUFDc0UsYUFBSCxDQUFpQkQsS0FBakIsQ0FBWDtBQUNELFNBRkQsTUFFTyxJQUFJZCxjQUFjLElBQUl2RCxFQUFFLENBQUN5RSxpQkFBekIsRUFBNEM7QUFDakRJLFVBQUFBLFFBQVEsR0FBRzdFLEVBQUUsQ0FBQ3lFLGlCQUFILENBQXFCSixLQUFyQixDQUFYO0FBQ0Q7O0FBRUQsWUFBSVEsUUFBUSxJQUFJQSxRQUFRLENBQUNyTixNQUF6QixFQUFpQztBQUMvQixlQUFLLElBQUl5TSxDQUFDLEdBQUdZLFFBQVEsQ0FBQ3JOLE1BQVQsR0FBa0IsQ0FBL0IsRUFBa0N5TSxDQUFDLElBQUksQ0FBdkMsRUFBMENBLENBQUMsSUFBSSxDQUEvQyxFQUFrRDtBQUNoRCxnQkFBSWEsT0FBTyxHQUFHRCxRQUFRLENBQUNaLENBQUQsQ0FBdEI7O0FBRUEsZ0JBQUlULFFBQVEsSUFBSXNCLE9BQU8sQ0FBQ3RCLFFBQVIsS0FBcUJBLFFBQXJDLEVBQStDO0FBQzdDeEQsY0FBQUEsRUFBRSxDQUFDMUcsbUJBQUgsQ0FBdUIrSyxLQUF2QixFQUE4QlMsT0FBTyxDQUFDUCxhQUF0QyxFQUFxRGQsT0FBckQ7QUFDQW9CLGNBQUFBLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQmQsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFDRCxhQUhELE1BR08sSUFBSVQsUUFBUSxJQUFJc0IsT0FBTyxDQUFDdEIsUUFBcEIsSUFBZ0NzQixPQUFPLENBQUN0QixRQUFSLENBQWlCd0IsU0FBakQsSUFBOERGLE9BQU8sQ0FBQ3RCLFFBQVIsQ0FBaUJ3QixTQUFqQixLQUErQnhCLFFBQWpHLEVBQTJHO0FBQ2hIeEQsY0FBQUEsRUFBRSxDQUFDMUcsbUJBQUgsQ0FBdUIrSyxLQUF2QixFQUE4QlMsT0FBTyxDQUFDUCxhQUF0QyxFQUFxRGQsT0FBckQ7QUFDQW9CLGNBQUFBLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQmQsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFDRCxhQUhNLE1BR0EsSUFBSSxDQUFDVCxRQUFMLEVBQWU7QUFDcEJ4RCxjQUFBQSxFQUFFLENBQUMxRyxtQkFBSCxDQUF1QitLLEtBQXZCLEVBQThCUyxPQUFPLENBQUNQLGFBQXRDLEVBQXFEZCxPQUFyRDtBQUNBb0IsY0FBQUEsUUFBUSxDQUFDRSxNQUFULENBQWdCZCxDQUFoQixFQUFtQixDQUFuQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU2dCLE9BQVQsR0FBbUI7QUFDakIsUUFBSXZJLE1BQU0sR0FBR0YsU0FBUyxFQUF0Qjs7QUFFQSxTQUFLLElBQUkwSSxLQUFLLEdBQUczTSxTQUFTLENBQUNmLE1BQXRCLEVBQThCdUcsSUFBSSxHQUFHLElBQUk2QixLQUFKLENBQVVzRixLQUFWLENBQXJDLEVBQXVEQyxLQUFLLEdBQUcsQ0FBcEUsRUFBdUVBLEtBQUssR0FBR0QsS0FBL0UsRUFBc0ZDLEtBQUssRUFBM0YsRUFBK0Y7QUFDN0ZwSCxNQUFBQSxJQUFJLENBQUNvSCxLQUFELENBQUosR0FBYzVNLFNBQVMsQ0FBQzRNLEtBQUQsQ0FBdkI7QUFDRDs7QUFFRCxRQUFJaEIsTUFBTSxHQUFHcEcsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRd0QsS0FBUixDQUFjLEdBQWQsQ0FBYjtBQUNBLFFBQUlvQyxTQUFTLEdBQUc1RixJQUFJLENBQUMsQ0FBRCxDQUFwQjs7QUFFQSxTQUFLLElBQUl4RyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNE0sTUFBTSxDQUFDM00sTUFBM0IsRUFBbUNELENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxVQUFJOE0sS0FBSyxHQUFHRixNQUFNLENBQUM1TSxDQUFELENBQWxCOztBQUVBLFdBQUssSUFBSTZNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBSzVNLE1BQXpCLEVBQWlDNE0sQ0FBQyxJQUFJLENBQXRDLEVBQXlDO0FBQ3ZDLFlBQUlwRSxFQUFFLEdBQUcsS0FBS29FLENBQUwsQ0FBVDs7QUFFQSxZQUFJMUgsTUFBTSxDQUFDZixXQUFYLEVBQXdCO0FBQ3RCLGNBQUl5SixHQUFHLEdBQUcsSUFBSTFJLE1BQU0sQ0FBQ2YsV0FBWCxDQUF1QjBJLEtBQXZCLEVBQThCO0FBQ3RDZ0IsWUFBQUEsTUFBTSxFQUFFMUIsU0FEOEI7QUFFdEMyQixZQUFBQSxPQUFPLEVBQUUsSUFGNkI7QUFHdENDLFlBQUFBLFVBQVUsRUFBRTtBQUgwQixXQUE5QixDQUFWO0FBS0F2RixVQUFBQSxFQUFFLENBQUM0RCxhQUFILEdBQW1CN0YsSUFBSSxDQUFDb0MsTUFBTCxDQUFZLFVBQVVxRixJQUFWLEVBQWdCQyxTQUFoQixFQUEyQjtBQUN4RCxtQkFBT0EsU0FBUyxHQUFHLENBQW5CO0FBQ0QsV0FGa0IsQ0FBbkI7QUFHQXpGLFVBQUFBLEVBQUUsQ0FBQzBGLGFBQUgsQ0FBaUJOLEdBQWpCO0FBQ0FwRixVQUFBQSxFQUFFLENBQUM0RCxhQUFILEdBQW1CLEVBQW5CO0FBQ0EsaUJBQU81RCxFQUFFLENBQUM0RCxhQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVMrQixlQUFULENBQXlCdEosUUFBekIsRUFBbUM7QUFDakMsUUFBSXVKLEdBQUcsR0FBRyxJQUFWOztBQUVBLGFBQVNDLFlBQVQsQ0FBc0JqSSxDQUF0QixFQUF5QjtBQUN2QixVQUFJQSxDQUFDLENBQUN2RyxNQUFGLEtBQWEsSUFBakIsRUFBdUI7QUFDdkJnRixNQUFBQSxRQUFRLENBQUMzRCxJQUFULENBQWMsSUFBZCxFQUFvQmtGLENBQXBCO0FBQ0FnSSxNQUFBQSxHQUFHLENBQUNsQixHQUFKLENBQVEsZUFBUixFQUF5Qm1CLFlBQXpCO0FBQ0Q7O0FBRUQsUUFBSXhKLFFBQUosRUFBYztBQUNadUosTUFBQUEsR0FBRyxDQUFDekMsRUFBSixDQUFPLGVBQVAsRUFBd0IwQyxZQUF4QjtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNDLFVBQVQsQ0FBb0JDLGNBQXBCLEVBQW9DO0FBQ2xDLFFBQUksS0FBS3ZPLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixVQUFJdU8sY0FBSixFQUFvQjtBQUNsQixZQUFJQyxPQUFPLEdBQUcsS0FBS0MsTUFBTCxFQUFkOztBQUVBLGVBQU8sS0FBSyxDQUFMLEVBQVFDLFdBQVIsR0FBc0JDLFVBQVUsQ0FBQ0gsT0FBTyxDQUFDbkssZ0JBQVIsQ0FBeUIsY0FBekIsQ0FBRCxDQUFoQyxHQUE2RXNLLFVBQVUsQ0FBQ0gsT0FBTyxDQUFDbkssZ0JBQVIsQ0FBeUIsYUFBekIsQ0FBRCxDQUE5RjtBQUNEOztBQUVELGFBQU8sS0FBSyxDQUFMLEVBQVFxSyxXQUFmO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU0UsV0FBVCxDQUFxQkwsY0FBckIsRUFBcUM7QUFDbkMsUUFBSSxLQUFLdk8sTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFVBQUl1TyxjQUFKLEVBQW9CO0FBQ2xCLFlBQUlNLFFBQVEsR0FBRyxLQUFLSixNQUFMLEVBQWY7O0FBRUEsZUFBTyxLQUFLLENBQUwsRUFBUUssWUFBUixHQUF1QkgsVUFBVSxDQUFDRSxRQUFRLENBQUN4SyxnQkFBVCxDQUEwQixZQUExQixDQUFELENBQWpDLEdBQTZFc0ssVUFBVSxDQUFDRSxRQUFRLENBQUN4SyxnQkFBVCxDQUEwQixlQUExQixDQUFELENBQTlGO0FBQ0Q7O0FBRUQsYUFBTyxLQUFLLENBQUwsRUFBUXlLLFlBQWY7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFTQyxNQUFULEdBQWtCO0FBQ2hCLFFBQUksS0FBSy9PLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixVQUFJa0YsTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsVUFBSXRCLFFBQVEsR0FBR0YsV0FBVyxFQUExQjtBQUNBLFVBQUlnRixFQUFFLEdBQUcsS0FBSyxDQUFMLENBQVQ7QUFDQSxVQUFJd0csR0FBRyxHQUFHeEcsRUFBRSxDQUFDeUcscUJBQUgsRUFBVjtBQUNBLFVBQUlyTixJQUFJLEdBQUc4QixRQUFRLENBQUM5QixJQUFwQjtBQUNBLFVBQUlzTixTQUFTLEdBQUcxRyxFQUFFLENBQUMwRyxTQUFILElBQWdCdE4sSUFBSSxDQUFDc04sU0FBckIsSUFBa0MsQ0FBbEQ7QUFDQSxVQUFJQyxVQUFVLEdBQUczRyxFQUFFLENBQUMyRyxVQUFILElBQWlCdk4sSUFBSSxDQUFDdU4sVUFBdEIsSUFBb0MsQ0FBckQ7QUFDQSxVQUFJQyxTQUFTLEdBQUc1RyxFQUFFLEtBQUt0RCxNQUFQLEdBQWdCQSxNQUFNLENBQUNtSyxPQUF2QixHQUFpQzdHLEVBQUUsQ0FBQzRHLFNBQXBEO0FBQ0EsVUFBSUUsVUFBVSxHQUFHOUcsRUFBRSxLQUFLdEQsTUFBUCxHQUFnQkEsTUFBTSxDQUFDcUssT0FBdkIsR0FBaUMvRyxFQUFFLENBQUM4RyxVQUFyRDtBQUNBLGFBQU87QUFDTEUsUUFBQUEsR0FBRyxFQUFFUixHQUFHLENBQUNRLEdBQUosR0FBVUosU0FBVixHQUFzQkYsU0FEdEI7QUFFTE8sUUFBQUEsSUFBSSxFQUFFVCxHQUFHLENBQUNTLElBQUosR0FBV0gsVUFBWCxHQUF3Qkg7QUFGekIsT0FBUDtBQUlEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNWLE1BQVQsR0FBa0I7QUFDaEIsUUFBSXZKLE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUksS0FBSyxDQUFMLENBQUosRUFBYSxPQUFPRSxNQUFNLENBQUNkLGdCQUFQLENBQXdCLEtBQUssQ0FBTCxDQUF4QixFQUFpQyxJQUFqQyxDQUFQO0FBQ2IsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsV0FBU3NMLEdBQVQsQ0FBYTVQLEtBQWIsRUFBb0I0SCxLQUFwQixFQUEyQjtBQUN6QixRQUFJeEMsTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsUUFBSWpGLENBQUo7O0FBRUEsUUFBSWdCLFNBQVMsQ0FBQ2YsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQixVQUFJLE9BQU9GLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0I7QUFDQSxZQUFJLEtBQUssQ0FBTCxDQUFKLEVBQWEsT0FBT29GLE1BQU0sQ0FBQ2QsZ0JBQVAsQ0FBd0IsS0FBSyxDQUFMLENBQXhCLEVBQWlDLElBQWpDLEVBQXVDQyxnQkFBdkMsQ0FBd0R2RSxLQUF4RCxDQUFQO0FBQ2QsT0FIRCxNQUdPO0FBQ0w7QUFDQSxhQUFLQyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUcsS0FBS0MsTUFBckIsRUFBNkJELENBQUMsSUFBSSxDQUFsQyxFQUFxQztBQUNuQyxlQUFLLElBQUk0UCxLQUFULElBQWtCN1AsS0FBbEIsRUFBeUI7QUFDdkIsaUJBQUtDLENBQUwsRUFBUTJDLEtBQVIsQ0FBY2lOLEtBQWQsSUFBdUI3UCxLQUFLLENBQUM2UCxLQUFELENBQTVCO0FBQ0Q7QUFDRjs7QUFFRCxlQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELFFBQUk1TyxTQUFTLENBQUNmLE1BQVYsS0FBcUIsQ0FBckIsSUFBMEIsT0FBT0YsS0FBUCxLQUFpQixRQUEvQyxFQUF5RDtBQUN2RDtBQUNBLFdBQUtDLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxLQUFLQyxNQUFyQixFQUE2QkQsQ0FBQyxJQUFJLENBQWxDLEVBQXFDO0FBQ25DLGFBQUtBLENBQUwsRUFBUTJDLEtBQVIsQ0FBYzVDLEtBQWQsSUFBdUI0SCxLQUF2QjtBQUNEOztBQUVELGFBQU8sSUFBUDtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNrSSxJQUFULENBQWMvSyxRQUFkLEVBQXdCO0FBQ3RCLFFBQUksQ0FBQ0EsUUFBTCxFQUFlLE9BQU8sSUFBUDtBQUNmLFNBQUtuRCxPQUFMLENBQWEsVUFBVThHLEVBQVYsRUFBY3FILEtBQWQsRUFBcUI7QUFDaENoTCxNQUFBQSxRQUFRLENBQUMxRCxLQUFULENBQWVxSCxFQUFmLEVBQW1CLENBQUNBLEVBQUQsRUFBS3FILEtBQUwsQ0FBbkI7QUFDRCxLQUZEO0FBR0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU2xILE1BQVQsQ0FBZ0I5RCxRQUFoQixFQUEwQjtBQUN4QixRQUFJaUwsTUFBTSxHQUFHcEgsV0FBVyxDQUFDLElBQUQsRUFBTzdELFFBQVAsQ0FBeEI7QUFDQSxXQUFPb0UsQ0FBQyxDQUFDNkcsTUFBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBUzVHLElBQVQsQ0FBY0EsSUFBZCxFQUFvQjtBQUNsQixRQUFJLE9BQU9BLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDL0IsYUFBTyxLQUFLLENBQUwsSUFBVSxLQUFLLENBQUwsRUFBUUksU0FBbEIsR0FBOEIsSUFBckM7QUFDRDs7QUFFRCxTQUFLLElBQUl2SixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsV0FBS0EsQ0FBTCxFQUFRdUosU0FBUixHQUFvQkosSUFBcEI7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFTNkcsSUFBVCxDQUFjQSxJQUFkLEVBQW9CO0FBQ2xCLFFBQUksT0FBT0EsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUMvQixhQUFPLEtBQUssQ0FBTCxJQUFVLEtBQUssQ0FBTCxFQUFRQyxXQUFSLENBQW9CN0csSUFBcEIsRUFBVixHQUF1QyxJQUE5QztBQUNEOztBQUVELFNBQUssSUFBSXBKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0MsTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxXQUFLQSxDQUFMLEVBQVFpUSxXQUFSLEdBQXNCRCxJQUF0QjtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVN6RCxFQUFULENBQVl2RCxRQUFaLEVBQXNCO0FBQ3BCLFFBQUk3RCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxRQUFJdEIsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsUUFBSWdGLEVBQUUsR0FBRyxLQUFLLENBQUwsQ0FBVDtBQUNBLFFBQUl5SCxXQUFKO0FBQ0EsUUFBSWxRLENBQUo7QUFDQSxRQUFJLENBQUN5SSxFQUFELElBQU8sT0FBT08sUUFBUCxLQUFvQixXQUEvQixFQUE0QyxPQUFPLEtBQVA7O0FBRTVDLFFBQUksT0FBT0EsUUFBUCxLQUFvQixRQUF4QixFQUFrQztBQUNoQyxVQUFJUCxFQUFFLENBQUMwSCxPQUFQLEVBQWdCLE9BQU8xSCxFQUFFLENBQUMwSCxPQUFILENBQVduSCxRQUFYLENBQVA7QUFDaEIsVUFBSVAsRUFBRSxDQUFDMkgscUJBQVAsRUFBOEIsT0FBTzNILEVBQUUsQ0FBQzJILHFCQUFILENBQXlCcEgsUUFBekIsQ0FBUDtBQUM5QixVQUFJUCxFQUFFLENBQUM0SCxpQkFBUCxFQUEwQixPQUFPNUgsRUFBRSxDQUFDNEgsaUJBQUgsQ0FBcUJySCxRQUFyQixDQUFQO0FBQzFCa0gsTUFBQUEsV0FBVyxHQUFHaEgsQ0FBQyxDQUFDRixRQUFELENBQWY7O0FBRUEsV0FBS2hKLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR2tRLFdBQVcsQ0FBQ2pRLE1BQTVCLEVBQW9DRCxDQUFDLElBQUksQ0FBekMsRUFBNEM7QUFDMUMsWUFBSWtRLFdBQVcsQ0FBQ2xRLENBQUQsQ0FBWCxLQUFtQnlJLEVBQXZCLEVBQTJCLE9BQU8sSUFBUDtBQUM1Qjs7QUFFRCxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJTyxRQUFRLEtBQUtyRixRQUFqQixFQUEyQjtBQUN6QixhQUFPOEUsRUFBRSxLQUFLOUUsUUFBZDtBQUNEOztBQUVELFFBQUlxRixRQUFRLEtBQUs3RCxNQUFqQixFQUF5QjtBQUN2QixhQUFPc0QsRUFBRSxLQUFLdEQsTUFBZDtBQUNEOztBQUVELFFBQUk2RCxRQUFRLENBQUNRLFFBQVQsSUFBcUJSLFFBQVEsWUFBWWhCLElBQTdDLEVBQW1EO0FBQ2pEa0ksTUFBQUEsV0FBVyxHQUFHbEgsUUFBUSxDQUFDUSxRQUFULEdBQW9CLENBQUNSLFFBQUQsQ0FBcEIsR0FBaUNBLFFBQS9DOztBQUVBLFdBQUtoSixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdrUSxXQUFXLENBQUNqUSxNQUE1QixFQUFvQ0QsQ0FBQyxJQUFJLENBQXpDLEVBQTRDO0FBQzFDLFlBQUlrUSxXQUFXLENBQUNsUSxDQUFELENBQVgsS0FBbUJ5SSxFQUF2QixFQUEyQixPQUFPLElBQVA7QUFDNUI7O0FBRUQsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsV0FBU3FILEtBQVQsR0FBaUI7QUFDZixRQUFJUSxLQUFLLEdBQUcsS0FBSyxDQUFMLENBQVo7QUFDQSxRQUFJdFEsQ0FBSjs7QUFFQSxRQUFJc1EsS0FBSixFQUFXO0FBQ1R0USxNQUFBQSxDQUFDLEdBQUcsQ0FBSixDQURTLENBQ0Y7O0FBRVAsYUFBTyxDQUFDc1EsS0FBSyxHQUFHQSxLQUFLLENBQUNDLGVBQWYsTUFBb0MsSUFBM0MsRUFBaUQ7QUFDL0MsWUFBSUQsS0FBSyxDQUFDOUcsUUFBTixLQUFtQixDQUF2QixFQUEwQnhKLENBQUMsSUFBSSxDQUFMO0FBQzNCOztBQUVELGFBQU9BLENBQVA7QUFDRDs7QUFFRCxXQUFPcUgsU0FBUDtBQUNEOztBQUVELFdBQVNtSixFQUFULENBQVlWLEtBQVosRUFBbUI7QUFDakIsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFdBQXJCLEVBQWtDLE9BQU8sSUFBUDtBQUNsQyxRQUFJN1AsTUFBTSxHQUFHLEtBQUtBLE1BQWxCOztBQUVBLFFBQUk2UCxLQUFLLEdBQUc3UCxNQUFNLEdBQUcsQ0FBckIsRUFBd0I7QUFDdEIsYUFBT2lKLENBQUMsQ0FBQyxFQUFELENBQVI7QUFDRDs7QUFFRCxRQUFJNEcsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiLFVBQUlXLFdBQVcsR0FBR3hRLE1BQU0sR0FBRzZQLEtBQTNCO0FBQ0EsVUFBSVcsV0FBVyxHQUFHLENBQWxCLEVBQXFCLE9BQU92SCxDQUFDLENBQUMsRUFBRCxDQUFSO0FBQ3JCLGFBQU9BLENBQUMsQ0FBQyxDQUFDLEtBQUt1SCxXQUFMLENBQUQsQ0FBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBT3ZILENBQUMsQ0FBQyxDQUFDLEtBQUs0RyxLQUFMLENBQUQsQ0FBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBU1ksTUFBVCxHQUFrQjtBQUNoQixRQUFJQyxRQUFKO0FBQ0EsUUFBSWhOLFFBQVEsR0FBR0YsV0FBVyxFQUExQjs7QUFFQSxTQUFLLElBQUlpSixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMUwsU0FBUyxDQUFDZixNQUE5QixFQUFzQ3lNLENBQUMsSUFBSSxDQUEzQyxFQUE4QztBQUM1Q2lFLE1BQUFBLFFBQVEsR0FBR2pFLENBQUMsR0FBRyxDQUFKLElBQVMxTCxTQUFTLENBQUNmLE1BQVYsSUFBb0J5TSxDQUE3QixHQUFpQ3JGLFNBQWpDLEdBQTZDckcsU0FBUyxDQUFDMEwsQ0FBRCxDQUFqRTs7QUFFQSxXQUFLLElBQUkxTSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsWUFBSSxPQUFPMlEsUUFBUCxLQUFvQixRQUF4QixFQUFrQztBQUNoQyxjQUFJQyxPQUFPLEdBQUdqTixRQUFRLENBQUNuQixhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQW9PLFVBQUFBLE9BQU8sQ0FBQ3JILFNBQVIsR0FBb0JvSCxRQUFwQjs7QUFFQSxpQkFBT0MsT0FBTyxDQUFDQyxVQUFmLEVBQTJCO0FBQ3pCLGlCQUFLN1EsQ0FBTCxFQUFROFEsV0FBUixDQUFvQkYsT0FBTyxDQUFDQyxVQUE1QjtBQUNEO0FBQ0YsU0FQRCxNQU9PLElBQUlGLFFBQVEsWUFBWTNJLElBQXhCLEVBQThCO0FBQ25DLGVBQUssSUFBSTZFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc4RCxRQUFRLENBQUMxUSxNQUE3QixFQUFxQzRNLENBQUMsSUFBSSxDQUExQyxFQUE2QztBQUMzQyxpQkFBSzdNLENBQUwsRUFBUThRLFdBQVIsQ0FBb0JILFFBQVEsQ0FBQzlELENBQUQsQ0FBNUI7QUFDRDtBQUNGLFNBSk0sTUFJQTtBQUNMLGVBQUs3TSxDQUFMLEVBQVE4USxXQUFSLENBQW9CSCxRQUFwQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFTSSxPQUFULENBQWlCSixRQUFqQixFQUEyQjtBQUN6QixRQUFJaE4sUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsUUFBSXpELENBQUo7QUFDQSxRQUFJNk0sQ0FBSjs7QUFFQSxTQUFLN00sQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHLEtBQUtDLE1BQXJCLEVBQTZCRCxDQUFDLElBQUksQ0FBbEMsRUFBcUM7QUFDbkMsVUFBSSxPQUFPMlEsUUFBUCxLQUFvQixRQUF4QixFQUFrQztBQUNoQyxZQUFJQyxPQUFPLEdBQUdqTixRQUFRLENBQUNuQixhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQW9PLFFBQUFBLE9BQU8sQ0FBQ3JILFNBQVIsR0FBb0JvSCxRQUFwQjs7QUFFQSxhQUFLOUQsQ0FBQyxHQUFHK0QsT0FBTyxDQUFDbE8sVUFBUixDQUFtQnpDLE1BQW5CLEdBQTRCLENBQXJDLEVBQXdDNE0sQ0FBQyxJQUFJLENBQTdDLEVBQWdEQSxDQUFDLElBQUksQ0FBckQsRUFBd0Q7QUFDdEQsZUFBSzdNLENBQUwsRUFBUWdSLFlBQVIsQ0FBcUJKLE9BQU8sQ0FBQ2xPLFVBQVIsQ0FBbUJtSyxDQUFuQixDQUFyQixFQUE0QyxLQUFLN00sQ0FBTCxFQUFRMEMsVUFBUixDQUFtQixDQUFuQixDQUE1QztBQUNEO0FBQ0YsT0FQRCxNQU9PLElBQUlpTyxRQUFRLFlBQVkzSSxJQUF4QixFQUE4QjtBQUNuQyxhQUFLNkUsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHOEQsUUFBUSxDQUFDMVEsTUFBekIsRUFBaUM0TSxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsZUFBSzdNLENBQUwsRUFBUWdSLFlBQVIsQ0FBcUJMLFFBQVEsQ0FBQzlELENBQUQsQ0FBN0IsRUFBa0MsS0FBSzdNLENBQUwsRUFBUTBDLFVBQVIsQ0FBbUIsQ0FBbkIsQ0FBbEM7QUFDRDtBQUNGLE9BSk0sTUFJQTtBQUNMLGFBQUsxQyxDQUFMLEVBQVFnUixZQUFSLENBQXFCTCxRQUFyQixFQUErQixLQUFLM1EsQ0FBTCxFQUFRMEMsVUFBUixDQUFtQixDQUFuQixDQUEvQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBU3VPLElBQVQsQ0FBY2pJLFFBQWQsRUFBd0I7QUFDdEIsUUFBSSxLQUFLL0ksTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFVBQUkrSSxRQUFKLEVBQWM7QUFDWixZQUFJLEtBQUssQ0FBTCxFQUFRa0ksa0JBQVIsSUFBOEJoSSxDQUFDLENBQUMsS0FBSyxDQUFMLEVBQVFnSSxrQkFBVCxDQUFELENBQThCM0UsRUFBOUIsQ0FBaUN2RCxRQUFqQyxDQUFsQyxFQUE4RTtBQUM1RSxpQkFBT0UsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFMLEVBQVFnSSxrQkFBVCxDQUFELENBQVI7QUFDRDs7QUFFRCxlQUFPaEksQ0FBQyxDQUFDLEVBQUQsQ0FBUjtBQUNEOztBQUVELFVBQUksS0FBSyxDQUFMLEVBQVFnSSxrQkFBWixFQUFnQyxPQUFPaEksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFMLEVBQVFnSSxrQkFBVCxDQUFELENBQVI7QUFDaEMsYUFBT2hJLENBQUMsQ0FBQyxFQUFELENBQVI7QUFDRDs7QUFFRCxXQUFPQSxDQUFDLENBQUMsRUFBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBU2lJLE9BQVQsQ0FBaUJuSSxRQUFqQixFQUEyQjtBQUN6QixRQUFJb0ksT0FBTyxHQUFHLEVBQWQ7QUFDQSxRQUFJM0ksRUFBRSxHQUFHLEtBQUssQ0FBTCxDQUFUO0FBQ0EsUUFBSSxDQUFDQSxFQUFMLEVBQVMsT0FBT1MsQ0FBQyxDQUFDLEVBQUQsQ0FBUjs7QUFFVCxXQUFPVCxFQUFFLENBQUN5SSxrQkFBVixFQUE4QjtBQUM1QixVQUFJRyxLQUFLLEdBQUc1SSxFQUFFLENBQUN5SSxrQkFBZixDQUQ0QixDQUNPOztBQUVuQyxVQUFJbEksUUFBSixFQUFjO0FBQ1osWUFBSUUsQ0FBQyxDQUFDbUksS0FBRCxDQUFELENBQVM5RSxFQUFULENBQVl2RCxRQUFaLENBQUosRUFBMkJvSSxPQUFPLENBQUN6SyxJQUFSLENBQWEwSyxLQUFiO0FBQzVCLE9BRkQsTUFFT0QsT0FBTyxDQUFDekssSUFBUixDQUFhMEssS0FBYjs7QUFFUDVJLE1BQUFBLEVBQUUsR0FBRzRJLEtBQUw7QUFDRDs7QUFFRCxXQUFPbkksQ0FBQyxDQUFDa0ksT0FBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBU0UsSUFBVCxDQUFjdEksUUFBZCxFQUF3QjtBQUN0QixRQUFJLEtBQUsvSSxNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsVUFBSXdJLEVBQUUsR0FBRyxLQUFLLENBQUwsQ0FBVDs7QUFFQSxVQUFJTyxRQUFKLEVBQWM7QUFDWixZQUFJUCxFQUFFLENBQUM4SSxzQkFBSCxJQUE2QnJJLENBQUMsQ0FBQ1QsRUFBRSxDQUFDOEksc0JBQUosQ0FBRCxDQUE2QmhGLEVBQTdCLENBQWdDdkQsUUFBaEMsQ0FBakMsRUFBNEU7QUFDMUUsaUJBQU9FLENBQUMsQ0FBQyxDQUFDVCxFQUFFLENBQUM4SSxzQkFBSixDQUFELENBQVI7QUFDRDs7QUFFRCxlQUFPckksQ0FBQyxDQUFDLEVBQUQsQ0FBUjtBQUNEOztBQUVELFVBQUlULEVBQUUsQ0FBQzhJLHNCQUFQLEVBQStCLE9BQU9ySSxDQUFDLENBQUMsQ0FBQ1QsRUFBRSxDQUFDOEksc0JBQUosQ0FBRCxDQUFSO0FBQy9CLGFBQU9ySSxDQUFDLENBQUMsRUFBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBT0EsQ0FBQyxDQUFDLEVBQUQsQ0FBUjtBQUNEOztBQUVELFdBQVNzSSxPQUFULENBQWlCeEksUUFBakIsRUFBMkI7QUFDekIsUUFBSXlJLE9BQU8sR0FBRyxFQUFkO0FBQ0EsUUFBSWhKLEVBQUUsR0FBRyxLQUFLLENBQUwsQ0FBVDtBQUNBLFFBQUksQ0FBQ0EsRUFBTCxFQUFTLE9BQU9TLENBQUMsQ0FBQyxFQUFELENBQVI7O0FBRVQsV0FBT1QsRUFBRSxDQUFDOEksc0JBQVYsRUFBa0M7QUFDaEMsVUFBSUcsS0FBSyxHQUFHakosRUFBRSxDQUFDOEksc0JBQWYsQ0FEZ0MsQ0FDTzs7QUFFdkMsVUFBSXZJLFFBQUosRUFBYztBQUNaLFlBQUlFLENBQUMsQ0FBQ3dJLEtBQUQsQ0FBRCxDQUFTbkYsRUFBVCxDQUFZdkQsUUFBWixDQUFKLEVBQTJCeUksT0FBTyxDQUFDOUssSUFBUixDQUFhK0ssS0FBYjtBQUM1QixPQUZELE1BRU9ELE9BQU8sQ0FBQzlLLElBQVIsQ0FBYStLLEtBQWI7O0FBRVBqSixNQUFBQSxFQUFFLEdBQUdpSixLQUFMO0FBQ0Q7O0FBRUQsV0FBT3hJLENBQUMsQ0FBQ3VJLE9BQUQsQ0FBUjtBQUNEOztBQUVELFdBQVNFLE1BQVQsQ0FBZ0IzSSxRQUFoQixFQUEwQjtBQUN4QixRQUFJeUQsT0FBTyxHQUFHLEVBQWQsQ0FEd0IsQ0FDTjs7QUFFbEIsU0FBSyxJQUFJek0sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLQyxNQUF6QixFQUFpQ0QsQ0FBQyxJQUFJLENBQXRDLEVBQXlDO0FBQ3ZDLFVBQUksS0FBS0EsQ0FBTCxFQUFRNFIsVUFBUixLQUF1QixJQUEzQixFQUFpQztBQUMvQixZQUFJNUksUUFBSixFQUFjO0FBQ1osY0FBSUUsQ0FBQyxDQUFDLEtBQUtsSixDQUFMLEVBQVE0UixVQUFULENBQUQsQ0FBc0JyRixFQUF0QixDQUF5QnZELFFBQXpCLENBQUosRUFBd0N5RCxPQUFPLENBQUM5RixJQUFSLENBQWEsS0FBSzNHLENBQUwsRUFBUTRSLFVBQXJCO0FBQ3pDLFNBRkQsTUFFTztBQUNMbkYsVUFBQUEsT0FBTyxDQUFDOUYsSUFBUixDQUFhLEtBQUszRyxDQUFMLEVBQVE0UixVQUFyQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPMUksQ0FBQyxDQUFDdUQsT0FBRCxDQUFSO0FBQ0Q7O0FBRUQsV0FBU0EsT0FBVCxDQUFpQnpELFFBQWpCLEVBQTJCO0FBQ3pCLFFBQUl5RCxPQUFPLEdBQUcsRUFBZCxDQUR5QixDQUNQOztBQUVsQixTQUFLLElBQUl6TSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsVUFBSTZSLE9BQU8sR0FBRyxLQUFLN1IsQ0FBTCxFQUFRNFIsVUFBdEIsQ0FEdUMsQ0FDTDs7QUFFbEMsYUFBT0MsT0FBUCxFQUFnQjtBQUNkLFlBQUk3SSxRQUFKLEVBQWM7QUFDWixjQUFJRSxDQUFDLENBQUMySSxPQUFELENBQUQsQ0FBV3RGLEVBQVgsQ0FBY3ZELFFBQWQsQ0FBSixFQUE2QnlELE9BQU8sQ0FBQzlGLElBQVIsQ0FBYWtMLE9BQWI7QUFDOUIsU0FGRCxNQUVPO0FBQ0xwRixVQUFBQSxPQUFPLENBQUM5RixJQUFSLENBQWFrTCxPQUFiO0FBQ0Q7O0FBRURBLFFBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRCxVQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTzFJLENBQUMsQ0FBQ3VELE9BQUQsQ0FBUjtBQUNEOztBQUVELFdBQVNxRixPQUFULENBQWlCOUksUUFBakIsRUFBMkI7QUFDekIsUUFBSThJLE9BQU8sR0FBRyxJQUFkLENBRHlCLENBQ0w7O0FBRXBCLFFBQUksT0FBTzlJLFFBQVAsS0FBb0IsV0FBeEIsRUFBcUM7QUFDbkMsYUFBT0UsQ0FBQyxDQUFDLEVBQUQsQ0FBUjtBQUNEOztBQUVELFFBQUksQ0FBQzRJLE9BQU8sQ0FBQ3ZGLEVBQVIsQ0FBV3ZELFFBQVgsQ0FBTCxFQUEyQjtBQUN6QjhJLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDckYsT0FBUixDQUFnQnpELFFBQWhCLEVBQTBCd0gsRUFBMUIsQ0FBNkIsQ0FBN0IsQ0FBVjtBQUNEOztBQUVELFdBQU9zQixPQUFQO0FBQ0Q7O0FBRUQsV0FBU0MsSUFBVCxDQUFjL0ksUUFBZCxFQUF3QjtBQUN0QixRQUFJZ0osYUFBYSxHQUFHLEVBQXBCOztBQUVBLFNBQUssSUFBSWhTLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0MsTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxVQUFJO0FBQ0YsWUFBSWlTLEtBQUssR0FBRyxLQUFLalMsQ0FBTCxFQUFRb0MsZ0JBQVIsQ0FBeUI0RyxRQUF6QixDQUFaO0FBQ0QsT0FGRCxDQUVFLE9BQU9rSixHQUFQLEVBQVk7QUFDWkMsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlwSixRQUFaO0FBQ0Q7O0FBRUQsV0FBSyxJQUFJNkQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR29GLEtBQUssQ0FBQ2hTLE1BQTFCLEVBQWtDNE0sQ0FBQyxJQUFJLENBQXZDLEVBQTBDO0FBQ3hDbUYsUUFBQUEsYUFBYSxDQUFDckwsSUFBZCxDQUFtQnNMLEtBQUssQ0FBQ3BGLENBQUQsQ0FBeEI7QUFDRDtBQUNGOztBQUVELFdBQU8zRCxDQUFDLENBQUM4SSxhQUFELENBQVI7QUFDRDs7QUFFRCxXQUFTdlAsUUFBVCxDQUFrQnVHLFFBQWxCLEVBQTRCO0FBQzFCLFFBQUl2RyxRQUFRLEdBQUcsRUFBZixDQUQwQixDQUNQOztBQUVuQixTQUFLLElBQUl6QyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsVUFBSTBDLFVBQVUsR0FBRyxLQUFLMUMsQ0FBTCxFQUFReUMsUUFBekI7O0FBRUEsV0FBSyxJQUFJb0ssQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR25LLFVBQVUsQ0FBQ3pDLE1BQS9CLEVBQXVDNE0sQ0FBQyxJQUFJLENBQTVDLEVBQStDO0FBQzdDLFlBQUksQ0FBQzdELFFBQUQsSUFBYUUsQ0FBQyxDQUFDeEcsVUFBVSxDQUFDbUssQ0FBRCxDQUFYLENBQUQsQ0FBaUJOLEVBQWpCLENBQW9CdkQsUUFBcEIsQ0FBakIsRUFBZ0Q7QUFDOUN2RyxVQUFBQSxRQUFRLENBQUNrRSxJQUFULENBQWNqRSxVQUFVLENBQUNtSyxDQUFELENBQXhCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU8zRCxDQUFDLENBQUN6RyxRQUFELENBQVI7QUFDRDs7QUFFRCxXQUFTK0gsTUFBVCxHQUFrQjtBQUNoQixTQUFLLElBQUl4SyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtDLE1BQXpCLEVBQWlDRCxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsVUFBSSxLQUFLQSxDQUFMLEVBQVE0UixVQUFaLEVBQXdCLEtBQUs1UixDQUFMLEVBQVE0UixVQUFSLENBQW1CUyxXQUFuQixDQUErQixLQUFLclMsQ0FBTCxDQUEvQjtBQUN6Qjs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJc1MsT0FBTyxHQUFHO0FBQ1o3SSxJQUFBQSxRQUFRLEVBQUVBLFFBREU7QUFFWlcsSUFBQUEsV0FBVyxFQUFFQSxXQUZEO0FBR1pVLElBQUFBLFFBQVEsRUFBRUEsUUFIRTtBQUlaTCxJQUFBQSxXQUFXLEVBQUVBLFdBSkQ7QUFLWlMsSUFBQUEsSUFBSSxFQUFFQSxJQUxNO0FBTVpJLElBQUFBLFVBQVUsRUFBRUEsVUFOQTtBQU9aRSxJQUFBQSxTQUFTLEVBQUVBLFNBUEM7QUFRWitHLElBQUFBLFVBQVUsRUFBRTlHLFlBUkE7QUFTWkcsSUFBQUEsRUFBRSxFQUFFQSxFQVRRO0FBVVp1QixJQUFBQSxHQUFHLEVBQUVBLEdBVk87QUFXWk8sSUFBQUEsT0FBTyxFQUFFQSxPQVhHO0FBWVo4RSxJQUFBQSxhQUFhLEVBQUVwRSxlQVpIO0FBYVpHLElBQUFBLFVBQVUsRUFBRUEsVUFiQTtBQWNaTSxJQUFBQSxXQUFXLEVBQUVBLFdBZEQ7QUFlWkgsSUFBQUEsTUFBTSxFQUFFQSxNQWZJO0FBZ0JaTSxJQUFBQSxNQUFNLEVBQUVBLE1BaEJJO0FBaUJaVyxJQUFBQSxHQUFHLEVBQUVBLEdBakJPO0FBa0JaRSxJQUFBQSxJQUFJLEVBQUVBLElBbEJNO0FBbUJaMUcsSUFBQUEsSUFBSSxFQUFFQSxJQW5CTTtBQW9CWjZHLElBQUFBLElBQUksRUFBRUEsSUFwQk07QUFxQlp6RCxJQUFBQSxFQUFFLEVBQUVBLEVBckJRO0FBc0JadUQsSUFBQUEsS0FBSyxFQUFFQSxLQXRCSztBQXVCWlUsSUFBQUEsRUFBRSxFQUFFQSxFQXZCUTtBQXdCWkUsSUFBQUEsTUFBTSxFQUFFQSxNQXhCSTtBQXlCWkssSUFBQUEsT0FBTyxFQUFFQSxPQXpCRztBQTBCWkUsSUFBQUEsSUFBSSxFQUFFQSxJQTFCTTtBQTJCWkUsSUFBQUEsT0FBTyxFQUFFQSxPQTNCRztBQTRCWkcsSUFBQUEsSUFBSSxFQUFFQSxJQTVCTTtBQTZCWkUsSUFBQUEsT0FBTyxFQUFFQSxPQTdCRztBQThCWkcsSUFBQUEsTUFBTSxFQUFFQSxNQTlCSTtBQStCWmxGLElBQUFBLE9BQU8sRUFBRUEsT0EvQkc7QUFnQ1pxRixJQUFBQSxPQUFPLEVBQUVBLE9BaENHO0FBaUNaQyxJQUFBQSxJQUFJLEVBQUVBLElBakNNO0FBa0NadFAsSUFBQUEsUUFBUSxFQUFFQSxRQWxDRTtBQW1DWm1HLElBQUFBLE1BQU0sRUFBRUEsTUFuQ0k7QUFvQ1o0QixJQUFBQSxNQUFNLEVBQUVBO0FBcENJLEdBQWQ7QUFzQ0FsSyxFQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVk0USxPQUFaLEVBQXFCM1EsT0FBckIsQ0FBNkIsVUFBVThRLFVBQVYsRUFBc0I7QUFDakRuUyxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IySSxDQUFDLENBQUNsQyxFQUF4QixFQUE0QnlMLFVBQTVCLEVBQXdDO0FBQ3RDOUssTUFBQUEsS0FBSyxFQUFFMkssT0FBTyxDQUFDRyxVQUFELENBRHdCO0FBRXRDcFMsTUFBQUEsUUFBUSxFQUFFO0FBRjRCLEtBQXhDO0FBSUQsR0FMRDs7QUFPQSxXQUFTcVMsV0FBVCxDQUFxQnBSLEdBQXJCLEVBQTBCO0FBQ3hCLFFBQUlxUixNQUFNLEdBQUdyUixHQUFiO0FBQ0FoQixJQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlpUixNQUFaLEVBQW9CaFIsT0FBcEIsQ0FBNEIsVUFBVW5CLEdBQVYsRUFBZTtBQUN6QyxVQUFJO0FBQ0ZtUyxRQUFBQSxNQUFNLENBQUNuUyxHQUFELENBQU4sR0FBYyxJQUFkO0FBQ0QsT0FGRCxDQUVFLE9BQU82RixDQUFQLEVBQVUsQ0FBQztBQUNaOztBQUVELFVBQUk7QUFDRixlQUFPc00sTUFBTSxDQUFDblMsR0FBRCxDQUFiO0FBQ0QsT0FGRCxDQUVFLE9BQU82RixDQUFQLEVBQVUsQ0FBQztBQUNaO0FBQ0YsS0FWRDtBQVdEOztBQUVELFdBQVN1TSxRQUFULENBQWtCOU4sUUFBbEIsRUFBNEIrTixLQUE1QixFQUFtQztBQUNqQyxRQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUNwQkEsTUFBQUEsS0FBSyxHQUFHLENBQVI7QUFDRDs7QUFFRCxXQUFPbk8sVUFBVSxDQUFDSSxRQUFELEVBQVcrTixLQUFYLENBQWpCO0FBQ0Q7O0FBRUQsV0FBU0MsR0FBVCxHQUFlO0FBQ2IsV0FBT3RPLElBQUksQ0FBQ3NPLEdBQUwsRUFBUDtBQUNEOztBQUVELFdBQVNDLGtCQUFULENBQTRCdEssRUFBNUIsRUFBZ0M7QUFDOUIsUUFBSXRELE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUl0QyxLQUFKOztBQUVBLFFBQUl3QyxNQUFNLENBQUNkLGdCQUFYLEVBQTZCO0FBQzNCMUIsTUFBQUEsS0FBSyxHQUFHd0MsTUFBTSxDQUFDZCxnQkFBUCxDQUF3Qm9FLEVBQXhCLEVBQTRCLElBQTVCLENBQVI7QUFDRDs7QUFFRCxRQUFJLENBQUM5RixLQUFELElBQVU4RixFQUFFLENBQUN1SyxZQUFqQixFQUErQjtBQUM3QnJRLE1BQUFBLEtBQUssR0FBRzhGLEVBQUUsQ0FBQ3VLLFlBQVg7QUFDRDs7QUFFRCxRQUFJLENBQUNyUSxLQUFMLEVBQVk7QUFDVkEsTUFBQUEsS0FBSyxHQUFHOEYsRUFBRSxDQUFDOUYsS0FBWDtBQUNEOztBQUVELFdBQU9BLEtBQVA7QUFDRDs7QUFFRCxXQUFTc1EsWUFBVCxDQUFzQnhLLEVBQXRCLEVBQTBCeUssSUFBMUIsRUFBZ0M7QUFDOUIsUUFBSUEsSUFBSSxLQUFLLEtBQUssQ0FBbEIsRUFBcUI7QUFDbkJBLE1BQUFBLElBQUksR0FBRyxHQUFQO0FBQ0Q7O0FBRUQsUUFBSS9OLE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUlrTyxNQUFKO0FBQ0EsUUFBSUMsWUFBSjtBQUNBLFFBQUlDLGVBQUo7QUFDQSxRQUFJQyxRQUFRLEdBQUdQLGtCQUFrQixDQUFDdEssRUFBRCxDQUFqQzs7QUFFQSxRQUFJdEQsTUFBTSxDQUFDb08sZUFBWCxFQUE0QjtBQUMxQkgsTUFBQUEsWUFBWSxHQUFHRSxRQUFRLENBQUM5SCxTQUFULElBQXNCOEgsUUFBUSxDQUFDRSxlQUE5Qzs7QUFFQSxVQUFJSixZQUFZLENBQUNwSixLQUFiLENBQW1CLEdBQW5CLEVBQXdCL0osTUFBeEIsR0FBaUMsQ0FBckMsRUFBd0M7QUFDdENtVCxRQUFBQSxZQUFZLEdBQUdBLFlBQVksQ0FBQ3BKLEtBQWIsQ0FBbUIsSUFBbkIsRUFBeUJGLEdBQXpCLENBQTZCLFVBQVVwRCxDQUFWLEVBQWE7QUFDdkQsaUJBQU9BLENBQUMsQ0FBQytNLE9BQUYsQ0FBVSxHQUFWLEVBQWUsR0FBZixDQUFQO0FBQ0QsU0FGYyxFQUVaQyxJQUZZLENBRVAsSUFGTyxDQUFmO0FBR0QsT0FQeUIsQ0FPeEI7QUFDRjs7O0FBR0FMLE1BQUFBLGVBQWUsR0FBRyxJQUFJbE8sTUFBTSxDQUFDb08sZUFBWCxDQUEyQkgsWUFBWSxLQUFLLE1BQWpCLEdBQTBCLEVBQTFCLEdBQStCQSxZQUExRCxDQUFsQjtBQUNELEtBWkQsTUFZTztBQUNMQyxNQUFBQSxlQUFlLEdBQUdDLFFBQVEsQ0FBQ0ssWUFBVCxJQUF5QkwsUUFBUSxDQUFDTSxVQUFsQyxJQUFnRE4sUUFBUSxDQUFDTyxXQUF6RCxJQUF3RVAsUUFBUSxDQUFDUSxXQUFqRixJQUFnR1IsUUFBUSxDQUFDOUgsU0FBekcsSUFBc0g4SCxRQUFRLENBQUNoUCxnQkFBVCxDQUEwQixXQUExQixFQUF1Q21QLE9BQXZDLENBQStDLFlBQS9DLEVBQTZELG9CQUE3RCxDQUF4STtBQUNBTixNQUFBQSxNQUFNLEdBQUdFLGVBQWUsQ0FBQ2pOLFFBQWhCLEdBQTJCNEQsS0FBM0IsQ0FBaUMsR0FBakMsQ0FBVDtBQUNEOztBQUVELFFBQUlrSixJQUFJLEtBQUssR0FBYixFQUFrQjtBQUNoQjtBQUNBLFVBQUkvTixNQUFNLENBQUNvTyxlQUFYLEVBQTRCSCxZQUFZLEdBQUdDLGVBQWUsQ0FBQ1UsR0FBL0IsQ0FBNUIsQ0FBZ0U7QUFBaEUsV0FDSyxJQUFJWixNQUFNLENBQUNsVCxNQUFQLEtBQWtCLEVBQXRCLEVBQTBCbVQsWUFBWSxHQUFHeEUsVUFBVSxDQUFDdUUsTUFBTSxDQUFDLEVBQUQsQ0FBUCxDQUF6QixDQUExQixDQUFpRTtBQUFqRSxhQUNFQyxZQUFZLEdBQUd4RSxVQUFVLENBQUN1RSxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQXpCO0FBQ1I7O0FBRUQsUUFBSUQsSUFBSSxLQUFLLEdBQWIsRUFBa0I7QUFDaEI7QUFDQSxVQUFJL04sTUFBTSxDQUFDb08sZUFBWCxFQUE0QkgsWUFBWSxHQUFHQyxlQUFlLENBQUNXLEdBQS9CLENBQTVCLENBQWdFO0FBQWhFLFdBQ0ssSUFBSWIsTUFBTSxDQUFDbFQsTUFBUCxLQUFrQixFQUF0QixFQUEwQm1ULFlBQVksR0FBR3hFLFVBQVUsQ0FBQ3VFLE1BQU0sQ0FBQyxFQUFELENBQVAsQ0FBekIsQ0FBMUIsQ0FBaUU7QUFBakUsYUFDRUMsWUFBWSxHQUFHeEUsVUFBVSxDQUFDdUUsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUF6QjtBQUNSOztBQUVELFdBQU9DLFlBQVksSUFBSSxDQUF2QjtBQUNEOztBQUVELFdBQVNhLFFBQVQsQ0FBa0J2TyxDQUFsQixFQUFxQjtBQUNuQixXQUFPLFFBQU9BLENBQVAsTUFBYSxRQUFiLElBQXlCQSxDQUFDLEtBQUssSUFBL0IsSUFBdUNBLENBQUMsQ0FBQ25FLFdBQXpDLElBQXdEakIsTUFBTSxDQUFDTyxTQUFQLENBQWlCdUYsUUFBakIsQ0FBMEJqRixJQUExQixDQUErQnVFLENBQS9CLEVBQWtDd08sS0FBbEMsQ0FBd0MsQ0FBeEMsRUFBMkMsQ0FBQyxDQUE1QyxNQUFtRCxRQUFsSDtBQUNEOztBQUVELFdBQVNDLE1BQVQsR0FBa0I7QUFDaEIsUUFBSUMsRUFBRSxHQUFHOVQsTUFBTSxDQUFDVSxTQUFTLENBQUNmLE1BQVYsSUFBb0IsQ0FBcEIsR0FBd0JvSCxTQUF4QixHQUFvQ3JHLFNBQVMsQ0FBQyxDQUFELENBQTlDLENBQWY7QUFDQSxRQUFJcVQsUUFBUSxHQUFHLENBQUMsV0FBRCxFQUFjLGFBQWQsRUFBNkIsV0FBN0IsQ0FBZjs7QUFFQSxTQUFLLElBQUlyVSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ0IsU0FBUyxDQUFDZixNQUE5QixFQUFzQ0QsQ0FBQyxJQUFJLENBQTNDLEVBQThDO0FBQzVDLFVBQUlzVSxVQUFVLEdBQUd0VSxDQUFDLEdBQUcsQ0FBSixJQUFTZ0IsU0FBUyxDQUFDZixNQUFWLElBQW9CRCxDQUE3QixHQUFpQ3FILFNBQWpDLEdBQTZDckcsU0FBUyxDQUFDaEIsQ0FBRCxDQUF2RTs7QUFFQSxVQUFJc1UsVUFBVSxLQUFLak4sU0FBZixJQUE0QmlOLFVBQVUsS0FBSyxJQUEvQyxFQUFxRDtBQUNuRCxZQUFJQyxTQUFTLEdBQUdqVSxNQUFNLENBQUNvQixJQUFQLENBQVlwQixNQUFNLENBQUNnVSxVQUFELENBQWxCLEVBQWdDMUwsTUFBaEMsQ0FBdUMsVUFBVXBJLEdBQVYsRUFBZTtBQUNwRSxpQkFBTzZULFFBQVEsQ0FBQ3BOLE9BQVQsQ0FBaUJ6RyxHQUFqQixJQUF3QixDQUEvQjtBQUNELFNBRmUsQ0FBaEI7O0FBSUEsYUFBSyxJQUFJZ1UsU0FBUyxHQUFHLENBQWhCLEVBQW1CQyxHQUFHLEdBQUdGLFNBQVMsQ0FBQ3RVLE1BQXhDLEVBQWdEdVUsU0FBUyxHQUFHQyxHQUE1RCxFQUFpRUQsU0FBUyxJQUFJLENBQTlFLEVBQWlGO0FBQy9FLGNBQUlFLE9BQU8sR0FBR0gsU0FBUyxDQUFDQyxTQUFELENBQXZCO0FBQ0EsY0FBSUcsSUFBSSxHQUFHclUsTUFBTSxDQUFDc1Usd0JBQVAsQ0FBZ0NOLFVBQWhDLEVBQTRDSSxPQUE1QyxDQUFYOztBQUVBLGNBQUlDLElBQUksS0FBS3ROLFNBQVQsSUFBc0JzTixJQUFJLENBQUN4VSxVQUEvQixFQUEyQztBQUN6QyxnQkFBSThULFFBQVEsQ0FBQ0csRUFBRSxDQUFDTSxPQUFELENBQUgsQ0FBUixJQUF5QlQsUUFBUSxDQUFDSyxVQUFVLENBQUNJLE9BQUQsQ0FBWCxDQUFyQyxFQUE0RDtBQUMxRCxrQkFBSUosVUFBVSxDQUFDSSxPQUFELENBQVYsQ0FBb0JHLFVBQXhCLEVBQW9DO0FBQ2xDVCxnQkFBQUEsRUFBRSxDQUFDTSxPQUFELENBQUYsR0FBY0osVUFBVSxDQUFDSSxPQUFELENBQXhCO0FBQ0QsZUFGRCxNQUVPO0FBQ0xQLGdCQUFBQSxNQUFNLENBQUNDLEVBQUUsQ0FBQ00sT0FBRCxDQUFILEVBQWNKLFVBQVUsQ0FBQ0ksT0FBRCxDQUF4QixDQUFOO0FBQ0Q7QUFDRixhQU5ELE1BTU8sSUFBSSxDQUFDVCxRQUFRLENBQUNHLEVBQUUsQ0FBQ00sT0FBRCxDQUFILENBQVQsSUFBMEJULFFBQVEsQ0FBQ0ssVUFBVSxDQUFDSSxPQUFELENBQVgsQ0FBdEMsRUFBNkQ7QUFDbEVOLGNBQUFBLEVBQUUsQ0FBQ00sT0FBRCxDQUFGLEdBQWMsRUFBZDs7QUFFQSxrQkFBSUosVUFBVSxDQUFDSSxPQUFELENBQVYsQ0FBb0JHLFVBQXhCLEVBQW9DO0FBQ2xDVCxnQkFBQUEsRUFBRSxDQUFDTSxPQUFELENBQUYsR0FBY0osVUFBVSxDQUFDSSxPQUFELENBQXhCO0FBQ0QsZUFGRCxNQUVPO0FBQ0xQLGdCQUFBQSxNQUFNLENBQUNDLEVBQUUsQ0FBQ00sT0FBRCxDQUFILEVBQWNKLFVBQVUsQ0FBQ0ksT0FBRCxDQUF4QixDQUFOO0FBQ0Q7QUFDRixhQVJNLE1BUUE7QUFDTE4sY0FBQUEsRUFBRSxDQUFDTSxPQUFELENBQUYsR0FBY0osVUFBVSxDQUFDSSxPQUFELENBQXhCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPTixFQUFQO0FBQ0Q7O0FBRUQsV0FBU1UsaUJBQVQsQ0FBMkJoTyxRQUEzQixFQUFxQ3hGLEdBQXJDLEVBQTBDO0FBQ3hDaEIsSUFBQUEsTUFBTSxDQUFDb0IsSUFBUCxDQUFZSixHQUFaLEVBQWlCSyxPQUFqQixDQUF5QixVQUFVbkIsR0FBVixFQUFlO0FBQ3RDLFVBQUl5VCxRQUFRLENBQUMzUyxHQUFHLENBQUNkLEdBQUQsQ0FBSixDQUFaLEVBQXdCO0FBQ3RCRixRQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlKLEdBQUcsQ0FBQ2QsR0FBRCxDQUFmLEVBQXNCbUIsT0FBdEIsQ0FBOEIsVUFBVW9ULE1BQVYsRUFBa0I7QUFDOUMsY0FBSSxPQUFPelQsR0FBRyxDQUFDZCxHQUFELENBQUgsQ0FBU3VVLE1BQVQsQ0FBUCxLQUE0QixVQUFoQyxFQUE0QztBQUMxQ3pULFlBQUFBLEdBQUcsQ0FBQ2QsR0FBRCxDQUFILENBQVN1VSxNQUFULElBQW1CelQsR0FBRyxDQUFDZCxHQUFELENBQUgsQ0FBU3VVLE1BQVQsRUFBaUJsTyxJQUFqQixDQUFzQkMsUUFBdEIsQ0FBbkI7QUFDRDtBQUNGLFNBSkQ7QUFLRDs7QUFFREEsTUFBQUEsUUFBUSxDQUFDdEcsR0FBRCxDQUFSLEdBQWdCYyxHQUFHLENBQUNkLEdBQUQsQ0FBbkI7QUFDRCxLQVZEO0FBV0Q7O0FBRUQsV0FBU3dVLGlCQUFULENBQTJCckwsT0FBM0IsRUFBb0M7QUFDbEMsUUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFDdEJBLE1BQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0Q7O0FBRUQsV0FBTyxNQUFNQSxPQUFPLENBQUNQLElBQVIsR0FBZXFLLE9BQWYsQ0FBdUIsWUFBdkIsRUFBcUMsTUFBckMsRUFBNkM7QUFBN0MsS0FDWkEsT0FEWSxDQUNKLElBREksRUFDRSxHQURGLENBQWI7QUFFRDs7QUFFRCxXQUFTd0IseUJBQVQsQ0FBbUNDLFVBQW5DLEVBQStDQyxNQUEvQyxFQUF1REMsY0FBdkQsRUFBdUVDLFVBQXZFLEVBQW1GO0FBQ2pGLFFBQUkxUixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7O0FBRUEsUUFBSTJSLGNBQUosRUFBb0I7QUFDbEI5VSxNQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVkyVCxVQUFaLEVBQXdCMVQsT0FBeEIsQ0FBZ0MsVUFBVW5CLEdBQVYsRUFBZTtBQUM3QyxZQUFJLENBQUMyVSxNQUFNLENBQUMzVSxHQUFELENBQVAsSUFBZ0IyVSxNQUFNLENBQUNHLElBQVAsS0FBZ0IsSUFBcEMsRUFBMEM7QUFDeEMsY0FBSUMsT0FBTyxHQUFHNVIsUUFBUSxDQUFDbkIsYUFBVCxDQUF1QixLQUF2QixDQUFkO0FBQ0ErUyxVQUFBQSxPQUFPLENBQUMzSyxTQUFSLEdBQW9CeUssVUFBVSxDQUFDN1UsR0FBRCxDQUE5QjtBQUNBMFUsVUFBQUEsVUFBVSxDQUFDeEUsTUFBWCxDQUFrQjZFLE9BQWxCO0FBQ0FKLFVBQUFBLE1BQU0sQ0FBQzNVLEdBQUQsQ0FBTixHQUFjK1UsT0FBZDtBQUNEO0FBQ0YsT0FQRDtBQVFEOztBQUVELFdBQU9KLE1BQVA7QUFDRDs7QUFFRCxNQUFJSyxPQUFKOztBQUVBLFdBQVNDLFdBQVQsR0FBdUI7QUFDckIsUUFBSXRRLE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUl0QixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQSxXQUFPO0FBQ0xpUyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQnZRLE1BQWxCLElBQTRCQSxNQUFNLENBQUN3USxhQUFQLElBQXdCaFMsUUFBUSxZQUFZd0IsTUFBTSxDQUFDd1EsYUFBakYsQ0FESDtBQUVMQyxNQUFBQSxhQUFhLEVBQUUsQ0FBQyxDQUFDelEsTUFBTSxDQUFDMFEsWUFBVCxJQUF5QixvQkFBb0IxUSxNQUFNLENBQUN0QixTQUFwRCxJQUFpRXNCLE1BQU0sQ0FBQ3RCLFNBQVAsQ0FBaUJpUyxjQUFqQixJQUFtQyxDQUY5RztBQUdMQyxNQUFBQSxRQUFRLEVBQUUsU0FBU0MsYUFBVCxHQUF5QjtBQUNqQyxlQUFPLHNCQUFzQjdRLE1BQXRCLElBQWdDLDRCQUE0QkEsTUFBbkU7QUFDRCxPQUZTLEVBSEw7QUFNTDhRLE1BQUFBLGVBQWUsRUFBRSxTQUFTQyxvQkFBVCxHQUFnQztBQUMvQyxZQUFJQyxlQUFlLEdBQUcsS0FBdEI7O0FBRUEsWUFBSTtBQUNGLGNBQUlDLElBQUksR0FBRzlWLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixFQUF0QixFQUEwQixTQUExQixFQUFxQztBQUM5QztBQUNBaUgsWUFBQUEsR0FBRyxFQUFFLFNBQVNBLEdBQVQsR0FBZTtBQUNsQjJPLGNBQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNEO0FBSjZDLFdBQXJDLENBQVg7QUFNQWhSLFVBQUFBLE1BQU0sQ0FBQ3JELGdCQUFQLENBQXdCLHFCQUF4QixFQUErQyxJQUEvQyxFQUFxRHNVLElBQXJEO0FBQ0QsU0FSRCxDQVFFLE9BQU8vUCxDQUFQLEVBQVUsQ0FBQztBQUNaOztBQUVELGVBQU84UCxlQUFQO0FBQ0QsT0FmZ0IsRUFOWjtBQXNCTEUsTUFBQUEsUUFBUSxFQUFFLFNBQVNDLGFBQVQsR0FBeUI7QUFDakMsZUFBTyxvQkFBb0JuUixNQUEzQjtBQUNELE9BRlM7QUF0QkwsS0FBUDtBQTBCRDs7QUFFRCxXQUFTb1IsVUFBVCxHQUFzQjtBQUNwQixRQUFJLENBQUNmLE9BQUwsRUFBYztBQUNaQSxNQUFBQSxPQUFPLEdBQUdDLFdBQVcsRUFBckI7QUFDRDs7QUFFRCxXQUFPRCxPQUFQO0FBQ0Q7O0FBRUQsTUFBSWdCLE1BQUo7O0FBRUEsV0FBU0MsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDekIsUUFBSUMsSUFBSSxHQUFHRCxLQUFLLEtBQUssS0FBSyxDQUFmLEdBQW1CLEVBQW5CLEdBQXdCQSxLQUFuQztBQUFBLFFBQ0k1UyxTQUFTLEdBQUc2UyxJQUFJLENBQUM3UyxTQURyQjs7QUFHQSxRQUFJMFIsT0FBTyxHQUFHZSxVQUFVLEVBQXhCO0FBQ0EsUUFBSXBSLE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFFBQUkyUixRQUFRLEdBQUd6UixNQUFNLENBQUN0QixTQUFQLENBQWlCK1MsUUFBaEM7QUFDQSxRQUFJQyxFQUFFLEdBQUcvUyxTQUFTLElBQUlxQixNQUFNLENBQUN0QixTQUFQLENBQWlCQyxTQUF2QztBQUNBLFFBQUkwUyxNQUFNLEdBQUc7QUFDWE0sTUFBQUEsR0FBRyxFQUFFLEtBRE07QUFFWEMsTUFBQUEsT0FBTyxFQUFFO0FBRkUsS0FBYjtBQUlBLFFBQUlDLFdBQVcsR0FBRzdSLE1BQU0sQ0FBQ1YsTUFBUCxDQUFjd1MsS0FBaEM7QUFDQSxRQUFJQyxZQUFZLEdBQUcvUixNQUFNLENBQUNWLE1BQVAsQ0FBYzBTLE1BQWpDO0FBQ0EsUUFBSUosT0FBTyxHQUFHRixFQUFFLENBQUNPLEtBQUgsQ0FBUyw2QkFBVCxDQUFkLENBZHlCLENBYzhCOztBQUV2RCxRQUFJQyxJQUFJLEdBQUdSLEVBQUUsQ0FBQ08sS0FBSCxDQUFTLHNCQUFULENBQVg7QUFDQSxRQUFJRSxJQUFJLEdBQUdULEVBQUUsQ0FBQ08sS0FBSCxDQUFTLHlCQUFULENBQVg7QUFDQSxRQUFJRyxNQUFNLEdBQUcsQ0FBQ0YsSUFBRCxJQUFTUixFQUFFLENBQUNPLEtBQUgsQ0FBUyw0QkFBVCxDQUF0QjtBQUNBLFFBQUlJLE9BQU8sR0FBR1osUUFBUSxLQUFLLE9BQTNCO0FBQ0EsUUFBSWEsS0FBSyxHQUFHYixRQUFRLEtBQUssVUFBekIsQ0FwQnlCLENBb0JZOztBQUVyQyxRQUFJYyxXQUFXLEdBQUcsQ0FBQyxXQUFELEVBQWMsV0FBZCxFQUEyQixVQUEzQixFQUF1QyxVQUF2QyxFQUFtRCxVQUFuRCxFQUErRCxVQUEvRCxFQUEyRSxVQUEzRSxFQUF1RixVQUF2RixFQUFtRyxVQUFuRyxFQUErRyxVQUEvRyxFQUEySCxVQUEzSCxFQUF1SSxVQUF2SSxDQUFsQjs7QUFFQSxRQUFJLENBQUNMLElBQUQsSUFBU0ksS0FBVCxJQUFrQmpDLE9BQU8sQ0FBQ0UsS0FBMUIsSUFBbUNnQyxXQUFXLENBQUN6USxPQUFaLENBQW9CK1AsV0FBVyxHQUFHLEdBQWQsR0FBb0JFLFlBQXhDLEtBQXlELENBQWhHLEVBQW1HO0FBQ2pHRyxNQUFBQSxJQUFJLEdBQUdSLEVBQUUsQ0FBQ08sS0FBSCxDQUFTLHFCQUFULENBQVA7QUFDQSxVQUFJLENBQUNDLElBQUwsRUFBV0EsSUFBSSxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFQLENBQVA7QUFDWEksTUFBQUEsS0FBSyxHQUFHLEtBQVI7QUFDRCxLQTVCd0IsQ0E0QnZCOzs7QUFHRixRQUFJVixPQUFPLElBQUksQ0FBQ1MsT0FBaEIsRUFBeUI7QUFDdkJoQixNQUFBQSxNQUFNLENBQUNtQixFQUFQLEdBQVksU0FBWjtBQUNBbkIsTUFBQUEsTUFBTSxDQUFDTyxPQUFQLEdBQWlCLElBQWpCO0FBQ0Q7O0FBRUQsUUFBSU0sSUFBSSxJQUFJRSxNQUFSLElBQWtCRCxJQUF0QixFQUE0QjtBQUMxQmQsTUFBQUEsTUFBTSxDQUFDbUIsRUFBUCxHQUFZLEtBQVo7QUFDQW5CLE1BQUFBLE1BQU0sQ0FBQ00sR0FBUCxHQUFhLElBQWI7QUFDRCxLQXZDd0IsQ0F1Q3ZCOzs7QUFHRixXQUFPTixNQUFQO0FBQ0Q7O0FBRUQsV0FBU29CLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCO0FBQzVCLFFBQUlBLFNBQVMsS0FBSyxLQUFLLENBQXZCLEVBQTBCO0FBQ3hCQSxNQUFBQSxTQUFTLEdBQUcsRUFBWjtBQUNEOztBQUVELFFBQUksQ0FBQ3JCLE1BQUwsRUFBYTtBQUNYQSxNQUFBQSxNQUFNLEdBQUdDLFVBQVUsQ0FBQ29CLFNBQUQsQ0FBbkI7QUFDRDs7QUFFRCxXQUFPckIsTUFBUDtBQUNEOztBQUVELE1BQUlzQixPQUFKOztBQUVBLFdBQVNDLFdBQVQsR0FBdUI7QUFDckIsUUFBSTVTLE1BQU0sR0FBR0YsU0FBUyxFQUF0Qjs7QUFFQSxhQUFTK1MsUUFBVCxHQUFvQjtBQUNsQixVQUFJbkIsRUFBRSxHQUFHMVIsTUFBTSxDQUFDdEIsU0FBUCxDQUFpQkMsU0FBakIsQ0FBMkJtVSxXQUEzQixFQUFUO0FBQ0EsYUFBT3BCLEVBQUUsQ0FBQzVQLE9BQUgsQ0FBVyxRQUFYLEtBQXdCLENBQXhCLElBQTZCNFAsRUFBRSxDQUFDNVAsT0FBSCxDQUFXLFFBQVgsSUFBdUIsQ0FBcEQsSUFBeUQ0UCxFQUFFLENBQUM1UCxPQUFILENBQVcsU0FBWCxJQUF3QixDQUF4RjtBQUNEOztBQUVELFdBQU87QUFDTGlSLE1BQUFBLE1BQU0sRUFBRSxDQUFDLENBQUMvUyxNQUFNLENBQUN0QixTQUFQLENBQWlCQyxTQUFqQixDQUEyQnNULEtBQTNCLENBQWlDLE9BQWpDLENBREw7QUFFTFksTUFBQUEsUUFBUSxFQUFFQSxRQUFRLEVBRmI7QUFHTEcsTUFBQUEsU0FBUyxFQUFFLCtDQUErQ0MsSUFBL0MsQ0FBb0RqVCxNQUFNLENBQUN0QixTQUFQLENBQWlCQyxTQUFyRTtBQUhOLEtBQVA7QUFLRDs7QUFFRCxXQUFTdVUsVUFBVCxHQUFzQjtBQUNwQixRQUFJLENBQUNQLE9BQUwsRUFBYztBQUNaQSxNQUFBQSxPQUFPLEdBQUdDLFdBQVcsRUFBckI7QUFDRDs7QUFFRCxXQUFPRCxPQUFQO0FBQ0Q7O0FBRUQsTUFBSVEsc0JBQXNCLEdBQUcsU0FBU0Esc0JBQVQsR0FBa0M7QUFDN0QsUUFBSW5ULE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFdBQU8sT0FBT0UsTUFBTSxDQUFDb1QsY0FBZCxLQUFpQyxXQUF4QztBQUNELEdBSEQ7O0FBS0EsTUFBSUMsTUFBTSxHQUFHO0FBQ1hDLElBQUFBLElBQUksRUFBRSxRQURLO0FBRVhsVCxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQXZFLE1BQUFBLE1BQU0sQ0FBQ3VFLE1BQUQsRUFBUztBQUNiQyxRQUFBQSxNQUFNLEVBQUU7QUFDTjVDLFVBQUFBLFFBQVEsRUFBRSxJQURKO0FBRU42QyxVQUFBQSxjQUFjLEVBQUUsU0FBU0EsY0FBVCxHQUEwQjtBQUN4QyxnQkFBSSxDQUFDRixNQUFELElBQVdBLE1BQU0sQ0FBQ0csU0FBbEIsSUFBK0IsQ0FBQ0gsTUFBTSxDQUFDSSxXQUEzQyxFQUF3RDtBQUN4REosWUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWM1QyxRQUFkLEdBQXlCLElBQUl3QyxjQUFKLENBQW1CLFVBQVVRLE9BQVYsRUFBbUI7QUFDN0Qsa0JBQUk5QixLQUFLLEdBQUd5QixNQUFNLENBQUN6QixLQUFuQjtBQUFBLGtCQUNJRSxNQUFNLEdBQUd1QixNQUFNLENBQUN2QixNQURwQjtBQUVBLGtCQUFJNkIsUUFBUSxHQUFHL0IsS0FBZjtBQUNBLGtCQUFJZ0MsU0FBUyxHQUFHOUIsTUFBaEI7QUFDQTRCLGNBQUFBLE9BQU8sQ0FBQ3BYLE9BQVIsQ0FBZ0IsVUFBVWdWLElBQVYsRUFBZ0I7QUFDOUIsb0JBQUl1QyxjQUFjLEdBQUd2QyxJQUFJLENBQUN1QyxjQUExQjtBQUFBLG9CQUNJQyxXQUFXLEdBQUd4QyxJQUFJLENBQUN3QyxXQUR2QjtBQUFBLG9CQUVJclosTUFBTSxHQUFHNlcsSUFBSSxDQUFDN1csTUFGbEI7QUFHQSxvQkFBSUEsTUFBTSxJQUFJQSxNQUFNLEtBQUs0WSxNQUFNLENBQUNqUSxFQUFoQyxFQUFvQztBQUNwQ3VRLGdCQUFBQSxRQUFRLEdBQUdHLFdBQVcsR0FBR0EsV0FBVyxDQUFDbEMsS0FBZixHQUF1QixDQUFDaUMsY0FBYyxDQUFDLENBQUQsQ0FBZCxJQUFxQkEsY0FBdEIsRUFBc0NFLFVBQW5GO0FBQ0FILGdCQUFBQSxTQUFTLEdBQUdFLFdBQVcsR0FBR0EsV0FBVyxDQUFDaEMsTUFBZixHQUF3QixDQUFDK0IsY0FBYyxDQUFDLENBQUQsQ0FBZCxJQUFxQkEsY0FBdEIsRUFBc0NHLFNBQXJGO0FBQ0QsZUFQRDs7QUFTQSxrQkFBSUwsUUFBUSxLQUFLL0IsS0FBYixJQUFzQmdDLFNBQVMsS0FBSzlCLE1BQXhDLEVBQWdEO0FBQzlDdUIsZ0JBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVyxhQUFkO0FBQ0Q7QUFDRixhQWpCd0IsQ0FBekI7QUFrQkFaLFlBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjNUMsUUFBZCxDQUF1QndELE9BQXZCLENBQStCYixNQUFNLENBQUNqUSxFQUF0QztBQUNELFdBdkJLO0FBd0JOK1EsVUFBQUEsY0FBYyxFQUFFLFNBQVNBLGNBQVQsR0FBMEI7QUFDeEMsZ0JBQUlkLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjNUMsUUFBZCxJQUEwQjJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjNUMsUUFBZCxDQUF1QjBELFNBQWpELElBQThEZixNQUFNLENBQUNqUSxFQUF6RSxFQUE2RTtBQUMzRWlRLGNBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjNUMsUUFBZCxDQUF1QjBELFNBQXZCLENBQWlDZixNQUFNLENBQUNqUSxFQUF4QztBQUNBaVEsY0FBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWM1QyxRQUFkLEdBQXlCLElBQXpCO0FBQ0Q7QUFDRixXQTdCSztBQThCTnVELFVBQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULEdBQXlCO0FBQ3RDLGdCQUFJLENBQUNaLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUFsQixJQUErQixDQUFDSCxNQUFNLENBQUNJLFdBQTNDLEVBQXdEO0FBQ3hESixZQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksY0FBWjtBQUNBaEIsWUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFFBQVo7QUFDRCxXQWxDSztBQW1DTkMsVUFBQUEsd0JBQXdCLEVBQUUsU0FBU0Esd0JBQVQsR0FBb0M7QUFDNUQsZ0JBQUksQ0FBQ2pCLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUFsQixJQUErQixDQUFDSCxNQUFNLENBQUNJLFdBQTNDLEVBQXdEO0FBQ3hESixZQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksbUJBQVo7QUFDRDtBQXRDSztBQURLLE9BQVQsQ0FBTjtBQTBDRCxLQTlDVTtBQStDWDlOLElBQUFBLEVBQUUsRUFBRTtBQUNGZ08sTUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsQ0FBY2xCLE1BQWQsRUFBc0I7QUFDMUIsWUFBSXZULE1BQU0sR0FBR0YsU0FBUyxFQUF0Qjs7QUFFQSxZQUFJeVQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMEUsY0FBZCxJQUFnQ3ZCLHNCQUFzQixFQUExRCxFQUE4RDtBQUM1REksVUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNDLGNBQWQ7QUFDQTtBQUNELFNBTnlCLENBTXhCOzs7QUFHRnpULFFBQUFBLE1BQU0sQ0FBQ3JELGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDNFcsTUFBTSxDQUFDQyxNQUFQLENBQWNXLGFBQWhELEVBVDBCLENBU3NDOztBQUVoRW5VLFFBQUFBLE1BQU0sQ0FBQ3JELGdCQUFQLENBQXdCLG1CQUF4QixFQUE2QzRXLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjZ0Isd0JBQTNEO0FBQ0QsT0FiQztBQWNGRyxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDLFlBQUl2VCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQXlULFFBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjYSxjQUFkO0FBQ0FyVSxRQUFBQSxNQUFNLENBQUNwRCxtQkFBUCxDQUEyQixRQUEzQixFQUFxQzJXLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVyxhQUFuRDtBQUNBblUsUUFBQUEsTUFBTSxDQUFDcEQsbUJBQVAsQ0FBMkIsbUJBQTNCLEVBQWdEMlcsTUFBTSxDQUFDQyxNQUFQLENBQWNnQix3QkFBOUQ7QUFDRDtBQW5CQztBQS9DTyxHQUFiO0FBc0VBLE1BQUlJLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQmxhLE1BQWhCLEVBQXdCbWEsT0FBeEIsRUFBaUM7QUFDdkMsVUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFDdEJBLFFBQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0Q7O0FBRUQsVUFBSTlVLE1BQU0sR0FBR0YsU0FBUyxFQUF0QjtBQUNBLFVBQUl5VCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl3QixZQUFZLEdBQUcvVSxNQUFNLENBQUNnVixnQkFBUCxJQUEyQmhWLE1BQU0sQ0FBQ2lWLHNCQUFyRDtBQUNBLFVBQUlyRSxRQUFRLEdBQUcsSUFBSW1FLFlBQUosQ0FBaUIsVUFBVUcsU0FBVixFQUFxQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxZQUFJQSxTQUFTLENBQUNwYSxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCeVksVUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGdCQUFaLEVBQThCVyxTQUFTLENBQUMsQ0FBRCxDQUF2QztBQUNBO0FBQ0Q7O0FBRUQsWUFBSUMsY0FBYyxHQUFHLFNBQVNBLGNBQVQsR0FBMEI7QUFDN0M1QixVQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZ0JBQVosRUFBOEJXLFNBQVMsQ0FBQyxDQUFELENBQXZDO0FBQ0QsU0FGRDs7QUFJQSxZQUFJbFYsTUFBTSxDQUFDTixxQkFBWCxFQUFrQztBQUNoQ00sVUFBQUEsTUFBTSxDQUFDTixxQkFBUCxDQUE2QnlWLGNBQTdCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xuVixVQUFBQSxNQUFNLENBQUNULFVBQVAsQ0FBa0I0VixjQUFsQixFQUFrQyxDQUFsQztBQUNEO0FBQ0YsT0FsQmMsQ0FBZjtBQW1CQXZFLE1BQUFBLFFBQVEsQ0FBQ3dELE9BQVQsQ0FBaUJ6WixNQUFqQixFQUF5QjtBQUN2QnlhLFFBQUFBLFVBQVUsRUFBRSxPQUFPTixPQUFPLENBQUNNLFVBQWYsS0FBOEIsV0FBOUIsR0FBNEMsSUFBNUMsR0FBbUROLE9BQU8sQ0FBQ00sVUFEaEQ7QUFFdkJDLFFBQUFBLFNBQVMsRUFBRSxPQUFPUCxPQUFPLENBQUNPLFNBQWYsS0FBNkIsV0FBN0IsR0FBMkMsSUFBM0MsR0FBa0RQLE9BQU8sQ0FBQ08sU0FGOUM7QUFHdkJDLFFBQUFBLGFBQWEsRUFBRSxPQUFPUixPQUFPLENBQUNRLGFBQWYsS0FBaUMsV0FBakMsR0FBK0MsSUFBL0MsR0FBc0RSLE9BQU8sQ0FBQ1E7QUFIdEQsT0FBekI7QUFLQS9CLE1BQUFBLE1BQU0sQ0FBQzNDLFFBQVAsQ0FBZ0IyRSxTQUFoQixDQUEwQi9ULElBQTFCLENBQStCb1AsUUFBL0I7QUFDRCxLQWxDWTtBQW1DYjZELElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDbEQsT0FBUCxDQUFlTyxRQUFoQixJQUE0QixDQUFDMkMsTUFBTSxDQUFDdkQsTUFBUCxDQUFjWSxRQUEvQyxFQUF5RDs7QUFFekQsVUFBSTJDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dGLGNBQWxCLEVBQWtDO0FBQ2hDLFlBQUlDLGdCQUFnQixHQUFHbEMsTUFBTSxDQUFDbUMsR0FBUCxDQUFXcE8sT0FBWCxFQUF2Qjs7QUFFQSxhQUFLLElBQUl6TSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNGEsZ0JBQWdCLENBQUMzYSxNQUFyQyxFQUE2Q0QsQ0FBQyxJQUFJLENBQWxELEVBQXFEO0FBQ25EMFksVUFBQUEsTUFBTSxDQUFDM0MsUUFBUCxDQUFnQmlFLE1BQWhCLENBQXVCWSxnQkFBZ0IsQ0FBQzVhLENBQUQsQ0FBdkM7QUFDRDtBQUNGLE9BVm1CLENBVWxCOzs7QUFHRjBZLE1BQUFBLE1BQU0sQ0FBQzNDLFFBQVAsQ0FBZ0JpRSxNQUFoQixDQUF1QnRCLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVyxDQUFYLENBQXZCLEVBQXNDO0FBQ3BDTCxRQUFBQSxTQUFTLEVBQUU5QixNQUFNLENBQUN2RCxNQUFQLENBQWMyRjtBQURXLE9BQXRDLEVBYm9CLENBZWhCOztBQUVKcEMsTUFBQUEsTUFBTSxDQUFDM0MsUUFBUCxDQUFnQmlFLE1BQWhCLENBQXVCdEIsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixDQUF2QixFQUE2QztBQUMzQ1IsUUFBQUEsVUFBVSxFQUFFO0FBRCtCLE9BQTdDO0FBR0QsS0F2RFk7QUF3RGJULElBQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFVBQUlwQixNQUFNLEdBQUcsSUFBYjtBQUNBQSxNQUFBQSxNQUFNLENBQUMzQyxRQUFQLENBQWdCMkUsU0FBaEIsQ0FBMEIvWSxPQUExQixDQUFrQyxVQUFVb1UsUUFBVixFQUFvQjtBQUNwREEsUUFBQUEsUUFBUSxDQUFDaUYsVUFBVDtBQUNELE9BRkQ7QUFHQXRDLE1BQUFBLE1BQU0sQ0FBQzNDLFFBQVAsQ0FBZ0IyRSxTQUFoQixHQUE0QixFQUE1QjtBQUNEO0FBOURZLEdBQWY7QUFnRUEsTUFBSU8sVUFBVSxHQUFHO0FBQ2Z4QyxJQUFBQSxJQUFJLEVBQUUsVUFEUztBQUVmdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ05ZLE1BQUFBLFFBQVEsRUFBRSxLQURKO0FBRU40RSxNQUFBQSxjQUFjLEVBQUUsS0FGVjtBQUdORyxNQUFBQSxvQkFBb0IsRUFBRTtBQUhoQixLQUZPO0FBT2Z2VixJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCM0MsUUFBQUEsUUFBUSxFQUFFalYsUUFBUSxDQUFDLEVBQUQsRUFBS2laLFFBQUwsRUFBZTtBQUMvQlcsVUFBQUEsU0FBUyxFQUFFO0FBRG9CLFNBQWY7QUFETSxPQUFULENBQWpCO0FBS0QsS0FkYztBQWVmOU8sSUFBQUEsRUFBRSxFQUFFO0FBQ0ZnTyxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQkEsUUFBQUEsTUFBTSxDQUFDM0MsUUFBUCxDQUFnQjZELElBQWhCO0FBQ0QsT0FIQztBQUlGRSxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDQSxRQUFBQSxNQUFNLENBQUMzQyxRQUFQLENBQWdCK0QsT0FBaEI7QUFDRDtBQU5DO0FBZlcsR0FBakI7QUF5QkEsTUFBSW9CLE9BQU8sR0FBRztBQUNaQyxJQUFBQSxTQUFTLEVBQUUsU0FBU0EsU0FBVCxDQUFtQkMsY0FBbkIsRUFBbUM7QUFDNUMsVUFBSXRVLFFBQVEsR0FBRyxJQUFmO0FBQ0EsVUFBSSxDQUFDQSxRQUFRLENBQUN1VSxPQUFkLEVBQXVCO0FBQ3ZCL2EsTUFBQUEsTUFBTSxDQUFDb0IsSUFBUCxDQUFZb0YsUUFBUSxDQUFDdVUsT0FBckIsRUFBOEIxWixPQUE5QixDQUFzQyxVQUFVMlosVUFBVixFQUFzQjtBQUMxRCxZQUFJL2IsTUFBTSxHQUFHdUgsUUFBUSxDQUFDdVUsT0FBVCxDQUFpQkMsVUFBakIsQ0FBYixDQUQwRCxDQUNmOztBQUUzQyxZQUFJL2IsTUFBTSxDQUFDNFYsTUFBWCxFQUFtQjtBQUNqQmhCLFVBQUFBLE1BQU0sQ0FBQ2lILGNBQUQsRUFBaUI3YixNQUFNLENBQUM0VixNQUF4QixDQUFOO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0FYVztBQVlab0csSUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsQ0FBb0JDLGFBQXBCLEVBQW1DO0FBQzdDLFVBQUlBLGFBQWEsS0FBSyxLQUFLLENBQTNCLEVBQThCO0FBQzVCQSxRQUFBQSxhQUFhLEdBQUcsRUFBaEI7QUFDRDs7QUFFRCxVQUFJMVUsUUFBUSxHQUFHLElBQWY7QUFDQSxVQUFJLENBQUNBLFFBQVEsQ0FBQ3VVLE9BQWQsRUFBdUI7QUFDdkIvYSxNQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlvRixRQUFRLENBQUN1VSxPQUFyQixFQUE4QjFaLE9BQTlCLENBQXNDLFVBQVUyWixVQUFWLEVBQXNCO0FBQzFELFlBQUkvYixNQUFNLEdBQUd1SCxRQUFRLENBQUN1VSxPQUFULENBQWlCQyxVQUFqQixDQUFiO0FBQ0EsWUFBSUcsWUFBWSxHQUFHRCxhQUFhLENBQUNGLFVBQUQsQ0FBYixJQUE2QixFQUFoRCxDQUYwRCxDQUVOOztBQUVwRCxZQUFJL2IsTUFBTSxDQUFDcU0sRUFBUCxJQUFhOUUsUUFBUSxDQUFDOEUsRUFBMUIsRUFBOEI7QUFDNUJ0TCxVQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVluQyxNQUFNLENBQUNxTSxFQUFuQixFQUF1QmpLLE9BQXZCLENBQStCLFVBQVUrWixlQUFWLEVBQTJCO0FBQ3hENVUsWUFBQUEsUUFBUSxDQUFDOEUsRUFBVCxDQUFZOFAsZUFBWixFQUE2Qm5jLE1BQU0sQ0FBQ3FNLEVBQVAsQ0FBVThQLGVBQVYsQ0FBN0I7QUFDRCxXQUZEO0FBR0QsU0FSeUQsQ0FReEQ7OztBQUdGLFlBQUluYyxNQUFNLENBQUNnRyxNQUFYLEVBQW1CO0FBQ2pCaEcsVUFBQUEsTUFBTSxDQUFDZ0csTUFBUCxDQUFjc0IsSUFBZCxDQUFtQkMsUUFBbkIsRUFBNkIyVSxZQUE3QjtBQUNEO0FBQ0YsT0FkRDtBQWVEO0FBbENXLEdBQWQ7QUFxQ0E7O0FBQ0EsTUFBSUUsYUFBYSxHQUFHO0FBQ2xCL1AsSUFBQUEsRUFBRSxFQUFFLFNBQVNBLEVBQVQsQ0FBWWdCLE1BQVosRUFBb0JXLE9BQXBCLEVBQTZCcU8sUUFBN0IsRUFBdUM7QUFDekMsVUFBSWpjLElBQUksR0FBRyxJQUFYO0FBQ0EsVUFBSSxPQUFPNE4sT0FBUCxLQUFtQixVQUF2QixFQUFtQyxPQUFPNU4sSUFBUDtBQUNuQyxVQUFJa2MsTUFBTSxHQUFHRCxRQUFRLEdBQUcsU0FBSCxHQUFlLE1BQXBDO0FBQ0FoUCxNQUFBQSxNQUFNLENBQUM1QyxLQUFQLENBQWEsR0FBYixFQUFrQnJJLE9BQWxCLENBQTBCLFVBQVVtTCxLQUFWLEVBQWlCO0FBQ3pDLFlBQUksQ0FBQ25OLElBQUksQ0FBQ21jLGVBQUwsQ0FBcUJoUCxLQUFyQixDQUFMLEVBQWtDbk4sSUFBSSxDQUFDbWMsZUFBTCxDQUFxQmhQLEtBQXJCLElBQThCLEVBQTlCO0FBQ2xDbk4sUUFBQUEsSUFBSSxDQUFDbWMsZUFBTCxDQUFxQmhQLEtBQXJCLEVBQTRCK08sTUFBNUIsRUFBb0N0TyxPQUFwQztBQUNELE9BSEQ7QUFJQSxhQUFPNU4sSUFBUDtBQUNELEtBVmlCO0FBV2xCb2MsSUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsQ0FBY25QLE1BQWQsRUFBc0JXLE9BQXRCLEVBQStCcU8sUUFBL0IsRUFBeUM7QUFDN0MsVUFBSWpjLElBQUksR0FBRyxJQUFYO0FBQ0EsVUFBSSxPQUFPNE4sT0FBUCxLQUFtQixVQUF2QixFQUFtQyxPQUFPNU4sSUFBUDs7QUFFbkMsZUFBU3FjLFdBQVQsR0FBdUI7QUFDckJyYyxRQUFBQSxJQUFJLENBQUN3TixHQUFMLENBQVNQLE1BQVQsRUFBaUJvUCxXQUFqQjs7QUFFQSxZQUFJQSxXQUFXLENBQUNDLGNBQWhCLEVBQWdDO0FBQzlCLGlCQUFPRCxXQUFXLENBQUNDLGNBQW5CO0FBQ0Q7O0FBRUQsYUFBSyxJQUFJdlMsSUFBSSxHQUFHMUksU0FBUyxDQUFDZixNQUFyQixFQUE2QnVHLElBQUksR0FBRyxJQUFJNkIsS0FBSixDQUFVcUIsSUFBVixDQUFwQyxFQUFxREUsSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdGLElBQTNFLEVBQWlGRSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGcEQsVUFBQUEsSUFBSSxDQUFDb0QsSUFBRCxDQUFKLEdBQWE1SSxTQUFTLENBQUM0SSxJQUFELENBQXRCO0FBQ0Q7O0FBRUQyRCxRQUFBQSxPQUFPLENBQUNuTSxLQUFSLENBQWN6QixJQUFkLEVBQW9CNkcsSUFBcEI7QUFDRDs7QUFFRHdWLE1BQUFBLFdBQVcsQ0FBQ0MsY0FBWixHQUE2QjFPLE9BQTdCO0FBQ0EsYUFBTzVOLElBQUksQ0FBQ2lNLEVBQUwsQ0FBUWdCLE1BQVIsRUFBZ0JvUCxXQUFoQixFQUE2QkosUUFBN0IsQ0FBUDtBQUNELEtBL0JpQjtBQWdDbEJNLElBQUFBLEtBQUssRUFBRSxTQUFTQSxLQUFULENBQWUzTyxPQUFmLEVBQXdCcU8sUUFBeEIsRUFBa0M7QUFDdkMsVUFBSWpjLElBQUksR0FBRyxJQUFYO0FBQ0EsVUFBSSxPQUFPNE4sT0FBUCxLQUFtQixVQUF2QixFQUFtQyxPQUFPNU4sSUFBUDtBQUNuQyxVQUFJa2MsTUFBTSxHQUFHRCxRQUFRLEdBQUcsU0FBSCxHQUFlLE1BQXBDOztBQUVBLFVBQUlqYyxJQUFJLENBQUN3YyxrQkFBTCxDQUF3QmxWLE9BQXhCLENBQWdDc0csT0FBaEMsSUFBMkMsQ0FBL0MsRUFBa0Q7QUFDaEQ1TixRQUFBQSxJQUFJLENBQUN3YyxrQkFBTCxDQUF3Qk4sTUFBeEIsRUFBZ0N0TyxPQUFoQztBQUNEOztBQUVELGFBQU81TixJQUFQO0FBQ0QsS0ExQ2lCO0FBMkNsQnljLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCN08sT0FBaEIsRUFBeUI7QUFDL0IsVUFBSTVOLElBQUksR0FBRyxJQUFYO0FBQ0EsVUFBSSxDQUFDQSxJQUFJLENBQUN3YyxrQkFBVixFQUE4QixPQUFPeGMsSUFBUDtBQUM5QixVQUFJbVEsS0FBSyxHQUFHblEsSUFBSSxDQUFDd2Msa0JBQUwsQ0FBd0JsVixPQUF4QixDQUFnQ3NHLE9BQWhDLENBQVo7O0FBRUEsVUFBSXVDLEtBQUssSUFBSSxDQUFiLEVBQWdCO0FBQ2RuUSxRQUFBQSxJQUFJLENBQUN3YyxrQkFBTCxDQUF3QjNPLE1BQXhCLENBQStCc0MsS0FBL0IsRUFBc0MsQ0FBdEM7QUFDRDs7QUFFRCxhQUFPblEsSUFBUDtBQUNELEtBckRpQjtBQXNEbEJ3TixJQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxDQUFhUCxNQUFiLEVBQXFCVyxPQUFyQixFQUE4QjtBQUNqQyxVQUFJNU4sSUFBSSxHQUFHLElBQVg7QUFDQSxVQUFJLENBQUNBLElBQUksQ0FBQ21jLGVBQVYsRUFBMkIsT0FBT25jLElBQVA7QUFDM0JpTixNQUFBQSxNQUFNLENBQUM1QyxLQUFQLENBQWEsR0FBYixFQUFrQnJJLE9BQWxCLENBQTBCLFVBQVVtTCxLQUFWLEVBQWlCO0FBQ3pDLFlBQUksT0FBT1MsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQzVOLFVBQUFBLElBQUksQ0FBQ21jLGVBQUwsQ0FBcUJoUCxLQUFyQixJQUE4QixFQUE5QjtBQUNELFNBRkQsTUFFTyxJQUFJbk4sSUFBSSxDQUFDbWMsZUFBTCxDQUFxQmhQLEtBQXJCLENBQUosRUFBaUM7QUFDdENuTixVQUFBQSxJQUFJLENBQUNtYyxlQUFMLENBQXFCaFAsS0FBckIsRUFBNEJuTCxPQUE1QixDQUFvQyxVQUFVMGEsWUFBVixFQUF3QnZNLEtBQXhCLEVBQStCO0FBQ2pFLGdCQUFJdU0sWUFBWSxLQUFLOU8sT0FBakIsSUFBNEI4TyxZQUFZLENBQUNKLGNBQWIsSUFBK0JJLFlBQVksQ0FBQ0osY0FBYixLQUFnQzFPLE9BQS9GLEVBQXdHO0FBQ3RHNU4sY0FBQUEsSUFBSSxDQUFDbWMsZUFBTCxDQUFxQmhQLEtBQXJCLEVBQTRCVSxNQUE1QixDQUFtQ3NDLEtBQW5DLEVBQTBDLENBQTFDO0FBQ0Q7QUFDRixXQUpEO0FBS0Q7QUFDRixPQVZEO0FBV0EsYUFBT25RLElBQVA7QUFDRCxLQXJFaUI7QUFzRWxCK1osSUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsR0FBZ0I7QUFDcEIsVUFBSS9aLElBQUksR0FBRyxJQUFYO0FBQ0EsVUFBSSxDQUFDQSxJQUFJLENBQUNtYyxlQUFWLEVBQTJCLE9BQU9uYyxJQUFQO0FBQzNCLFVBQUlpTixNQUFKO0FBQ0EsVUFBSXFCLElBQUo7QUFDQSxVQUFJaEYsT0FBSjs7QUFFQSxXQUFLLElBQUlvQixLQUFLLEdBQUdySixTQUFTLENBQUNmLE1BQXRCLEVBQThCdUcsSUFBSSxHQUFHLElBQUk2QixLQUFKLENBQVVnQyxLQUFWLENBQXJDLEVBQXVEQyxLQUFLLEdBQUcsQ0FBcEUsRUFBdUVBLEtBQUssR0FBR0QsS0FBL0UsRUFBc0ZDLEtBQUssRUFBM0YsRUFBK0Y7QUFDN0Y5RCxRQUFBQSxJQUFJLENBQUM4RCxLQUFELENBQUosR0FBY3RKLFNBQVMsQ0FBQ3NKLEtBQUQsQ0FBdkI7QUFDRDs7QUFFRCxVQUFJLE9BQU85RCxJQUFJLENBQUMsQ0FBRCxDQUFYLEtBQW1CLFFBQW5CLElBQStCNkIsS0FBSyxDQUFDSyxPQUFOLENBQWNsQyxJQUFJLENBQUMsQ0FBRCxDQUFsQixDQUFuQyxFQUEyRDtBQUN6RG9HLFFBQUFBLE1BQU0sR0FBR3BHLElBQUksQ0FBQyxDQUFELENBQWI7QUFDQXlILFFBQUFBLElBQUksR0FBR3pILElBQUksQ0FBQzBOLEtBQUwsQ0FBVyxDQUFYLEVBQWMxTixJQUFJLENBQUN2RyxNQUFuQixDQUFQO0FBQ0FnSixRQUFBQSxPQUFPLEdBQUd0SixJQUFWO0FBQ0QsT0FKRCxNQUlPO0FBQ0xpTixRQUFBQSxNQUFNLEdBQUdwRyxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFvRyxNQUFqQjtBQUNBcUIsUUFBQUEsSUFBSSxHQUFHekgsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFReUgsSUFBZjtBQUNBaEYsUUFBQUEsT0FBTyxHQUFHekMsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFReUMsT0FBUixJQUFtQnRKLElBQTdCO0FBQ0Q7O0FBRURzTyxNQUFBQSxJQUFJLENBQUMzQixPQUFMLENBQWFyRCxPQUFiO0FBQ0EsVUFBSXFULFdBQVcsR0FBR2pVLEtBQUssQ0FBQ0ssT0FBTixDQUFja0UsTUFBZCxJQUF3QkEsTUFBeEIsR0FBaUNBLE1BQU0sQ0FBQzVDLEtBQVAsQ0FBYSxHQUFiLENBQW5EO0FBQ0FzUyxNQUFBQSxXQUFXLENBQUMzYSxPQUFaLENBQW9CLFVBQVVtTCxLQUFWLEVBQWlCO0FBQ25DLFlBQUluTixJQUFJLENBQUN3YyxrQkFBTCxJQUEyQnhjLElBQUksQ0FBQ3djLGtCQUFMLENBQXdCbGMsTUFBdkQsRUFBK0Q7QUFDN0ROLFVBQUFBLElBQUksQ0FBQ3djLGtCQUFMLENBQXdCeGEsT0FBeEIsQ0FBZ0MsVUFBVTBhLFlBQVYsRUFBd0I7QUFDdERBLFlBQUFBLFlBQVksQ0FBQ2piLEtBQWIsQ0FBbUI2SCxPQUFuQixFQUE0QixDQUFDNkQsS0FBRCxFQUFRMUUsTUFBUixDQUFlNkYsSUFBZixDQUE1QjtBQUNELFdBRkQ7QUFHRDs7QUFFRCxZQUFJdE8sSUFBSSxDQUFDbWMsZUFBTCxJQUF3Qm5jLElBQUksQ0FBQ21jLGVBQUwsQ0FBcUJoUCxLQUFyQixDQUE1QixFQUF5RDtBQUN2RG5OLFVBQUFBLElBQUksQ0FBQ21jLGVBQUwsQ0FBcUJoUCxLQUFyQixFQUE0Qm5MLE9BQTVCLENBQW9DLFVBQVUwYSxZQUFWLEVBQXdCO0FBQzFEQSxZQUFBQSxZQUFZLENBQUNqYixLQUFiLENBQW1CNkgsT0FBbkIsRUFBNEJnRixJQUE1QjtBQUNELFdBRkQ7QUFHRDtBQUNGLE9BWkQ7QUFhQSxhQUFPdE8sSUFBUDtBQUNEO0FBM0dpQixHQUFwQjs7QUE4R0EsV0FBUzRjLFVBQVQsR0FBc0I7QUFDcEIsUUFBSTdELE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXpCLEtBQUo7QUFDQSxRQUFJRSxNQUFKO0FBQ0EsUUFBSTBELEdBQUcsR0FBR25DLE1BQU0sQ0FBQ21DLEdBQWpCOztBQUVBLFFBQUksT0FBT25DLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhCLEtBQXJCLEtBQStCLFdBQS9CLElBQThDeUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOEIsS0FBZCxLQUF3QixJQUExRSxFQUFnRjtBQUM5RUEsTUFBQUEsS0FBSyxHQUFHeUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOEIsS0FBdEI7QUFDRCxLQUZELE1BRU87QUFDTEEsTUFBQUEsS0FBSyxHQUFHNEQsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPMkIsV0FBZjtBQUNEOztBQUVELFFBQUksT0FBTzlELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2dDLE1BQXJCLEtBQWdDLFdBQWhDLElBQStDdUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjZ0MsTUFBZCxLQUF5QixJQUE1RSxFQUFrRjtBQUNoRkEsTUFBQUEsTUFBTSxHQUFHdUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjZ0MsTUFBdkI7QUFDRCxLQUZELE1BRU87QUFDTEEsTUFBQUEsTUFBTSxHQUFHMEQsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPNEIsWUFBaEI7QUFDRDs7QUFFRCxRQUFJeEYsS0FBSyxLQUFLLENBQVYsSUFBZXlCLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBZixJQUF3Q3ZGLE1BQU0sS0FBSyxDQUFYLElBQWdCdUIsTUFBTSxDQUFDaUUsVUFBUCxFQUE1RCxFQUFpRjtBQUMvRTtBQUNELEtBcEJtQixDQW9CbEI7OztBQUdGMUYsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLEdBQUcyRixRQUFRLENBQUMvQixHQUFHLENBQUNsTCxHQUFKLENBQVEsY0FBUixLQUEyQixDQUE1QixFQUErQixFQUEvQixDQUFoQixHQUFxRGlOLFFBQVEsQ0FBQy9CLEdBQUcsQ0FBQ2xMLEdBQUosQ0FBUSxlQUFSLEtBQTRCLENBQTdCLEVBQWdDLEVBQWhDLENBQXJFO0FBQ0F3SCxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sR0FBR3lGLFFBQVEsQ0FBQy9CLEdBQUcsQ0FBQ2xMLEdBQUosQ0FBUSxhQUFSLEtBQTBCLENBQTNCLEVBQThCLEVBQTlCLENBQWpCLEdBQXFEaU4sUUFBUSxDQUFDL0IsR0FBRyxDQUFDbEwsR0FBSixDQUFRLGdCQUFSLEtBQTZCLENBQTlCLEVBQWlDLEVBQWpDLENBQXRFO0FBQ0EsUUFBSWtOLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhN0YsS0FBYixDQUFKLEVBQXlCQSxLQUFLLEdBQUcsQ0FBUjtBQUN6QixRQUFJNEYsTUFBTSxDQUFDQyxLQUFQLENBQWEzRixNQUFiLENBQUosRUFBMEJBLE1BQU0sR0FBRyxDQUFUO0FBQzFCaEQsSUFBQUEsTUFBTSxDQUFDdUUsTUFBRCxFQUFTO0FBQ2J6QixNQUFBQSxLQUFLLEVBQUVBLEtBRE07QUFFYkUsTUFBQUEsTUFBTSxFQUFFQSxNQUZLO0FBR2I0RixNQUFBQSxJQUFJLEVBQUVyRSxNQUFNLENBQUNnRSxZQUFQLEtBQXdCekYsS0FBeEIsR0FBZ0NFO0FBSHpCLEtBQVQsQ0FBTjtBQUtEOztBQUVELFdBQVM2RixZQUFULEdBQXdCO0FBQ3RCLFFBQUl0RSxNQUFNLEdBQUcsSUFBYjs7QUFFQSxhQUFTdUUsaUJBQVQsQ0FBMkJDLFFBQTNCLEVBQXFDO0FBQ25DLFVBQUl4RSxNQUFNLENBQUNnRSxZQUFQLEVBQUosRUFBMkI7QUFDekIsZUFBT1EsUUFBUDtBQUNELE9BSGtDLENBR2pDOzs7QUFHRixhQUFPO0FBQ0wsaUJBQVMsUUFESjtBQUVMLHNCQUFjLGFBRlQ7QUFHTCwwQkFBa0IsY0FIYjtBQUlMLHVCQUFlLFlBSlY7QUFLTCx3QkFBZ0IsZUFMWDtBQU1MLHdCQUFnQixhQU5YO0FBT0wseUJBQWlCLGdCQVBaO0FBUUwsdUJBQWU7QUFSVixRQVNMQSxRQVRLLENBQVA7QUFVRDs7QUFFRCxhQUFTQyx5QkFBVCxDQUFtQ0MsSUFBbkMsRUFBeUNDLEtBQXpDLEVBQWdEO0FBQzlDLGFBQU96TyxVQUFVLENBQUN3TyxJQUFJLENBQUM5WSxnQkFBTCxDQUFzQjJZLGlCQUFpQixDQUFDSSxLQUFELENBQXZDLEtBQW1ELENBQXBELENBQWpCO0FBQ0Q7O0FBRUQsUUFBSWxJLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQ0EsUUFBSTRGLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBQXhCO0FBQUEsUUFDSXVDLFVBQVUsR0FBRzVFLE1BQU0sQ0FBQ3FFLElBRHhCO0FBQUEsUUFFSVEsR0FBRyxHQUFHN0UsTUFBTSxDQUFDOEUsWUFGakI7QUFBQSxRQUdJQyxRQUFRLEdBQUcvRSxNQUFNLENBQUMrRSxRQUh0QjtBQUlBLFFBQUlDLFNBQVMsR0FBR2hGLE1BQU0sQ0FBQ2lGLE9BQVAsSUFBa0J4SSxNQUFNLENBQUN3SSxPQUFQLENBQWVDLE9BQWpEO0FBQ0EsUUFBSUMsb0JBQW9CLEdBQUdILFNBQVMsR0FBR2hGLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZUcsTUFBZixDQUFzQjdkLE1BQXpCLEdBQWtDeVksTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBcEY7QUFDQSxRQUFJNmQsTUFBTSxHQUFHL0MsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNaVcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBeEMsQ0FBYjtBQUNBLFFBQUlDLFlBQVksR0FBR04sU0FBUyxHQUFHaEYsTUFBTSxDQUFDaUYsT0FBUCxDQUFlRyxNQUFmLENBQXNCN2QsTUFBekIsR0FBa0M2ZCxNQUFNLENBQUM3ZCxNQUFyRTtBQUNBLFFBQUlnZSxRQUFRLEdBQUcsRUFBZjtBQUNBLFFBQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUNBLFFBQUlDLGVBQWUsR0FBRyxFQUF0QjtBQUNBLFFBQUlDLFlBQVksR0FBR2pKLE1BQU0sQ0FBQ2tKLGtCQUExQjs7QUFFQSxRQUFJLE9BQU9ELFlBQVAsS0FBd0IsVUFBNUIsRUFBd0M7QUFDdENBLE1BQUFBLFlBQVksR0FBR2pKLE1BQU0sQ0FBQ2tKLGtCQUFQLENBQTBCbGQsSUFBMUIsQ0FBK0J1WCxNQUEvQixDQUFmO0FBQ0Q7O0FBRUQsUUFBSTRGLFdBQVcsR0FBR25KLE1BQU0sQ0FBQ29KLGlCQUF6Qjs7QUFFQSxRQUFJLE9BQU9ELFdBQVAsS0FBdUIsVUFBM0IsRUFBdUM7QUFDckNBLE1BQUFBLFdBQVcsR0FBR25KLE1BQU0sQ0FBQ29KLGlCQUFQLENBQXlCcGQsSUFBekIsQ0FBOEJ1WCxNQUE5QixDQUFkO0FBQ0Q7O0FBRUQsUUFBSThGLHNCQUFzQixHQUFHOUYsTUFBTSxDQUFDdUYsUUFBUCxDQUFnQmhlLE1BQTdDO0FBQ0EsUUFBSXdlLHdCQUF3QixHQUFHL0YsTUFBTSxDQUFDd0YsVUFBUCxDQUFrQmplLE1BQWpEO0FBQ0EsUUFBSXllLFlBQVksR0FBR3ZKLE1BQU0sQ0FBQ3VKLFlBQTFCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHLENBQUNQLFlBQXJCO0FBQ0EsUUFBSVEsYUFBYSxHQUFHLENBQXBCO0FBQ0EsUUFBSTlPLEtBQUssR0FBRyxDQUFaOztBQUVBLFFBQUksT0FBT3dOLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDckM7QUFDRDs7QUFFRCxRQUFJLE9BQU9vQixZQUFQLEtBQXdCLFFBQXhCLElBQW9DQSxZQUFZLENBQUN6WCxPQUFiLENBQXFCLEdBQXJCLEtBQTZCLENBQXJFLEVBQXdFO0FBQ3RFeVgsTUFBQUEsWUFBWSxHQUFHOVAsVUFBVSxDQUFDOFAsWUFBWSxDQUFDakwsT0FBYixDQUFxQixHQUFyQixFQUEwQixFQUExQixDQUFELENBQVYsR0FBNEMsR0FBNUMsR0FBa0Q2SixVQUFqRTtBQUNEOztBQUVENUUsSUFBQUEsTUFBTSxDQUFDbUcsV0FBUCxHQUFxQixDQUFDSCxZQUF0QixDQWhFc0IsQ0FnRWM7O0FBRXBDLFFBQUluQixHQUFKLEVBQVNPLE1BQU0sQ0FBQ25PLEdBQVAsQ0FBVztBQUNsQm1QLE1BQUFBLFVBQVUsRUFBRSxFQURNO0FBRWxCQyxNQUFBQSxTQUFTLEVBQUU7QUFGTyxLQUFYLEVBQVQsS0FHUWpCLE1BQU0sQ0FBQ25PLEdBQVAsQ0FBVztBQUNqQnFQLE1BQUFBLFdBQVcsRUFBRSxFQURJO0FBRWpCQyxNQUFBQSxZQUFZLEVBQUU7QUFGRyxLQUFYO0FBSVIsUUFBSUMsc0JBQUo7O0FBRUEsUUFBSS9KLE1BQU0sQ0FBQ2dLLGVBQVAsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsVUFBSUMsSUFBSSxDQUFDQyxLQUFMLENBQVdyQixZQUFZLEdBQUc3SSxNQUFNLENBQUNnSyxlQUFqQyxNQUFzRG5CLFlBQVksR0FBR3RGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2dLLGVBQXZGLEVBQXdHO0FBQ3RHRCxRQUFBQSxzQkFBc0IsR0FBR2xCLFlBQXpCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xrQixRQUFBQSxzQkFBc0IsR0FBR0UsSUFBSSxDQUFDRSxJQUFMLENBQVV0QixZQUFZLEdBQUc3SSxNQUFNLENBQUNnSyxlQUFoQyxJQUFtRGhLLE1BQU0sQ0FBQ2dLLGVBQW5GO0FBQ0Q7O0FBRUQsVUFBSWhLLE1BQU0sQ0FBQ29LLGFBQVAsS0FBeUIsTUFBekIsSUFBbUNwSyxNQUFNLENBQUNxSyxtQkFBUCxLQUErQixLQUF0RSxFQUE2RTtBQUMzRU4sUUFBQUEsc0JBQXNCLEdBQUdFLElBQUksQ0FBQ0ssR0FBTCxDQUFTUCxzQkFBVCxFQUFpQy9KLE1BQU0sQ0FBQ29LLGFBQVAsR0FBdUJwSyxNQUFNLENBQUNnSyxlQUEvRCxDQUF6QjtBQUNEO0FBQ0YsS0FyRnFCLENBcUZwQjs7O0FBR0YsUUFBSU8sU0FBSjtBQUNBLFFBQUlQLGVBQWUsR0FBR2hLLE1BQU0sQ0FBQ2dLLGVBQTdCO0FBQ0EsUUFBSVEsWUFBWSxHQUFHVCxzQkFBc0IsR0FBR0MsZUFBNUM7QUFDQSxRQUFJUyxjQUFjLEdBQUdSLElBQUksQ0FBQ0MsS0FBTCxDQUFXckIsWUFBWSxHQUFHN0ksTUFBTSxDQUFDZ0ssZUFBakMsQ0FBckI7O0FBRUEsU0FBSyxJQUFJbmYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2dlLFlBQXBCLEVBQWtDaGUsQ0FBQyxJQUFJLENBQXZDLEVBQTBDO0FBQ3hDMGYsTUFBQUEsU0FBUyxHQUFHLENBQVo7QUFDQSxVQUFJRyxLQUFLLEdBQUcvQixNQUFNLENBQUN0TixFQUFQLENBQVV4USxDQUFWLENBQVo7O0FBRUEsVUFBSW1WLE1BQU0sQ0FBQ2dLLGVBQVAsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUI7QUFDQSxZQUFJVyxrQkFBa0IsR0FBRyxLQUFLLENBQTlCO0FBQ0EsWUFBSUMsTUFBTSxHQUFHLEtBQUssQ0FBbEI7QUFDQSxZQUFJQyxHQUFHLEdBQUcsS0FBSyxDQUFmOztBQUVBLFlBQUk3SyxNQUFNLENBQUNxSyxtQkFBUCxLQUErQixLQUEvQixJQUF3Q3JLLE1BQU0sQ0FBQzhLLGNBQVAsR0FBd0IsQ0FBcEUsRUFBdUU7QUFDckUsY0FBSUMsVUFBVSxHQUFHZCxJQUFJLENBQUNDLEtBQUwsQ0FBV3JmLENBQUMsSUFBSW1WLE1BQU0sQ0FBQzhLLGNBQVAsR0FBd0I5SyxNQUFNLENBQUNnSyxlQUFuQyxDQUFaLENBQWpCO0FBQ0EsY0FBSWdCLGlCQUFpQixHQUFHbmdCLENBQUMsR0FBR21WLE1BQU0sQ0FBQ2dLLGVBQVAsR0FBeUJoSyxNQUFNLENBQUM4SyxjQUFoQyxHQUFpREMsVUFBN0U7QUFDQSxjQUFJRSxjQUFjLEdBQUdGLFVBQVUsS0FBSyxDQUFmLEdBQW1CL0ssTUFBTSxDQUFDOEssY0FBMUIsR0FBMkNiLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU2pCLElBQUksQ0FBQ0UsSUFBTCxDQUFVLENBQUN0QixZQUFZLEdBQUdrQyxVQUFVLEdBQUdmLGVBQWIsR0FBK0JoSyxNQUFNLENBQUM4SyxjQUF0RCxJQUF3RWQsZUFBbEYsQ0FBVCxFQUE2R2hLLE1BQU0sQ0FBQzhLLGNBQXBILENBQWhFO0FBQ0FELFVBQUFBLEdBQUcsR0FBR1osSUFBSSxDQUFDQyxLQUFMLENBQVdjLGlCQUFpQixHQUFHQyxjQUEvQixDQUFOO0FBQ0FMLFVBQUFBLE1BQU0sR0FBR0ksaUJBQWlCLEdBQUdILEdBQUcsR0FBR0ksY0FBMUIsR0FBMkNGLFVBQVUsR0FBRy9LLE1BQU0sQ0FBQzhLLGNBQXhFO0FBQ0FILFVBQUFBLGtCQUFrQixHQUFHQyxNQUFNLEdBQUdDLEdBQUcsR0FBR2Qsc0JBQU4sR0FBK0JDLGVBQTdEO0FBQ0FVLFVBQUFBLEtBQUssQ0FBQ2xRLEdBQU4sQ0FBVTtBQUNSLHlDQUE2Qm1RLGtCQURyQjtBQUVSLHNDQUEwQkEsa0JBRmxCO0FBR1IsOEJBQWtCQSxrQkFIVjtBQUlSLDZCQUFpQkEsa0JBSlQ7QUFLUlEsWUFBQUEsS0FBSyxFQUFFUjtBQUxDLFdBQVY7QUFPRCxTQWRELE1BY08sSUFBSTNLLE1BQU0sQ0FBQ3FLLG1CQUFQLEtBQStCLFFBQW5DLEVBQTZDO0FBQ2xETyxVQUFBQSxNQUFNLEdBQUdYLElBQUksQ0FBQ0MsS0FBTCxDQUFXcmYsQ0FBQyxHQUFHbWYsZUFBZixDQUFUO0FBQ0FhLFVBQUFBLEdBQUcsR0FBR2hnQixDQUFDLEdBQUcrZixNQUFNLEdBQUdaLGVBQW5COztBQUVBLGNBQUlZLE1BQU0sR0FBR0gsY0FBVCxJQUEyQkcsTUFBTSxLQUFLSCxjQUFYLElBQTZCSSxHQUFHLEtBQUtiLGVBQWUsR0FBRyxDQUF0RixFQUF5RjtBQUN2RmEsWUFBQUEsR0FBRyxJQUFJLENBQVA7O0FBRUEsZ0JBQUlBLEdBQUcsSUFBSWIsZUFBWCxFQUE0QjtBQUMxQmEsY0FBQUEsR0FBRyxHQUFHLENBQU47QUFDQUQsY0FBQUEsTUFBTSxJQUFJLENBQVY7QUFDRDtBQUNGO0FBQ0YsU0FaTSxNQVlBO0FBQ0xDLFVBQUFBLEdBQUcsR0FBR1osSUFBSSxDQUFDQyxLQUFMLENBQVdyZixDQUFDLEdBQUcyZixZQUFmLENBQU47QUFDQUksVUFBQUEsTUFBTSxHQUFHL2YsQ0FBQyxHQUFHZ2dCLEdBQUcsR0FBR0wsWUFBbkI7QUFDRDs7QUFFREUsUUFBQUEsS0FBSyxDQUFDbFEsR0FBTixDQUFVc04saUJBQWlCLENBQUMsWUFBRCxDQUEzQixFQUEyQytDLEdBQUcsS0FBSyxDQUFSLElBQWE3SyxNQUFNLENBQUN1SixZQUFwQixJQUFvQ3ZKLE1BQU0sQ0FBQ3VKLFlBQVAsR0FBc0IsSUFBckc7QUFDRDs7QUFFRCxVQUFJbUIsS0FBSyxDQUFDbFEsR0FBTixDQUFVLFNBQVYsTUFBeUIsTUFBN0IsRUFBcUMsU0E1Q0csQ0E0Q087O0FBRS9DLFVBQUl3RixNQUFNLENBQUNvSyxhQUFQLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ25DLFlBQUlnQixXQUFXLEdBQUdsYyxnQkFBZ0IsQ0FBQ3diLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FBbEM7QUFDQSxZQUFJVyxnQkFBZ0IsR0FBR1gsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTbGQsS0FBVCxDQUFlNkksU0FBdEM7QUFDQSxZQUFJaVYsc0JBQXNCLEdBQUdaLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU2xkLEtBQVQsQ0FBZTZRLGVBQTVDOztBQUVBLFlBQUlnTixnQkFBSixFQUFzQjtBQUNwQlgsVUFBQUEsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTbGQsS0FBVCxDQUFlNkksU0FBZixHQUEyQixNQUEzQjtBQUNEOztBQUVELFlBQUlpVixzQkFBSixFQUE0QjtBQUMxQlosVUFBQUEsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTbGQsS0FBVCxDQUFlNlEsZUFBZixHQUFpQyxNQUFqQztBQUNEOztBQUVELFlBQUkyQixNQUFNLENBQUN1TCxZQUFYLEVBQXlCO0FBQ3ZCaEIsVUFBQUEsU0FBUyxHQUFHaEgsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3Qm1ELEtBQUssQ0FBQ3RSLFVBQU4sQ0FBaUIsSUFBakIsQ0FBeEIsR0FBaURzUixLQUFLLENBQUNoUixXQUFOLENBQWtCLElBQWxCLENBQTdEO0FBQ0QsU0FGRCxNQUVPO0FBQ0w7QUFDQSxjQUFJb0ksS0FBSyxHQUFHa0cseUJBQXlCLENBQUNvRCxXQUFELEVBQWMsT0FBZCxDQUFyQztBQUNBLGNBQUlJLFdBQVcsR0FBR3hELHlCQUF5QixDQUFDb0QsV0FBRCxFQUFjLGNBQWQsQ0FBM0M7QUFDQSxjQUFJSyxZQUFZLEdBQUd6RCx5QkFBeUIsQ0FBQ29ELFdBQUQsRUFBYyxlQUFkLENBQTVDO0FBQ0EsY0FBSXpCLFVBQVUsR0FBRzNCLHlCQUF5QixDQUFDb0QsV0FBRCxFQUFjLGFBQWQsQ0FBMUM7QUFDQSxjQUFJdkIsV0FBVyxHQUFHN0IseUJBQXlCLENBQUNvRCxXQUFELEVBQWMsY0FBZCxDQUEzQztBQUNBLGNBQUlNLFNBQVMsR0FBR04sV0FBVyxDQUFDamMsZ0JBQVosQ0FBNkIsWUFBN0IsQ0FBaEI7O0FBRUEsY0FBSXVjLFNBQVMsSUFBSUEsU0FBUyxLQUFLLFlBQS9CLEVBQTZDO0FBQzNDbkIsWUFBQUEsU0FBUyxHQUFHekksS0FBSyxHQUFHNkgsVUFBUixHQUFxQkUsV0FBakM7QUFDRCxXQUZELE1BRU87QUFDTCxnQkFBSThCLE9BQU8sR0FBR2pCLEtBQUssQ0FBQyxDQUFELENBQW5CO0FBQUEsZ0JBQ0lyRCxXQUFXLEdBQUdzRSxPQUFPLENBQUN0RSxXQUQxQjtBQUFBLGdCQUVJN04sV0FBVyxHQUFHbVMsT0FBTyxDQUFDblMsV0FGMUI7QUFHQStRLFlBQUFBLFNBQVMsR0FBR3pJLEtBQUssR0FBRzBKLFdBQVIsR0FBc0JDLFlBQXRCLEdBQXFDOUIsVUFBckMsR0FBa0RFLFdBQWxELElBQWlFclEsV0FBVyxHQUFHNk4sV0FBL0UsQ0FBWjtBQUNEO0FBQ0Y7O0FBRUQsWUFBSWdFLGdCQUFKLEVBQXNCO0FBQ3BCWCxVQUFBQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNsZCxLQUFULENBQWU2SSxTQUFmLEdBQTJCZ1YsZ0JBQTNCO0FBQ0Q7O0FBRUQsWUFBSUMsc0JBQUosRUFBNEI7QUFDMUJaLFVBQUFBLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU2xkLEtBQVQsQ0FBZTZRLGVBQWYsR0FBaUNpTixzQkFBakM7QUFDRDs7QUFFRCxZQUFJdEwsTUFBTSxDQUFDdUwsWUFBWCxFQUF5QmhCLFNBQVMsR0FBR04sSUFBSSxDQUFDQyxLQUFMLENBQVdLLFNBQVgsQ0FBWjtBQUMxQixPQTNDRCxNQTJDTztBQUNMQSxRQUFBQSxTQUFTLEdBQUcsQ0FBQ3BDLFVBQVUsR0FBRyxDQUFDbkksTUFBTSxDQUFDb0ssYUFBUCxHQUF1QixDQUF4QixJQUE2QmIsWUFBM0MsSUFBMkR2SixNQUFNLENBQUNvSyxhQUE5RTtBQUNBLFlBQUlwSyxNQUFNLENBQUN1TCxZQUFYLEVBQXlCaEIsU0FBUyxHQUFHTixJQUFJLENBQUNDLEtBQUwsQ0FBV0ssU0FBWCxDQUFaOztBQUV6QixZQUFJNUIsTUFBTSxDQUFDOWQsQ0FBRCxDQUFWLEVBQWU7QUFDYjhkLFVBQUFBLE1BQU0sQ0FBQzlkLENBQUQsQ0FBTixDQUFVMkMsS0FBVixDQUFnQnNhLGlCQUFpQixDQUFDLE9BQUQsQ0FBakMsSUFBOEN5QyxTQUFTLEdBQUcsSUFBMUQ7QUFDRDtBQUNGOztBQUVELFVBQUk1QixNQUFNLENBQUM5ZCxDQUFELENBQVYsRUFBZTtBQUNiOGQsUUFBQUEsTUFBTSxDQUFDOWQsQ0FBRCxDQUFOLENBQVUrZ0IsZUFBVixHQUE0QnJCLFNBQTVCO0FBQ0Q7O0FBRUR2QixNQUFBQSxlQUFlLENBQUN4WCxJQUFoQixDQUFxQitZLFNBQXJCOztBQUVBLFVBQUl2SyxNQUFNLENBQUM2TCxjQUFYLEVBQTJCO0FBQ3pCckMsUUFBQUEsYUFBYSxHQUFHQSxhQUFhLEdBQUdlLFNBQVMsR0FBRyxDQUE1QixHQUFnQ2QsYUFBYSxHQUFHLENBQWhELEdBQW9ERixZQUFwRTtBQUNBLFlBQUlFLGFBQWEsS0FBSyxDQUFsQixJQUF1QjVlLENBQUMsS0FBSyxDQUFqQyxFQUFvQzJlLGFBQWEsR0FBR0EsYUFBYSxHQUFHckIsVUFBVSxHQUFHLENBQTdCLEdBQWlDb0IsWUFBakQ7QUFDcEMsWUFBSTFlLENBQUMsS0FBSyxDQUFWLEVBQWEyZSxhQUFhLEdBQUdBLGFBQWEsR0FBR3JCLFVBQVUsR0FBRyxDQUE3QixHQUFpQ29CLFlBQWpEO0FBQ2IsWUFBSVUsSUFBSSxDQUFDNkIsR0FBTCxDQUFTdEMsYUFBVCxJQUEwQixJQUFJLElBQWxDLEVBQXdDQSxhQUFhLEdBQUcsQ0FBaEI7QUFDeEMsWUFBSXhKLE1BQU0sQ0FBQ3VMLFlBQVgsRUFBeUIvQixhQUFhLEdBQUdTLElBQUksQ0FBQ0MsS0FBTCxDQUFXVixhQUFYLENBQWhCO0FBQ3pCLFlBQUk3TyxLQUFLLEdBQUdxRixNQUFNLENBQUM4SyxjQUFmLEtBQWtDLENBQXRDLEVBQXlDaEMsUUFBUSxDQUFDdFgsSUFBVCxDQUFjZ1ksYUFBZDtBQUN6Q1QsUUFBQUEsVUFBVSxDQUFDdlgsSUFBWCxDQUFnQmdZLGFBQWhCO0FBQ0QsT0FSRCxNQVFPO0FBQ0wsWUFBSXhKLE1BQU0sQ0FBQ3VMLFlBQVgsRUFBeUIvQixhQUFhLEdBQUdTLElBQUksQ0FBQ0MsS0FBTCxDQUFXVixhQUFYLENBQWhCO0FBQ3pCLFlBQUksQ0FBQzdPLEtBQUssR0FBR3NQLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUzNILE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytMLGtCQUF2QixFQUEyQ3BSLEtBQTNDLENBQVQsSUFBOEQ0SSxNQUFNLENBQUN2RCxNQUFQLENBQWM4SyxjQUE1RSxLQUErRixDQUFuRyxFQUFzR2hDLFFBQVEsQ0FBQ3RYLElBQVQsQ0FBY2dZLGFBQWQ7QUFDdEdULFFBQUFBLFVBQVUsQ0FBQ3ZYLElBQVgsQ0FBZ0JnWSxhQUFoQjtBQUNBQSxRQUFBQSxhQUFhLEdBQUdBLGFBQWEsR0FBR2UsU0FBaEIsR0FBNEJoQixZQUE1QztBQUNEOztBQUVEaEcsTUFBQUEsTUFBTSxDQUFDbUcsV0FBUCxJQUFzQmEsU0FBUyxHQUFHaEIsWUFBbEM7QUFDQUUsTUFBQUEsYUFBYSxHQUFHYyxTQUFoQjtBQUNBNVAsTUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDRDs7QUFFRDRJLElBQUFBLE1BQU0sQ0FBQ21HLFdBQVAsR0FBcUJPLElBQUksQ0FBQ0ssR0FBTCxDQUFTL0csTUFBTSxDQUFDbUcsV0FBaEIsRUFBNkJ2QixVQUE3QixJQUEyQ2dCLFdBQWhFO0FBQ0EsUUFBSTZDLGFBQUo7O0FBRUEsUUFBSTVELEdBQUcsSUFBSUUsUUFBUCxLQUFvQnRJLE1BQU0sQ0FBQ2lNLE1BQVAsS0FBa0IsT0FBbEIsSUFBNkJqTSxNQUFNLENBQUNpTSxNQUFQLEtBQWtCLFdBQW5FLENBQUosRUFBcUY7QUFDbkZyRyxNQUFBQSxVQUFVLENBQUNwTCxHQUFYLENBQWU7QUFDYnNILFFBQUFBLEtBQUssRUFBRXlCLE1BQU0sQ0FBQ21HLFdBQVAsR0FBcUIxSixNQUFNLENBQUN1SixZQUE1QixHQUEyQztBQURyQyxPQUFmO0FBR0Q7O0FBRUQsUUFBSXZKLE1BQU0sQ0FBQ2tNLGNBQVgsRUFBMkI7QUFDekIsVUFBSUMsZUFBSjs7QUFFQXZHLE1BQUFBLFVBQVUsQ0FBQ3BMLEdBQVgsRUFBZ0IyUixlQUFlLEdBQUcsRUFBbEIsRUFBc0JBLGVBQWUsQ0FBQ3JFLGlCQUFpQixDQUFDLE9BQUQsQ0FBbEIsQ0FBZixHQUE4Q3ZFLE1BQU0sQ0FBQ21HLFdBQVAsR0FBcUIxSixNQUFNLENBQUN1SixZQUE1QixHQUEyQyxJQUEvRyxFQUFxSDRDLGVBQXJJO0FBQ0Q7O0FBRUQsUUFBSW5NLE1BQU0sQ0FBQ2dLLGVBQVAsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsVUFBSW9DLGdCQUFKOztBQUVBN0ksTUFBQUEsTUFBTSxDQUFDbUcsV0FBUCxHQUFxQixDQUFDYSxTQUFTLEdBQUd2SyxNQUFNLENBQUN1SixZQUFwQixJQUFvQ1Esc0JBQXpEO0FBQ0F4RyxNQUFBQSxNQUFNLENBQUNtRyxXQUFQLEdBQXFCTyxJQUFJLENBQUNFLElBQUwsQ0FBVTVHLE1BQU0sQ0FBQ21HLFdBQVAsR0FBcUIxSixNQUFNLENBQUNnSyxlQUF0QyxJQUF5RGhLLE1BQU0sQ0FBQ3VKLFlBQXJGO0FBQ0EzRCxNQUFBQSxVQUFVLENBQUNwTCxHQUFYLEVBQWdCNFIsZ0JBQWdCLEdBQUcsRUFBbkIsRUFBdUJBLGdCQUFnQixDQUFDdEUsaUJBQWlCLENBQUMsT0FBRCxDQUFsQixDQUFoQixHQUErQ3ZFLE1BQU0sQ0FBQ21HLFdBQVAsR0FBcUIxSixNQUFNLENBQUN1SixZQUE1QixHQUEyQyxJQUFqSCxFQUF1SDZDLGdCQUF2STs7QUFFQSxVQUFJcE0sTUFBTSxDQUFDNkwsY0FBWCxFQUEyQjtBQUN6QkcsUUFBQUEsYUFBYSxHQUFHLEVBQWhCOztBQUVBLGFBQUssSUFBSUssRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3ZELFFBQVEsQ0FBQ2hlLE1BQS9CLEVBQXVDdWhCLEVBQUUsSUFBSSxDQUE3QyxFQUFnRDtBQUM5QyxjQUFJQyxjQUFjLEdBQUd4RCxRQUFRLENBQUN1RCxFQUFELENBQTdCO0FBQ0EsY0FBSXJNLE1BQU0sQ0FBQ3VMLFlBQVgsRUFBeUJlLGNBQWMsR0FBR3JDLElBQUksQ0FBQ0MsS0FBTCxDQUFXb0MsY0FBWCxDQUFqQjtBQUN6QixjQUFJeEQsUUFBUSxDQUFDdUQsRUFBRCxDQUFSLEdBQWU5SSxNQUFNLENBQUNtRyxXQUFQLEdBQXFCWixRQUFRLENBQUMsQ0FBRCxDQUFoRCxFQUFxRGtELGFBQWEsQ0FBQ3hhLElBQWQsQ0FBbUI4YSxjQUFuQjtBQUN0RDs7QUFFRHhELFFBQUFBLFFBQVEsR0FBR2tELGFBQVg7QUFDRDtBQUNGLEtBMVBxQixDQTBQcEI7OztBQUdGLFFBQUksQ0FBQ2hNLE1BQU0sQ0FBQzZMLGNBQVosRUFBNEI7QUFDMUJHLE1BQUFBLGFBQWEsR0FBRyxFQUFoQjs7QUFFQSxXQUFLLElBQUlPLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUd6RCxRQUFRLENBQUNoZSxNQUFqQyxFQUF5Q3loQixHQUFHLElBQUksQ0FBaEQsRUFBbUQ7QUFDakQsWUFBSUMsZUFBZSxHQUFHMUQsUUFBUSxDQUFDeUQsR0FBRCxDQUE5QjtBQUNBLFlBQUl2TSxNQUFNLENBQUN1TCxZQUFYLEVBQXlCaUIsZUFBZSxHQUFHdkMsSUFBSSxDQUFDQyxLQUFMLENBQVdzQyxlQUFYLENBQWxCOztBQUV6QixZQUFJMUQsUUFBUSxDQUFDeUQsR0FBRCxDQUFSLElBQWlCaEosTUFBTSxDQUFDbUcsV0FBUCxHQUFxQnZCLFVBQTFDLEVBQXNEO0FBQ3BENkQsVUFBQUEsYUFBYSxDQUFDeGEsSUFBZCxDQUFtQmdiLGVBQW5CO0FBQ0Q7QUFDRjs7QUFFRDFELE1BQUFBLFFBQVEsR0FBR2tELGFBQVg7O0FBRUEsVUFBSS9CLElBQUksQ0FBQ0MsS0FBTCxDQUFXM0csTUFBTSxDQUFDbUcsV0FBUCxHQUFxQnZCLFVBQWhDLElBQThDOEIsSUFBSSxDQUFDQyxLQUFMLENBQVdwQixRQUFRLENBQUNBLFFBQVEsQ0FBQ2hlLE1BQVQsR0FBa0IsQ0FBbkIsQ0FBbkIsQ0FBOUMsR0FBMEYsQ0FBOUYsRUFBaUc7QUFDL0ZnZSxRQUFBQSxRQUFRLENBQUN0WCxJQUFULENBQWMrUixNQUFNLENBQUNtRyxXQUFQLEdBQXFCdkIsVUFBbkM7QUFDRDtBQUNGOztBQUVELFFBQUlXLFFBQVEsQ0FBQ2hlLE1BQVQsS0FBb0IsQ0FBeEIsRUFBMkJnZSxRQUFRLEdBQUcsQ0FBQyxDQUFELENBQVg7O0FBRTNCLFFBQUk5SSxNQUFNLENBQUN1SixZQUFQLEtBQXdCLENBQTVCLEVBQStCO0FBQzdCLFVBQUlrRCxrQkFBSjs7QUFFQSxVQUFJcGhCLEdBQUcsR0FBR2tZLE1BQU0sQ0FBQ2dFLFlBQVAsTUFBeUJhLEdBQXpCLEdBQStCLFlBQS9CLEdBQThDTixpQkFBaUIsQ0FBQyxhQUFELENBQXpFO0FBQ0FhLE1BQUFBLE1BQU0sQ0FBQ2xWLE1BQVAsQ0FBYyxVQUFVaVosQ0FBVixFQUFhQyxVQUFiLEVBQXlCO0FBQ3JDLFlBQUksQ0FBQzNNLE1BQU0sQ0FBQzRNLE9BQVosRUFBcUIsT0FBTyxJQUFQOztBQUVyQixZQUFJRCxVQUFVLEtBQUtoRSxNQUFNLENBQUM3ZCxNQUFQLEdBQWdCLENBQW5DLEVBQXNDO0FBQ3BDLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQVJELEVBUUcwUCxHQVJILEVBUVFpUyxrQkFBa0IsR0FBRyxFQUFyQixFQUF5QkEsa0JBQWtCLENBQUNwaEIsR0FBRCxDQUFsQixHQUEwQmtlLFlBQVksR0FBRyxJQUFsRSxFQUF3RWtELGtCQVJoRjtBQVNEOztBQUVELFFBQUl6TSxNQUFNLENBQUM2TCxjQUFQLElBQXlCN0wsTUFBTSxDQUFDNk0sb0JBQXBDLEVBQTBEO0FBQ3hELFVBQUlDLGFBQWEsR0FBRyxDQUFwQjtBQUNBOUQsTUFBQUEsZUFBZSxDQUFDeGMsT0FBaEIsQ0FBd0IsVUFBVXVnQixjQUFWLEVBQTBCO0FBQ2hERCxRQUFBQSxhQUFhLElBQUlDLGNBQWMsSUFBSS9NLE1BQU0sQ0FBQ3VKLFlBQVAsR0FBc0J2SixNQUFNLENBQUN1SixZQUE3QixHQUE0QyxDQUFoRCxDQUEvQjtBQUNELE9BRkQ7QUFHQXVELE1BQUFBLGFBQWEsSUFBSTlNLE1BQU0sQ0FBQ3VKLFlBQXhCO0FBQ0EsVUFBSXlELE9BQU8sR0FBR0YsYUFBYSxHQUFHM0UsVUFBOUI7QUFDQVcsTUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNuVSxHQUFULENBQWEsVUFBVXNZLElBQVYsRUFBZ0I7QUFDdEMsWUFBSUEsSUFBSSxHQUFHLENBQVgsRUFBYyxPQUFPLENBQUNoRSxZQUFSO0FBQ2QsWUFBSWdFLElBQUksR0FBR0QsT0FBWCxFQUFvQixPQUFPQSxPQUFPLEdBQUc3RCxXQUFqQjtBQUNwQixlQUFPOEQsSUFBUDtBQUNELE9BSlUsQ0FBWDtBQUtEOztBQUVELFFBQUlqTixNQUFNLENBQUNrTix3QkFBWCxFQUFxQztBQUNuQyxVQUFJQyxjQUFjLEdBQUcsQ0FBckI7QUFDQW5FLE1BQUFBLGVBQWUsQ0FBQ3hjLE9BQWhCLENBQXdCLFVBQVV1Z0IsY0FBVixFQUEwQjtBQUNoREksUUFBQUEsY0FBYyxJQUFJSixjQUFjLElBQUkvTSxNQUFNLENBQUN1SixZQUFQLEdBQXNCdkosTUFBTSxDQUFDdUosWUFBN0IsR0FBNEMsQ0FBaEQsQ0FBaEM7QUFDRCxPQUZEO0FBR0E0RCxNQUFBQSxjQUFjLElBQUluTixNQUFNLENBQUN1SixZQUF6Qjs7QUFFQSxVQUFJNEQsY0FBYyxHQUFHaEYsVUFBckIsRUFBaUM7QUFDL0IsWUFBSWlGLGVBQWUsR0FBRyxDQUFDakYsVUFBVSxHQUFHZ0YsY0FBZCxJQUFnQyxDQUF0RDtBQUNBckUsUUFBQUEsUUFBUSxDQUFDdGMsT0FBVCxDQUFpQixVQUFVeWdCLElBQVYsRUFBZ0JJLFNBQWhCLEVBQTJCO0FBQzFDdkUsVUFBQUEsUUFBUSxDQUFDdUUsU0FBRCxDQUFSLEdBQXNCSixJQUFJLEdBQUdHLGVBQTdCO0FBQ0QsU0FGRDtBQUdBckUsUUFBQUEsVUFBVSxDQUFDdmMsT0FBWCxDQUFtQixVQUFVeWdCLElBQVYsRUFBZ0JJLFNBQWhCLEVBQTJCO0FBQzVDdEUsVUFBQUEsVUFBVSxDQUFDc0UsU0FBRCxDQUFWLEdBQXdCSixJQUFJLEdBQUdHLGVBQS9CO0FBQ0QsU0FGRDtBQUdEO0FBQ0Y7O0FBRURwTyxJQUFBQSxNQUFNLENBQUN1RSxNQUFELEVBQVM7QUFDYm9GLE1BQUFBLE1BQU0sRUFBRUEsTUFESztBQUViRyxNQUFBQSxRQUFRLEVBQUVBLFFBRkc7QUFHYkMsTUFBQUEsVUFBVSxFQUFFQSxVQUhDO0FBSWJDLE1BQUFBLGVBQWUsRUFBRUE7QUFKSixLQUFULENBQU47O0FBT0EsUUFBSUgsWUFBWSxLQUFLSCxvQkFBckIsRUFBMkM7QUFDekNuRixNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksb0JBQVo7QUFDRDs7QUFFRCxRQUFJdUUsUUFBUSxDQUFDaGUsTUFBVCxLQUFvQnVlLHNCQUF4QixFQUFnRDtBQUM5QyxVQUFJOUYsTUFBTSxDQUFDdkQsTUFBUCxDQUFjc04sYUFBbEIsRUFBaUMvSixNQUFNLENBQUNnSyxhQUFQO0FBQ2pDaEssTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLHNCQUFaO0FBQ0Q7O0FBRUQsUUFBSXdFLFVBQVUsQ0FBQ2plLE1BQVgsS0FBc0J3ZSx3QkFBMUIsRUFBb0Q7QUFDbEQvRixNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksd0JBQVo7QUFDRDs7QUFFRCxRQUFJdkUsTUFBTSxDQUFDd04sbUJBQVAsSUFBOEJ4TixNQUFNLENBQUN5TixxQkFBekMsRUFBZ0U7QUFDOURsSyxNQUFBQSxNQUFNLENBQUNtSyxrQkFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBU0MsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQy9CLFFBQUlySyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUlzSyxZQUFZLEdBQUcsRUFBbkI7QUFDQSxRQUFJdEYsU0FBUyxHQUFHaEYsTUFBTSxDQUFDaUYsT0FBUCxJQUFrQmpGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQXhEO0FBQ0EsUUFBSTNFLFNBQVMsR0FBRyxDQUFoQjtBQUNBLFFBQUlqWixDQUFKOztBQUVBLFFBQUksT0FBTytpQixLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCckssTUFBQUEsTUFBTSxDQUFDdUssYUFBUCxDQUFxQkYsS0FBckI7QUFDRCxLQUZELE1BRU8sSUFBSUEsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDekJySyxNQUFBQSxNQUFNLENBQUN1SyxhQUFQLENBQXFCdkssTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE4sS0FBbkM7QUFDRDs7QUFFRCxRQUFJRyxlQUFlLEdBQUcsU0FBU0EsZUFBVCxDQUF5QnBULEtBQXpCLEVBQWdDO0FBQ3BELFVBQUk0TixTQUFKLEVBQWU7QUFDYixlQUFPaEYsTUFBTSxDQUFDb0YsTUFBUCxDQUFjbFYsTUFBZCxDQUFxQixVQUFVSCxFQUFWLEVBQWM7QUFDeEMsaUJBQU9tVSxRQUFRLENBQUNuVSxFQUFFLENBQUMyQyxZQUFILENBQWdCLHlCQUFoQixDQUFELEVBQTZDLEVBQTdDLENBQVIsS0FBNkQwRSxLQUFwRTtBQUNELFNBRk0sRUFFSixDQUZJLENBQVA7QUFHRDs7QUFFRCxhQUFPNEksTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQlYsS0FBakIsRUFBd0IsQ0FBeEIsQ0FBUDtBQUNELEtBUkQsQ0FiK0IsQ0FxQjVCOzs7QUFHSCxRQUFJNEksTUFBTSxDQUFDdkQsTUFBUCxDQUFjb0ssYUFBZCxLQUFnQyxNQUFoQyxJQUEwQzdHLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY29LLGFBQWQsR0FBOEIsQ0FBNUUsRUFBK0U7QUFDN0UsVUFBSTdHLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzZMLGNBQWxCLEVBQWtDO0FBQ2hDdEksUUFBQUEsTUFBTSxDQUFDeUssYUFBUCxDQUFxQnRULElBQXJCLENBQTBCLFVBQVVnUSxLQUFWLEVBQWlCO0FBQ3pDbUQsVUFBQUEsWUFBWSxDQUFDcmMsSUFBYixDQUFrQmtaLEtBQWxCO0FBQ0QsU0FGRDtBQUdELE9BSkQsTUFJTztBQUNMLGFBQUs3ZixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdvZixJQUFJLENBQUNFLElBQUwsQ0FBVTVHLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY29LLGFBQXhCLENBQWhCLEVBQXdEdmYsQ0FBQyxJQUFJLENBQTdELEVBQWdFO0FBQzlELGNBQUk4UCxLQUFLLEdBQUc0SSxNQUFNLENBQUMwSyxXQUFQLEdBQXFCcGpCLENBQWpDO0FBQ0EsY0FBSThQLEtBQUssR0FBRzRJLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQXRCLElBQWdDLENBQUN5ZCxTQUFyQyxFQUFnRDtBQUNoRHNGLFVBQUFBLFlBQVksQ0FBQ3JjLElBQWIsQ0FBa0J1YyxlQUFlLENBQUNwVCxLQUFELENBQWpDO0FBQ0Q7QUFDRjtBQUNGLEtBWkQsTUFZTztBQUNMa1QsTUFBQUEsWUFBWSxDQUFDcmMsSUFBYixDQUFrQnVjLGVBQWUsQ0FBQ3hLLE1BQU0sQ0FBQzBLLFdBQVIsQ0FBakM7QUFDRCxLQXRDOEIsQ0FzQzdCOzs7QUFHRixTQUFLcGpCLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR2dqQixZQUFZLENBQUMvaUIsTUFBN0IsRUFBcUNELENBQUMsSUFBSSxDQUExQyxFQUE2QztBQUMzQyxVQUFJLE9BQU9nakIsWUFBWSxDQUFDaGpCLENBQUQsQ0FBbkIsS0FBMkIsV0FBL0IsRUFBNEM7QUFDMUMsWUFBSW1YLE1BQU0sR0FBRzZMLFlBQVksQ0FBQ2hqQixDQUFELENBQVosQ0FBZ0IrTyxZQUE3QjtBQUNBa0ssUUFBQUEsU0FBUyxHQUFHOUIsTUFBTSxHQUFHOEIsU0FBVCxHQUFxQjlCLE1BQXJCLEdBQThCOEIsU0FBMUM7QUFDRDtBQUNGLEtBOUM4QixDQThDN0I7OztBQUdGLFFBQUlBLFNBQUosRUFBZVAsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQnBMLEdBQWxCLENBQXNCLFFBQXRCLEVBQWdDc0osU0FBUyxHQUFHLElBQTVDO0FBQ2hCOztBQUVELFdBQVM0SixrQkFBVCxHQUE4QjtBQUM1QixRQUFJbkssTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJb0YsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFBcEI7O0FBRUEsU0FBSyxJQUFJOWQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekM4ZCxNQUFBQSxNQUFNLENBQUM5ZCxDQUFELENBQU4sQ0FBVXFqQixpQkFBVixHQUE4QjNLLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0JvQixNQUFNLENBQUM5ZCxDQUFELENBQU4sQ0FBVXNqQixVQUFsQyxHQUErQ3hGLE1BQU0sQ0FBQzlkLENBQUQsQ0FBTixDQUFVdWpCLFNBQXZGO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTQyxvQkFBVCxDQUE4QkMsU0FBOUIsRUFBeUM7QUFDdkMsUUFBSUEsU0FBUyxLQUFLLEtBQUssQ0FBdkIsRUFBMEI7QUFDeEJBLE1BQUFBLFNBQVMsR0FBRyxRQUFRLEtBQUtBLFNBQWIsSUFBMEIsQ0FBdEM7QUFDRDs7QUFFRCxRQUFJL0ssTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFDQSxRQUFJMkksTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFBcEI7QUFBQSxRQUNJUCxHQUFHLEdBQUc3RSxNQUFNLENBQUM4RSxZQURqQjtBQUVBLFFBQUlNLE1BQU0sQ0FBQzdkLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDekIsUUFBSSxPQUFPNmQsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVdUYsaUJBQWpCLEtBQXVDLFdBQTNDLEVBQXdEM0ssTUFBTSxDQUFDbUssa0JBQVA7QUFDeEQsUUFBSWEsWUFBWSxHQUFHLENBQUNELFNBQXBCO0FBQ0EsUUFBSWxHLEdBQUosRUFBU21HLFlBQVksR0FBR0QsU0FBZixDQVo4QixDQVlKOztBQUVuQzNGLElBQUFBLE1BQU0sQ0FBQzFULFdBQVAsQ0FBbUIrSyxNQUFNLENBQUN3TyxpQkFBMUI7QUFDQWpMLElBQUFBLE1BQU0sQ0FBQ2tMLG9CQUFQLEdBQThCLEVBQTlCO0FBQ0FsTCxJQUFBQSxNQUFNLENBQUN5SyxhQUFQLEdBQXVCLEVBQXZCOztBQUVBLFNBQUssSUFBSW5qQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHOGQsTUFBTSxDQUFDN2QsTUFBM0IsRUFBbUNELENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxVQUFJNmYsS0FBSyxHQUFHL0IsTUFBTSxDQUFDOWQsQ0FBRCxDQUFsQjtBQUNBLFVBQUk2akIsYUFBYSxHQUFHLENBQUNILFlBQVksSUFBSXZPLE1BQU0sQ0FBQzZMLGNBQVAsR0FBd0J0SSxNQUFNLENBQUNvTCxZQUFQLEVBQXhCLEdBQWdELENBQXBELENBQVosR0FBcUVqRSxLQUFLLENBQUN3RCxpQkFBNUUsS0FBa0d4RCxLQUFLLENBQUNrQixlQUFOLEdBQXdCNUwsTUFBTSxDQUFDdUosWUFBakksQ0FBcEI7O0FBRUEsVUFBSXZKLE1BQU0sQ0FBQ3lOLHFCQUFQLElBQWdDek4sTUFBTSxDQUFDNkwsY0FBUCxJQUF5QjdMLE1BQU0sQ0FBQzRPLFVBQXBFLEVBQWdGO0FBQzlFLFlBQUlDLFdBQVcsR0FBRyxFQUFFTixZQUFZLEdBQUc3RCxLQUFLLENBQUN3RCxpQkFBdkIsQ0FBbEI7QUFDQSxZQUFJWSxVQUFVLEdBQUdELFdBQVcsR0FBR3RMLE1BQU0sQ0FBQ3lGLGVBQVAsQ0FBdUJuZSxDQUF2QixDQUEvQjtBQUNBLFlBQUlra0IsU0FBUyxHQUFHRixXQUFXLElBQUksQ0FBZixJQUFvQkEsV0FBVyxHQUFHdEwsTUFBTSxDQUFDcUUsSUFBUCxHQUFjLENBQWhELElBQXFEa0gsVUFBVSxHQUFHLENBQWIsSUFBa0JBLFVBQVUsSUFBSXZMLE1BQU0sQ0FBQ3FFLElBQTVGLElBQW9HaUgsV0FBVyxJQUFJLENBQWYsSUFBb0JDLFVBQVUsSUFBSXZMLE1BQU0sQ0FBQ3FFLElBQTdKOztBQUVBLFlBQUltSCxTQUFKLEVBQWU7QUFDYnhMLFVBQUFBLE1BQU0sQ0FBQ3lLLGFBQVAsQ0FBcUJ4YyxJQUFyQixDQUEwQmtaLEtBQTFCO0FBQ0FuSCxVQUFBQSxNQUFNLENBQUNrTCxvQkFBUCxDQUE0QmpkLElBQTVCLENBQWlDM0csQ0FBakM7QUFDQThkLFVBQUFBLE1BQU0sQ0FBQ3ROLEVBQVAsQ0FBVXhRLENBQVYsRUFBYXlKLFFBQWIsQ0FBc0IwTCxNQUFNLENBQUN3TyxpQkFBN0I7QUFDRDtBQUNGOztBQUVEOUQsTUFBQUEsS0FBSyxDQUFDc0UsUUFBTixHQUFpQjVHLEdBQUcsR0FBRyxDQUFDc0csYUFBSixHQUFvQkEsYUFBeEM7QUFDRDs7QUFFRG5MLElBQUFBLE1BQU0sQ0FBQ3lLLGFBQVAsR0FBdUJqYSxDQUFDLENBQUN3UCxNQUFNLENBQUN5SyxhQUFSLENBQXhCO0FBQ0Q7O0FBRUQsV0FBU2lCLGNBQVQsQ0FBd0JYLFNBQXhCLEVBQW1DO0FBQ2pDLFFBQUkvSyxNQUFNLEdBQUcsSUFBYjs7QUFFQSxRQUFJLE9BQU8rSyxTQUFQLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ3BDLFVBQUlZLFVBQVUsR0FBRzNMLE1BQU0sQ0FBQzhFLFlBQVAsR0FBc0IsQ0FBQyxDQUF2QixHQUEyQixDQUE1QyxDQURvQyxDQUNXOztBQUUvQ2lHLE1BQUFBLFNBQVMsR0FBRy9LLE1BQU0sSUFBSUEsTUFBTSxDQUFDK0ssU0FBakIsSUFBOEIvSyxNQUFNLENBQUMrSyxTQUFQLEdBQW1CWSxVQUFqRCxJQUErRCxDQUEzRTtBQUNEOztBQUVELFFBQUlsUCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUNBLFFBQUltUCxjQUFjLEdBQUc1TCxNQUFNLENBQUM2TCxZQUFQLEtBQXdCN0wsTUFBTSxDQUFDb0wsWUFBUCxFQUE3QztBQUNBLFFBQUlLLFFBQVEsR0FBR3pMLE1BQU0sQ0FBQ3lMLFFBQXRCO0FBQUEsUUFDSUssV0FBVyxHQUFHOUwsTUFBTSxDQUFDOEwsV0FEekI7QUFBQSxRQUVJQyxLQUFLLEdBQUcvTCxNQUFNLENBQUMrTCxLQUZuQjtBQUdBLFFBQUlDLFlBQVksR0FBR0YsV0FBbkI7QUFDQSxRQUFJRyxNQUFNLEdBQUdGLEtBQWI7O0FBRUEsUUFBSUgsY0FBYyxLQUFLLENBQXZCLEVBQTBCO0FBQ3hCSCxNQUFBQSxRQUFRLEdBQUcsQ0FBWDtBQUNBSyxNQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNBQyxNQUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNELEtBSkQsTUFJTztBQUNMTixNQUFBQSxRQUFRLEdBQUcsQ0FBQ1YsU0FBUyxHQUFHL0ssTUFBTSxDQUFDb0wsWUFBUCxFQUFiLElBQXNDUSxjQUFqRDtBQUNBRSxNQUFBQSxXQUFXLEdBQUdMLFFBQVEsSUFBSSxDQUExQjtBQUNBTSxNQUFBQSxLQUFLLEdBQUdOLFFBQVEsSUFBSSxDQUFwQjtBQUNEOztBQUVEaFEsSUFBQUEsTUFBTSxDQUFDdUUsTUFBRCxFQUFTO0FBQ2J5TCxNQUFBQSxRQUFRLEVBQUVBLFFBREc7QUFFYkssTUFBQUEsV0FBVyxFQUFFQSxXQUZBO0FBR2JDLE1BQUFBLEtBQUssRUFBRUE7QUFITSxLQUFULENBQU47QUFLQSxRQUFJdFAsTUFBTSxDQUFDd04sbUJBQVAsSUFBOEJ4TixNQUFNLENBQUN5TixxQkFBckMsSUFBOER6TixNQUFNLENBQUM2TCxjQUFQLElBQXlCN0wsTUFBTSxDQUFDNE8sVUFBbEcsRUFBOEdyTCxNQUFNLENBQUM4SyxvQkFBUCxDQUE0QkMsU0FBNUI7O0FBRTlHLFFBQUllLFdBQVcsSUFBSSxDQUFDRSxZQUFwQixFQUFrQztBQUNoQ2hNLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSx1QkFBWjtBQUNEOztBQUVELFFBQUkrSyxLQUFLLElBQUksQ0FBQ0UsTUFBZCxFQUFzQjtBQUNwQmpNLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxpQkFBWjtBQUNEOztBQUVELFFBQUlnTCxZQUFZLElBQUksQ0FBQ0YsV0FBakIsSUFBZ0NHLE1BQU0sSUFBSSxDQUFDRixLQUEvQyxFQUFzRDtBQUNwRC9MLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxVQUFaO0FBQ0Q7O0FBRURoQixJQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksVUFBWixFQUF3QnlLLFFBQXhCO0FBQ0Q7O0FBRUQsV0FBU1MsbUJBQVQsR0FBK0I7QUFDN0IsUUFBSWxNLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSW9GLE1BQU0sR0FBR3BGLE1BQU0sQ0FBQ29GLE1BQXBCO0FBQUEsUUFDSTNJLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BRHBCO0FBQUEsUUFFSTRGLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRnhCO0FBQUEsUUFHSXFJLFdBQVcsR0FBRzFLLE1BQU0sQ0FBQzBLLFdBSHpCO0FBQUEsUUFJSXlCLFNBQVMsR0FBR25NLE1BQU0sQ0FBQ21NLFNBSnZCO0FBS0EsUUFBSW5ILFNBQVMsR0FBR2hGLE1BQU0sQ0FBQ2lGLE9BQVAsSUFBa0J4SSxNQUFNLENBQUN3SSxPQUFQLENBQWVDLE9BQWpEO0FBQ0FFLElBQUFBLE1BQU0sQ0FBQzFULFdBQVAsQ0FBbUIrSyxNQUFNLENBQUMyUCxnQkFBUCxHQUEwQixHQUExQixHQUFnQzNQLE1BQU0sQ0FBQzRQLGNBQXZDLEdBQXdELEdBQXhELEdBQThENVAsTUFBTSxDQUFDNlAsY0FBckUsR0FBc0YsR0FBdEYsR0FBNEY3UCxNQUFNLENBQUM4UCx5QkFBbkcsR0FBK0gsR0FBL0gsR0FBcUk5UCxNQUFNLENBQUMrUCx1QkFBNUksR0FBc0ssR0FBdEssR0FBNEsvUCxNQUFNLENBQUNnUSx1QkFBdE07QUFDQSxRQUFJQyxXQUFKOztBQUVBLFFBQUkxSCxTQUFKLEVBQWU7QUFDYjBILE1BQUFBLFdBQVcsR0FBRzFNLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JoSixJQUFsQixDQUF1QixNQUFNb0QsTUFBTSxDQUFDNEksVUFBYixHQUEwQiw2QkFBMUIsR0FBMERxRixXQUExRCxHQUF3RSxLQUEvRixDQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xnQyxNQUFBQSxXQUFXLEdBQUd0SCxNQUFNLENBQUN0TixFQUFQLENBQVU0UyxXQUFWLENBQWQ7QUFDRCxLQWY0QixDQWUzQjs7O0FBR0ZnQyxJQUFBQSxXQUFXLENBQUMzYixRQUFaLENBQXFCMEwsTUFBTSxDQUFDMlAsZ0JBQTVCOztBQUVBLFFBQUkzUCxNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2Y7QUFDQSxVQUFJRCxXQUFXLENBQUN0YSxRQUFaLENBQXFCcUssTUFBTSxDQUFDbVEsbUJBQTVCLENBQUosRUFBc0Q7QUFDcER2SyxRQUFBQSxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wUyxNQUFNLENBQUM0SSxVQUFiLEdBQTBCLFFBQTFCLEdBQXFDNUksTUFBTSxDQUFDbVEsbUJBQTVDLEdBQWtFLDhCQUFsRSxHQUFtR1QsU0FBbkcsR0FBK0csS0FBbkksRUFBMElwYixRQUExSSxDQUFtSjBMLE1BQU0sQ0FBQzhQLHlCQUExSjtBQUNELE9BRkQsTUFFTztBQUNMbEssUUFBQUEsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNMFMsTUFBTSxDQUFDNEksVUFBYixHQUEwQixHQUExQixHQUFnQzVJLE1BQU0sQ0FBQ21RLG1CQUF2QyxHQUE2RCw2QkFBN0QsR0FBNkZULFNBQTdGLEdBQXlHLEtBQTdILEVBQW9JcGIsUUFBcEksQ0FBNkkwTCxNQUFNLENBQUM4UCx5QkFBcEo7QUFDRDtBQUNGLEtBM0I0QixDQTJCM0I7OztBQUdGLFFBQUlNLFNBQVMsR0FBR0gsV0FBVyxDQUFDalUsT0FBWixDQUFvQixNQUFNZ0UsTUFBTSxDQUFDNEksVUFBakMsRUFBNkN2TixFQUE3QyxDQUFnRCxDQUFoRCxFQUFtRC9HLFFBQW5ELENBQTREMEwsTUFBTSxDQUFDNFAsY0FBbkUsQ0FBaEI7O0FBRUEsUUFBSTVQLE1BQU0sQ0FBQ2tRLElBQVAsSUFBZUUsU0FBUyxDQUFDdGxCLE1BQVYsS0FBcUIsQ0FBeEMsRUFBMkM7QUFDekNzbEIsTUFBQUEsU0FBUyxHQUFHekgsTUFBTSxDQUFDdE4sRUFBUCxDQUFVLENBQVYsQ0FBWjtBQUNBK1UsTUFBQUEsU0FBUyxDQUFDOWIsUUFBVixDQUFtQjBMLE1BQU0sQ0FBQzRQLGNBQTFCO0FBQ0QsS0FuQzRCLENBbUMzQjs7O0FBR0YsUUFBSVMsU0FBUyxHQUFHSixXQUFXLENBQUM1VCxPQUFaLENBQW9CLE1BQU0yRCxNQUFNLENBQUM0SSxVQUFqQyxFQUE2Q3ZOLEVBQTdDLENBQWdELENBQWhELEVBQW1EL0csUUFBbkQsQ0FBNEQwTCxNQUFNLENBQUM2UCxjQUFuRSxDQUFoQjs7QUFFQSxRQUFJN1AsTUFBTSxDQUFDa1EsSUFBUCxJQUFlRyxTQUFTLENBQUN2bEIsTUFBVixLQUFxQixDQUF4QyxFQUEyQztBQUN6Q3VsQixNQUFBQSxTQUFTLEdBQUcxSCxNQUFNLENBQUN0TixFQUFQLENBQVUsQ0FBQyxDQUFYLENBQVo7QUFDQWdWLE1BQUFBLFNBQVMsQ0FBQy9iLFFBQVYsQ0FBbUIwTCxNQUFNLENBQUM2UCxjQUExQjtBQUNEOztBQUVELFFBQUk3UCxNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2Y7QUFDQSxVQUFJRSxTQUFTLENBQUN6YSxRQUFWLENBQW1CcUssTUFBTSxDQUFDbVEsbUJBQTFCLENBQUosRUFBb0Q7QUFDbER2SyxRQUFBQSxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wUyxNQUFNLENBQUM0SSxVQUFiLEdBQTBCLFFBQTFCLEdBQXFDNUksTUFBTSxDQUFDbVEsbUJBQTVDLEdBQWtFLDhCQUFsRSxHQUFtR0MsU0FBUyxDQUFDcmEsSUFBVixDQUFlLHlCQUFmLENBQW5HLEdBQStJLEtBQW5LLEVBQTBLekIsUUFBMUssQ0FBbUwwTCxNQUFNLENBQUMrUCx1QkFBMUw7QUFDRCxPQUZELE1BRU87QUFDTG5LLFFBQUFBLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTBTLE1BQU0sQ0FBQzRJLFVBQWIsR0FBMEIsR0FBMUIsR0FBZ0M1SSxNQUFNLENBQUNtUSxtQkFBdkMsR0FBNkQsNkJBQTdELEdBQTZGQyxTQUFTLENBQUNyYSxJQUFWLENBQWUseUJBQWYsQ0FBN0YsR0FBeUksS0FBN0osRUFBb0t6QixRQUFwSyxDQUE2SzBMLE1BQU0sQ0FBQytQLHVCQUFwTDtBQUNEOztBQUVELFVBQUlNLFNBQVMsQ0FBQzFhLFFBQVYsQ0FBbUJxSyxNQUFNLENBQUNtUSxtQkFBMUIsQ0FBSixFQUFvRDtBQUNsRHZLLFFBQUFBLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTBTLE1BQU0sQ0FBQzRJLFVBQWIsR0FBMEIsUUFBMUIsR0FBcUM1SSxNQUFNLENBQUNtUSxtQkFBNUMsR0FBa0UsOEJBQWxFLEdBQW1HRSxTQUFTLENBQUN0YSxJQUFWLENBQWUseUJBQWYsQ0FBbkcsR0FBK0ksS0FBbkssRUFBMEt6QixRQUExSyxDQUFtTDBMLE1BQU0sQ0FBQ2dRLHVCQUExTDtBQUNELE9BRkQsTUFFTztBQUNMcEssUUFBQUEsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNMFMsTUFBTSxDQUFDNEksVUFBYixHQUEwQixHQUExQixHQUFnQzVJLE1BQU0sQ0FBQ21RLG1CQUF2QyxHQUE2RCw2QkFBN0QsR0FBNkZFLFNBQVMsQ0FBQ3RhLElBQVYsQ0FBZSx5QkFBZixDQUE3RixHQUF5SSxLQUE3SixFQUFvS3pCLFFBQXBLLENBQTZLMEwsTUFBTSxDQUFDZ1EsdUJBQXBMO0FBQ0Q7QUFDRjs7QUFFRHpNLElBQUFBLE1BQU0sQ0FBQytNLGlCQUFQO0FBQ0Q7O0FBRUQsV0FBU0MsaUJBQVQsQ0FBMkJDLGNBQTNCLEVBQTJDO0FBQ3pDLFFBQUlqTixNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUkrSyxTQUFTLEdBQUcvSyxNQUFNLENBQUM4RSxZQUFQLEdBQXNCOUUsTUFBTSxDQUFDK0ssU0FBN0IsR0FBeUMsQ0FBQy9LLE1BQU0sQ0FBQytLLFNBQWpFO0FBQ0EsUUFBSXZGLFVBQVUsR0FBR3hGLE1BQU0sQ0FBQ3dGLFVBQXhCO0FBQUEsUUFDSUQsUUFBUSxHQUFHdkYsTUFBTSxDQUFDdUYsUUFEdEI7QUFBQSxRQUVJOUksTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFGcEI7QUFBQSxRQUdJeVEsYUFBYSxHQUFHbE4sTUFBTSxDQUFDMEssV0FIM0I7QUFBQSxRQUlJeUMsaUJBQWlCLEdBQUduTixNQUFNLENBQUNtTSxTQUovQjtBQUFBLFFBS0lpQixpQkFBaUIsR0FBR3BOLE1BQU0sQ0FBQzhKLFNBTC9CO0FBTUEsUUFBSVksV0FBVyxHQUFHdUMsY0FBbEI7QUFDQSxRQUFJbkQsU0FBSjs7QUFFQSxRQUFJLE9BQU9ZLFdBQVAsS0FBdUIsV0FBM0IsRUFBd0M7QUFDdEMsV0FBSyxJQUFJcGpCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrZSxVQUFVLENBQUNqZSxNQUEvQixFQUF1Q0QsQ0FBQyxJQUFJLENBQTVDLEVBQStDO0FBQzdDLFlBQUksT0FBT2tlLFVBQVUsQ0FBQ2xlLENBQUMsR0FBRyxDQUFMLENBQWpCLEtBQTZCLFdBQWpDLEVBQThDO0FBQzVDLGNBQUl5akIsU0FBUyxJQUFJdkYsVUFBVSxDQUFDbGUsQ0FBRCxDQUF2QixJQUE4QnlqQixTQUFTLEdBQUd2RixVQUFVLENBQUNsZSxDQUFDLEdBQUcsQ0FBTCxDQUFWLEdBQW9CLENBQUNrZSxVQUFVLENBQUNsZSxDQUFDLEdBQUcsQ0FBTCxDQUFWLEdBQW9Ca2UsVUFBVSxDQUFDbGUsQ0FBRCxDQUEvQixJQUFzQyxDQUF4RyxFQUEyRztBQUN6R29qQixZQUFBQSxXQUFXLEdBQUdwakIsQ0FBZDtBQUNELFdBRkQsTUFFTyxJQUFJeWpCLFNBQVMsSUFBSXZGLFVBQVUsQ0FBQ2xlLENBQUQsQ0FBdkIsSUFBOEJ5akIsU0FBUyxHQUFHdkYsVUFBVSxDQUFDbGUsQ0FBQyxHQUFHLENBQUwsQ0FBeEQsRUFBaUU7QUFDdEVvakIsWUFBQUEsV0FBVyxHQUFHcGpCLENBQUMsR0FBRyxDQUFsQjtBQUNEO0FBQ0YsU0FORCxNQU1PLElBQUl5akIsU0FBUyxJQUFJdkYsVUFBVSxDQUFDbGUsQ0FBRCxDQUEzQixFQUFnQztBQUNyQ29qQixVQUFBQSxXQUFXLEdBQUdwakIsQ0FBZDtBQUNEO0FBQ0YsT0FYcUMsQ0FXcEM7OztBQUdGLFVBQUltVixNQUFNLENBQUM0USxtQkFBWCxFQUFnQztBQUM5QixZQUFJM0MsV0FBVyxHQUFHLENBQWQsSUFBbUIsT0FBT0EsV0FBUCxLQUF1QixXQUE5QyxFQUEyREEsV0FBVyxHQUFHLENBQWQ7QUFDNUQ7QUFDRjs7QUFFRCxRQUFJbkYsUUFBUSxDQUFDaFgsT0FBVCxDQUFpQndjLFNBQWpCLEtBQStCLENBQW5DLEVBQXNDO0FBQ3BDakIsTUFBQUEsU0FBUyxHQUFHdkUsUUFBUSxDQUFDaFgsT0FBVCxDQUFpQndjLFNBQWpCLENBQVo7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJdUMsSUFBSSxHQUFHNUcsSUFBSSxDQUFDaUIsR0FBTCxDQUFTbEwsTUFBTSxDQUFDK0wsa0JBQWhCLEVBQW9Da0MsV0FBcEMsQ0FBWDtBQUNBWixNQUFBQSxTQUFTLEdBQUd3RCxJQUFJLEdBQUc1RyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDK0QsV0FBVyxHQUFHNEMsSUFBZixJQUF1QjdRLE1BQU0sQ0FBQzhLLGNBQXpDLENBQW5CO0FBQ0Q7O0FBRUQsUUFBSXVDLFNBQVMsSUFBSXZFLFFBQVEsQ0FBQ2hlLE1BQTFCLEVBQWtDdWlCLFNBQVMsR0FBR3ZFLFFBQVEsQ0FBQ2hlLE1BQVQsR0FBa0IsQ0FBOUI7O0FBRWxDLFFBQUltakIsV0FBVyxLQUFLd0MsYUFBcEIsRUFBbUM7QUFDakMsVUFBSXBELFNBQVMsS0FBS3NELGlCQUFsQixFQUFxQztBQUNuQ3BOLFFBQUFBLE1BQU0sQ0FBQzhKLFNBQVAsR0FBbUJBLFNBQW5CO0FBQ0E5SixRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksaUJBQVo7QUFDRDs7QUFFRDtBQUNELEtBL0N3QyxDQStDdkM7OztBQUdGLFFBQUltTCxTQUFTLEdBQUdqSSxRQUFRLENBQUNsRSxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCNFMsV0FBakIsRUFBOEJsWSxJQUE5QixDQUFtQyx5QkFBbkMsS0FBaUVrWSxXQUFsRSxFQUErRSxFQUEvRSxDQUF4QjtBQUNBalAsSUFBQUEsTUFBTSxDQUFDdUUsTUFBRCxFQUFTO0FBQ2I4SixNQUFBQSxTQUFTLEVBQUVBLFNBREU7QUFFYnFDLE1BQUFBLFNBQVMsRUFBRUEsU0FGRTtBQUdiZSxNQUFBQSxhQUFhLEVBQUVBLGFBSEY7QUFJYnhDLE1BQUFBLFdBQVcsRUFBRUE7QUFKQSxLQUFULENBQU47QUFNQTFLLElBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxtQkFBWjtBQUNBaEIsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGlCQUFaOztBQUVBLFFBQUltTSxpQkFBaUIsS0FBS2hCLFNBQTFCLEVBQXFDO0FBQ25Dbk0sTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGlCQUFaO0FBQ0Q7O0FBRUQsUUFBSWhCLE1BQU0sQ0FBQ0ksV0FBUCxJQUFzQkosTUFBTSxDQUFDdkQsTUFBUCxDQUFjOFEsa0JBQXhDLEVBQTREO0FBQzFEdk4sTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGFBQVo7QUFDRDtBQUNGOztBQUVELFdBQVN3TSxrQkFBVCxDQUE0QjdmLENBQTVCLEVBQStCO0FBQzdCLFFBQUlxUyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUNBLFFBQUkwSyxLQUFLLEdBQUczVyxDQUFDLENBQUM3QyxDQUFDLENBQUN2RyxNQUFILENBQUQsQ0FBWWdTLE9BQVosQ0FBb0IsTUFBTXFELE1BQU0sQ0FBQzRJLFVBQWpDLEVBQTZDLENBQTdDLENBQVo7QUFDQSxRQUFJb0ksVUFBVSxHQUFHLEtBQWpCO0FBQ0EsUUFBSXJFLFVBQUo7O0FBRUEsUUFBSWpDLEtBQUosRUFBVztBQUNULFdBQUssSUFBSTdmLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwWSxNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUFsQyxFQUEwQ0QsQ0FBQyxJQUFJLENBQS9DLEVBQWtEO0FBQ2hELFlBQUkwWSxNQUFNLENBQUNvRixNQUFQLENBQWM5ZCxDQUFkLE1BQXFCNmYsS0FBekIsRUFBZ0M7QUFDOUJzRyxVQUFBQSxVQUFVLEdBQUcsSUFBYjtBQUNBckUsVUFBQUEsVUFBVSxHQUFHOWhCLENBQWI7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxRQUFJNmYsS0FBSyxJQUFJc0csVUFBYixFQUF5QjtBQUN2QnpOLE1BQUFBLE1BQU0sQ0FBQzBOLFlBQVAsR0FBc0J2RyxLQUF0Qjs7QUFFQSxVQUFJbkgsTUFBTSxDQUFDaUYsT0FBUCxJQUFrQmpGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQTVDLEVBQXFEO0FBQ25EbEYsUUFBQUEsTUFBTSxDQUFDMk4sWUFBUCxHQUFzQnpKLFFBQVEsQ0FBQzFULENBQUMsQ0FBQzJXLEtBQUQsQ0FBRCxDQUFTM1UsSUFBVCxDQUFjLHlCQUFkLENBQUQsRUFBMkMsRUFBM0MsQ0FBOUI7QUFDRCxPQUZELE1BRU87QUFDTHdOLFFBQUFBLE1BQU0sQ0FBQzJOLFlBQVAsR0FBc0J2RSxVQUF0QjtBQUNEO0FBQ0YsS0FSRCxNQVFPO0FBQ0xwSixNQUFBQSxNQUFNLENBQUMwTixZQUFQLEdBQXNCL2UsU0FBdEI7QUFDQXFSLE1BQUFBLE1BQU0sQ0FBQzJOLFlBQVAsR0FBc0JoZixTQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSThOLE1BQU0sQ0FBQ21SLG1CQUFQLElBQThCNU4sTUFBTSxDQUFDMk4sWUFBUCxLQUF3QmhmLFNBQXRELElBQW1FcVIsTUFBTSxDQUFDMk4sWUFBUCxLQUF3QjNOLE1BQU0sQ0FBQzBLLFdBQXRHLEVBQW1IO0FBQ2pIMUssTUFBQUEsTUFBTSxDQUFDNE4sbUJBQVA7QUFDRDtBQUNGOztBQUVELE1BQUlDLE1BQU0sR0FBRztBQUNYaEssSUFBQUEsVUFBVSxFQUFFQSxVQUREO0FBRVhTLElBQUFBLFlBQVksRUFBRUEsWUFGSDtBQUdYOEYsSUFBQUEsZ0JBQWdCLEVBQUVBLGdCQUhQO0FBSVhELElBQUFBLGtCQUFrQixFQUFFQSxrQkFKVDtBQUtYVyxJQUFBQSxvQkFBb0IsRUFBRUEsb0JBTFg7QUFNWFksSUFBQUEsY0FBYyxFQUFFQSxjQU5MO0FBT1hRLElBQUFBLG1CQUFtQixFQUFFQSxtQkFQVjtBQVFYYyxJQUFBQSxpQkFBaUIsRUFBRUEsaUJBUlI7QUFTWFEsSUFBQUEsa0JBQWtCLEVBQUVBO0FBVFQsR0FBYjs7QUFZQSxXQUFTTSxrQkFBVCxDQUE0QnRULElBQTVCLEVBQWtDO0FBQ2hDLFFBQUlBLElBQUksS0FBSyxLQUFLLENBQWxCLEVBQXFCO0FBQ25CQSxNQUFBQSxJQUFJLEdBQUcsS0FBS3dKLFlBQUwsS0FBc0IsR0FBdEIsR0FBNEIsR0FBbkM7QUFDRDs7QUFFRCxRQUFJaEUsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFBQSxRQUNJb0ksR0FBRyxHQUFHN0UsTUFBTSxDQUFDOEUsWUFEakI7QUFBQSxRQUVJaUcsU0FBUyxHQUFHL0ssTUFBTSxDQUFDK0ssU0FGdkI7QUFBQSxRQUdJMUksVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFIeEI7O0FBS0EsUUFBSTVGLE1BQU0sQ0FBQ3NSLGdCQUFYLEVBQTZCO0FBQzNCLGFBQU9sSixHQUFHLEdBQUcsQ0FBQ2tHLFNBQUosR0FBZ0JBLFNBQTFCO0FBQ0Q7O0FBRUQsUUFBSXRPLE1BQU0sQ0FBQzRNLE9BQVgsRUFBb0I7QUFDbEIsYUFBTzBCLFNBQVA7QUFDRDs7QUFFRCxRQUFJaUQsZ0JBQWdCLEdBQUd6VCxZQUFZLENBQUM4SCxVQUFVLENBQUMsQ0FBRCxDQUFYLEVBQWdCN0gsSUFBaEIsQ0FBbkM7QUFDQSxRQUFJcUssR0FBSixFQUFTbUosZ0JBQWdCLEdBQUcsQ0FBQ0EsZ0JBQXBCO0FBQ1QsV0FBT0EsZ0JBQWdCLElBQUksQ0FBM0I7QUFDRDs7QUFFRCxXQUFTQyxZQUFULENBQXNCbEQsU0FBdEIsRUFBaUNtRCxZQUFqQyxFQUErQztBQUM3QyxRQUFJbE8sTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJNkUsR0FBRyxHQUFHN0UsTUFBTSxDQUFDOEUsWUFBakI7QUFBQSxRQUNJckksTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFEcEI7QUFBQSxRQUVJNEYsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFGeEI7QUFBQSxRQUdJOEwsU0FBUyxHQUFHbk8sTUFBTSxDQUFDbU8sU0FIdkI7QUFBQSxRQUlJMUMsUUFBUSxHQUFHekwsTUFBTSxDQUFDeUwsUUFKdEI7QUFLQSxRQUFJMkMsQ0FBQyxHQUFHLENBQVI7QUFDQSxRQUFJQyxDQUFDLEdBQUcsQ0FBUjtBQUNBLFFBQUlDLENBQUMsR0FBRyxDQUFSOztBQUVBLFFBQUl0TyxNQUFNLENBQUNnRSxZQUFQLEVBQUosRUFBMkI7QUFDekJvSyxNQUFBQSxDQUFDLEdBQUd2SixHQUFHLEdBQUcsQ0FBQ2tHLFNBQUosR0FBZ0JBLFNBQXZCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xzRCxNQUFBQSxDQUFDLEdBQUd0RCxTQUFKO0FBQ0Q7O0FBRUQsUUFBSXRPLE1BQU0sQ0FBQ3VMLFlBQVgsRUFBeUI7QUFDdkJvRyxNQUFBQSxDQUFDLEdBQUcxSCxJQUFJLENBQUNDLEtBQUwsQ0FBV3lILENBQVgsQ0FBSjtBQUNBQyxNQUFBQSxDQUFDLEdBQUczSCxJQUFJLENBQUNDLEtBQUwsQ0FBVzBILENBQVgsQ0FBSjtBQUNEOztBQUVELFFBQUk1UixNQUFNLENBQUM0TSxPQUFYLEVBQW9CO0FBQ2xCOEUsTUFBQUEsU0FBUyxDQUFDbk8sTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixZQUF4QixHQUF1QyxXQUF4QyxDQUFULEdBQWdFaEUsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixDQUFDb0ssQ0FBekIsR0FBNkIsQ0FBQ0MsQ0FBOUY7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDNVIsTUFBTSxDQUFDc1IsZ0JBQVosRUFBOEI7QUFDbkMxTCxNQUFBQSxVQUFVLENBQUN2UCxTQUFYLENBQXFCLGlCQUFpQnNiLENBQWpCLEdBQXFCLE1BQXJCLEdBQThCQyxDQUE5QixHQUFrQyxNQUFsQyxHQUEyQ0MsQ0FBM0MsR0FBK0MsS0FBcEU7QUFDRDs7QUFFRHRPLElBQUFBLE1BQU0sQ0FBQ3VPLGlCQUFQLEdBQTJCdk8sTUFBTSxDQUFDK0ssU0FBbEM7QUFDQS9LLElBQUFBLE1BQU0sQ0FBQytLLFNBQVAsR0FBbUIvSyxNQUFNLENBQUNnRSxZQUFQLEtBQXdCb0ssQ0FBeEIsR0FBNEJDLENBQS9DLENBN0I2QyxDQTZCSzs7QUFFbEQsUUFBSUcsV0FBSjtBQUNBLFFBQUk1QyxjQUFjLEdBQUc1TCxNQUFNLENBQUM2TCxZQUFQLEtBQXdCN0wsTUFBTSxDQUFDb0wsWUFBUCxFQUE3Qzs7QUFFQSxRQUFJUSxjQUFjLEtBQUssQ0FBdkIsRUFBMEI7QUFDeEI0QyxNQUFBQSxXQUFXLEdBQUcsQ0FBZDtBQUNELEtBRkQsTUFFTztBQUNMQSxNQUFBQSxXQUFXLEdBQUcsQ0FBQ3pELFNBQVMsR0FBRy9LLE1BQU0sQ0FBQ29MLFlBQVAsRUFBYixJQUFzQ1EsY0FBcEQ7QUFDRDs7QUFFRCxRQUFJNEMsV0FBVyxLQUFLL0MsUUFBcEIsRUFBOEI7QUFDNUJ6TCxNQUFBQSxNQUFNLENBQUMwTCxjQUFQLENBQXNCWCxTQUF0QjtBQUNEOztBQUVEL0ssSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGNBQVosRUFBNEJoQixNQUFNLENBQUMrSyxTQUFuQyxFQUE4Q21ELFlBQTlDO0FBQ0Q7O0FBRUQsV0FBUzlDLFlBQVQsR0FBd0I7QUFDdEIsV0FBTyxDQUFDLEtBQUs3RixRQUFMLENBQWMsQ0FBZCxDQUFSO0FBQ0Q7O0FBRUQsV0FBU3NHLFlBQVQsR0FBd0I7QUFDdEIsV0FBTyxDQUFDLEtBQUt0RyxRQUFMLENBQWMsS0FBS0EsUUFBTCxDQUFjaGUsTUFBZCxHQUF1QixDQUFyQyxDQUFSO0FBQ0Q7O0FBRUQsV0FBU2tuQixXQUFULENBQXFCMUQsU0FBckIsRUFBZ0NWLEtBQWhDLEVBQXVDcUUsWUFBdkMsRUFBcURDLGVBQXJELEVBQXNFQyxRQUF0RSxFQUFnRjtBQUM5RSxRQUFJN0QsU0FBUyxLQUFLLEtBQUssQ0FBdkIsRUFBMEI7QUFDeEJBLE1BQUFBLFNBQVMsR0FBRyxDQUFaO0FBQ0Q7O0FBRUQsUUFBSVYsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFDcEJBLE1BQUFBLEtBQUssR0FBRyxLQUFLNU4sTUFBTCxDQUFZNE4sS0FBcEI7QUFDRDs7QUFFRCxRQUFJcUUsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFDM0JBLE1BQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0Q7O0FBRUQsUUFBSUMsZUFBZSxLQUFLLEtBQUssQ0FBN0IsRUFBZ0M7QUFDOUJBLE1BQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNEOztBQUVELFFBQUkzTyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUFBLFFBQ0kwUixTQUFTLEdBQUduTyxNQUFNLENBQUNtTyxTQUR2Qjs7QUFHQSxRQUFJbk8sTUFBTSxDQUFDNk8sU0FBUCxJQUFvQnBTLE1BQU0sQ0FBQ3FTLDhCQUEvQixFQUErRDtBQUM3RCxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJMUQsWUFBWSxHQUFHcEwsTUFBTSxDQUFDb0wsWUFBUCxFQUFuQjtBQUNBLFFBQUlTLFlBQVksR0FBRzdMLE1BQU0sQ0FBQzZMLFlBQVAsRUFBbkI7QUFDQSxRQUFJa0QsWUFBSjtBQUNBLFFBQUlKLGVBQWUsSUFBSTVELFNBQVMsR0FBR0ssWUFBbkMsRUFBaUQyRCxZQUFZLEdBQUczRCxZQUFmLENBQWpELEtBQWtGLElBQUl1RCxlQUFlLElBQUk1RCxTQUFTLEdBQUdjLFlBQW5DLEVBQWlEa0QsWUFBWSxHQUFHbEQsWUFBZixDQUFqRCxLQUFrRmtELFlBQVksR0FBR2hFLFNBQWYsQ0E1QnRGLENBNEJnSDs7QUFFOUwvSyxJQUFBQSxNQUFNLENBQUMwTCxjQUFQLENBQXNCcUQsWUFBdEI7O0FBRUEsUUFBSXRTLE1BQU0sQ0FBQzRNLE9BQVgsRUFBb0I7QUFDbEIsVUFBSTJGLEdBQUcsR0FBR2hQLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBVjs7QUFFQSxVQUFJcUcsS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDZjhELFFBQUFBLFNBQVMsQ0FBQ2EsR0FBRyxHQUFHLFlBQUgsR0FBa0IsV0FBdEIsQ0FBVCxHQUE4QyxDQUFDRCxZQUEvQztBQUNELE9BRkQsTUFFTztBQUNMO0FBQ0EsWUFBSVosU0FBUyxDQUFDYyxRQUFkLEVBQXdCO0FBQ3RCLGNBQUlDLG1CQUFKOztBQUVBZixVQUFBQSxTQUFTLENBQUNjLFFBQVYsRUFBb0JDLG1CQUFtQixHQUFHLEVBQXRCLEVBQTBCQSxtQkFBbUIsQ0FBQ0YsR0FBRyxHQUFHLE1BQUgsR0FBWSxLQUFoQixDQUFuQixHQUE0QyxDQUFDRCxZQUF2RSxFQUFxRkcsbUJBQW1CLENBQUNDLFFBQXBCLEdBQStCLFFBQXBILEVBQThIRCxtQkFBbEo7QUFDRCxTQUpELE1BSU87QUFDTGYsVUFBQUEsU0FBUyxDQUFDYSxHQUFHLEdBQUcsWUFBSCxHQUFrQixXQUF0QixDQUFULEdBQThDLENBQUNELFlBQS9DO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFJMUUsS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDZnJLLE1BQUFBLE1BQU0sQ0FBQ3VLLGFBQVAsQ0FBcUIsQ0FBckI7QUFDQXZLLE1BQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0JjLFlBQXBCOztBQUVBLFVBQUlMLFlBQUosRUFBa0I7QUFDaEIxTyxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksdUJBQVosRUFBcUNxSixLQUFyQyxFQUE0Q3VFLFFBQTVDO0FBQ0E1TyxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZUFBWjtBQUNEO0FBQ0YsS0FSRCxNQVFPO0FBQ0xoQixNQUFBQSxNQUFNLENBQUN1SyxhQUFQLENBQXFCRixLQUFyQjtBQUNBckssTUFBQUEsTUFBTSxDQUFDaU8sWUFBUCxDQUFvQmMsWUFBcEI7O0FBRUEsVUFBSUwsWUFBSixFQUFrQjtBQUNoQjFPLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSx1QkFBWixFQUFxQ3FKLEtBQXJDLEVBQTRDdUUsUUFBNUM7QUFDQTVPLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxpQkFBWjtBQUNEOztBQUVELFVBQUksQ0FBQ2hCLE1BQU0sQ0FBQzZPLFNBQVosRUFBdUI7QUFDckI3TyxRQUFBQSxNQUFNLENBQUM2TyxTQUFQLEdBQW1CLElBQW5COztBQUVBLFlBQUksQ0FBQzdPLE1BQU0sQ0FBQ29QLGlDQUFaLEVBQStDO0FBQzdDcFAsVUFBQUEsTUFBTSxDQUFDb1AsaUNBQVAsR0FBMkMsU0FBU3RWLGFBQVQsQ0FBdUJuTSxDQUF2QixFQUEwQjtBQUNuRSxnQkFBSSxDQUFDcVMsTUFBRCxJQUFXQSxNQUFNLENBQUNHLFNBQXRCLEVBQWlDO0FBQ2pDLGdCQUFJeFMsQ0FBQyxDQUFDdkcsTUFBRixLQUFhLElBQWpCLEVBQXVCO0FBQ3ZCNFksWUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQmhaLG1CQUFyQixDQUF5QyxlQUF6QyxFQUEwRDJXLE1BQU0sQ0FBQ29QLGlDQUFqRTtBQUNBcFAsWUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQmhaLG1CQUFyQixDQUF5QyxxQkFBekMsRUFBZ0UyVyxNQUFNLENBQUNvUCxpQ0FBdkU7QUFDQXBQLFlBQUFBLE1BQU0sQ0FBQ29QLGlDQUFQLEdBQTJDLElBQTNDO0FBQ0EsbUJBQU9wUCxNQUFNLENBQUNvUCxpQ0FBZDs7QUFFQSxnQkFBSVYsWUFBSixFQUFrQjtBQUNoQjFPLGNBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxlQUFaO0FBQ0Q7QUFDRixXQVhEO0FBWUQ7O0FBRURoQixRQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCalosZ0JBQXJCLENBQXNDLGVBQXRDLEVBQXVENFcsTUFBTSxDQUFDb1AsaUNBQTlEO0FBQ0FwUCxRQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCalosZ0JBQXJCLENBQXNDLHFCQUF0QyxFQUE2RDRXLE1BQU0sQ0FBQ29QLGlDQUFwRTtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSXJFLFNBQVMsR0FBRztBQUNkeFEsSUFBQUEsWUFBWSxFQUFFdVQsa0JBREE7QUFFZEcsSUFBQUEsWUFBWSxFQUFFQSxZQUZBO0FBR2Q3QyxJQUFBQSxZQUFZLEVBQUVBLFlBSEE7QUFJZFMsSUFBQUEsWUFBWSxFQUFFQSxZQUpBO0FBS2Q0QyxJQUFBQSxXQUFXLEVBQUVBO0FBTEMsR0FBaEI7O0FBUUEsV0FBU2xFLGFBQVQsQ0FBdUJ2WCxRQUF2QixFQUFpQ2tiLFlBQWpDLEVBQStDO0FBQzdDLFFBQUlsTyxNQUFNLEdBQUcsSUFBYjs7QUFFQSxRQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQW5CLEVBQTRCO0FBQzFCckosTUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQnhJLFVBQWxCLENBQTZCN0csUUFBN0I7QUFDRDs7QUFFRGdOLElBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxlQUFaLEVBQTZCaE8sUUFBN0IsRUFBdUNrYixZQUF2QztBQUNEOztBQUVELFdBQVNtQixlQUFULENBQXlCWCxZQUF6QixFQUF1Q1ksU0FBdkMsRUFBa0Q7QUFDaEQsUUFBSVosWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFDM0JBLE1BQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0Q7O0FBRUQsUUFBSTFPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSTBLLFdBQVcsR0FBRzFLLE1BQU0sQ0FBQzBLLFdBQXpCO0FBQUEsUUFDSWpPLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BRHBCO0FBQUEsUUFFSXlRLGFBQWEsR0FBR2xOLE1BQU0sQ0FBQ2tOLGFBRjNCO0FBR0EsUUFBSXpRLE1BQU0sQ0FBQzRNLE9BQVgsRUFBb0I7O0FBRXBCLFFBQUk1TSxNQUFNLENBQUM0TyxVQUFYLEVBQXVCO0FBQ3JCckwsTUFBQUEsTUFBTSxDQUFDb0ssZ0JBQVA7QUFDRDs7QUFFRCxRQUFJbUYsR0FBRyxHQUFHRCxTQUFWOztBQUVBLFFBQUksQ0FBQ0MsR0FBTCxFQUFVO0FBQ1IsVUFBSTdFLFdBQVcsR0FBR3dDLGFBQWxCLEVBQWlDcUMsR0FBRyxHQUFHLE1BQU4sQ0FBakMsS0FBbUQsSUFBSTdFLFdBQVcsR0FBR3dDLGFBQWxCLEVBQWlDcUMsR0FBRyxHQUFHLE1BQU4sQ0FBakMsS0FBbURBLEdBQUcsR0FBRyxPQUFOO0FBQ3ZHOztBQUVEdlAsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGlCQUFaOztBQUVBLFFBQUkwTixZQUFZLElBQUloRSxXQUFXLEtBQUt3QyxhQUFwQyxFQUFtRDtBQUNqRCxVQUFJcUMsR0FBRyxLQUFLLE9BQVosRUFBcUI7QUFDbkJ2UCxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksMkJBQVo7QUFDQTtBQUNEOztBQUVEaEIsTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLDRCQUFaOztBQUVBLFVBQUl1TyxHQUFHLEtBQUssTUFBWixFQUFvQjtBQUNsQnZQLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSwwQkFBWjtBQUNELE9BRkQsTUFFTztBQUNMaEIsUUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLDBCQUFaO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQVNsSCxhQUFULENBQXVCNFUsWUFBdkIsRUFBcUNZLFNBQXJDLEVBQWdEO0FBQzlDLFFBQUlaLFlBQVksS0FBSyxLQUFLLENBQTFCLEVBQTZCO0FBQzNCQSxNQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNEOztBQUVELFFBQUkxTyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUkwSyxXQUFXLEdBQUcxSyxNQUFNLENBQUMwSyxXQUF6QjtBQUFBLFFBQ0l3QyxhQUFhLEdBQUdsTixNQUFNLENBQUNrTixhQUQzQjtBQUFBLFFBRUl6USxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUZwQjtBQUdBdUQsSUFBQUEsTUFBTSxDQUFDNk8sU0FBUCxHQUFtQixLQUFuQjtBQUNBLFFBQUlwUyxNQUFNLENBQUM0TSxPQUFYLEVBQW9CO0FBQ3BCckosSUFBQUEsTUFBTSxDQUFDdUssYUFBUCxDQUFxQixDQUFyQjtBQUNBLFFBQUlnRixHQUFHLEdBQUdELFNBQVY7O0FBRUEsUUFBSSxDQUFDQyxHQUFMLEVBQVU7QUFDUixVQUFJN0UsV0FBVyxHQUFHd0MsYUFBbEIsRUFBaUNxQyxHQUFHLEdBQUcsTUFBTixDQUFqQyxLQUFtRCxJQUFJN0UsV0FBVyxHQUFHd0MsYUFBbEIsRUFBaUNxQyxHQUFHLEdBQUcsTUFBTixDQUFqQyxLQUFtREEsR0FBRyxHQUFHLE9BQU47QUFDdkc7O0FBRUR2UCxJQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZUFBWjs7QUFFQSxRQUFJME4sWUFBWSxJQUFJaEUsV0FBVyxLQUFLd0MsYUFBcEMsRUFBbUQ7QUFDakQsVUFBSXFDLEdBQUcsS0FBSyxPQUFaLEVBQXFCO0FBQ25CdlAsUUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLHlCQUFaO0FBQ0E7QUFDRDs7QUFFRGhCLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSwwQkFBWjs7QUFFQSxVQUFJdU8sR0FBRyxLQUFLLE1BQVosRUFBb0I7QUFDbEJ2UCxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksd0JBQVo7QUFDRCxPQUZELE1BRU87QUFDTGhCLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSx3QkFBWjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxNQUFJbkgsVUFBVSxHQUFHO0FBQ2YwUSxJQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZjhFLElBQUFBLGVBQWUsRUFBRUEsZUFGRjtBQUdmdlYsSUFBQUEsYUFBYSxFQUFFQTtBQUhBLEdBQWpCOztBQU1BLFdBQVMwVixPQUFULENBQWlCcFksS0FBakIsRUFBd0JpVCxLQUF4QixFQUErQnFFLFlBQS9CLEVBQTZDRSxRQUE3QyxFQUF1RGEsT0FBdkQsRUFBZ0U7QUFDOUQsUUFBSXJZLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQ3BCQSxNQUFBQSxLQUFLLEdBQUcsQ0FBUjtBQUNEOztBQUVELFFBQUlpVCxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUNwQkEsTUFBQUEsS0FBSyxHQUFHLEtBQUs1TixNQUFMLENBQVk0TixLQUFwQjtBQUNEOztBQUVELFFBQUlxRSxZQUFZLEtBQUssS0FBSyxDQUExQixFQUE2QjtBQUMzQkEsTUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDRDs7QUFFRCxRQUFJLE9BQU90WCxLQUFQLEtBQWlCLFFBQWpCLElBQTZCLE9BQU9BLEtBQVAsS0FBaUIsUUFBbEQsRUFBNEQ7QUFDMUQsWUFBTSxJQUFJc1ksS0FBSixDQUFVLHFGQUFvRnRZLEtBQXBGLElBQTRGLFVBQXRHLENBQU47QUFDRDs7QUFFRCxRQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0I7QUFDTjtBQUNBO0FBQ0E7QUFDTSxVQUFJdVksYUFBYSxHQUFHekwsUUFBUSxDQUFDOU0sS0FBRCxFQUFRLEVBQVIsQ0FBNUI7QUFDQTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVNLFVBQUl3WSxhQUFhLEdBQUdDLFFBQVEsQ0FBQ0YsYUFBRCxDQUE1Qjs7QUFFQSxVQUFJLENBQUNDLGFBQUwsRUFBb0I7QUFDbEIsY0FBTSxJQUFJRixLQUFKLENBQVUsd0VBQXdFdFksS0FBeEUsR0FBZ0YsVUFBMUYsQ0FBTjtBQUNELE9BaEI0QixDQWdCM0I7QUFDRjs7O0FBR0FBLE1BQUFBLEtBQUssR0FBR3VZLGFBQVI7QUFDRDs7QUFFRCxRQUFJM1AsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJb0osVUFBVSxHQUFHaFMsS0FBakI7QUFDQSxRQUFJZ1MsVUFBVSxHQUFHLENBQWpCLEVBQW9CQSxVQUFVLEdBQUcsQ0FBYjtBQUNwQixRQUFJM00sTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFBQSxRQUNJOEksUUFBUSxHQUFHdkYsTUFBTSxDQUFDdUYsUUFEdEI7QUFBQSxRQUVJQyxVQUFVLEdBQUd4RixNQUFNLENBQUN3RixVQUZ4QjtBQUFBLFFBR0kwSCxhQUFhLEdBQUdsTixNQUFNLENBQUNrTixhQUgzQjtBQUFBLFFBSUl4QyxXQUFXLEdBQUcxSyxNQUFNLENBQUMwSyxXQUp6QjtBQUFBLFFBS0k3RixHQUFHLEdBQUc3RSxNQUFNLENBQUM4RSxZQUxqQjtBQUFBLFFBTUlxSixTQUFTLEdBQUduTyxNQUFNLENBQUNtTyxTQU52QjtBQUFBLFFBT0lqSixPQUFPLEdBQUdsRixNQUFNLENBQUNrRixPQVByQjs7QUFTQSxRQUFJbEYsTUFBTSxDQUFDNk8sU0FBUCxJQUFvQnBTLE1BQU0sQ0FBQ3FTLDhCQUEzQixJQUE2RCxDQUFDNUosT0FBRCxJQUFZLENBQUMwSixRQUFiLElBQXlCLENBQUNhLE9BQTNGLEVBQW9HO0FBQ2xHLGFBQU8sS0FBUDtBQUNEOztBQUVELFFBQUluQyxJQUFJLEdBQUc1RyxJQUFJLENBQUNpQixHQUFMLENBQVMzSCxNQUFNLENBQUN2RCxNQUFQLENBQWMrTCxrQkFBdkIsRUFBMkNZLFVBQTNDLENBQVg7QUFDQSxRQUFJVSxTQUFTLEdBQUd3RCxJQUFJLEdBQUc1RyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDeUMsVUFBVSxHQUFHa0UsSUFBZCxJQUFzQnROLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhLLGNBQS9DLENBQXZCO0FBQ0EsUUFBSXVDLFNBQVMsSUFBSXZFLFFBQVEsQ0FBQ2hlLE1BQTFCLEVBQWtDdWlCLFNBQVMsR0FBR3ZFLFFBQVEsQ0FBQ2hlLE1BQVQsR0FBa0IsQ0FBOUI7O0FBRWxDLFFBQUksQ0FBQ21qQixXQUFXLElBQUlqTyxNQUFNLENBQUNxVCxZQUF0QixJQUFzQyxDQUF2QyxPQUErQzVDLGFBQWEsSUFBSSxDQUFoRSxLQUFzRXdCLFlBQTFFLEVBQXdGO0FBQ3RGMU8sTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLHdCQUFaO0FBQ0Q7O0FBRUQsUUFBSStKLFNBQVMsR0FBRyxDQUFDeEYsUUFBUSxDQUFDdUUsU0FBRCxDQUF6QixDQWhFOEQsQ0FnRXhCOztBQUV0QzlKLElBQUFBLE1BQU0sQ0FBQzBMLGNBQVAsQ0FBc0JYLFNBQXRCLEVBbEU4RCxDQWtFNUI7O0FBRWxDLFFBQUl0TyxNQUFNLENBQUM0USxtQkFBWCxFQUFnQztBQUM5QixXQUFLLElBQUkvbEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tlLFVBQVUsQ0FBQ2plLE1BQS9CLEVBQXVDRCxDQUFDLElBQUksQ0FBNUMsRUFBK0M7QUFDN0MsWUFBSXlvQixtQkFBbUIsR0FBRyxDQUFDckosSUFBSSxDQUFDQyxLQUFMLENBQVdvRSxTQUFTLEdBQUcsR0FBdkIsQ0FBM0I7QUFDQSxZQUFJaUYsY0FBYyxHQUFHdEosSUFBSSxDQUFDQyxLQUFMLENBQVduQixVQUFVLENBQUNsZSxDQUFELENBQVYsR0FBZ0IsR0FBM0IsQ0FBckI7QUFDQSxZQUFJMm9CLGtCQUFrQixHQUFHdkosSUFBSSxDQUFDQyxLQUFMLENBQVduQixVQUFVLENBQUNsZSxDQUFDLEdBQUcsQ0FBTCxDQUFWLEdBQW9CLEdBQS9CLENBQXpCOztBQUVBLFlBQUksT0FBT2tlLFVBQVUsQ0FBQ2xlLENBQUMsR0FBRyxDQUFMLENBQWpCLEtBQTZCLFdBQWpDLEVBQThDO0FBQzVDLGNBQUl5b0IsbUJBQW1CLElBQUlDLGNBQXZCLElBQXlDRCxtQkFBbUIsR0FBR0Usa0JBQWtCLEdBQUcsQ0FBQ0Esa0JBQWtCLEdBQUdELGNBQXRCLElBQXdDLENBQWhJLEVBQW1JO0FBQ2pJNUcsWUFBQUEsVUFBVSxHQUFHOWhCLENBQWI7QUFDRCxXQUZELE1BRU8sSUFBSXlvQixtQkFBbUIsSUFBSUMsY0FBdkIsSUFBeUNELG1CQUFtQixHQUFHRSxrQkFBbkUsRUFBdUY7QUFDNUY3RyxZQUFBQSxVQUFVLEdBQUc5aEIsQ0FBQyxHQUFHLENBQWpCO0FBQ0Q7QUFDRixTQU5ELE1BTU8sSUFBSXlvQixtQkFBbUIsSUFBSUMsY0FBM0IsRUFBMkM7QUFDaEQ1RyxVQUFBQSxVQUFVLEdBQUc5aEIsQ0FBYjtBQUNEO0FBQ0Y7QUFDRixLQXBGNkQsQ0FvRjVEOzs7QUFHRixRQUFJMFksTUFBTSxDQUFDSSxXQUFQLElBQXNCZ0osVUFBVSxLQUFLc0IsV0FBekMsRUFBc0Q7QUFDcEQsVUFBSSxDQUFDMUssTUFBTSxDQUFDa1EsY0FBUixJQUEwQm5GLFNBQVMsR0FBRy9LLE1BQU0sQ0FBQytLLFNBQTdDLElBQTBEQSxTQUFTLEdBQUcvSyxNQUFNLENBQUNvTCxZQUFQLEVBQTFFLEVBQWlHO0FBQy9GLGVBQU8sS0FBUDtBQUNEOztBQUVELFVBQUksQ0FBQ3BMLE1BQU0sQ0FBQ21RLGNBQVIsSUFBMEJwRixTQUFTLEdBQUcvSyxNQUFNLENBQUMrSyxTQUE3QyxJQUEwREEsU0FBUyxHQUFHL0ssTUFBTSxDQUFDNkwsWUFBUCxFQUExRSxFQUFpRztBQUMvRixZQUFJLENBQUNuQixXQUFXLElBQUksQ0FBaEIsTUFBdUJ0QixVQUEzQixFQUF1QyxPQUFPLEtBQVA7QUFDeEM7QUFDRjs7QUFFRCxRQUFJa0csU0FBSjtBQUNBLFFBQUlsRyxVQUFVLEdBQUdzQixXQUFqQixFQUE4QjRFLFNBQVMsR0FBRyxNQUFaLENBQTlCLEtBQXNELElBQUlsRyxVQUFVLEdBQUdzQixXQUFqQixFQUE4QjRFLFNBQVMsR0FBRyxNQUFaLENBQTlCLEtBQXNEQSxTQUFTLEdBQUcsT0FBWixDQWxHOUMsQ0FrR21FOztBQUVqSSxRQUFJekssR0FBRyxJQUFJLENBQUNrRyxTQUFELEtBQWUvSyxNQUFNLENBQUMrSyxTQUE3QixJQUEwQyxDQUFDbEcsR0FBRCxJQUFRa0csU0FBUyxLQUFLL0ssTUFBTSxDQUFDK0ssU0FBM0UsRUFBc0Y7QUFDcEYvSyxNQUFBQSxNQUFNLENBQUNnTixpQkFBUCxDQUF5QjVELFVBQXpCLEVBRG9GLENBQzlDOztBQUV0QyxVQUFJM00sTUFBTSxDQUFDNE8sVUFBWCxFQUF1QjtBQUNyQnJMLFFBQUFBLE1BQU0sQ0FBQ29LLGdCQUFQO0FBQ0Q7O0FBRURwSyxNQUFBQSxNQUFNLENBQUNrTSxtQkFBUDs7QUFFQSxVQUFJelAsTUFBTSxDQUFDaU0sTUFBUCxLQUFrQixPQUF0QixFQUErQjtBQUM3QjFJLFFBQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0JsRCxTQUFwQjtBQUNEOztBQUVELFVBQUl1RSxTQUFTLEtBQUssT0FBbEIsRUFBMkI7QUFDekJ0UCxRQUFBQSxNQUFNLENBQUNxUCxlQUFQLENBQXVCWCxZQUF2QixFQUFxQ1ksU0FBckM7QUFDQXRQLFFBQUFBLE1BQU0sQ0FBQ2xHLGFBQVAsQ0FBcUI0VSxZQUFyQixFQUFtQ1ksU0FBbkM7QUFDRDs7QUFFRCxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJN1MsTUFBTSxDQUFDNE0sT0FBWCxFQUFvQjtBQUNsQixVQUFJMkYsR0FBRyxHQUFHaFAsTUFBTSxDQUFDZ0UsWUFBUCxFQUFWO0FBQ0EsVUFBSW9NLENBQUMsR0FBRyxDQUFDckYsU0FBVDs7QUFFQSxVQUFJbEcsR0FBSixFQUFTO0FBQ1B1TCxRQUFBQSxDQUFDLEdBQUdqQyxTQUFTLENBQUNrQyxXQUFWLEdBQXdCbEMsU0FBUyxDQUFDbFksV0FBbEMsR0FBZ0RtYSxDQUFwRDtBQUNEOztBQUVELFVBQUkvRixLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNmOEQsUUFBQUEsU0FBUyxDQUFDYSxHQUFHLEdBQUcsWUFBSCxHQUFrQixXQUF0QixDQUFULEdBQThDb0IsQ0FBOUM7QUFDRCxPQUZELE1BRU87QUFDTDtBQUNBLFlBQUlqQyxTQUFTLENBQUNjLFFBQWQsRUFBd0I7QUFDdEIsY0FBSUMsbUJBQUo7O0FBRUFmLFVBQUFBLFNBQVMsQ0FBQ2MsUUFBVixFQUFvQkMsbUJBQW1CLEdBQUcsRUFBdEIsRUFBMEJBLG1CQUFtQixDQUFDRixHQUFHLEdBQUcsTUFBSCxHQUFZLEtBQWhCLENBQW5CLEdBQTRDb0IsQ0FBdEUsRUFBeUVsQixtQkFBbUIsQ0FBQ0MsUUFBcEIsR0FBK0IsUUFBeEcsRUFBa0hELG1CQUF0STtBQUNELFNBSkQsTUFJTztBQUNMZixVQUFBQSxTQUFTLENBQUNhLEdBQUcsR0FBRyxZQUFILEdBQWtCLFdBQXRCLENBQVQsR0FBOENvQixDQUE5QztBQUNEO0FBQ0Y7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBSS9GLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ2ZySyxNQUFBQSxNQUFNLENBQUN1SyxhQUFQLENBQXFCLENBQXJCO0FBQ0F2SyxNQUFBQSxNQUFNLENBQUNpTyxZQUFQLENBQW9CbEQsU0FBcEI7QUFDQS9LLE1BQUFBLE1BQU0sQ0FBQ2dOLGlCQUFQLENBQXlCNUQsVUFBekI7QUFDQXBKLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0FsTSxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksdUJBQVosRUFBcUNxSixLQUFyQyxFQUE0Q3VFLFFBQTVDO0FBQ0E1TyxNQUFBQSxNQUFNLENBQUNxUCxlQUFQLENBQXVCWCxZQUF2QixFQUFxQ1ksU0FBckM7QUFDQXRQLE1BQUFBLE1BQU0sQ0FBQ2xHLGFBQVAsQ0FBcUI0VSxZQUFyQixFQUFtQ1ksU0FBbkM7QUFDRCxLQVJELE1BUU87QUFDTHRQLE1BQUFBLE1BQU0sQ0FBQ3VLLGFBQVAsQ0FBcUJGLEtBQXJCO0FBQ0FySyxNQUFBQSxNQUFNLENBQUNpTyxZQUFQLENBQW9CbEQsU0FBcEI7QUFDQS9LLE1BQUFBLE1BQU0sQ0FBQ2dOLGlCQUFQLENBQXlCNUQsVUFBekI7QUFDQXBKLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0FsTSxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksdUJBQVosRUFBcUNxSixLQUFyQyxFQUE0Q3VFLFFBQTVDO0FBQ0E1TyxNQUFBQSxNQUFNLENBQUNxUCxlQUFQLENBQXVCWCxZQUF2QixFQUFxQ1ksU0FBckM7O0FBRUEsVUFBSSxDQUFDdFAsTUFBTSxDQUFDNk8sU0FBWixFQUF1QjtBQUNyQjdPLFFBQUFBLE1BQU0sQ0FBQzZPLFNBQVAsR0FBbUIsSUFBbkI7O0FBRUEsWUFBSSxDQUFDN08sTUFBTSxDQUFDc1EsNkJBQVosRUFBMkM7QUFDekN0USxVQUFBQSxNQUFNLENBQUNzUSw2QkFBUCxHQUF1QyxTQUFTeFcsYUFBVCxDQUF1Qm5NLENBQXZCLEVBQTBCO0FBQy9ELGdCQUFJLENBQUNxUyxNQUFELElBQVdBLE1BQU0sQ0FBQ0csU0FBdEIsRUFBaUM7QUFDakMsZ0JBQUl4UyxDQUFDLENBQUN2RyxNQUFGLEtBQWEsSUFBakIsRUFBdUI7QUFDdkI0WSxZQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCaFosbUJBQXJCLENBQXlDLGVBQXpDLEVBQTBEMlcsTUFBTSxDQUFDc1EsNkJBQWpFO0FBQ0F0USxZQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCaFosbUJBQXJCLENBQXlDLHFCQUF6QyxFQUFnRTJXLE1BQU0sQ0FBQ3NRLDZCQUF2RTtBQUNBdFEsWUFBQUEsTUFBTSxDQUFDc1EsNkJBQVAsR0FBdUMsSUFBdkM7QUFDQSxtQkFBT3RRLE1BQU0sQ0FBQ3NRLDZCQUFkO0FBQ0F0USxZQUFBQSxNQUFNLENBQUNsRyxhQUFQLENBQXFCNFUsWUFBckIsRUFBbUNZLFNBQW5DO0FBQ0QsV0FSRDtBQVNEOztBQUVEdFAsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQmpaLGdCQUFyQixDQUFzQyxlQUF0QyxFQUF1RDRXLE1BQU0sQ0FBQ3NRLDZCQUE5RDtBQUNBdFEsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQmpaLGdCQUFyQixDQUFzQyxxQkFBdEMsRUFBNkQ0VyxNQUFNLENBQUNzUSw2QkFBcEU7QUFDRDtBQUNGOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNDLFdBQVQsQ0FBcUJuWixLQUFyQixFQUE0QmlULEtBQTVCLEVBQW1DcUUsWUFBbkMsRUFBaURFLFFBQWpELEVBQTJEO0FBQ3pELFFBQUl4WCxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUNwQkEsTUFBQUEsS0FBSyxHQUFHLENBQVI7QUFDRDs7QUFFRCxRQUFJaVQsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFDcEJBLE1BQUFBLEtBQUssR0FBRyxLQUFLNU4sTUFBTCxDQUFZNE4sS0FBcEI7QUFDRDs7QUFFRCxRQUFJcUUsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFDM0JBLE1BQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0Q7O0FBRUQsUUFBSTFPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXdRLFFBQVEsR0FBR3BaLEtBQWY7O0FBRUEsUUFBSTRJLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCNkQsTUFBQUEsUUFBUSxJQUFJeFEsTUFBTSxDQUFDeVEsWUFBbkI7QUFDRDs7QUFFRCxXQUFPelEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlZ0IsUUFBZixFQUF5Qm5HLEtBQXpCLEVBQWdDcUUsWUFBaEMsRUFBOENFLFFBQTlDLENBQVA7QUFDRDtBQUVEOzs7QUFDQSxXQUFTOEIsU0FBVCxDQUFtQnJHLEtBQW5CLEVBQTBCcUUsWUFBMUIsRUFBd0NFLFFBQXhDLEVBQWtEO0FBQ2hELFFBQUl2RSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUNwQkEsTUFBQUEsS0FBSyxHQUFHLEtBQUs1TixNQUFMLENBQVk0TixLQUFwQjtBQUNEOztBQUVELFFBQUlxRSxZQUFZLEtBQUssS0FBSyxDQUExQixFQUE2QjtBQUMzQkEsTUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDRDs7QUFFRCxRQUFJMU8sTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFBQSxRQUNJb1MsU0FBUyxHQUFHN08sTUFBTSxDQUFDNk8sU0FEdkI7QUFBQSxRQUVJM0osT0FBTyxHQUFHbEYsTUFBTSxDQUFDa0YsT0FGckI7QUFHQSxRQUFJLENBQUNBLE9BQUwsRUFBYyxPQUFPbEYsTUFBUDtBQUNkLFFBQUkyUSxTQUFTLEdBQUczUSxNQUFNLENBQUMwSyxXQUFQLEdBQXFCak8sTUFBTSxDQUFDK0wsa0JBQTVCLEdBQWlELENBQWpELEdBQXFEL0wsTUFBTSxDQUFDOEssY0FBNUU7O0FBRUEsUUFBSTlLLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZixVQUFJa0MsU0FBUyxJQUFJcFMsTUFBTSxDQUFDbVUsaUJBQXhCLEVBQTJDLE9BQU8sS0FBUDtBQUMzQzVRLE1BQUFBLE1BQU0sQ0FBQzZRLE9BQVAsR0FGZSxDQUVHOztBQUVsQjdRLE1BQUFBLE1BQU0sQ0FBQzhRLFdBQVAsR0FBcUI5USxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCM0wsVUFBMUM7QUFDRDs7QUFFRCxXQUFPc0osTUFBTSxDQUFDd1AsT0FBUCxDQUFleFAsTUFBTSxDQUFDMEssV0FBUCxHQUFxQmlHLFNBQXBDLEVBQStDdEcsS0FBL0MsRUFBc0RxRSxZQUF0RCxFQUFvRUUsUUFBcEUsQ0FBUDtBQUNEO0FBRUQ7OztBQUNBLFdBQVNtQyxTQUFULENBQW1CMUcsS0FBbkIsRUFBMEJxRSxZQUExQixFQUF3Q0UsUUFBeEMsRUFBa0Q7QUFDaEQsUUFBSXZFLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQ3BCQSxNQUFBQSxLQUFLLEdBQUcsS0FBSzVOLE1BQUwsQ0FBWTROLEtBQXBCO0FBQ0Q7O0FBRUQsUUFBSXFFLFlBQVksS0FBSyxLQUFLLENBQTFCLEVBQTZCO0FBQzNCQSxNQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNEOztBQUVELFFBQUkxTyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUFBLFFBQ0lvUyxTQUFTLEdBQUc3TyxNQUFNLENBQUM2TyxTQUR2QjtBQUFBLFFBRUl0SixRQUFRLEdBQUd2RixNQUFNLENBQUN1RixRQUZ0QjtBQUFBLFFBR0lDLFVBQVUsR0FBR3hGLE1BQU0sQ0FBQ3dGLFVBSHhCO0FBQUEsUUFJSVYsWUFBWSxHQUFHOUUsTUFBTSxDQUFDOEUsWUFKMUI7QUFBQSxRQUtJSSxPQUFPLEdBQUdsRixNQUFNLENBQUNrRixPQUxyQjtBQU1BLFFBQUksQ0FBQ0EsT0FBTCxFQUFjLE9BQU9sRixNQUFQOztBQUVkLFFBQUl2RCxNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2YsVUFBSWtDLFNBQVMsSUFBSXBTLE1BQU0sQ0FBQ21VLGlCQUF4QixFQUEyQyxPQUFPLEtBQVA7QUFDM0M1USxNQUFBQSxNQUFNLENBQUM2USxPQUFQLEdBRmUsQ0FFRzs7QUFFbEI3USxNQUFBQSxNQUFNLENBQUM4USxXQUFQLEdBQXFCOVEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQjNMLFVBQTFDO0FBQ0Q7O0FBRUQsUUFBSXFVLFNBQVMsR0FBR2pHLFlBQVksR0FBRzlFLE1BQU0sQ0FBQytLLFNBQVYsR0FBc0IsQ0FBQy9LLE1BQU0sQ0FBQytLLFNBQTFEOztBQUVBLGFBQVNpRyxTQUFULENBQW1CQyxHQUFuQixFQUF3QjtBQUN0QixVQUFJQSxHQUFHLEdBQUcsQ0FBVixFQUFhLE9BQU8sQ0FBQ3ZLLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUM2QixHQUFMLENBQVMwSSxHQUFULENBQVgsQ0FBUjtBQUNiLGFBQU92SyxJQUFJLENBQUNDLEtBQUwsQ0FBV3NLLEdBQVgsQ0FBUDtBQUNEOztBQUVELFFBQUlsQixtQkFBbUIsR0FBR2lCLFNBQVMsQ0FBQ2pHLFNBQUQsQ0FBbkM7QUFDQSxRQUFJbUcsa0JBQWtCLEdBQUczTCxRQUFRLENBQUNuVSxHQUFULENBQWEsVUFBVTZmLEdBQVYsRUFBZTtBQUNuRCxhQUFPRCxTQUFTLENBQUNDLEdBQUQsQ0FBaEI7QUFDRCxLQUZ3QixDQUF6QjtBQUdBMUwsSUFBQUEsUUFBUSxDQUFDMkwsa0JBQWtCLENBQUMzaUIsT0FBbkIsQ0FBMkJ3aEIsbUJBQTNCLENBQUQsQ0FBUjtBQUNBLFFBQUlvQixRQUFRLEdBQUc1TCxRQUFRLENBQUMyTCxrQkFBa0IsQ0FBQzNpQixPQUFuQixDQUEyQndoQixtQkFBM0IsSUFBa0QsQ0FBbkQsQ0FBdkI7O0FBRUEsUUFBSSxPQUFPb0IsUUFBUCxLQUFvQixXQUFwQixJQUFtQzFVLE1BQU0sQ0FBQzRNLE9BQTlDLEVBQXVEO0FBQ3JEOUQsTUFBQUEsUUFBUSxDQUFDdGMsT0FBVCxDQUFpQixVQUFVeWdCLElBQVYsRUFBZ0I7QUFDL0IsWUFBSSxDQUFDeUgsUUFBRCxJQUFhcEIsbUJBQW1CLElBQUlyRyxJQUF4QyxFQUE4Q3lILFFBQVEsR0FBR3pILElBQVg7QUFDL0MsT0FGRDtBQUdEOztBQUVELFFBQUkwSCxTQUFKOztBQUVBLFFBQUksT0FBT0QsUUFBUCxLQUFvQixXQUF4QixFQUFxQztBQUNuQ0MsTUFBQUEsU0FBUyxHQUFHNUwsVUFBVSxDQUFDalgsT0FBWCxDQUFtQjRpQixRQUFuQixDQUFaO0FBQ0EsVUFBSUMsU0FBUyxHQUFHLENBQWhCLEVBQW1CQSxTQUFTLEdBQUdwUixNQUFNLENBQUMwSyxXQUFQLEdBQXFCLENBQWpDO0FBQ3BCOztBQUVELFdBQU8xSyxNQUFNLENBQUN3UCxPQUFQLENBQWU0QixTQUFmLEVBQTBCL0csS0FBMUIsRUFBaUNxRSxZQUFqQyxFQUErQ0UsUUFBL0MsQ0FBUDtBQUNEO0FBRUQ7OztBQUNBLFdBQVN5QyxVQUFULENBQW9CaEgsS0FBcEIsRUFBMkJxRSxZQUEzQixFQUF5Q0UsUUFBekMsRUFBbUQ7QUFDakQsUUFBSXZFLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQ3BCQSxNQUFBQSxLQUFLLEdBQUcsS0FBSzVOLE1BQUwsQ0FBWTROLEtBQXBCO0FBQ0Q7O0FBRUQsUUFBSXFFLFlBQVksS0FBSyxLQUFLLENBQTFCLEVBQTZCO0FBQzNCQSxNQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNEOztBQUVELFFBQUkxTyxNQUFNLEdBQUcsSUFBYjtBQUNBLFdBQU9BLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQzBLLFdBQXRCLEVBQW1DTCxLQUFuQyxFQUEwQ3FFLFlBQTFDLEVBQXdERSxRQUF4RCxDQUFQO0FBQ0Q7QUFFRDs7O0FBQ0EsV0FBUzBDLGNBQVQsQ0FBd0JqSCxLQUF4QixFQUErQnFFLFlBQS9CLEVBQTZDRSxRQUE3QyxFQUF1RDJDLFNBQXZELEVBQWtFO0FBQ2hFLFFBQUlsSCxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUNwQkEsTUFBQUEsS0FBSyxHQUFHLEtBQUs1TixNQUFMLENBQVk0TixLQUFwQjtBQUNEOztBQUVELFFBQUlxRSxZQUFZLEtBQUssS0FBSyxDQUExQixFQUE2QjtBQUMzQkEsTUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDRDs7QUFFRCxRQUFJNkMsU0FBUyxLQUFLLEtBQUssQ0FBdkIsRUFBMEI7QUFDeEJBLE1BQUFBLFNBQVMsR0FBRyxHQUFaO0FBQ0Q7O0FBRUQsUUFBSXZSLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSTVJLEtBQUssR0FBRzRJLE1BQU0sQ0FBQzBLLFdBQW5CO0FBQ0EsUUFBSTRDLElBQUksR0FBRzVHLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUzNILE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytMLGtCQUF2QixFQUEyQ3BSLEtBQTNDLENBQVg7QUFDQSxRQUFJMFMsU0FBUyxHQUFHd0QsSUFBSSxHQUFHNUcsSUFBSSxDQUFDQyxLQUFMLENBQVcsQ0FBQ3ZQLEtBQUssR0FBR2tXLElBQVQsSUFBaUJ0TixNQUFNLENBQUN2RCxNQUFQLENBQWM4SyxjQUExQyxDQUF2QjtBQUNBLFFBQUl3RCxTQUFTLEdBQUcvSyxNQUFNLENBQUM4RSxZQUFQLEdBQXNCOUUsTUFBTSxDQUFDK0ssU0FBN0IsR0FBeUMsQ0FBQy9LLE1BQU0sQ0FBQytLLFNBQWpFOztBQUVBLFFBQUlBLFNBQVMsSUFBSS9LLE1BQU0sQ0FBQ3VGLFFBQVAsQ0FBZ0J1RSxTQUFoQixDQUFqQixFQUE2QztBQUMzQztBQUNBO0FBQ0EsVUFBSTBILFdBQVcsR0FBR3hSLE1BQU0sQ0FBQ3VGLFFBQVAsQ0FBZ0J1RSxTQUFoQixDQUFsQjtBQUNBLFVBQUkySCxRQUFRLEdBQUd6UixNQUFNLENBQUN1RixRQUFQLENBQWdCdUUsU0FBUyxHQUFHLENBQTVCLENBQWY7O0FBRUEsVUFBSWlCLFNBQVMsR0FBR3lHLFdBQVosR0FBMEIsQ0FBQ0MsUUFBUSxHQUFHRCxXQUFaLElBQTJCRCxTQUF6RCxFQUFvRTtBQUNsRW5hLFFBQUFBLEtBQUssSUFBSTRJLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhLLGNBQXZCO0FBQ0Q7QUFDRixLQVRELE1BU087QUFDTDtBQUNBO0FBQ0EsVUFBSTRKLFFBQVEsR0FBR25SLE1BQU0sQ0FBQ3VGLFFBQVAsQ0FBZ0J1RSxTQUFTLEdBQUcsQ0FBNUIsQ0FBZjtBQUNBLFVBQUk0SCxZQUFZLEdBQUcxUixNQUFNLENBQUN1RixRQUFQLENBQWdCdUUsU0FBaEIsQ0FBbkI7O0FBRUEsVUFBSWlCLFNBQVMsR0FBR29HLFFBQVosSUFBd0IsQ0FBQ08sWUFBWSxHQUFHUCxRQUFoQixJQUE0QkksU0FBeEQsRUFBbUU7QUFDakVuYSxRQUFBQSxLQUFLLElBQUk0SSxNQUFNLENBQUN2RCxNQUFQLENBQWM4SyxjQUF2QjtBQUNEO0FBQ0Y7O0FBRURuUSxJQUFBQSxLQUFLLEdBQUdzUCxJQUFJLENBQUNLLEdBQUwsQ0FBUzNQLEtBQVQsRUFBZ0IsQ0FBaEIsQ0FBUjtBQUNBQSxJQUFBQSxLQUFLLEdBQUdzUCxJQUFJLENBQUNpQixHQUFMLENBQVN2USxLQUFULEVBQWdCNEksTUFBTSxDQUFDd0YsVUFBUCxDQUFrQmplLE1BQWxCLEdBQTJCLENBQTNDLENBQVI7QUFDQSxXQUFPeVksTUFBTSxDQUFDd1AsT0FBUCxDQUFlcFksS0FBZixFQUFzQmlULEtBQXRCLEVBQTZCcUUsWUFBN0IsRUFBMkNFLFFBQTNDLENBQVA7QUFDRDs7QUFFRCxXQUFTaEIsbUJBQVQsR0FBK0I7QUFDN0IsUUFBSTVOLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSTRGLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRHhCO0FBRUEsUUFBSXdFLGFBQWEsR0FBR3BLLE1BQU0sQ0FBQ29LLGFBQVAsS0FBeUIsTUFBekIsR0FBa0M3RyxNQUFNLENBQUMyUixvQkFBUCxFQUFsQyxHQUFrRWxWLE1BQU0sQ0FBQ29LLGFBQTdGO0FBQ0EsUUFBSStLLFlBQVksR0FBRzVSLE1BQU0sQ0FBQzJOLFlBQTFCO0FBQ0EsUUFBSXhCLFNBQUo7O0FBRUEsUUFBSTFQLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZixVQUFJM00sTUFBTSxDQUFDNk8sU0FBWCxFQUFzQjtBQUN0QjFDLE1BQUFBLFNBQVMsR0FBR2pJLFFBQVEsQ0FBQzFULENBQUMsQ0FBQ3dQLE1BQU0sQ0FBQzBOLFlBQVIsQ0FBRCxDQUF1QmxiLElBQXZCLENBQTRCLHlCQUE1QixDQUFELEVBQXlELEVBQXpELENBQXBCOztBQUVBLFVBQUlpSyxNQUFNLENBQUM2TCxjQUFYLEVBQTJCO0FBQ3pCLFlBQUlzSixZQUFZLEdBQUc1UixNQUFNLENBQUN5USxZQUFQLEdBQXNCNUosYUFBYSxHQUFHLENBQXJELElBQTBEK0ssWUFBWSxHQUFHNVIsTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBZCxHQUF1QnlZLE1BQU0sQ0FBQ3lRLFlBQTlCLEdBQTZDNUosYUFBYSxHQUFHLENBQTFJLEVBQTZJO0FBQzNJN0csVUFBQUEsTUFBTSxDQUFDNlEsT0FBUDtBQUNBZSxVQUFBQSxZQUFZLEdBQUd2UCxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wUyxNQUFNLENBQUM0SSxVQUFiLEdBQTBCLDZCQUExQixHQUEwRDhHLFNBQTFELEdBQXNFLFdBQXRFLEdBQW9GMVAsTUFBTSxDQUFDbVEsbUJBQTNGLEdBQWlILEdBQXJJLEVBQTBJOVUsRUFBMUksQ0FBNkksQ0FBN0ksRUFBZ0pWLEtBQWhKLEVBQWY7QUFDQThDLFVBQUFBLFFBQVEsQ0FBQyxZQUFZO0FBQ25COEYsWUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlb0MsWUFBZjtBQUNELFdBRk8sQ0FBUjtBQUdELFNBTkQsTUFNTztBQUNMNVIsVUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlb0MsWUFBZjtBQUNEO0FBQ0YsT0FWRCxNQVVPLElBQUlBLFlBQVksR0FBRzVSLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUJzZixhQUExQyxFQUF5RDtBQUM5RDdHLFFBQUFBLE1BQU0sQ0FBQzZRLE9BQVA7QUFDQWUsUUFBQUEsWUFBWSxHQUFHdlAsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNMFMsTUFBTSxDQUFDNEksVUFBYixHQUEwQiw2QkFBMUIsR0FBMEQ4RyxTQUExRCxHQUFzRSxXQUF0RSxHQUFvRjFQLE1BQU0sQ0FBQ21RLG1CQUEzRixHQUFpSCxHQUFySSxFQUEwSTlVLEVBQTFJLENBQTZJLENBQTdJLEVBQWdKVixLQUFoSixFQUFmO0FBQ0E4QyxRQUFBQSxRQUFRLENBQUMsWUFBWTtBQUNuQjhGLFVBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZW9DLFlBQWY7QUFDRCxTQUZPLENBQVI7QUFHRCxPQU5NLE1BTUE7QUFDTDVSLFFBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZW9DLFlBQWY7QUFDRDtBQUNGLEtBdkJELE1BdUJPO0FBQ0w1UixNQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWVvQyxZQUFmO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJekssS0FBSyxHQUFHO0FBQ1ZxSSxJQUFBQSxPQUFPLEVBQUVBLE9BREM7QUFFVmUsSUFBQUEsV0FBVyxFQUFFQSxXQUZIO0FBR1ZHLElBQUFBLFNBQVMsRUFBRUEsU0FIRDtBQUlWSyxJQUFBQSxTQUFTLEVBQUVBLFNBSkQ7QUFLVk0sSUFBQUEsVUFBVSxFQUFFQSxVQUxGO0FBTVZDLElBQUFBLGNBQWMsRUFBRUEsY0FOTjtBQU9WMUQsSUFBQUEsbUJBQW1CLEVBQUVBO0FBUFgsR0FBWjs7QUFVQSxXQUFTaUUsVUFBVCxHQUFzQjtBQUNwQixRQUFJN1IsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJL1UsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsUUFBSTBSLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSTRGLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRHhCLENBSG9CLENBSWdCOztBQUVwQ0EsSUFBQUEsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNMFMsTUFBTSxDQUFDNEksVUFBYixHQUEwQixHQUExQixHQUFnQzVJLE1BQU0sQ0FBQ21RLG1CQUEzRCxFQUFnRjlhLE1BQWhGO0FBQ0EsUUFBSXNULE1BQU0sR0FBRy9DLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTBTLE1BQU0sQ0FBQzRJLFVBQWpDLENBQWI7O0FBRUEsUUFBSTVJLE1BQU0sQ0FBQ3FWLHNCQUFYLEVBQW1DO0FBQ2pDLFVBQUlDLGNBQWMsR0FBR3RWLE1BQU0sQ0FBQzhLLGNBQVAsR0FBd0JuQyxNQUFNLENBQUM3ZCxNQUFQLEdBQWdCa1YsTUFBTSxDQUFDOEssY0FBcEU7O0FBRUEsVUFBSXdLLGNBQWMsS0FBS3RWLE1BQU0sQ0FBQzhLLGNBQTlCLEVBQThDO0FBQzVDLGFBQUssSUFBSWpnQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHeXFCLGNBQXBCLEVBQW9DenFCLENBQUMsSUFBSSxDQUF6QyxFQUE0QztBQUMxQyxjQUFJMHFCLFNBQVMsR0FBR3hoQixDQUFDLENBQUN2RixRQUFRLENBQUNuQixhQUFULENBQXVCLEtBQXZCLENBQUQsQ0FBRCxDQUFpQ2lILFFBQWpDLENBQTBDMEwsTUFBTSxDQUFDNEksVUFBUCxHQUFvQixHQUFwQixHQUEwQjVJLE1BQU0sQ0FBQ3dWLGVBQTNFLENBQWhCO0FBQ0E1UCxVQUFBQSxVQUFVLENBQUNySyxNQUFYLENBQWtCZ2EsU0FBbEI7QUFDRDs7QUFFRDVNLFFBQUFBLE1BQU0sR0FBRy9DLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTBTLE1BQU0sQ0FBQzRJLFVBQWpDLENBQVQ7QUFDRDtBQUNGOztBQUVELFFBQUk1SSxNQUFNLENBQUNvSyxhQUFQLEtBQXlCLE1BQXpCLElBQW1DLENBQUNwSyxNQUFNLENBQUNnVSxZQUEvQyxFQUE2RGhVLE1BQU0sQ0FBQ2dVLFlBQVAsR0FBc0JyTCxNQUFNLENBQUM3ZCxNQUE3QjtBQUM3RHlZLElBQUFBLE1BQU0sQ0FBQ3lRLFlBQVAsR0FBc0IvSixJQUFJLENBQUNFLElBQUwsQ0FBVTFRLFVBQVUsQ0FBQ3VHLE1BQU0sQ0FBQ2dVLFlBQVAsSUFBdUJoVSxNQUFNLENBQUNvSyxhQUEvQixFQUE4QyxFQUE5QyxDQUFwQixDQUF0QjtBQUNBN0csSUFBQUEsTUFBTSxDQUFDeVEsWUFBUCxJQUF1QmhVLE1BQU0sQ0FBQ3lWLG9CQUE5Qjs7QUFFQSxRQUFJbFMsTUFBTSxDQUFDeVEsWUFBUCxHQUFzQnJMLE1BQU0sQ0FBQzdkLE1BQWpDLEVBQXlDO0FBQ3ZDeVksTUFBQUEsTUFBTSxDQUFDeVEsWUFBUCxHQUFzQnJMLE1BQU0sQ0FBQzdkLE1BQTdCO0FBQ0Q7O0FBRUQsUUFBSTRxQixhQUFhLEdBQUcsRUFBcEI7QUFDQSxRQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFDQWhOLElBQUFBLE1BQU0sQ0FBQ2pPLElBQVAsQ0FBWSxVQUFVcEgsRUFBVixFQUFjcUgsS0FBZCxFQUFxQjtBQUMvQixVQUFJK1AsS0FBSyxHQUFHM1csQ0FBQyxDQUFDVCxFQUFELENBQWI7O0FBRUEsVUFBSXFILEtBQUssR0FBRzRJLE1BQU0sQ0FBQ3lRLFlBQW5CLEVBQWlDO0FBQy9CMkIsUUFBQUEsWUFBWSxDQUFDbmtCLElBQWIsQ0FBa0I4QixFQUFsQjtBQUNEOztBQUVELFVBQUlxSCxLQUFLLEdBQUdnTyxNQUFNLENBQUM3ZCxNQUFmLElBQXlCNlAsS0FBSyxJQUFJZ08sTUFBTSxDQUFDN2QsTUFBUCxHQUFnQnlZLE1BQU0sQ0FBQ3lRLFlBQTdELEVBQTJFO0FBQ3pFMEIsUUFBQUEsYUFBYSxDQUFDbGtCLElBQWQsQ0FBbUI4QixFQUFuQjtBQUNEOztBQUVEb1gsTUFBQUEsS0FBSyxDQUFDM1UsSUFBTixDQUFXLHlCQUFYLEVBQXNDNEUsS0FBdEM7QUFDRCxLQVpEOztBQWNBLFNBQUssSUFBSTBSLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdzSixZQUFZLENBQUM3cUIsTUFBbkMsRUFBMkN1aEIsRUFBRSxJQUFJLENBQWpELEVBQW9EO0FBQ2xEekcsTUFBQUEsVUFBVSxDQUFDckssTUFBWCxDQUFrQnhILENBQUMsQ0FBQzRoQixZQUFZLENBQUN0SixFQUFELENBQVosQ0FBaUJ1SixTQUFqQixDQUEyQixJQUEzQixDQUFELENBQUQsQ0FBb0N0aEIsUUFBcEMsQ0FBNkMwTCxNQUFNLENBQUNtUSxtQkFBcEQsQ0FBbEI7QUFDRDs7QUFFRCxTQUFLLElBQUk1RCxHQUFHLEdBQUdtSixhQUFhLENBQUM1cUIsTUFBZCxHQUF1QixDQUF0QyxFQUF5Q3loQixHQUFHLElBQUksQ0FBaEQsRUFBbURBLEdBQUcsSUFBSSxDQUExRCxFQUE2RDtBQUMzRDNHLE1BQUFBLFVBQVUsQ0FBQ2hLLE9BQVgsQ0FBbUI3SCxDQUFDLENBQUMyaEIsYUFBYSxDQUFDbkosR0FBRCxDQUFiLENBQW1CcUosU0FBbkIsQ0FBNkIsSUFBN0IsQ0FBRCxDQUFELENBQXNDdGhCLFFBQXRDLENBQStDMEwsTUFBTSxDQUFDbVEsbUJBQXRELENBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTaUUsT0FBVCxHQUFtQjtBQUNqQixRQUFJN1EsTUFBTSxHQUFHLElBQWI7QUFDQUEsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGVBQVo7QUFDQSxRQUFJMEosV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FBekI7QUFBQSxRQUNJdEYsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFEcEI7QUFBQSxRQUVJcUwsWUFBWSxHQUFHelEsTUFBTSxDQUFDeVEsWUFGMUI7QUFBQSxRQUdJTixjQUFjLEdBQUduUSxNQUFNLENBQUNtUSxjQUg1QjtBQUFBLFFBSUlELGNBQWMsR0FBR2xRLE1BQU0sQ0FBQ2tRLGNBSjVCO0FBQUEsUUFLSTNLLFFBQVEsR0FBR3ZGLE1BQU0sQ0FBQ3VGLFFBTHRCO0FBQUEsUUFNSVYsR0FBRyxHQUFHN0UsTUFBTSxDQUFDOEUsWUFOakI7QUFPQSxRQUFJMEwsUUFBSjtBQUNBeFEsSUFBQUEsTUFBTSxDQUFDbVEsY0FBUCxHQUF3QixJQUF4QjtBQUNBblEsSUFBQUEsTUFBTSxDQUFDa1EsY0FBUCxHQUF3QixJQUF4QjtBQUNBLFFBQUlvQyxhQUFhLEdBQUcsQ0FBQy9NLFFBQVEsQ0FBQ21GLFdBQUQsQ0FBN0I7QUFDQSxRQUFJNkgsSUFBSSxHQUFHRCxhQUFhLEdBQUd0UyxNQUFNLENBQUN6RixZQUFQLEVBQTNCLENBZGlCLENBY2lDOztBQUVsRCxRQUFJbVEsV0FBVyxHQUFHK0YsWUFBbEIsRUFBZ0M7QUFDOUJELE1BQUFBLFFBQVEsR0FBR3BMLE1BQU0sQ0FBQzdkLE1BQVAsR0FBZ0JrcEIsWUFBWSxHQUFHLENBQS9CLEdBQW1DL0YsV0FBOUM7QUFDQThGLE1BQUFBLFFBQVEsSUFBSUMsWUFBWjtBQUNBLFVBQUkrQixZQUFZLEdBQUd4UyxNQUFNLENBQUN3UCxPQUFQLENBQWVnQixRQUFmLEVBQXlCLENBQXpCLEVBQTRCLEtBQTVCLEVBQW1DLElBQW5DLENBQW5COztBQUVBLFVBQUlnQyxZQUFZLElBQUlELElBQUksS0FBSyxDQUE3QixFQUFnQztBQUM5QnZTLFFBQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0IsQ0FBQ3BKLEdBQUcsR0FBRyxDQUFDN0UsTUFBTSxDQUFDK0ssU0FBWCxHQUF1Qi9LLE1BQU0sQ0FBQytLLFNBQWxDLElBQStDd0gsSUFBbkU7QUFDRDtBQUNGLEtBUkQsTUFRTyxJQUFJN0gsV0FBVyxJQUFJdEYsTUFBTSxDQUFDN2QsTUFBUCxHQUFnQmtwQixZQUFuQyxFQUFpRDtBQUN0RDtBQUNBRCxNQUFBQSxRQUFRLEdBQUcsQ0FBQ3BMLE1BQU0sQ0FBQzdkLE1BQVIsR0FBaUJtakIsV0FBakIsR0FBK0IrRixZQUExQztBQUNBRCxNQUFBQSxRQUFRLElBQUlDLFlBQVo7O0FBRUEsVUFBSWdDLGFBQWEsR0FBR3pTLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZWdCLFFBQWYsRUFBeUIsQ0FBekIsRUFBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBcEI7O0FBRUEsVUFBSWlDLGFBQWEsSUFBSUYsSUFBSSxLQUFLLENBQTlCLEVBQWlDO0FBQy9CdlMsUUFBQUEsTUFBTSxDQUFDaU8sWUFBUCxDQUFvQixDQUFDcEosR0FBRyxHQUFHLENBQUM3RSxNQUFNLENBQUMrSyxTQUFYLEdBQXVCL0ssTUFBTSxDQUFDK0ssU0FBbEMsSUFBK0N3SCxJQUFuRTtBQUNEO0FBQ0Y7O0FBRUR2UyxJQUFBQSxNQUFNLENBQUNtUSxjQUFQLEdBQXdCQSxjQUF4QjtBQUNBblEsSUFBQUEsTUFBTSxDQUFDa1EsY0FBUCxHQUF3QkEsY0FBeEI7QUFDQWxRLElBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxTQUFaO0FBQ0Q7O0FBRUQsV0FBUzBSLFdBQVQsR0FBdUI7QUFDckIsUUFBSTFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXFDLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBQXhCO0FBQUEsUUFDSTVGLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BRHBCO0FBQUEsUUFFSTJJLE1BQU0sR0FBR3BGLE1BQU0sQ0FBQ29GLE1BRnBCO0FBR0EvQyxJQUFBQSxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wUyxNQUFNLENBQUM0SSxVQUFiLEdBQTBCLEdBQTFCLEdBQWdDNUksTUFBTSxDQUFDbVEsbUJBQXZDLEdBQTZELElBQTdELEdBQW9FblEsTUFBTSxDQUFDNEksVUFBM0UsR0FBd0YsR0FBeEYsR0FBOEY1SSxNQUFNLENBQUN3VixlQUF6SCxFQUEwSW5nQixNQUExSTtBQUNBc1QsSUFBQUEsTUFBTSxDQUFDeFMsVUFBUCxDQUFrQix5QkFBbEI7QUFDRDs7QUFFRCxNQUFJK1osSUFBSSxHQUFHO0FBQ1RrRixJQUFBQSxVQUFVLEVBQUVBLFVBREg7QUFFVGhCLElBQUFBLE9BQU8sRUFBRUEsT0FGQTtBQUdUNkIsSUFBQUEsV0FBVyxFQUFFQTtBQUhKLEdBQVg7O0FBTUEsV0FBU0MsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0I7QUFDN0IsUUFBSTVTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSUEsTUFBTSxDQUFDbEQsT0FBUCxDQUFlRSxLQUFmLElBQXdCLENBQUNnRCxNQUFNLENBQUN2RCxNQUFQLENBQWNvVyxhQUF2QyxJQUF3RDdTLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3NOLGFBQWQsSUFBK0IvSixNQUFNLENBQUM4UyxRQUE5RixJQUEwRzlTLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQTVILEVBQXFJO0FBQ3JJLFFBQUl0WixFQUFFLEdBQUdpUSxNQUFNLENBQUNqUSxFQUFoQjtBQUNBQSxJQUFBQSxFQUFFLENBQUM5RixLQUFILENBQVM4b0IsTUFBVCxHQUFrQixNQUFsQjtBQUNBaGpCLElBQUFBLEVBQUUsQ0FBQzlGLEtBQUgsQ0FBUzhvQixNQUFULEdBQWtCSCxNQUFNLEdBQUcsa0JBQUgsR0FBd0IsY0FBaEQ7QUFDQTdpQixJQUFBQSxFQUFFLENBQUM5RixLQUFILENBQVM4b0IsTUFBVCxHQUFrQkgsTUFBTSxHQUFHLGNBQUgsR0FBb0IsV0FBNUM7QUFDQTdpQixJQUFBQSxFQUFFLENBQUM5RixLQUFILENBQVM4b0IsTUFBVCxHQUFrQkgsTUFBTSxHQUFHLFVBQUgsR0FBZ0IsTUFBeEM7QUFDRDs7QUFFRCxXQUFTSSxlQUFULEdBQTJCO0FBQ3pCLFFBQUloVCxNQUFNLEdBQUcsSUFBYjs7QUFFQSxRQUFJQSxNQUFNLENBQUNsRCxPQUFQLENBQWVFLEtBQWYsSUFBd0JnRCxNQUFNLENBQUN2RCxNQUFQLENBQWNzTixhQUFkLElBQStCL0osTUFBTSxDQUFDOFMsUUFBOUQsSUFBMEU5UyxNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUE1RixFQUFxRztBQUNuRztBQUNEOztBQUVEckosSUFBQUEsTUFBTSxDQUFDalEsRUFBUCxDQUFVOUYsS0FBVixDQUFnQjhvQixNQUFoQixHQUF5QixFQUF6QjtBQUNEOztBQUVELE1BQUlFLFVBQVUsR0FBRztBQUNmTixJQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZkssSUFBQUEsZUFBZSxFQUFFQTtBQUZGLEdBQWpCOztBQUtBLFdBQVNFLFdBQVQsQ0FBcUI5TixNQUFyQixFQUE2QjtBQUMzQixRQUFJcEYsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJcUMsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFBeEI7QUFBQSxRQUNJNUYsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFEcEI7O0FBR0EsUUFBSUEsTUFBTSxDQUFDa1EsSUFBWCxFQUFpQjtBQUNmM00sTUFBQUEsTUFBTSxDQUFDMFMsV0FBUDtBQUNEOztBQUVELFFBQUksUUFBT3ROLE1BQVAsTUFBa0IsUUFBbEIsSUFBOEIsWUFBWUEsTUFBOUMsRUFBc0Q7QUFDcEQsV0FBSyxJQUFJOWQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekMsWUFBSThkLE1BQU0sQ0FBQzlkLENBQUQsQ0FBVixFQUFlK2EsVUFBVSxDQUFDckssTUFBWCxDQUFrQm9OLE1BQU0sQ0FBQzlkLENBQUQsQ0FBeEI7QUFDaEI7QUFDRixLQUpELE1BSU87QUFDTCthLE1BQUFBLFVBQVUsQ0FBQ3JLLE1BQVgsQ0FBa0JvTixNQUFsQjtBQUNEOztBQUVELFFBQUkzSSxNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2YzTSxNQUFBQSxNQUFNLENBQUM2UixVQUFQO0FBQ0Q7O0FBRUQsUUFBSSxFQUFFcFYsTUFBTSxDQUFDWSxRQUFQLElBQW1CMkMsTUFBTSxDQUFDbEQsT0FBUCxDQUFlTyxRQUFwQyxDQUFKLEVBQW1EO0FBQ2pEMkMsTUFBQUEsTUFBTSxDQUFDNk4sTUFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBU3NGLFlBQVQsQ0FBc0IvTixNQUF0QixFQUE4QjtBQUM1QixRQUFJcEYsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFBQSxRQUNJNEYsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFEeEI7QUFBQSxRQUVJcUksV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FGekI7O0FBSUEsUUFBSWpPLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZjNNLE1BQUFBLE1BQU0sQ0FBQzBTLFdBQVA7QUFDRDs7QUFFRCxRQUFJekYsY0FBYyxHQUFHdkMsV0FBVyxHQUFHLENBQW5DOztBQUVBLFFBQUksUUFBT3RGLE1BQVAsTUFBa0IsUUFBbEIsSUFBOEIsWUFBWUEsTUFBOUMsRUFBc0Q7QUFDcEQsV0FBSyxJQUFJOWQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekMsWUFBSThkLE1BQU0sQ0FBQzlkLENBQUQsQ0FBVixFQUFlK2EsVUFBVSxDQUFDaEssT0FBWCxDQUFtQitNLE1BQU0sQ0FBQzlkLENBQUQsQ0FBekI7QUFDaEI7O0FBRUQybEIsTUFBQUEsY0FBYyxHQUFHdkMsV0FBVyxHQUFHdEYsTUFBTSxDQUFDN2QsTUFBdEM7QUFDRCxLQU5ELE1BTU87QUFDTDhhLE1BQUFBLFVBQVUsQ0FBQ2hLLE9BQVgsQ0FBbUIrTSxNQUFuQjtBQUNEOztBQUVELFFBQUkzSSxNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2YzTSxNQUFBQSxNQUFNLENBQUM2UixVQUFQO0FBQ0Q7O0FBRUQsUUFBSSxFQUFFcFYsTUFBTSxDQUFDWSxRQUFQLElBQW1CMkMsTUFBTSxDQUFDbEQsT0FBUCxDQUFlTyxRQUFwQyxDQUFKLEVBQW1EO0FBQ2pEMkMsTUFBQUEsTUFBTSxDQUFDNk4sTUFBUDtBQUNEOztBQUVEN04sSUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFldkMsY0FBZixFQUErQixDQUEvQixFQUFrQyxLQUFsQztBQUNEOztBQUVELFdBQVNtRyxRQUFULENBQWtCaGMsS0FBbEIsRUFBeUJnTyxNQUF6QixFQUFpQztBQUMvQixRQUFJcEYsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJcUMsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFBeEI7QUFBQSxRQUNJNUYsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFEcEI7QUFBQSxRQUVJaU8sV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FGekI7QUFHQSxRQUFJMkksaUJBQWlCLEdBQUczSSxXQUF4Qjs7QUFFQSxRQUFJak8sTUFBTSxDQUFDa1EsSUFBWCxFQUFpQjtBQUNmMEcsTUFBQUEsaUJBQWlCLElBQUlyVCxNQUFNLENBQUN5USxZQUE1QjtBQUNBelEsTUFBQUEsTUFBTSxDQUFDMFMsV0FBUDtBQUNBMVMsTUFBQUEsTUFBTSxDQUFDb0YsTUFBUCxHQUFnQi9DLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTBTLE1BQU0sQ0FBQzRJLFVBQWpDLENBQWhCO0FBQ0Q7O0FBRUQsUUFBSWlPLFVBQVUsR0FBR3RULE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQS9COztBQUVBLFFBQUk2UCxLQUFLLElBQUksQ0FBYixFQUFnQjtBQUNkNEksTUFBQUEsTUFBTSxDQUFDbVQsWUFBUCxDQUFvQi9OLE1BQXBCO0FBQ0E7QUFDRDs7QUFFRCxRQUFJaE8sS0FBSyxJQUFJa2MsVUFBYixFQUF5QjtBQUN2QnRULE1BQUFBLE1BQU0sQ0FBQ2tULFdBQVAsQ0FBbUI5TixNQUFuQjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSTZILGNBQWMsR0FBR29HLGlCQUFpQixHQUFHamMsS0FBcEIsR0FBNEJpYyxpQkFBaUIsR0FBRyxDQUFoRCxHQUFvREEsaUJBQXpFO0FBQ0EsUUFBSUUsWUFBWSxHQUFHLEVBQW5COztBQUVBLFNBQUssSUFBSWpzQixDQUFDLEdBQUdnc0IsVUFBVSxHQUFHLENBQTFCLEVBQTZCaHNCLENBQUMsSUFBSThQLEtBQWxDLEVBQXlDOVAsQ0FBQyxJQUFJLENBQTlDLEVBQWlEO0FBQy9DLFVBQUlrc0IsWUFBWSxHQUFHeFQsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQnhRLENBQWpCLENBQW5CO0FBQ0Frc0IsTUFBQUEsWUFBWSxDQUFDMWhCLE1BQWI7QUFDQXloQixNQUFBQSxZQUFZLENBQUMzZixPQUFiLENBQXFCNGYsWUFBckI7QUFDRDs7QUFFRCxRQUFJLFFBQU9wTyxNQUFQLE1BQWtCLFFBQWxCLElBQThCLFlBQVlBLE1BQTlDLEVBQXNEO0FBQ3BELFdBQUssSUFBSTBELEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUcxRCxNQUFNLENBQUM3ZCxNQUE3QixFQUFxQ3VoQixFQUFFLElBQUksQ0FBM0MsRUFBOEM7QUFDNUMsWUFBSTFELE1BQU0sQ0FBQzBELEVBQUQsQ0FBVixFQUFnQnpHLFVBQVUsQ0FBQ3JLLE1BQVgsQ0FBa0JvTixNQUFNLENBQUMwRCxFQUFELENBQXhCO0FBQ2pCOztBQUVEbUUsTUFBQUEsY0FBYyxHQUFHb0csaUJBQWlCLEdBQUdqYyxLQUFwQixHQUE0QmljLGlCQUFpQixHQUFHak8sTUFBTSxDQUFDN2QsTUFBdkQsR0FBZ0U4ckIsaUJBQWpGO0FBQ0QsS0FORCxNQU1PO0FBQ0xoUixNQUFBQSxVQUFVLENBQUNySyxNQUFYLENBQWtCb04sTUFBbEI7QUFDRDs7QUFFRCxTQUFLLElBQUk0RCxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHdUssWUFBWSxDQUFDaHNCLE1BQXJDLEVBQTZDeWhCLEdBQUcsSUFBSSxDQUFwRCxFQUF1RDtBQUNyRDNHLE1BQUFBLFVBQVUsQ0FBQ3JLLE1BQVgsQ0FBa0J1YixZQUFZLENBQUN2SyxHQUFELENBQTlCO0FBQ0Q7O0FBRUQsUUFBSXZNLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZjNNLE1BQUFBLE1BQU0sQ0FBQzZSLFVBQVA7QUFDRDs7QUFFRCxRQUFJLEVBQUVwVixNQUFNLENBQUNZLFFBQVAsSUFBbUIyQyxNQUFNLENBQUNsRCxPQUFQLENBQWVPLFFBQXBDLENBQUosRUFBbUQ7QUFDakQyQyxNQUFBQSxNQUFNLENBQUM2TixNQUFQO0FBQ0Q7O0FBRUQsUUFBSXBSLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZjNNLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXZDLGNBQWMsR0FBR2pOLE1BQU0sQ0FBQ3lRLFlBQXZDLEVBQXFELENBQXJELEVBQXdELEtBQXhEO0FBQ0QsS0FGRCxNQUVPO0FBQ0x6USxNQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWV2QyxjQUFmLEVBQStCLENBQS9CLEVBQWtDLEtBQWxDO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTd0csV0FBVCxDQUFxQkMsYUFBckIsRUFBb0M7QUFDbEMsUUFBSTFULE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSTRGLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRHhCO0FBQUEsUUFFSXFJLFdBQVcsR0FBRzFLLE1BQU0sQ0FBQzBLLFdBRnpCO0FBR0EsUUFBSTJJLGlCQUFpQixHQUFHM0ksV0FBeEI7O0FBRUEsUUFBSWpPLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZjBHLE1BQUFBLGlCQUFpQixJQUFJclQsTUFBTSxDQUFDeVEsWUFBNUI7QUFDQXpRLE1BQUFBLE1BQU0sQ0FBQzBTLFdBQVA7QUFDQTFTLE1BQUFBLE1BQU0sQ0FBQ29GLE1BQVAsR0FBZ0IvQyxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wUyxNQUFNLENBQUM0SSxVQUFqQyxDQUFoQjtBQUNEOztBQUVELFFBQUk0SCxjQUFjLEdBQUdvRyxpQkFBckI7QUFDQSxRQUFJTSxhQUFKOztBQUVBLFFBQUksUUFBT0QsYUFBUCxNQUF5QixRQUF6QixJQUFxQyxZQUFZQSxhQUFyRCxFQUFvRTtBQUNsRSxXQUFLLElBQUlwc0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR29zQixhQUFhLENBQUNuc0IsTUFBbEMsRUFBMENELENBQUMsSUFBSSxDQUEvQyxFQUFrRDtBQUNoRHFzQixRQUFBQSxhQUFhLEdBQUdELGFBQWEsQ0FBQ3BzQixDQUFELENBQTdCO0FBQ0EsWUFBSTBZLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY3VPLGFBQWQsQ0FBSixFQUFrQzNULE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY3ROLEVBQWQsQ0FBaUI2YixhQUFqQixFQUFnQzdoQixNQUFoQztBQUNsQyxZQUFJNmhCLGFBQWEsR0FBRzFHLGNBQXBCLEVBQW9DQSxjQUFjLElBQUksQ0FBbEI7QUFDckM7O0FBRURBLE1BQUFBLGNBQWMsR0FBR3ZHLElBQUksQ0FBQ0ssR0FBTCxDQUFTa0csY0FBVCxFQUF5QixDQUF6QixDQUFqQjtBQUNELEtBUkQsTUFRTztBQUNMMEcsTUFBQUEsYUFBYSxHQUFHRCxhQUFoQjtBQUNBLFVBQUkxVCxNQUFNLENBQUNvRixNQUFQLENBQWN1TyxhQUFkLENBQUosRUFBa0MzVCxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCNmIsYUFBakIsRUFBZ0M3aEIsTUFBaEM7QUFDbEMsVUFBSTZoQixhQUFhLEdBQUcxRyxjQUFwQixFQUFvQ0EsY0FBYyxJQUFJLENBQWxCO0FBQ3BDQSxNQUFBQSxjQUFjLEdBQUd2RyxJQUFJLENBQUNLLEdBQUwsQ0FBU2tHLGNBQVQsRUFBeUIsQ0FBekIsQ0FBakI7QUFDRDs7QUFFRCxRQUFJeFEsTUFBTSxDQUFDa1EsSUFBWCxFQUFpQjtBQUNmM00sTUFBQUEsTUFBTSxDQUFDNlIsVUFBUDtBQUNEOztBQUVELFFBQUksRUFBRXBWLE1BQU0sQ0FBQ1ksUUFBUCxJQUFtQjJDLE1BQU0sQ0FBQ2xELE9BQVAsQ0FBZU8sUUFBcEMsQ0FBSixFQUFtRDtBQUNqRDJDLE1BQUFBLE1BQU0sQ0FBQzZOLE1BQVA7QUFDRDs7QUFFRCxRQUFJcFIsTUFBTSxDQUFDa1EsSUFBWCxFQUFpQjtBQUNmM00sTUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFldkMsY0FBYyxHQUFHak4sTUFBTSxDQUFDeVEsWUFBdkMsRUFBcUQsQ0FBckQsRUFBd0QsS0FBeEQ7QUFDRCxLQUZELE1BRU87QUFDTHpRLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXZDLGNBQWYsRUFBK0IsQ0FBL0IsRUFBa0MsS0FBbEM7QUFDRDtBQUNGOztBQUVELFdBQVMyRyxlQUFULEdBQTJCO0FBQ3pCLFFBQUk1VCxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUkwVCxhQUFhLEdBQUcsRUFBcEI7O0FBRUEsU0FBSyxJQUFJcHNCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwWSxNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUFsQyxFQUEwQ0QsQ0FBQyxJQUFJLENBQS9DLEVBQWtEO0FBQ2hEb3NCLE1BQUFBLGFBQWEsQ0FBQ3psQixJQUFkLENBQW1CM0csQ0FBbkI7QUFDRDs7QUFFRDBZLElBQUFBLE1BQU0sQ0FBQ3lULFdBQVAsQ0FBbUJDLGFBQW5CO0FBQ0Q7O0FBRUQsTUFBSUcsWUFBWSxHQUFHO0FBQ2pCWCxJQUFBQSxXQUFXLEVBQUVBLFdBREk7QUFFakJDLElBQUFBLFlBQVksRUFBRUEsWUFGRztBQUdqQkMsSUFBQUEsUUFBUSxFQUFFQSxRQUhPO0FBSWpCSyxJQUFBQSxXQUFXLEVBQUVBLFdBSkk7QUFLakJHLElBQUFBLGVBQWUsRUFBRUE7QUFMQSxHQUFuQjs7QUFRQSxXQUFTRSxZQUFULENBQXNCMWYsS0FBdEIsRUFBNkI7QUFDM0IsUUFBSTRMLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSS9VLFFBQVEsR0FBR0YsV0FBVyxFQUExQjtBQUNBLFFBQUkwQixNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxRQUFJZ0osSUFBSSxHQUFHeUssTUFBTSxDQUFDK1QsZUFBbEI7QUFDQSxRQUFJdFgsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBcEI7QUFBQSxRQUNJdVgsT0FBTyxHQUFHaFUsTUFBTSxDQUFDZ1UsT0FEckI7QUFBQSxRQUVJOU8sT0FBTyxHQUFHbEYsTUFBTSxDQUFDa0YsT0FGckI7QUFHQSxRQUFJLENBQUNBLE9BQUwsRUFBYzs7QUFFZCxRQUFJbEYsTUFBTSxDQUFDNk8sU0FBUCxJQUFvQnBTLE1BQU0sQ0FBQ3FTLDhCQUEvQixFQUErRDtBQUM3RDtBQUNEOztBQUVELFFBQUluaEIsQ0FBQyxHQUFHeUcsS0FBUjtBQUNBLFFBQUl6RyxDQUFDLENBQUNzbUIsYUFBTixFQUFxQnRtQixDQUFDLEdBQUdBLENBQUMsQ0FBQ3NtQixhQUFOO0FBQ3JCLFFBQUlDLFNBQVMsR0FBRzFqQixDQUFDLENBQUM3QyxDQUFDLENBQUN2RyxNQUFILENBQWpCOztBQUVBLFFBQUlxVixNQUFNLENBQUMwWCxpQkFBUCxLQUE2QixTQUFqQyxFQUE0QztBQUMxQyxVQUFJLENBQUNELFNBQVMsQ0FBQzlhLE9BQVYsQ0FBa0I0RyxNQUFNLENBQUNtTyxTQUF6QixFQUFvQzVtQixNQUF6QyxFQUFpRDtBQUNsRDs7QUFFRGdPLElBQUFBLElBQUksQ0FBQzZlLFlBQUwsR0FBb0J6bUIsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxZQUEvQjtBQUNBLFFBQUksQ0FBQzllLElBQUksQ0FBQzZlLFlBQU4sSUFBc0IsV0FBV3ptQixDQUFqQyxJQUFzQ0EsQ0FBQyxDQUFDMm1CLEtBQUYsS0FBWSxDQUF0RCxFQUF5RDtBQUN6RCxRQUFJLENBQUMvZSxJQUFJLENBQUM2ZSxZQUFOLElBQXNCLFlBQVl6bUIsQ0FBbEMsSUFBdUNBLENBQUMsQ0FBQzRtQixNQUFGLEdBQVcsQ0FBdEQsRUFBeUQ7QUFDekQsUUFBSWhmLElBQUksQ0FBQ2lmLFNBQUwsSUFBa0JqZixJQUFJLENBQUNrZixPQUEzQixFQUFvQyxPQXpCVCxDQXlCaUI7O0FBRTVDLFFBQUlDLG9CQUFvQixHQUFHLENBQUMsQ0FBQ2pZLE1BQU0sQ0FBQ2tZLGNBQVQsSUFBMkJsWSxNQUFNLENBQUNrWSxjQUFQLEtBQTBCLEVBQWhGOztBQUVBLFFBQUlELG9CQUFvQixJQUFJL21CLENBQUMsQ0FBQ3ZHLE1BQTFCLElBQW9DdUcsQ0FBQyxDQUFDdkcsTUFBRixDQUFTd3RCLFVBQTdDLElBQTJEeGdCLEtBQUssQ0FBQ3lnQixJQUFqRSxJQUF5RXpnQixLQUFLLENBQUN5Z0IsSUFBTixDQUFXLENBQVgsQ0FBN0UsRUFBNEY7QUFDMUZYLE1BQUFBLFNBQVMsR0FBRzFqQixDQUFDLENBQUM0RCxLQUFLLENBQUN5Z0IsSUFBTixDQUFXLENBQVgsQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsUUFBSXBZLE1BQU0sQ0FBQ3FZLFNBQVAsSUFBb0JaLFNBQVMsQ0FBQzlhLE9BQVYsQ0FBa0JxRCxNQUFNLENBQUNzWSxpQkFBUCxHQUEyQnRZLE1BQU0sQ0FBQ3NZLGlCQUFsQyxHQUFzRCxNQUFNdFksTUFBTSxDQUFDa1ksY0FBckYsRUFBcUcsQ0FBckcsQ0FBeEIsRUFBaUk7QUFDL0gzVSxNQUFBQSxNQUFNLENBQUNnVixVQUFQLEdBQW9CLElBQXBCO0FBQ0E7QUFDRDs7QUFFRCxRQUFJdlksTUFBTSxDQUFDd1ksWUFBWCxFQUF5QjtBQUN2QixVQUFJLENBQUNmLFNBQVMsQ0FBQzlhLE9BQVYsQ0FBa0JxRCxNQUFNLENBQUN3WSxZQUF6QixFQUF1QyxDQUF2QyxDQUFMLEVBQWdEO0FBQ2pEOztBQUVEakIsSUFBQUEsT0FBTyxDQUFDa0IsUUFBUixHQUFtQnZuQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsR0FBMEIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJDLEtBQTdDLEdBQXFEem5CLENBQUMsQ0FBQ3luQixLQUExRTtBQUNBcEIsSUFBQUEsT0FBTyxDQUFDcUIsUUFBUixHQUFtQjFuQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsR0FBMEIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJHLEtBQTdDLEdBQXFEM25CLENBQUMsQ0FBQzJuQixLQUExRTtBQUNBLFFBQUlDLE1BQU0sR0FBR3ZCLE9BQU8sQ0FBQ2tCLFFBQXJCO0FBQ0EsUUFBSU0sTUFBTSxHQUFHeEIsT0FBTyxDQUFDcUIsUUFBckIsQ0E3QzJCLENBNkNJOztBQUUvQixRQUFJSSxrQkFBa0IsR0FBR2haLE1BQU0sQ0FBQ2daLGtCQUFQLElBQTZCaFosTUFBTSxDQUFDaVoscUJBQTdEO0FBQ0EsUUFBSUMsa0JBQWtCLEdBQUdsWixNQUFNLENBQUNrWixrQkFBUCxJQUE2QmxaLE1BQU0sQ0FBQ21aLHFCQUE3RDs7QUFFQSxRQUFJSCxrQkFBa0IsS0FBS0YsTUFBTSxJQUFJSSxrQkFBVixJQUFnQ0osTUFBTSxJQUFJOW9CLE1BQU0sQ0FBQ29wQixVQUFQLEdBQW9CRixrQkFBbkUsQ0FBdEIsRUFBOEc7QUFDNUcsVUFBSUYsa0JBQWtCLEtBQUssU0FBM0IsRUFBc0M7QUFDcENyaEIsUUFBQUEsS0FBSyxDQUFDMGhCLGNBQU47QUFDRCxPQUZELE1BRU87QUFDTDtBQUNEO0FBQ0Y7O0FBRURyYSxJQUFBQSxNQUFNLENBQUNsRyxJQUFELEVBQU87QUFDWGlmLE1BQUFBLFNBQVMsRUFBRSxJQURBO0FBRVhDLE1BQUFBLE9BQU8sRUFBRSxLQUZFO0FBR1hzQixNQUFBQSxtQkFBbUIsRUFBRSxJQUhWO0FBSVhDLE1BQUFBLFdBQVcsRUFBRXJuQixTQUpGO0FBS1hzbkIsTUFBQUEsV0FBVyxFQUFFdG5CO0FBTEYsS0FBUCxDQUFOO0FBT0FxbEIsSUFBQUEsT0FBTyxDQUFDdUIsTUFBUixHQUFpQkEsTUFBakI7QUFDQXZCLElBQUFBLE9BQU8sQ0FBQ3dCLE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0FqZ0IsSUFBQUEsSUFBSSxDQUFDMmdCLGNBQUwsR0FBc0I5YixHQUFHLEVBQXpCO0FBQ0E0RixJQUFBQSxNQUFNLENBQUNnVixVQUFQLEdBQW9CLElBQXBCO0FBQ0FoVixJQUFBQSxNQUFNLENBQUM2RCxVQUFQO0FBQ0E3RCxJQUFBQSxNQUFNLENBQUNtVyxjQUFQLEdBQXdCeG5CLFNBQXhCO0FBQ0EsUUFBSThOLE1BQU0sQ0FBQzhVLFNBQVAsR0FBbUIsQ0FBdkIsRUFBMEJoYyxJQUFJLENBQUM2Z0Isa0JBQUwsR0FBMEIsS0FBMUI7O0FBRTFCLFFBQUl6b0IsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxZQUFmLEVBQTZCO0FBQzNCLFVBQUl5QixjQUFjLEdBQUcsSUFBckI7QUFDQSxVQUFJNUIsU0FBUyxDQUFDcmdCLEVBQVYsQ0FBYTBCLElBQUksQ0FBQzhnQixZQUFsQixDQUFKLEVBQXFDUCxjQUFjLEdBQUcsS0FBakI7O0FBRXJDLFVBQUk3cUIsUUFBUSxDQUFDM0IsYUFBVCxJQUEwQmtILENBQUMsQ0FBQ3ZGLFFBQVEsQ0FBQzNCLGFBQVYsQ0FBRCxDQUEwQnVLLEVBQTFCLENBQTZCMEIsSUFBSSxDQUFDOGdCLFlBQWxDLENBQTFCLElBQTZFcHJCLFFBQVEsQ0FBQzNCLGFBQVQsS0FBMkI0cUIsU0FBUyxDQUFDLENBQUQsQ0FBckgsRUFBMEg7QUFDeEhqcEIsUUFBQUEsUUFBUSxDQUFDM0IsYUFBVCxDQUF1QkMsSUFBdkI7QUFDRDs7QUFFRCxVQUFJK3NCLG9CQUFvQixHQUFHUixjQUFjLElBQUk5VixNQUFNLENBQUN1VyxjQUF6QixJQUEyQzlaLE1BQU0sQ0FBQytaLHdCQUE3RTs7QUFFQSxVQUFJLENBQUMvWixNQUFNLENBQUNnYSw2QkFBUCxJQUF3Q0gsb0JBQXpDLEtBQWtFLENBQUNwQyxTQUFTLENBQUMsQ0FBRCxDQUFULENBQWF3QyxpQkFBcEYsRUFBdUc7QUFDckcvb0IsUUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDRDtBQUNGOztBQUVEOVYsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFlBQVosRUFBMEJyVCxDQUExQjtBQUNEOztBQUVELFdBQVNncEIsV0FBVCxDQUFxQnZpQixLQUFyQixFQUE0QjtBQUMxQixRQUFJbkosUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsUUFBSWlWLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXpLLElBQUksR0FBR3lLLE1BQU0sQ0FBQytULGVBQWxCO0FBQ0EsUUFBSXRYLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSXVYLE9BQU8sR0FBR2hVLE1BQU0sQ0FBQ2dVLE9BRHJCO0FBQUEsUUFFSW5QLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzhFLFlBRmpCO0FBQUEsUUFHSUksT0FBTyxHQUFHbEYsTUFBTSxDQUFDa0YsT0FIckI7QUFJQSxRQUFJLENBQUNBLE9BQUwsRUFBYztBQUNkLFFBQUl2WCxDQUFDLEdBQUd5RyxLQUFSO0FBQ0EsUUFBSXpHLENBQUMsQ0FBQ3NtQixhQUFOLEVBQXFCdG1CLENBQUMsR0FBR0EsQ0FBQyxDQUFDc21CLGFBQU47O0FBRXJCLFFBQUksQ0FBQzFlLElBQUksQ0FBQ2lmLFNBQVYsRUFBcUI7QUFDbkIsVUFBSWpmLElBQUksQ0FBQzBnQixXQUFMLElBQW9CMWdCLElBQUksQ0FBQ3lnQixXQUE3QixFQUEwQztBQUN4Q2hXLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxtQkFBWixFQUFpQ3JULENBQWpDO0FBQ0Q7O0FBRUQ7QUFDRDs7QUFFRCxRQUFJNEgsSUFBSSxDQUFDNmUsWUFBTCxJQUFxQnptQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFdBQXBDLEVBQWlEO0FBQ2pELFFBQUl1QyxXQUFXLEdBQUdqcEIsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxXQUFYLElBQTBCMW1CLENBQUMsQ0FBQ3duQixhQUE1QixLQUE4Q3huQixDQUFDLENBQUN3bkIsYUFBRixDQUFnQixDQUFoQixLQUFzQnhuQixDQUFDLENBQUNrcEIsY0FBRixDQUFpQixDQUFqQixDQUFwRSxDQUFsQjtBQUNBLFFBQUl6QixLQUFLLEdBQUd6bkIsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxXQUFYLEdBQXlCdUMsV0FBVyxDQUFDeEIsS0FBckMsR0FBNkN6bkIsQ0FBQyxDQUFDeW5CLEtBQTNEO0FBQ0EsUUFBSUUsS0FBSyxHQUFHM25CLENBQUMsQ0FBQzBtQixJQUFGLEtBQVcsV0FBWCxHQUF5QnVDLFdBQVcsQ0FBQ3RCLEtBQXJDLEdBQTZDM25CLENBQUMsQ0FBQzJuQixLQUEzRDs7QUFFQSxRQUFJM25CLENBQUMsQ0FBQ21wQix1QkFBTixFQUErQjtBQUM3QjlDLE1BQUFBLE9BQU8sQ0FBQ3VCLE1BQVIsR0FBaUJILEtBQWpCO0FBQ0FwQixNQUFBQSxPQUFPLENBQUN3QixNQUFSLEdBQWlCRixLQUFqQjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDdFYsTUFBTSxDQUFDdVcsY0FBWixFQUE0QjtBQUMxQjtBQUNBdlcsTUFBQUEsTUFBTSxDQUFDZ1YsVUFBUCxHQUFvQixLQUFwQjs7QUFFQSxVQUFJemYsSUFBSSxDQUFDaWYsU0FBVCxFQUFvQjtBQUNsQi9ZLFFBQUFBLE1BQU0sQ0FBQ3VZLE9BQUQsRUFBVTtBQUNkdUIsVUFBQUEsTUFBTSxFQUFFSCxLQURNO0FBRWRJLFVBQUFBLE1BQU0sRUFBRUYsS0FGTTtBQUdkSixVQUFBQSxRQUFRLEVBQUVFLEtBSEk7QUFJZEMsVUFBQUEsUUFBUSxFQUFFQztBQUpJLFNBQVYsQ0FBTjtBQU1BL2YsUUFBQUEsSUFBSSxDQUFDMmdCLGNBQUwsR0FBc0I5YixHQUFHLEVBQXpCO0FBQ0Q7O0FBRUQ7QUFDRDs7QUFFRCxRQUFJN0UsSUFBSSxDQUFDNmUsWUFBTCxJQUFxQjNYLE1BQU0sQ0FBQ3NhLG1CQUE1QixJQUFtRCxDQUFDdGEsTUFBTSxDQUFDa1EsSUFBL0QsRUFBcUU7QUFDbkUsVUFBSTNNLE1BQU0sQ0FBQ2lFLFVBQVAsRUFBSixFQUF5QjtBQUN2QjtBQUNBLFlBQUlxUixLQUFLLEdBQUd0QixPQUFPLENBQUN3QixNQUFoQixJQUEwQnhWLE1BQU0sQ0FBQytLLFNBQVAsSUFBb0IvSyxNQUFNLENBQUM2TCxZQUFQLEVBQTlDLElBQXVFeUosS0FBSyxHQUFHdEIsT0FBTyxDQUFDd0IsTUFBaEIsSUFBMEJ4VixNQUFNLENBQUMrSyxTQUFQLElBQW9CL0ssTUFBTSxDQUFDb0wsWUFBUCxFQUF6SCxFQUFnSjtBQUM5STdWLFVBQUFBLElBQUksQ0FBQ2lmLFNBQUwsR0FBaUIsS0FBakI7QUFDQWpmLFVBQUFBLElBQUksQ0FBQ2tmLE9BQUwsR0FBZSxLQUFmO0FBQ0E7QUFDRDtBQUNGLE9BUEQsTUFPTyxJQUFJVyxLQUFLLEdBQUdwQixPQUFPLENBQUN1QixNQUFoQixJQUEwQnZWLE1BQU0sQ0FBQytLLFNBQVAsSUFBb0IvSyxNQUFNLENBQUM2TCxZQUFQLEVBQTlDLElBQXVFdUosS0FBSyxHQUFHcEIsT0FBTyxDQUFDdUIsTUFBaEIsSUFBMEJ2VixNQUFNLENBQUMrSyxTQUFQLElBQW9CL0ssTUFBTSxDQUFDb0wsWUFBUCxFQUF6SCxFQUFnSjtBQUNySjtBQUNEO0FBQ0Y7O0FBRUQsUUFBSTdWLElBQUksQ0FBQzZlLFlBQUwsSUFBcUJucEIsUUFBUSxDQUFDM0IsYUFBbEMsRUFBaUQ7QUFDL0MsVUFBSXFFLENBQUMsQ0FBQ3ZHLE1BQUYsS0FBYTZELFFBQVEsQ0FBQzNCLGFBQXRCLElBQXVDa0gsQ0FBQyxDQUFDN0MsQ0FBQyxDQUFDdkcsTUFBSCxDQUFELENBQVl5TSxFQUFaLENBQWUwQixJQUFJLENBQUM4Z0IsWUFBcEIsQ0FBM0MsRUFBOEU7QUFDNUU5Z0IsUUFBQUEsSUFBSSxDQUFDa2YsT0FBTCxHQUFlLElBQWY7QUFDQXpVLFFBQUFBLE1BQU0sQ0FBQ2dWLFVBQVAsR0FBb0IsS0FBcEI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSXpmLElBQUksQ0FBQ3dnQixtQkFBVCxFQUE4QjtBQUM1Qi9WLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxXQUFaLEVBQXlCclQsQ0FBekI7QUFDRDs7QUFFRCxRQUFJQSxDQUFDLENBQUN3bkIsYUFBRixJQUFtQnhuQixDQUFDLENBQUN3bkIsYUFBRixDQUFnQjV0QixNQUFoQixHQUF5QixDQUFoRCxFQUFtRDtBQUNuRHlzQixJQUFBQSxPQUFPLENBQUNrQixRQUFSLEdBQW1CRSxLQUFuQjtBQUNBcEIsSUFBQUEsT0FBTyxDQUFDcUIsUUFBUixHQUFtQkMsS0FBbkI7QUFDQSxRQUFJMEIsS0FBSyxHQUFHaEQsT0FBTyxDQUFDa0IsUUFBUixHQUFtQmxCLE9BQU8sQ0FBQ3VCLE1BQXZDO0FBQ0EsUUFBSTBCLEtBQUssR0FBR2pELE9BQU8sQ0FBQ3FCLFFBQVIsR0FBbUJyQixPQUFPLENBQUN3QixNQUF2QztBQUNBLFFBQUl4VixNQUFNLENBQUN2RCxNQUFQLENBQWM4VSxTQUFkLElBQTJCN0ssSUFBSSxDQUFDd1EsSUFBTCxDQUFVeFEsSUFBSSxDQUFDeVEsR0FBTCxDQUFTSCxLQUFULEVBQWdCLENBQWhCLElBQXFCdFEsSUFBSSxDQUFDeVEsR0FBTCxDQUFTRixLQUFULEVBQWdCLENBQWhCLENBQS9CLElBQXFEalgsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOFUsU0FBbEcsRUFBNkc7O0FBRTdHLFFBQUksT0FBT2hjLElBQUksQ0FBQ3lnQixXQUFaLEtBQTRCLFdBQWhDLEVBQTZDO0FBQzNDLFVBQUlvQixVQUFKOztBQUVBLFVBQUlwWCxNQUFNLENBQUNnRSxZQUFQLE1BQXlCZ1EsT0FBTyxDQUFDcUIsUUFBUixLQUFxQnJCLE9BQU8sQ0FBQ3dCLE1BQXRELElBQWdFeFYsTUFBTSxDQUFDaUUsVUFBUCxNQUF1QitQLE9BQU8sQ0FBQ2tCLFFBQVIsS0FBcUJsQixPQUFPLENBQUN1QixNQUF4SCxFQUFnSTtBQUM5SGhnQixRQUFBQSxJQUFJLENBQUN5Z0IsV0FBTCxHQUFtQixLQUFuQjtBQUNELE9BRkQsTUFFTztBQUNMO0FBQ0EsWUFBSWdCLEtBQUssR0FBR0EsS0FBUixHQUFnQkMsS0FBSyxHQUFHQSxLQUF4QixJQUFpQyxFQUFyQyxFQUF5QztBQUN2Q0csVUFBQUEsVUFBVSxHQUFHMVEsSUFBSSxDQUFDMlEsS0FBTCxDQUFXM1EsSUFBSSxDQUFDNkIsR0FBTCxDQUFTME8sS0FBVCxDQUFYLEVBQTRCdlEsSUFBSSxDQUFDNkIsR0FBTCxDQUFTeU8sS0FBVCxDQUE1QixJQUErQyxHQUEvQyxHQUFxRHRRLElBQUksQ0FBQzRRLEVBQXZFO0FBQ0EvaEIsVUFBQUEsSUFBSSxDQUFDeWdCLFdBQUwsR0FBbUJoVyxNQUFNLENBQUNnRSxZQUFQLEtBQXdCb1QsVUFBVSxHQUFHM2EsTUFBTSxDQUFDMmEsVUFBNUMsR0FBeUQsS0FBS0EsVUFBTCxHQUFrQjNhLE1BQU0sQ0FBQzJhLFVBQXJHO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQUk3aEIsSUFBSSxDQUFDeWdCLFdBQVQsRUFBc0I7QUFDcEJoVyxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksbUJBQVosRUFBaUNyVCxDQUFqQztBQUNEOztBQUVELFFBQUksT0FBTzRILElBQUksQ0FBQzBnQixXQUFaLEtBQTRCLFdBQWhDLEVBQTZDO0FBQzNDLFVBQUlqQyxPQUFPLENBQUNrQixRQUFSLEtBQXFCbEIsT0FBTyxDQUFDdUIsTUFBN0IsSUFBdUN2QixPQUFPLENBQUNxQixRQUFSLEtBQXFCckIsT0FBTyxDQUFDd0IsTUFBeEUsRUFBZ0Y7QUFDOUVqZ0IsUUFBQUEsSUFBSSxDQUFDMGdCLFdBQUwsR0FBbUIsSUFBbkI7QUFDRDtBQUNGOztBQUVELFFBQUkxZ0IsSUFBSSxDQUFDeWdCLFdBQVQsRUFBc0I7QUFDcEJ6Z0IsTUFBQUEsSUFBSSxDQUFDaWYsU0FBTCxHQUFpQixLQUFqQjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDamYsSUFBSSxDQUFDMGdCLFdBQVYsRUFBdUI7QUFDckI7QUFDRDs7QUFFRGpXLElBQUFBLE1BQU0sQ0FBQ2dWLFVBQVAsR0FBb0IsS0FBcEI7O0FBRUEsUUFBSSxDQUFDdlksTUFBTSxDQUFDNE0sT0FBUixJQUFtQjFiLENBQUMsQ0FBQzJILFVBQXpCLEVBQXFDO0FBQ25DM0gsTUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDRDs7QUFFRCxRQUFJclosTUFBTSxDQUFDOGEsd0JBQVAsSUFBbUMsQ0FBQzlhLE1BQU0sQ0FBQythLE1BQS9DLEVBQXVEO0FBQ3JEN3BCLE1BQUFBLENBQUMsQ0FBQzhwQixlQUFGO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDbGlCLElBQUksQ0FBQ2tmLE9BQVYsRUFBbUI7QUFDakIsVUFBSWhZLE1BQU0sQ0FBQ2tRLElBQVgsRUFBaUI7QUFDZjNNLFFBQUFBLE1BQU0sQ0FBQzZRLE9BQVA7QUFDRDs7QUFFRHRiLE1BQUFBLElBQUksQ0FBQ21pQixjQUFMLEdBQXNCMVgsTUFBTSxDQUFDekYsWUFBUCxFQUF0QjtBQUNBeUYsTUFBQUEsTUFBTSxDQUFDdUssYUFBUCxDQUFxQixDQUFyQjs7QUFFQSxVQUFJdkssTUFBTSxDQUFDNk8sU0FBWCxFQUFzQjtBQUNwQjdPLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JyTixPQUFsQixDQUEwQixtQ0FBMUI7QUFDRDs7QUFFRE8sTUFBQUEsSUFBSSxDQUFDb2lCLG1CQUFMLEdBQTJCLEtBQTNCLENBWmlCLENBWWlCOztBQUVsQyxVQUFJbGIsTUFBTSxDQUFDd1csVUFBUCxLQUFzQmpULE1BQU0sQ0FBQ2tRLGNBQVAsS0FBMEIsSUFBMUIsSUFBa0NsUSxNQUFNLENBQUNtUSxjQUFQLEtBQTBCLElBQWxGLENBQUosRUFBNkY7QUFDM0ZuUSxRQUFBQSxNQUFNLENBQUMyUyxhQUFQLENBQXFCLElBQXJCO0FBQ0Q7O0FBRUQzUyxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksaUJBQVosRUFBK0JyVCxDQUEvQjtBQUNEOztBQUVEcVMsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFlBQVosRUFBMEJyVCxDQUExQjtBQUNBNEgsSUFBQUEsSUFBSSxDQUFDa2YsT0FBTCxHQUFlLElBQWY7QUFDQSxRQUFJbEMsSUFBSSxHQUFHdlMsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QmdULEtBQXhCLEdBQWdDQyxLQUEzQztBQUNBakQsSUFBQUEsT0FBTyxDQUFDekIsSUFBUixHQUFlQSxJQUFmO0FBQ0FBLElBQUFBLElBQUksSUFBSTlWLE1BQU0sQ0FBQ21iLFVBQWY7QUFDQSxRQUFJL1MsR0FBSixFQUFTME4sSUFBSSxHQUFHLENBQUNBLElBQVI7QUFDVHZTLElBQUFBLE1BQU0sQ0FBQ21XLGNBQVAsR0FBd0I1RCxJQUFJLEdBQUcsQ0FBUCxHQUFXLE1BQVgsR0FBb0IsTUFBNUM7QUFDQWhkLElBQUFBLElBQUksQ0FBQ3lZLGdCQUFMLEdBQXdCdUUsSUFBSSxHQUFHaGQsSUFBSSxDQUFDbWlCLGNBQXBDO0FBQ0EsUUFBSUcsbUJBQW1CLEdBQUcsSUFBMUI7QUFDQSxRQUFJQyxlQUFlLEdBQUdyYixNQUFNLENBQUNxYixlQUE3Qjs7QUFFQSxRQUFJcmIsTUFBTSxDQUFDc2EsbUJBQVgsRUFBZ0M7QUFDOUJlLE1BQUFBLGVBQWUsR0FBRyxDQUFsQjtBQUNEOztBQUVELFFBQUl2RixJQUFJLEdBQUcsQ0FBUCxJQUFZaGQsSUFBSSxDQUFDeVksZ0JBQUwsR0FBd0JoTyxNQUFNLENBQUNvTCxZQUFQLEVBQXhDLEVBQStEO0FBQzdEeU0sTUFBQUEsbUJBQW1CLEdBQUcsS0FBdEI7QUFDQSxVQUFJcGIsTUFBTSxDQUFDc2IsVUFBWCxFQUF1QnhpQixJQUFJLENBQUN5WSxnQkFBTCxHQUF3QmhPLE1BQU0sQ0FBQ29MLFlBQVAsS0FBd0IsQ0FBeEIsR0FBNEIxRSxJQUFJLENBQUN5USxHQUFMLENBQVMsQ0FBQ25YLE1BQU0sQ0FBQ29MLFlBQVAsRUFBRCxHQUF5QjdWLElBQUksQ0FBQ21pQixjQUE5QixHQUErQ25GLElBQXhELEVBQThEdUYsZUFBOUQsQ0FBcEQ7QUFDeEIsS0FIRCxNQUdPLElBQUl2RixJQUFJLEdBQUcsQ0FBUCxJQUFZaGQsSUFBSSxDQUFDeVksZ0JBQUwsR0FBd0JoTyxNQUFNLENBQUM2TCxZQUFQLEVBQXhDLEVBQStEO0FBQ3BFZ00sTUFBQUEsbUJBQW1CLEdBQUcsS0FBdEI7QUFDQSxVQUFJcGIsTUFBTSxDQUFDc2IsVUFBWCxFQUF1QnhpQixJQUFJLENBQUN5WSxnQkFBTCxHQUF3QmhPLE1BQU0sQ0FBQzZMLFlBQVAsS0FBd0IsQ0FBeEIsR0FBNEJuRixJQUFJLENBQUN5USxHQUFMLENBQVNuWCxNQUFNLENBQUM2TCxZQUFQLEtBQXdCdFcsSUFBSSxDQUFDbWlCLGNBQTdCLEdBQThDbkYsSUFBdkQsRUFBNkR1RixlQUE3RCxDQUFwRDtBQUN4Qjs7QUFFRCxRQUFJRCxtQkFBSixFQUF5QjtBQUN2QmxxQixNQUFBQSxDQUFDLENBQUNtcEIsdUJBQUYsR0FBNEIsSUFBNUI7QUFDRCxLQXpLeUIsQ0F5S3hCOzs7QUFHRixRQUFJLENBQUM5VyxNQUFNLENBQUNrUSxjQUFSLElBQTBCbFEsTUFBTSxDQUFDbVcsY0FBUCxLQUEwQixNQUFwRCxJQUE4RDVnQixJQUFJLENBQUN5WSxnQkFBTCxHQUF3QnpZLElBQUksQ0FBQ21pQixjQUEvRixFQUErRztBQUM3R25pQixNQUFBQSxJQUFJLENBQUN5WSxnQkFBTCxHQUF3QnpZLElBQUksQ0FBQ21pQixjQUE3QjtBQUNEOztBQUVELFFBQUksQ0FBQzFYLE1BQU0sQ0FBQ21RLGNBQVIsSUFBMEJuUSxNQUFNLENBQUNtVyxjQUFQLEtBQTBCLE1BQXBELElBQThENWdCLElBQUksQ0FBQ3lZLGdCQUFMLEdBQXdCelksSUFBSSxDQUFDbWlCLGNBQS9GLEVBQStHO0FBQzdHbmlCLE1BQUFBLElBQUksQ0FBQ3lZLGdCQUFMLEdBQXdCelksSUFBSSxDQUFDbWlCLGNBQTdCO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDMVgsTUFBTSxDQUFDbVEsY0FBUixJQUEwQixDQUFDblEsTUFBTSxDQUFDa1EsY0FBdEMsRUFBc0Q7QUFDcEQzYSxNQUFBQSxJQUFJLENBQUN5WSxnQkFBTCxHQUF3QnpZLElBQUksQ0FBQ21pQixjQUE3QjtBQUNELEtBdEx5QixDQXNMeEI7OztBQUdGLFFBQUlqYixNQUFNLENBQUM4VSxTQUFQLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLFVBQUk3SyxJQUFJLENBQUM2QixHQUFMLENBQVNnSyxJQUFULElBQWlCOVYsTUFBTSxDQUFDOFUsU0FBeEIsSUFBcUNoYyxJQUFJLENBQUM2Z0Isa0JBQTlDLEVBQWtFO0FBQ2hFLFlBQUksQ0FBQzdnQixJQUFJLENBQUM2Z0Isa0JBQVYsRUFBOEI7QUFDNUI3Z0IsVUFBQUEsSUFBSSxDQUFDNmdCLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0FwQyxVQUFBQSxPQUFPLENBQUN1QixNQUFSLEdBQWlCdkIsT0FBTyxDQUFDa0IsUUFBekI7QUFDQWxCLFVBQUFBLE9BQU8sQ0FBQ3dCLE1BQVIsR0FBaUJ4QixPQUFPLENBQUNxQixRQUF6QjtBQUNBOWYsVUFBQUEsSUFBSSxDQUFDeVksZ0JBQUwsR0FBd0J6WSxJQUFJLENBQUNtaUIsY0FBN0I7QUFDQTFELFVBQUFBLE9BQU8sQ0FBQ3pCLElBQVIsR0FBZXZTLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0JnUSxPQUFPLENBQUNrQixRQUFSLEdBQW1CbEIsT0FBTyxDQUFDdUIsTUFBbkQsR0FBNER2QixPQUFPLENBQUNxQixRQUFSLEdBQW1CckIsT0FBTyxDQUFDd0IsTUFBdEc7QUFDQTtBQUNEO0FBQ0YsT0FURCxNQVNPO0FBQ0xqZ0IsUUFBQUEsSUFBSSxDQUFDeVksZ0JBQUwsR0FBd0J6WSxJQUFJLENBQUNtaUIsY0FBN0I7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxDQUFDamIsTUFBTSxDQUFDdWIsWUFBUixJQUF3QnZiLE1BQU0sQ0FBQzRNLE9BQW5DLEVBQTRDLE9Bek1sQixDQXlNMEI7O0FBRXBELFFBQUk1TSxNQUFNLENBQUN3YixRQUFQLElBQW1CeGIsTUFBTSxDQUFDd04sbUJBQTFCLElBQWlEeE4sTUFBTSxDQUFDeU4scUJBQTVELEVBQW1GO0FBQ2pGbEssTUFBQUEsTUFBTSxDQUFDZ04saUJBQVA7QUFDQWhOLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0Q7O0FBRUQsUUFBSXpQLE1BQU0sQ0FBQ3diLFFBQVgsRUFBcUI7QUFDbkI7QUFDQSxVQUFJMWlCLElBQUksQ0FBQzJpQixVQUFMLENBQWdCM3dCLE1BQWhCLEtBQTJCLENBQS9CLEVBQWtDO0FBQ2hDZ08sUUFBQUEsSUFBSSxDQUFDMmlCLFVBQUwsQ0FBZ0JqcUIsSUFBaEIsQ0FBcUI7QUFDbkJrcUIsVUFBQUEsUUFBUSxFQUFFbkUsT0FBTyxDQUFDaFUsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixRQUF4QixHQUFtQyxRQUFwQyxDQURFO0FBRW5Cb1UsVUFBQUEsSUFBSSxFQUFFN2lCLElBQUksQ0FBQzJnQjtBQUZRLFNBQXJCO0FBSUQ7O0FBRUQzZ0IsTUFBQUEsSUFBSSxDQUFDMmlCLFVBQUwsQ0FBZ0JqcUIsSUFBaEIsQ0FBcUI7QUFDbkJrcUIsUUFBQUEsUUFBUSxFQUFFbkUsT0FBTyxDQUFDaFUsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixVQUF4QixHQUFxQyxVQUF0QyxDQURFO0FBRW5Cb1UsUUFBQUEsSUFBSSxFQUFFaGUsR0FBRztBQUZVLE9BQXJCO0FBSUQsS0E3TnlCLENBNk54Qjs7O0FBR0Y0RixJQUFBQSxNQUFNLENBQUMwTCxjQUFQLENBQXNCblcsSUFBSSxDQUFDeVksZ0JBQTNCLEVBaE8wQixDQWdPb0I7O0FBRTlDaE8sSUFBQUEsTUFBTSxDQUFDaU8sWUFBUCxDQUFvQjFZLElBQUksQ0FBQ3lZLGdCQUF6QjtBQUNEOztBQUVELFdBQVNxSyxVQUFULENBQW9CamtCLEtBQXBCLEVBQTJCO0FBQ3pCLFFBQUk0TCxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUl6SyxJQUFJLEdBQUd5SyxNQUFNLENBQUMrVCxlQUFsQjtBQUNBLFFBQUl0WCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUFBLFFBQ0l1WCxPQUFPLEdBQUdoVSxNQUFNLENBQUNnVSxPQURyQjtBQUFBLFFBRUluUCxHQUFHLEdBQUc3RSxNQUFNLENBQUM4RSxZQUZqQjtBQUFBLFFBR0l6QyxVQUFVLEdBQUdyQyxNQUFNLENBQUNxQyxVQUh4QjtBQUFBLFFBSUltRCxVQUFVLEdBQUd4RixNQUFNLENBQUN3RixVQUp4QjtBQUFBLFFBS0lELFFBQVEsR0FBR3ZGLE1BQU0sQ0FBQ3VGLFFBTHRCO0FBQUEsUUFNSUwsT0FBTyxHQUFHbEYsTUFBTSxDQUFDa0YsT0FOckI7QUFPQSxRQUFJLENBQUNBLE9BQUwsRUFBYztBQUNkLFFBQUl2WCxDQUFDLEdBQUd5RyxLQUFSO0FBQ0EsUUFBSXpHLENBQUMsQ0FBQ3NtQixhQUFOLEVBQXFCdG1CLENBQUMsR0FBR0EsQ0FBQyxDQUFDc21CLGFBQU47O0FBRXJCLFFBQUkxZSxJQUFJLENBQUN3Z0IsbUJBQVQsRUFBOEI7QUFDNUIvVixNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksVUFBWixFQUF3QnJULENBQXhCO0FBQ0Q7O0FBRUQ0SCxJQUFBQSxJQUFJLENBQUN3Z0IsbUJBQUwsR0FBMkIsS0FBM0I7O0FBRUEsUUFBSSxDQUFDeGdCLElBQUksQ0FBQ2lmLFNBQVYsRUFBcUI7QUFDbkIsVUFBSWpmLElBQUksQ0FBQ2tmLE9BQUwsSUFBZ0JoWSxNQUFNLENBQUN3VyxVQUEzQixFQUF1QztBQUNyQ2pULFFBQUFBLE1BQU0sQ0FBQzJTLGFBQVAsQ0FBcUIsS0FBckI7QUFDRDs7QUFFRHBkLE1BQUFBLElBQUksQ0FBQ2tmLE9BQUwsR0FBZSxLQUFmO0FBQ0FsZixNQUFBQSxJQUFJLENBQUMwZ0IsV0FBTCxHQUFtQixLQUFuQjtBQUNBO0FBQ0QsS0E1QndCLENBNEJ2Qjs7O0FBR0YsUUFBSXhaLE1BQU0sQ0FBQ3dXLFVBQVAsSUFBcUIxZCxJQUFJLENBQUNrZixPQUExQixJQUFxQ2xmLElBQUksQ0FBQ2lmLFNBQTFDLEtBQXdEeFUsTUFBTSxDQUFDa1EsY0FBUCxLQUEwQixJQUExQixJQUFrQ2xRLE1BQU0sQ0FBQ21RLGNBQVAsS0FBMEIsSUFBcEgsQ0FBSixFQUErSDtBQUM3SG5RLE1BQUFBLE1BQU0sQ0FBQzJTLGFBQVAsQ0FBcUIsS0FBckI7QUFDRCxLQWpDd0IsQ0FpQ3ZCOzs7QUFHRixRQUFJMkYsWUFBWSxHQUFHbGUsR0FBRyxFQUF0QjtBQUNBLFFBQUltZSxRQUFRLEdBQUdELFlBQVksR0FBRy9pQixJQUFJLENBQUMyZ0IsY0FBbkMsQ0FyQ3lCLENBcUMwQjs7QUFFbkQsUUFBSWxXLE1BQU0sQ0FBQ2dWLFVBQVgsRUFBdUI7QUFDckJoVixNQUFBQSxNQUFNLENBQUN3TixrQkFBUCxDQUEwQjdmLENBQTFCO0FBQ0FxUyxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksV0FBWixFQUF5QnJULENBQXpCOztBQUVBLFVBQUk0cUIsUUFBUSxHQUFHLEdBQVgsSUFBa0JELFlBQVksR0FBRy9pQixJQUFJLENBQUNpakIsYUFBcEIsR0FBb0MsR0FBMUQsRUFBK0Q7QUFDN0R4WSxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksdUJBQVosRUFBcUNyVCxDQUFyQztBQUNEO0FBQ0Y7O0FBRUQ0SCxJQUFBQSxJQUFJLENBQUNpakIsYUFBTCxHQUFxQnBlLEdBQUcsRUFBeEI7QUFDQUYsSUFBQUEsUUFBUSxDQUFDLFlBQVk7QUFDbkIsVUFBSSxDQUFDOEYsTUFBTSxDQUFDRyxTQUFaLEVBQXVCSCxNQUFNLENBQUNnVixVQUFQLEdBQW9CLElBQXBCO0FBQ3hCLEtBRk8sQ0FBUjs7QUFJQSxRQUFJLENBQUN6ZixJQUFJLENBQUNpZixTQUFOLElBQW1CLENBQUNqZixJQUFJLENBQUNrZixPQUF6QixJQUFvQyxDQUFDelUsTUFBTSxDQUFDbVcsY0FBNUMsSUFBOERuQyxPQUFPLENBQUN6QixJQUFSLEtBQWlCLENBQS9FLElBQW9GaGQsSUFBSSxDQUFDeVksZ0JBQUwsS0FBMEJ6WSxJQUFJLENBQUNtaUIsY0FBdkgsRUFBdUk7QUFDckluaUIsTUFBQUEsSUFBSSxDQUFDaWYsU0FBTCxHQUFpQixLQUFqQjtBQUNBamYsTUFBQUEsSUFBSSxDQUFDa2YsT0FBTCxHQUFlLEtBQWY7QUFDQWxmLE1BQUFBLElBQUksQ0FBQzBnQixXQUFMLEdBQW1CLEtBQW5CO0FBQ0E7QUFDRDs7QUFFRDFnQixJQUFBQSxJQUFJLENBQUNpZixTQUFMLEdBQWlCLEtBQWpCO0FBQ0FqZixJQUFBQSxJQUFJLENBQUNrZixPQUFMLEdBQWUsS0FBZjtBQUNBbGYsSUFBQUEsSUFBSSxDQUFDMGdCLFdBQUwsR0FBbUIsS0FBbkI7QUFDQSxRQUFJd0MsVUFBSjs7QUFFQSxRQUFJaGMsTUFBTSxDQUFDdWIsWUFBWCxFQUF5QjtBQUN2QlMsTUFBQUEsVUFBVSxHQUFHNVQsR0FBRyxHQUFHN0UsTUFBTSxDQUFDK0ssU0FBVixHQUFzQixDQUFDL0ssTUFBTSxDQUFDK0ssU0FBOUM7QUFDRCxLQUZELE1BRU87QUFDTDBOLE1BQUFBLFVBQVUsR0FBRyxDQUFDbGpCLElBQUksQ0FBQ3lZLGdCQUFuQjtBQUNEOztBQUVELFFBQUl2UixNQUFNLENBQUM0TSxPQUFYLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQsUUFBSTVNLE1BQU0sQ0FBQ3diLFFBQVgsRUFBcUI7QUFDbkIsVUFBSVEsVUFBVSxHQUFHLENBQUN6WSxNQUFNLENBQUNvTCxZQUFQLEVBQWxCLEVBQXlDO0FBQ3ZDcEwsUUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFleFAsTUFBTSxDQUFDMEssV0FBdEI7QUFDQTtBQUNEOztBQUVELFVBQUkrTixVQUFVLEdBQUcsQ0FBQ3pZLE1BQU0sQ0FBQzZMLFlBQVAsRUFBbEIsRUFBeUM7QUFDdkMsWUFBSTdMLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUJnZSxRQUFRLENBQUNoZSxNQUFwQyxFQUE0QztBQUMxQ3lZLFVBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZWpLLFFBQVEsQ0FBQ2hlLE1BQVQsR0FBa0IsQ0FBakM7QUFDRCxTQUZELE1BRU87QUFDTHlZLFVBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUIsQ0FBdEM7QUFDRDs7QUFFRDtBQUNEOztBQUVELFVBQUlrVixNQUFNLENBQUNpYyxnQkFBWCxFQUE2QjtBQUMzQixZQUFJbmpCLElBQUksQ0FBQzJpQixVQUFMLENBQWdCM3dCLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCLGNBQUlveEIsYUFBYSxHQUFHcGpCLElBQUksQ0FBQzJpQixVQUFMLENBQWdCVSxHQUFoQixFQUFwQjtBQUNBLGNBQUlDLGFBQWEsR0FBR3RqQixJQUFJLENBQUMyaUIsVUFBTCxDQUFnQlUsR0FBaEIsRUFBcEI7QUFDQSxjQUFJRSxRQUFRLEdBQUdILGFBQWEsQ0FBQ1IsUUFBZCxHQUF5QlUsYUFBYSxDQUFDVixRQUF0RDtBQUNBLGNBQUlDLElBQUksR0FBR08sYUFBYSxDQUFDUCxJQUFkLEdBQXFCUyxhQUFhLENBQUNULElBQTlDO0FBQ0FwWSxVQUFBQSxNQUFNLENBQUMrWSxRQUFQLEdBQWtCRCxRQUFRLEdBQUdWLElBQTdCO0FBQ0FwWSxVQUFBQSxNQUFNLENBQUMrWSxRQUFQLElBQW1CLENBQW5COztBQUVBLGNBQUlyUyxJQUFJLENBQUM2QixHQUFMLENBQVN2SSxNQUFNLENBQUMrWSxRQUFoQixJQUE0QnRjLE1BQU0sQ0FBQ3VjLHVCQUF2QyxFQUFnRTtBQUM5RGhaLFlBQUFBLE1BQU0sQ0FBQytZLFFBQVAsR0FBa0IsQ0FBbEI7QUFDRCxXQVY2QixDQVU1QjtBQUNGOzs7QUFHQSxjQUFJWCxJQUFJLEdBQUcsR0FBUCxJQUFjaGUsR0FBRyxLQUFLdWUsYUFBYSxDQUFDUCxJQUF0QixHQUE2QixHQUEvQyxFQUFvRDtBQUNsRHBZLFlBQUFBLE1BQU0sQ0FBQytZLFFBQVAsR0FBa0IsQ0FBbEI7QUFDRDtBQUNGLFNBakJELE1BaUJPO0FBQ0wvWSxVQUFBQSxNQUFNLENBQUMrWSxRQUFQLEdBQWtCLENBQWxCO0FBQ0Q7O0FBRUQvWSxRQUFBQSxNQUFNLENBQUMrWSxRQUFQLElBQW1CdGMsTUFBTSxDQUFDd2MsNkJBQTFCO0FBQ0ExakIsUUFBQUEsSUFBSSxDQUFDMmlCLFVBQUwsQ0FBZ0Izd0IsTUFBaEIsR0FBeUIsQ0FBekI7QUFDQSxZQUFJMnhCLGdCQUFnQixHQUFHLE9BQU96YyxNQUFNLENBQUMwYyxxQkFBckM7QUFDQSxZQUFJQyxnQkFBZ0IsR0FBR3BaLE1BQU0sQ0FBQytZLFFBQVAsR0FBa0JHLGdCQUF6QztBQUNBLFlBQUlHLFdBQVcsR0FBR3JaLE1BQU0sQ0FBQytLLFNBQVAsR0FBbUJxTyxnQkFBckM7QUFDQSxZQUFJdlUsR0FBSixFQUFTd1UsV0FBVyxHQUFHLENBQUNBLFdBQWY7QUFDVCxZQUFJQyxRQUFRLEdBQUcsS0FBZjtBQUNBLFlBQUlDLG1CQUFKO0FBQ0EsWUFBSUMsWUFBWSxHQUFHOVMsSUFBSSxDQUFDNkIsR0FBTCxDQUFTdkksTUFBTSxDQUFDK1ksUUFBaEIsSUFBNEIsRUFBNUIsR0FBaUN0YyxNQUFNLENBQUNnZCwyQkFBM0Q7QUFDQSxZQUFJQyxZQUFKOztBQUVBLFlBQUlMLFdBQVcsR0FBR3JaLE1BQU0sQ0FBQzZMLFlBQVAsRUFBbEIsRUFBeUM7QUFDdkMsY0FBSXBQLE1BQU0sQ0FBQ2tkLHNCQUFYLEVBQW1DO0FBQ2pDLGdCQUFJTixXQUFXLEdBQUdyWixNQUFNLENBQUM2TCxZQUFQLEVBQWQsR0FBc0MsQ0FBQzJOLFlBQTNDLEVBQXlEO0FBQ3ZESCxjQUFBQSxXQUFXLEdBQUdyWixNQUFNLENBQUM2TCxZQUFQLEtBQXdCMk4sWUFBdEM7QUFDRDs7QUFFREQsWUFBQUEsbUJBQW1CLEdBQUd2WixNQUFNLENBQUM2TCxZQUFQLEVBQXRCO0FBQ0F5TixZQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNBL2pCLFlBQUFBLElBQUksQ0FBQ29pQixtQkFBTCxHQUEyQixJQUEzQjtBQUNELFdBUkQsTUFRTztBQUNMMEIsWUFBQUEsV0FBVyxHQUFHclosTUFBTSxDQUFDNkwsWUFBUCxFQUFkO0FBQ0Q7O0FBRUQsY0FBSXBQLE1BQU0sQ0FBQ2tRLElBQVAsSUFBZWxRLE1BQU0sQ0FBQzZMLGNBQTFCLEVBQTBDb1IsWUFBWSxHQUFHLElBQWY7QUFDM0MsU0FkRCxNQWNPLElBQUlMLFdBQVcsR0FBR3JaLE1BQU0sQ0FBQ29MLFlBQVAsRUFBbEIsRUFBeUM7QUFDOUMsY0FBSTNPLE1BQU0sQ0FBQ2tkLHNCQUFYLEVBQW1DO0FBQ2pDLGdCQUFJTixXQUFXLEdBQUdyWixNQUFNLENBQUNvTCxZQUFQLEVBQWQsR0FBc0NvTyxZQUExQyxFQUF3RDtBQUN0REgsY0FBQUEsV0FBVyxHQUFHclosTUFBTSxDQUFDb0wsWUFBUCxLQUF3Qm9PLFlBQXRDO0FBQ0Q7O0FBRURELFlBQUFBLG1CQUFtQixHQUFHdlosTUFBTSxDQUFDb0wsWUFBUCxFQUF0QjtBQUNBa08sWUFBQUEsUUFBUSxHQUFHLElBQVg7QUFDQS9qQixZQUFBQSxJQUFJLENBQUNvaUIsbUJBQUwsR0FBMkIsSUFBM0I7QUFDRCxXQVJELE1BUU87QUFDTDBCLFlBQUFBLFdBQVcsR0FBR3JaLE1BQU0sQ0FBQ29MLFlBQVAsRUFBZDtBQUNEOztBQUVELGNBQUkzTyxNQUFNLENBQUNrUSxJQUFQLElBQWVsUSxNQUFNLENBQUM2TCxjQUExQixFQUEwQ29SLFlBQVksR0FBRyxJQUFmO0FBQzNDLFNBZE0sTUFjQSxJQUFJamQsTUFBTSxDQUFDbWQsY0FBWCxFQUEyQjtBQUNoQyxjQUFJL00sU0FBSjs7QUFFQSxlQUFLLElBQUkxWSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHb1IsUUFBUSxDQUFDaGUsTUFBN0IsRUFBcUM0TSxDQUFDLElBQUksQ0FBMUMsRUFBNkM7QUFDM0MsZ0JBQUlvUixRQUFRLENBQUNwUixDQUFELENBQVIsR0FBYyxDQUFDa2xCLFdBQW5CLEVBQWdDO0FBQzlCeE0sY0FBQUEsU0FBUyxHQUFHMVksQ0FBWjtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxjQUFJdVMsSUFBSSxDQUFDNkIsR0FBTCxDQUFTaEQsUUFBUSxDQUFDc0gsU0FBRCxDQUFSLEdBQXNCd00sV0FBL0IsSUFBOEMzUyxJQUFJLENBQUM2QixHQUFMLENBQVNoRCxRQUFRLENBQUNzSCxTQUFTLEdBQUcsQ0FBYixDQUFSLEdBQTBCd00sV0FBbkMsQ0FBOUMsSUFBaUdyWixNQUFNLENBQUNtVyxjQUFQLEtBQTBCLE1BQS9ILEVBQXVJO0FBQ3JJa0QsWUFBQUEsV0FBVyxHQUFHOVQsUUFBUSxDQUFDc0gsU0FBRCxDQUF0QjtBQUNELFdBRkQsTUFFTztBQUNMd00sWUFBQUEsV0FBVyxHQUFHOVQsUUFBUSxDQUFDc0gsU0FBUyxHQUFHLENBQWIsQ0FBdEI7QUFDRDs7QUFFRHdNLFVBQUFBLFdBQVcsR0FBRyxDQUFDQSxXQUFmO0FBQ0Q7O0FBRUQsWUFBSUssWUFBSixFQUFrQjtBQUNoQjFaLFVBQUFBLE1BQU0sQ0FBQ3FELElBQVAsQ0FBWSxlQUFaLEVBQTZCLFlBQVk7QUFDdkNyRCxZQUFBQSxNQUFNLENBQUM2USxPQUFQO0FBQ0QsV0FGRDtBQUdELFNBcEYwQixDQW9GekI7OztBQUdGLFlBQUk3USxNQUFNLENBQUMrWSxRQUFQLEtBQW9CLENBQXhCLEVBQTJCO0FBQ3pCLGNBQUlsVSxHQUFKLEVBQVM7QUFDUHFVLFlBQUFBLGdCQUFnQixHQUFHeFMsSUFBSSxDQUFDNkIsR0FBTCxDQUFTLENBQUMsQ0FBQzhRLFdBQUQsR0FBZXJaLE1BQU0sQ0FBQytLLFNBQXZCLElBQW9DL0ssTUFBTSxDQUFDK1ksUUFBcEQsQ0FBbkI7QUFDRCxXQUZELE1BRU87QUFDTEcsWUFBQUEsZ0JBQWdCLEdBQUd4UyxJQUFJLENBQUM2QixHQUFMLENBQVMsQ0FBQzhRLFdBQVcsR0FBR3JaLE1BQU0sQ0FBQytLLFNBQXRCLElBQW1DL0ssTUFBTSxDQUFDK1ksUUFBbkQsQ0FBbkI7QUFDRDs7QUFFRCxjQUFJdGMsTUFBTSxDQUFDbWQsY0FBWCxFQUEyQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFJQyxZQUFZLEdBQUduVCxJQUFJLENBQUM2QixHQUFMLENBQVMsQ0FBQzFELEdBQUcsR0FBRyxDQUFDd1UsV0FBSixHQUFrQkEsV0FBdEIsSUFBcUNyWixNQUFNLENBQUMrSyxTQUFyRCxDQUFuQjtBQUNBLGdCQUFJK08sZ0JBQWdCLEdBQUc5WixNQUFNLENBQUN5RixlQUFQLENBQXVCekYsTUFBTSxDQUFDMEssV0FBOUIsQ0FBdkI7O0FBRUEsZ0JBQUltUCxZQUFZLEdBQUdDLGdCQUFuQixFQUFxQztBQUNuQ1osY0FBQUEsZ0JBQWdCLEdBQUd6YyxNQUFNLENBQUM0TixLQUExQjtBQUNELGFBRkQsTUFFTyxJQUFJd1AsWUFBWSxHQUFHLElBQUlDLGdCQUF2QixFQUF5QztBQUM5Q1osY0FBQUEsZ0JBQWdCLEdBQUd6YyxNQUFNLENBQUM0TixLQUFQLEdBQWUsR0FBbEM7QUFDRCxhQUZNLE1BRUE7QUFDTDZPLGNBQUFBLGdCQUFnQixHQUFHemMsTUFBTSxDQUFDNE4sS0FBUCxHQUFlLEdBQWxDO0FBQ0Q7QUFDRjtBQUNGLFNBMUJELE1BMEJPLElBQUk1TixNQUFNLENBQUNtZCxjQUFYLEVBQTJCO0FBQ2hDNVosVUFBQUEsTUFBTSxDQUFDc1IsY0FBUDtBQUNBO0FBQ0Q7O0FBRUQsWUFBSTdVLE1BQU0sQ0FBQ2tkLHNCQUFQLElBQWlDTCxRQUFyQyxFQUErQztBQUM3Q3RaLFVBQUFBLE1BQU0sQ0FBQzBMLGNBQVAsQ0FBc0I2TixtQkFBdEI7QUFDQXZaLFVBQUFBLE1BQU0sQ0FBQ3VLLGFBQVAsQ0FBcUIyTyxnQkFBckI7QUFDQWxaLFVBQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0JvTCxXQUFwQjtBQUNBclosVUFBQUEsTUFBTSxDQUFDcVAsZUFBUCxDQUF1QixJQUF2QixFQUE2QnJQLE1BQU0sQ0FBQ21XLGNBQXBDO0FBQ0FuVyxVQUFBQSxNQUFNLENBQUM2TyxTQUFQLEdBQW1CLElBQW5CO0FBQ0F4TSxVQUFBQSxVQUFVLENBQUN2SSxhQUFYLENBQXlCLFlBQVk7QUFDbkMsZ0JBQUksQ0FBQ2tHLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUFsQixJQUErQixDQUFDNUssSUFBSSxDQUFDb2lCLG1CQUF6QyxFQUE4RDtBQUM5RDNYLFlBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxnQkFBWjtBQUNBaEIsWUFBQUEsTUFBTSxDQUFDdUssYUFBUCxDQUFxQjlOLE1BQU0sQ0FBQzROLEtBQTVCO0FBQ0FyZSxZQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNyQmdVLGNBQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0JzTCxtQkFBcEI7QUFDQWxYLGNBQUFBLFVBQVUsQ0FBQ3ZJLGFBQVgsQ0FBeUIsWUFBWTtBQUNuQyxvQkFBSSxDQUFDa0csTUFBRCxJQUFXQSxNQUFNLENBQUNHLFNBQXRCLEVBQWlDO0FBQ2pDSCxnQkFBQUEsTUFBTSxDQUFDbEcsYUFBUDtBQUNELGVBSEQ7QUFJRCxhQU5TLEVBTVAsQ0FOTyxDQUFWO0FBT0QsV0FYRDtBQVlELFNBbEJELE1Ba0JPLElBQUlrRyxNQUFNLENBQUMrWSxRQUFYLEVBQXFCO0FBQzFCL1ksVUFBQUEsTUFBTSxDQUFDMEwsY0FBUCxDQUFzQjJOLFdBQXRCO0FBQ0FyWixVQUFBQSxNQUFNLENBQUN1SyxhQUFQLENBQXFCMk8sZ0JBQXJCO0FBQ0FsWixVQUFBQSxNQUFNLENBQUNpTyxZQUFQLENBQW9Cb0wsV0FBcEI7QUFDQXJaLFVBQUFBLE1BQU0sQ0FBQ3FQLGVBQVAsQ0FBdUIsSUFBdkIsRUFBNkJyUCxNQUFNLENBQUNtVyxjQUFwQzs7QUFFQSxjQUFJLENBQUNuVyxNQUFNLENBQUM2TyxTQUFaLEVBQXVCO0FBQ3JCN08sWUFBQUEsTUFBTSxDQUFDNk8sU0FBUCxHQUFtQixJQUFuQjtBQUNBeE0sWUFBQUEsVUFBVSxDQUFDdkksYUFBWCxDQUF5QixZQUFZO0FBQ25DLGtCQUFJLENBQUNrRyxNQUFELElBQVdBLE1BQU0sQ0FBQ0csU0FBdEIsRUFBaUM7QUFDakNILGNBQUFBLE1BQU0sQ0FBQ2xHLGFBQVA7QUFDRCxhQUhEO0FBSUQ7QUFDRixTQWJNLE1BYUE7QUFDTGtHLFVBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSw0QkFBWjtBQUNBaEIsVUFBQUEsTUFBTSxDQUFDMEwsY0FBUCxDQUFzQjJOLFdBQXRCO0FBQ0Q7O0FBRURyWixRQUFBQSxNQUFNLENBQUNnTixpQkFBUDtBQUNBaE4sUUFBQUEsTUFBTSxDQUFDa00sbUJBQVA7QUFDRCxPQTVKRCxNQTRKTyxJQUFJelAsTUFBTSxDQUFDbWQsY0FBWCxFQUEyQjtBQUNoQzVaLFFBQUFBLE1BQU0sQ0FBQ3NSLGNBQVA7QUFDQTtBQUNELE9BSE0sTUFHQSxJQUFJN1UsTUFBTSxDQUFDd2IsUUFBWCxFQUFxQjtBQUMxQmpZLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSw0QkFBWjtBQUNEOztBQUVELFVBQUksQ0FBQ3ZFLE1BQU0sQ0FBQ2ljLGdCQUFSLElBQTRCSCxRQUFRLElBQUk5YixNQUFNLENBQUNzZCxZQUFuRCxFQUFpRTtBQUMvRC9aLFFBQUFBLE1BQU0sQ0FBQzBMLGNBQVA7QUFDQTFMLFFBQUFBLE1BQU0sQ0FBQ2dOLGlCQUFQO0FBQ0FoTixRQUFBQSxNQUFNLENBQUNrTSxtQkFBUDtBQUNEOztBQUVEO0FBQ0QsS0FyUXdCLENBcVF2Qjs7O0FBR0YsUUFBSThOLFNBQVMsR0FBRyxDQUFoQjtBQUNBLFFBQUlDLFNBQVMsR0FBR2phLE1BQU0sQ0FBQ3lGLGVBQVAsQ0FBdUIsQ0FBdkIsQ0FBaEI7O0FBRUEsU0FBSyxJQUFJbmUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tlLFVBQVUsQ0FBQ2plLE1BQS9CLEVBQXVDRCxDQUFDLElBQUlBLENBQUMsR0FBR21WLE1BQU0sQ0FBQytMLGtCQUFYLEdBQWdDLENBQWhDLEdBQW9DL0wsTUFBTSxDQUFDOEssY0FBdkYsRUFBdUc7QUFDckcsVUFBSTJTLFVBQVUsR0FBRzV5QixDQUFDLEdBQUdtVixNQUFNLENBQUMrTCxrQkFBUCxHQUE0QixDQUFoQyxHQUFvQyxDQUFwQyxHQUF3Qy9MLE1BQU0sQ0FBQzhLLGNBQWhFOztBQUVBLFVBQUksT0FBTy9CLFVBQVUsQ0FBQ2xlLENBQUMsR0FBRzR5QixVQUFMLENBQWpCLEtBQXNDLFdBQTFDLEVBQXVEO0FBQ3JELFlBQUl6QixVQUFVLElBQUlqVCxVQUFVLENBQUNsZSxDQUFELENBQXhCLElBQStCbXhCLFVBQVUsR0FBR2pULFVBQVUsQ0FBQ2xlLENBQUMsR0FBRzR5QixVQUFMLENBQTFELEVBQTRFO0FBQzFFRixVQUFBQSxTQUFTLEdBQUcxeUIsQ0FBWjtBQUNBMnlCLFVBQUFBLFNBQVMsR0FBR3pVLFVBQVUsQ0FBQ2xlLENBQUMsR0FBRzR5QixVQUFMLENBQVYsR0FBNkIxVSxVQUFVLENBQUNsZSxDQUFELENBQW5EO0FBQ0Q7QUFDRixPQUxELE1BS08sSUFBSW14QixVQUFVLElBQUlqVCxVQUFVLENBQUNsZSxDQUFELENBQTVCLEVBQWlDO0FBQ3RDMHlCLFFBQUFBLFNBQVMsR0FBRzF5QixDQUFaO0FBQ0EyeUIsUUFBQUEsU0FBUyxHQUFHelUsVUFBVSxDQUFDQSxVQUFVLENBQUNqZSxNQUFYLEdBQW9CLENBQXJCLENBQVYsR0FBb0NpZSxVQUFVLENBQUNBLFVBQVUsQ0FBQ2plLE1BQVgsR0FBb0IsQ0FBckIsQ0FBMUQ7QUFDRDtBQUNGLEtBdlJ3QixDQXVSdkI7OztBQUdGLFFBQUk0eUIsS0FBSyxHQUFHLENBQUMxQixVQUFVLEdBQUdqVCxVQUFVLENBQUN3VSxTQUFELENBQXhCLElBQXVDQyxTQUFuRDtBQUNBLFFBQUl0SixTQUFTLEdBQUdxSixTQUFTLEdBQUd2ZCxNQUFNLENBQUMrTCxrQkFBUCxHQUE0QixDQUF4QyxHQUE0QyxDQUE1QyxHQUFnRC9MLE1BQU0sQ0FBQzhLLGNBQXZFOztBQUVBLFFBQUlnUixRQUFRLEdBQUc5YixNQUFNLENBQUNzZCxZQUF0QixFQUFvQztBQUNsQztBQUNBLFVBQUksQ0FBQ3RkLE1BQU0sQ0FBQzJkLFVBQVosRUFBd0I7QUFDdEJwYSxRQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWV4UCxNQUFNLENBQUMwSyxXQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsVUFBSTFLLE1BQU0sQ0FBQ21XLGNBQVAsS0FBMEIsTUFBOUIsRUFBc0M7QUFDcEMsWUFBSWdFLEtBQUssSUFBSTFkLE1BQU0sQ0FBQzRkLGVBQXBCLEVBQXFDcmEsTUFBTSxDQUFDd1AsT0FBUCxDQUFld0ssU0FBUyxHQUFHckosU0FBM0IsRUFBckMsS0FBZ0YzUSxNQUFNLENBQUN3UCxPQUFQLENBQWV3SyxTQUFmO0FBQ2pGOztBQUVELFVBQUloYSxNQUFNLENBQUNtVyxjQUFQLEtBQTBCLE1BQTlCLEVBQXNDO0FBQ3BDLFlBQUlnRSxLQUFLLEdBQUcsSUFBSTFkLE1BQU0sQ0FBQzRkLGVBQXZCLEVBQXdDcmEsTUFBTSxDQUFDd1AsT0FBUCxDQUFld0ssU0FBUyxHQUFHckosU0FBM0IsRUFBeEMsS0FBbUYzUSxNQUFNLENBQUN3UCxPQUFQLENBQWV3SyxTQUFmO0FBQ3BGO0FBQ0YsS0FkRCxNQWNPO0FBQ0w7QUFDQSxVQUFJLENBQUN2ZCxNQUFNLENBQUM2ZCxXQUFaLEVBQXlCO0FBQ3ZCdGEsUUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFleFAsTUFBTSxDQUFDMEssV0FBdEI7QUFDQTtBQUNEOztBQUVELFVBQUk2UCxpQkFBaUIsR0FBR3ZhLE1BQU0sQ0FBQ3dhLFVBQVAsS0FBc0I3c0IsQ0FBQyxDQUFDdkcsTUFBRixLQUFhNFksTUFBTSxDQUFDd2EsVUFBUCxDQUFrQkMsTUFBL0IsSUFBeUM5c0IsQ0FBQyxDQUFDdkcsTUFBRixLQUFhNFksTUFBTSxDQUFDd2EsVUFBUCxDQUFrQkUsTUFBOUYsQ0FBeEI7O0FBRUEsVUFBSSxDQUFDSCxpQkFBTCxFQUF3QjtBQUN0QixZQUFJdmEsTUFBTSxDQUFDbVcsY0FBUCxLQUEwQixNQUE5QixFQUFzQztBQUNwQ25XLFVBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXdLLFNBQVMsR0FBR3JKLFNBQTNCO0FBQ0Q7O0FBRUQsWUFBSTNRLE1BQU0sQ0FBQ21XLGNBQVAsS0FBMEIsTUFBOUIsRUFBc0M7QUFDcENuVyxVQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWV3SyxTQUFmO0FBQ0Q7QUFDRixPQVJELE1BUU8sSUFBSXJzQixDQUFDLENBQUN2RyxNQUFGLEtBQWE0WSxNQUFNLENBQUN3YSxVQUFQLENBQWtCQyxNQUFuQyxFQUEyQztBQUNoRHphLFFBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXdLLFNBQVMsR0FBR3JKLFNBQTNCO0FBQ0QsT0FGTSxNQUVBO0FBQ0wzUSxRQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWV3SyxTQUFmO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQVNXLFFBQVQsR0FBb0I7QUFDbEIsUUFBSTNhLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSTFNLEVBQUUsR0FBR2lRLE1BQU0sQ0FBQ2pRLEVBRGhCO0FBRUEsUUFBSUEsRUFBRSxJQUFJQSxFQUFFLENBQUNrRyxXQUFILEtBQW1CLENBQTdCLEVBQWdDLE9BSmQsQ0FJc0I7O0FBRXhDLFFBQUl3RyxNQUFNLENBQUNtZSxXQUFYLEVBQXdCO0FBQ3RCNWEsTUFBQUEsTUFBTSxDQUFDNmEsYUFBUDtBQUNELEtBUmlCLENBUWhCOzs7QUFHRixRQUFJM0ssY0FBYyxHQUFHbFEsTUFBTSxDQUFDa1EsY0FBNUI7QUFBQSxRQUNJQyxjQUFjLEdBQUduUSxNQUFNLENBQUNtUSxjQUQ1QjtBQUFBLFFBRUk1SyxRQUFRLEdBQUd2RixNQUFNLENBQUN1RixRQUZ0QixDQVhrQixDQWFjOztBQUVoQ3ZGLElBQUFBLE1BQU0sQ0FBQ2tRLGNBQVAsR0FBd0IsSUFBeEI7QUFDQWxRLElBQUFBLE1BQU0sQ0FBQ21RLGNBQVAsR0FBd0IsSUFBeEI7QUFDQW5RLElBQUFBLE1BQU0sQ0FBQzZELFVBQVA7QUFDQTdELElBQUFBLE1BQU0sQ0FBQ3NFLFlBQVA7QUFDQXRFLElBQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQOztBQUVBLFFBQUksQ0FBQ3pQLE1BQU0sQ0FBQ29LLGFBQVAsS0FBeUIsTUFBekIsSUFBbUNwSyxNQUFNLENBQUNvSyxhQUFQLEdBQXVCLENBQTNELEtBQWlFN0csTUFBTSxDQUFDK0wsS0FBeEUsSUFBaUYsQ0FBQy9MLE1BQU0sQ0FBQzhMLFdBQXpGLElBQXdHLENBQUM5TCxNQUFNLENBQUN2RCxNQUFQLENBQWM2TCxjQUEzSCxFQUEySTtBQUN6SXRJLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUIsQ0FBdEMsRUFBeUMsQ0FBekMsRUFBNEMsS0FBNUMsRUFBbUQsSUFBbkQ7QUFDRCxLQUZELE1BRU87QUFDTHlZLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQzBLLFdBQXRCLEVBQW1DLENBQW5DLEVBQXNDLEtBQXRDLEVBQTZDLElBQTdDO0FBQ0Q7O0FBRUQsUUFBSTFLLE1BQU0sQ0FBQzhhLFFBQVAsSUFBbUI5YSxNQUFNLENBQUM4YSxRQUFQLENBQWdCQyxPQUFuQyxJQUE4Qy9hLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JFLE1BQWxFLEVBQTBFO0FBQ3hFaGIsTUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkcsR0FBaEI7QUFDRCxLQTdCaUIsQ0E2QmhCOzs7QUFHRmpiLElBQUFBLE1BQU0sQ0FBQ21RLGNBQVAsR0FBd0JBLGNBQXhCO0FBQ0FuUSxJQUFBQSxNQUFNLENBQUNrUSxjQUFQLEdBQXdCQSxjQUF4Qjs7QUFFQSxRQUFJbFEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjc04sYUFBZCxJQUErQnhFLFFBQVEsS0FBS3ZGLE1BQU0sQ0FBQ3VGLFFBQXZELEVBQWlFO0FBQy9EdkYsTUFBQUEsTUFBTSxDQUFDZ0ssYUFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBU2tSLE9BQVQsQ0FBaUJ2dEIsQ0FBakIsRUFBb0I7QUFDbEIsUUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSSxDQUFDQSxNQUFNLENBQUNrRixPQUFaLEVBQXFCOztBQUVyQixRQUFJLENBQUNsRixNQUFNLENBQUNnVixVQUFaLEVBQXdCO0FBQ3RCLFVBQUloVixNQUFNLENBQUN2RCxNQUFQLENBQWMwZSxhQUFsQixFQUFpQ3h0QixDQUFDLENBQUNtb0IsY0FBRjs7QUFFakMsVUFBSTlWLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzJlLHdCQUFkLElBQTBDcGIsTUFBTSxDQUFDNk8sU0FBckQsRUFBZ0U7QUFDOURsaEIsUUFBQUEsQ0FBQyxDQUFDOHBCLGVBQUY7QUFDQTlwQixRQUFBQSxDQUFDLENBQUMwdEIsd0JBQUY7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBU0MsUUFBVCxHQUFvQjtBQUNsQixRQUFJdGIsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJbU8sU0FBUyxHQUFHbk8sTUFBTSxDQUFDbU8sU0FBdkI7QUFBQSxRQUNJckosWUFBWSxHQUFHOUUsTUFBTSxDQUFDOEUsWUFEMUI7QUFBQSxRQUVJSSxPQUFPLEdBQUdsRixNQUFNLENBQUNrRixPQUZyQjtBQUdBLFFBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ2RsRixJQUFBQSxNQUFNLENBQUN1TyxpQkFBUCxHQUEyQnZPLE1BQU0sQ0FBQytLLFNBQWxDOztBQUVBLFFBQUkvSyxNQUFNLENBQUNnRSxZQUFQLEVBQUosRUFBMkI7QUFDekIsVUFBSWMsWUFBSixFQUFrQjtBQUNoQjlFLFFBQUFBLE1BQU0sQ0FBQytLLFNBQVAsR0FBbUJvRCxTQUFTLENBQUNrQyxXQUFWLEdBQXdCbEMsU0FBUyxDQUFDbFksV0FBbEMsR0FBZ0RrWSxTQUFTLENBQUN0WCxVQUE3RTtBQUNELE9BRkQsTUFFTztBQUNMbUosUUFBQUEsTUFBTSxDQUFDK0ssU0FBUCxHQUFtQixDQUFDb0QsU0FBUyxDQUFDdFgsVUFBOUI7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMbUosTUFBQUEsTUFBTSxDQUFDK0ssU0FBUCxHQUFtQixDQUFDb0QsU0FBUyxDQUFDeFgsU0FBOUI7QUFDRCxLQWhCaUIsQ0FnQmhCOzs7QUFHRixRQUFJcUosTUFBTSxDQUFDK0ssU0FBUCxLQUFxQixDQUFDLENBQTFCLEVBQTZCL0ssTUFBTSxDQUFDK0ssU0FBUCxHQUFtQixDQUFuQjtBQUM3Qi9LLElBQUFBLE1BQU0sQ0FBQ2dOLGlCQUFQO0FBQ0FoTixJQUFBQSxNQUFNLENBQUNrTSxtQkFBUDtBQUNBLFFBQUlzQyxXQUFKO0FBQ0EsUUFBSTVDLGNBQWMsR0FBRzVMLE1BQU0sQ0FBQzZMLFlBQVAsS0FBd0I3TCxNQUFNLENBQUNvTCxZQUFQLEVBQTdDOztBQUVBLFFBQUlRLGNBQWMsS0FBSyxDQUF2QixFQUEwQjtBQUN4QjRDLE1BQUFBLFdBQVcsR0FBRyxDQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLE1BQUFBLFdBQVcsR0FBRyxDQUFDeE8sTUFBTSxDQUFDK0ssU0FBUCxHQUFtQi9LLE1BQU0sQ0FBQ29MLFlBQVAsRUFBcEIsSUFBNkNRLGNBQTNEO0FBQ0Q7O0FBRUQsUUFBSTRDLFdBQVcsS0FBS3hPLE1BQU0sQ0FBQ3lMLFFBQTNCLEVBQXFDO0FBQ25DekwsTUFBQUEsTUFBTSxDQUFDMEwsY0FBUCxDQUFzQjVHLFlBQVksR0FBRyxDQUFDOUUsTUFBTSxDQUFDK0ssU0FBWCxHQUF1Qi9LLE1BQU0sQ0FBQytLLFNBQWhFO0FBQ0Q7O0FBRUQvSyxJQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksY0FBWixFQUE0QmhCLE1BQU0sQ0FBQytLLFNBQW5DLEVBQThDLEtBQTlDO0FBQ0Q7O0FBRUQsTUFBSXdRLGtCQUFrQixHQUFHLEtBQXpCOztBQUVBLFdBQVNDLGtCQUFULEdBQThCLENBQUU7O0FBRWhDLFdBQVNDLFlBQVQsR0FBd0I7QUFDdEIsUUFBSXpiLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSS9VLFFBQVEsR0FBR0YsV0FBVyxFQUExQjtBQUNBLFFBQUkwUixNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUFBLFFBQ0lpZixXQUFXLEdBQUcxYixNQUFNLENBQUMwYixXQUR6QjtBQUFBLFFBRUkzckIsRUFBRSxHQUFHaVEsTUFBTSxDQUFDalEsRUFGaEI7QUFBQSxRQUdJb2UsU0FBUyxHQUFHbk8sTUFBTSxDQUFDbU8sU0FIdkI7QUFBQSxRQUlJclEsTUFBTSxHQUFHa0MsTUFBTSxDQUFDbEMsTUFKcEI7QUFBQSxRQUtJaEIsT0FBTyxHQUFHa0QsTUFBTSxDQUFDbEQsT0FMckI7QUFNQWtELElBQUFBLE1BQU0sQ0FBQzhULFlBQVAsR0FBc0JBLFlBQVksQ0FBQzNsQixJQUFiLENBQWtCNlIsTUFBbEIsQ0FBdEI7QUFDQUEsSUFBQUEsTUFBTSxDQUFDMlcsV0FBUCxHQUFxQkEsV0FBVyxDQUFDeG9CLElBQVosQ0FBaUI2UixNQUFqQixDQUFyQjtBQUNBQSxJQUFBQSxNQUFNLENBQUNxWSxVQUFQLEdBQW9CQSxVQUFVLENBQUNscUIsSUFBWCxDQUFnQjZSLE1BQWhCLENBQXBCOztBQUVBLFFBQUl2RCxNQUFNLENBQUM0TSxPQUFYLEVBQW9CO0FBQ2xCckosTUFBQUEsTUFBTSxDQUFDc2IsUUFBUCxHQUFrQkEsUUFBUSxDQUFDbnRCLElBQVQsQ0FBYzZSLE1BQWQsQ0FBbEI7QUFDRDs7QUFFREEsSUFBQUEsTUFBTSxDQUFDa2IsT0FBUCxHQUFpQkEsT0FBTyxDQUFDL3NCLElBQVIsQ0FBYTZSLE1BQWIsQ0FBakI7QUFDQSxRQUFJeE0sT0FBTyxHQUFHLENBQUMsQ0FBQ2lKLE1BQU0sQ0FBQythLE1BQXZCLENBbEJzQixDQWtCUzs7QUFFL0IsUUFBSSxDQUFDMWEsT0FBTyxDQUFDRSxLQUFULElBQWtCRixPQUFPLENBQUNJLGFBQTlCLEVBQTZDO0FBQzNDbk4sTUFBQUEsRUFBRSxDQUFDM0csZ0JBQUgsQ0FBb0JzeUIsV0FBVyxDQUFDQyxLQUFoQyxFQUF1QzNiLE1BQU0sQ0FBQzhULFlBQTlDLEVBQTRELEtBQTVEO0FBQ0E3b0IsTUFBQUEsUUFBUSxDQUFDN0IsZ0JBQVQsQ0FBMEJzeUIsV0FBVyxDQUFDRSxJQUF0QyxFQUE0QzViLE1BQU0sQ0FBQzJXLFdBQW5ELEVBQWdFbmpCLE9BQWhFO0FBQ0F2SSxNQUFBQSxRQUFRLENBQUM3QixnQkFBVCxDQUEwQnN5QixXQUFXLENBQUNHLEdBQXRDLEVBQTJDN2IsTUFBTSxDQUFDcVksVUFBbEQsRUFBOEQsS0FBOUQ7QUFDRCxLQUpELE1BSU87QUFDTCxVQUFJdmIsT0FBTyxDQUFDRSxLQUFaLEVBQW1CO0FBQ2pCLFlBQUlPLGVBQWUsR0FBR21lLFdBQVcsQ0FBQ0MsS0FBWixLQUFzQixZQUF0QixJQUFzQzdlLE9BQU8sQ0FBQ1MsZUFBOUMsSUFBaUVkLE1BQU0sQ0FBQ3FmLGdCQUF4RSxHQUEyRjtBQUMvR0MsVUFBQUEsT0FBTyxFQUFFLElBRHNHO0FBRS9Hdm9CLFVBQUFBLE9BQU8sRUFBRTtBQUZzRyxTQUEzRixHQUdsQixLQUhKO0FBSUF6RCxRQUFBQSxFQUFFLENBQUMzRyxnQkFBSCxDQUFvQnN5QixXQUFXLENBQUNDLEtBQWhDLEVBQXVDM2IsTUFBTSxDQUFDOFQsWUFBOUMsRUFBNER2VyxlQUE1RDtBQUNBeE4sUUFBQUEsRUFBRSxDQUFDM0csZ0JBQUgsQ0FBb0JzeUIsV0FBVyxDQUFDRSxJQUFoQyxFQUFzQzViLE1BQU0sQ0FBQzJXLFdBQTdDLEVBQTBEN1osT0FBTyxDQUFDUyxlQUFSLEdBQTBCO0FBQ2xGd2UsVUFBQUEsT0FBTyxFQUFFLEtBRHlFO0FBRWxGdm9CLFVBQUFBLE9BQU8sRUFBRUE7QUFGeUUsU0FBMUIsR0FHdERBLE9BSEo7QUFJQXpELFFBQUFBLEVBQUUsQ0FBQzNHLGdCQUFILENBQW9Cc3lCLFdBQVcsQ0FBQ0csR0FBaEMsRUFBcUM3YixNQUFNLENBQUNxWSxVQUE1QyxFQUF3RDlhLGVBQXhEOztBQUVBLFlBQUltZSxXQUFXLENBQUNNLE1BQWhCLEVBQXdCO0FBQ3RCanNCLFVBQUFBLEVBQUUsQ0FBQzNHLGdCQUFILENBQW9Cc3lCLFdBQVcsQ0FBQ00sTUFBaEMsRUFBd0NoYyxNQUFNLENBQUNxWSxVQUEvQyxFQUEyRDlhLGVBQTNEO0FBQ0Q7O0FBRUQsWUFBSSxDQUFDZ2Usa0JBQUwsRUFBeUI7QUFDdkJ0d0IsVUFBQUEsUUFBUSxDQUFDN0IsZ0JBQVQsQ0FBMEIsWUFBMUIsRUFBd0NveUIsa0JBQXhDO0FBQ0FELFVBQUFBLGtCQUFrQixHQUFHLElBQXJCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJOWUsTUFBTSxDQUFDb1csYUFBUCxJQUF3QixDQUFDL1UsTUFBTSxDQUFDTSxHQUFoQyxJQUF1QyxDQUFDTixNQUFNLENBQUNPLE9BQS9DLElBQTBENUIsTUFBTSxDQUFDb1csYUFBUCxJQUF3QixDQUFDL1YsT0FBTyxDQUFDRSxLQUFqQyxJQUEwQ2MsTUFBTSxDQUFDTSxHQUEvRyxFQUFvSDtBQUNsSHJPLFFBQUFBLEVBQUUsQ0FBQzNHLGdCQUFILENBQW9CLFdBQXBCLEVBQWlDNFcsTUFBTSxDQUFDOFQsWUFBeEMsRUFBc0QsS0FBdEQ7QUFDQTdvQixRQUFBQSxRQUFRLENBQUM3QixnQkFBVCxDQUEwQixXQUExQixFQUF1QzRXLE1BQU0sQ0FBQzJXLFdBQTlDLEVBQTJEbmpCLE9BQTNEO0FBQ0F2SSxRQUFBQSxRQUFRLENBQUM3QixnQkFBVCxDQUEwQixTQUExQixFQUFxQzRXLE1BQU0sQ0FBQ3FZLFVBQTVDLEVBQXdELEtBQXhEO0FBQ0Q7QUFDRixLQXBEcUIsQ0FvRHBCOzs7QUFHRixRQUFJNWIsTUFBTSxDQUFDMGUsYUFBUCxJQUF3QjFlLE1BQU0sQ0FBQzJlLHdCQUFuQyxFQUE2RDtBQUMzRHJyQixNQUFBQSxFQUFFLENBQUMzRyxnQkFBSCxDQUFvQixPQUFwQixFQUE2QjRXLE1BQU0sQ0FBQ2tiLE9BQXBDLEVBQTZDLElBQTdDO0FBQ0Q7O0FBRUQsUUFBSXplLE1BQU0sQ0FBQzRNLE9BQVgsRUFBb0I7QUFDbEI4RSxNQUFBQSxTQUFTLENBQUMva0IsZ0JBQVYsQ0FBMkIsUUFBM0IsRUFBcUM0VyxNQUFNLENBQUNzYixRQUE1QztBQUNELEtBN0RxQixDQTZEcEI7OztBQUdGLFFBQUk3ZSxNQUFNLENBQUN3ZixvQkFBWCxFQUFpQztBQUMvQmpjLE1BQUFBLE1BQU0sQ0FBQzlNLEVBQVAsQ0FBVTRLLE1BQU0sQ0FBQ00sR0FBUCxJQUFjTixNQUFNLENBQUNPLE9BQXJCLEdBQStCLHlDQUEvQixHQUEyRSx1QkFBckYsRUFBOEdzYyxRQUE5RyxFQUF3SCxJQUF4SDtBQUNELEtBRkQsTUFFTztBQUNMM2EsTUFBQUEsTUFBTSxDQUFDOU0sRUFBUCxDQUFVLGdCQUFWLEVBQTRCeW5CLFFBQTVCLEVBQXNDLElBQXRDO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTdUIsWUFBVCxHQUF3QjtBQUN0QixRQUFJbGMsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJL1UsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsUUFBSTBSLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsUUFDSWlmLFdBQVcsR0FBRzFiLE1BQU0sQ0FBQzBiLFdBRHpCO0FBQUEsUUFFSTNyQixFQUFFLEdBQUdpUSxNQUFNLENBQUNqUSxFQUZoQjtBQUFBLFFBR0lvZSxTQUFTLEdBQUduTyxNQUFNLENBQUNtTyxTQUh2QjtBQUFBLFFBSUlyUSxNQUFNLEdBQUdrQyxNQUFNLENBQUNsQyxNQUpwQjtBQUFBLFFBS0loQixPQUFPLEdBQUdrRCxNQUFNLENBQUNsRCxPQUxyQjtBQU1BLFFBQUl0SixPQUFPLEdBQUcsQ0FBQyxDQUFDaUosTUFBTSxDQUFDK2EsTUFBdkIsQ0FUc0IsQ0FTUzs7QUFFL0IsUUFBSSxDQUFDMWEsT0FBTyxDQUFDRSxLQUFULElBQWtCRixPQUFPLENBQUNJLGFBQTlCLEVBQTZDO0FBQzNDbk4sTUFBQUEsRUFBRSxDQUFDMUcsbUJBQUgsQ0FBdUJxeUIsV0FBVyxDQUFDQyxLQUFuQyxFQUEwQzNiLE1BQU0sQ0FBQzhULFlBQWpELEVBQStELEtBQS9EO0FBQ0E3b0IsTUFBQUEsUUFBUSxDQUFDNUIsbUJBQVQsQ0FBNkJxeUIsV0FBVyxDQUFDRSxJQUF6QyxFQUErQzViLE1BQU0sQ0FBQzJXLFdBQXRELEVBQW1FbmpCLE9BQW5FO0FBQ0F2SSxNQUFBQSxRQUFRLENBQUM1QixtQkFBVCxDQUE2QnF5QixXQUFXLENBQUNHLEdBQXpDLEVBQThDN2IsTUFBTSxDQUFDcVksVUFBckQsRUFBaUUsS0FBakU7QUFDRCxLQUpELE1BSU87QUFDTCxVQUFJdmIsT0FBTyxDQUFDRSxLQUFaLEVBQW1CO0FBQ2pCLFlBQUlPLGVBQWUsR0FBR21lLFdBQVcsQ0FBQ0MsS0FBWixLQUFzQixjQUF0QixJQUF3QzdlLE9BQU8sQ0FBQ1MsZUFBaEQsSUFBbUVkLE1BQU0sQ0FBQ3FmLGdCQUExRSxHQUE2RjtBQUNqSEMsVUFBQUEsT0FBTyxFQUFFLElBRHdHO0FBRWpIdm9CLFVBQUFBLE9BQU8sRUFBRTtBQUZ3RyxTQUE3RixHQUdsQixLQUhKO0FBSUF6RCxRQUFBQSxFQUFFLENBQUMxRyxtQkFBSCxDQUF1QnF5QixXQUFXLENBQUNDLEtBQW5DLEVBQTBDM2IsTUFBTSxDQUFDOFQsWUFBakQsRUFBK0R2VyxlQUEvRDtBQUNBeE4sUUFBQUEsRUFBRSxDQUFDMUcsbUJBQUgsQ0FBdUJxeUIsV0FBVyxDQUFDRSxJQUFuQyxFQUF5QzViLE1BQU0sQ0FBQzJXLFdBQWhELEVBQTZEbmpCLE9BQTdEO0FBQ0F6RCxRQUFBQSxFQUFFLENBQUMxRyxtQkFBSCxDQUF1QnF5QixXQUFXLENBQUNHLEdBQW5DLEVBQXdDN2IsTUFBTSxDQUFDcVksVUFBL0MsRUFBMkQ5YSxlQUEzRDs7QUFFQSxZQUFJbWUsV0FBVyxDQUFDTSxNQUFoQixFQUF3QjtBQUN0QmpzQixVQUFBQSxFQUFFLENBQUMxRyxtQkFBSCxDQUF1QnF5QixXQUFXLENBQUNNLE1BQW5DLEVBQTJDaGMsTUFBTSxDQUFDcVksVUFBbEQsRUFBOEQ5YSxlQUE5RDtBQUNEO0FBQ0Y7O0FBRUQsVUFBSWQsTUFBTSxDQUFDb1csYUFBUCxJQUF3QixDQUFDL1UsTUFBTSxDQUFDTSxHQUFoQyxJQUF1QyxDQUFDTixNQUFNLENBQUNPLE9BQS9DLElBQTBENUIsTUFBTSxDQUFDb1csYUFBUCxJQUF3QixDQUFDL1YsT0FBTyxDQUFDRSxLQUFqQyxJQUEwQ2MsTUFBTSxDQUFDTSxHQUEvRyxFQUFvSDtBQUNsSHJPLFFBQUFBLEVBQUUsQ0FBQzFHLG1CQUFILENBQXVCLFdBQXZCLEVBQW9DMlcsTUFBTSxDQUFDOFQsWUFBM0MsRUFBeUQsS0FBekQ7QUFDQTdvQixRQUFBQSxRQUFRLENBQUM1QixtQkFBVCxDQUE2QixXQUE3QixFQUEwQzJXLE1BQU0sQ0FBQzJXLFdBQWpELEVBQThEbmpCLE9BQTlEO0FBQ0F2SSxRQUFBQSxRQUFRLENBQUM1QixtQkFBVCxDQUE2QixTQUE3QixFQUF3QzJXLE1BQU0sQ0FBQ3FZLFVBQS9DLEVBQTJELEtBQTNEO0FBQ0Q7QUFDRixLQW5DcUIsQ0FtQ3BCOzs7QUFHRixRQUFJNWIsTUFBTSxDQUFDMGUsYUFBUCxJQUF3QjFlLE1BQU0sQ0FBQzJlLHdCQUFuQyxFQUE2RDtBQUMzRHJyQixNQUFBQSxFQUFFLENBQUMxRyxtQkFBSCxDQUF1QixPQUF2QixFQUFnQzJXLE1BQU0sQ0FBQ2tiLE9BQXZDLEVBQWdELElBQWhEO0FBQ0Q7O0FBRUQsUUFBSXplLE1BQU0sQ0FBQzRNLE9BQVgsRUFBb0I7QUFDbEI4RSxNQUFBQSxTQUFTLENBQUM5a0IsbUJBQVYsQ0FBOEIsUUFBOUIsRUFBd0MyVyxNQUFNLENBQUNzYixRQUEvQztBQUNELEtBNUNxQixDQTRDcEI7OztBQUdGdGIsSUFBQUEsTUFBTSxDQUFDdkwsR0FBUCxDQUFXcUosTUFBTSxDQUFDTSxHQUFQLElBQWNOLE1BQU0sQ0FBQ08sT0FBckIsR0FBK0IseUNBQS9CLEdBQTJFLHVCQUF0RixFQUErR3NjLFFBQS9HO0FBQ0Q7O0FBRUQsTUFBSXptQixNQUFNLEdBQUc7QUFDWHVuQixJQUFBQSxZQUFZLEVBQUVBLFlBREg7QUFFWFMsSUFBQUEsWUFBWSxFQUFFQTtBQUZILEdBQWI7O0FBS0EsV0FBU3JCLGFBQVQsR0FBeUI7QUFDdkIsUUFBSTdhLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSTBLLFdBQVcsR0FBRzFLLE1BQU0sQ0FBQzBLLFdBQXpCO0FBQUEsUUFDSXRLLFdBQVcsR0FBR0osTUFBTSxDQUFDSSxXQUR6QjtBQUFBLFFBRUkrYixvQkFBb0IsR0FBR25jLE1BQU0sQ0FBQ3lRLFlBRmxDO0FBQUEsUUFHSUEsWUFBWSxHQUFHMEwsb0JBQW9CLEtBQUssS0FBSyxDQUE5QixHQUFrQyxDQUFsQyxHQUFzQ0Esb0JBSHpEO0FBQUEsUUFJSTFmLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BSnBCO0FBQUEsUUFLSTBGLEdBQUcsR0FBR25DLE1BQU0sQ0FBQ21DLEdBTGpCO0FBTUEsUUFBSXlZLFdBQVcsR0FBR25lLE1BQU0sQ0FBQ21lLFdBQXpCO0FBQ0EsUUFBSSxDQUFDQSxXQUFELElBQWdCQSxXQUFXLElBQUloekIsTUFBTSxDQUFDb0IsSUFBUCxDQUFZNHhCLFdBQVosRUFBeUJyekIsTUFBekIsS0FBb0MsQ0FBdkUsRUFBMEUsT0FUbkQsQ0FTMkQ7O0FBRWxGLFFBQUk2MEIsVUFBVSxHQUFHcGMsTUFBTSxDQUFDcWMsYUFBUCxDQUFxQnpCLFdBQXJCLEVBQWtDNWEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNmYsZUFBaEQsRUFBaUV0YyxNQUFNLENBQUNqUSxFQUF4RSxDQUFqQjtBQUNBLFFBQUksQ0FBQ3FzQixVQUFELElBQWVwYyxNQUFNLENBQUN1YyxpQkFBUCxLQUE2QkgsVUFBaEQsRUFBNEQ7QUFDNUQsUUFBSUksb0JBQW9CLEdBQUdKLFVBQVUsSUFBSXhCLFdBQWQsR0FBNEJBLFdBQVcsQ0FBQ3dCLFVBQUQsQ0FBdkMsR0FBc0R6dEIsU0FBakY7O0FBRUEsUUFBSTZ0QixvQkFBSixFQUEwQjtBQUN4QixPQUFDLGVBQUQsRUFBa0IsY0FBbEIsRUFBa0MsZ0JBQWxDLEVBQW9ELG9CQUFwRCxFQUEwRSxpQkFBMUUsRUFBNkZ2ekIsT0FBN0YsQ0FBcUcsVUFBVXd6QixLQUFWLEVBQWlCO0FBQ3BILFlBQUlDLFVBQVUsR0FBR0Ysb0JBQW9CLENBQUNDLEtBQUQsQ0FBckM7QUFDQSxZQUFJLE9BQU9DLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7O0FBRXZDLFlBQUlELEtBQUssS0FBSyxlQUFWLEtBQThCQyxVQUFVLEtBQUssTUFBZixJQUF5QkEsVUFBVSxLQUFLLE1BQXRFLENBQUosRUFBbUY7QUFDakZGLFVBQUFBLG9CQUFvQixDQUFDQyxLQUFELENBQXBCLEdBQThCLE1BQTlCO0FBQ0QsU0FGRCxNQUVPLElBQUlBLEtBQUssS0FBSyxlQUFkLEVBQStCO0FBQ3BDRCxVQUFBQSxvQkFBb0IsQ0FBQ0MsS0FBRCxDQUFwQixHQUE4QnZtQixVQUFVLENBQUN3bUIsVUFBRCxDQUF4QztBQUNELFNBRk0sTUFFQTtBQUNMRixVQUFBQSxvQkFBb0IsQ0FBQ0MsS0FBRCxDQUFwQixHQUE4QnZZLFFBQVEsQ0FBQ3dZLFVBQUQsRUFBYSxFQUFiLENBQXRDO0FBQ0Q7QUFDRixPQVhEO0FBWUQ7O0FBRUQsUUFBSUMsZ0JBQWdCLEdBQUdILG9CQUFvQixJQUFJeGMsTUFBTSxDQUFDNGMsY0FBdEQ7QUFDQSxRQUFJQyxXQUFXLEdBQUdwZ0IsTUFBTSxDQUFDZ0ssZUFBUCxHQUF5QixDQUEzQztBQUNBLFFBQUlxVyxVQUFVLEdBQUdILGdCQUFnQixDQUFDbFcsZUFBakIsR0FBbUMsQ0FBcEQ7QUFDQSxRQUFJc1csVUFBVSxHQUFHdGdCLE1BQU0sQ0FBQ3lJLE9BQXhCOztBQUVBLFFBQUkyWCxXQUFXLElBQUksQ0FBQ0MsVUFBcEIsRUFBZ0M7QUFDOUIzYSxNQUFBQSxHQUFHLENBQUN6USxXQUFKLENBQWdCK0ssTUFBTSxDQUFDdWdCLHNCQUFQLEdBQWdDLFdBQWhDLEdBQThDdmdCLE1BQU0sQ0FBQ3VnQixzQkFBckQsR0FBOEUsaUJBQTlGO0FBQ0FoZCxNQUFBQSxNQUFNLENBQUNpZCxvQkFBUDtBQUNELEtBSEQsTUFHTyxJQUFJLENBQUNKLFdBQUQsSUFBZ0JDLFVBQXBCLEVBQWdDO0FBQ3JDM2EsTUFBQUEsR0FBRyxDQUFDcFIsUUFBSixDQUFhMEwsTUFBTSxDQUFDdWdCLHNCQUFQLEdBQWdDLFVBQTdDOztBQUVBLFVBQUlMLGdCQUFnQixDQUFDN1YsbUJBQWpCLEtBQXlDLFFBQTdDLEVBQXVEO0FBQ3JEM0UsUUFBQUEsR0FBRyxDQUFDcFIsUUFBSixDQUFhMEwsTUFBTSxDQUFDdWdCLHNCQUFQLEdBQWdDLGlCQUE3QztBQUNEOztBQUVEaGQsTUFBQUEsTUFBTSxDQUFDaWQsb0JBQVA7QUFDRDs7QUFFRCxRQUFJQyxnQkFBZ0IsR0FBR1AsZ0JBQWdCLENBQUNyTixTQUFqQixJQUE4QnFOLGdCQUFnQixDQUFDck4sU0FBakIsS0FBK0I3UyxNQUFNLENBQUM2UyxTQUEzRjtBQUNBLFFBQUk2TixXQUFXLEdBQUcxZ0IsTUFBTSxDQUFDa1EsSUFBUCxLQUFnQmdRLGdCQUFnQixDQUFDOVYsYUFBakIsS0FBbUNwSyxNQUFNLENBQUNvSyxhQUExQyxJQUEyRHFXLGdCQUEzRSxDQUFsQjs7QUFFQSxRQUFJQSxnQkFBZ0IsSUFBSTljLFdBQXhCLEVBQXFDO0FBQ25DSixNQUFBQSxNQUFNLENBQUNvZCxlQUFQO0FBQ0Q7O0FBRUQzaEIsSUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDdkQsTUFBUixFQUFnQmtnQixnQkFBaEIsQ0FBTjtBQUNBLFFBQUlVLFNBQVMsR0FBR3JkLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3lJLE9BQTlCO0FBQ0F6SixJQUFBQSxNQUFNLENBQUN1RSxNQUFELEVBQVM7QUFDYnVXLE1BQUFBLGNBQWMsRUFBRXZXLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhaLGNBRGpCO0FBRWJyRyxNQUFBQSxjQUFjLEVBQUVsUSxNQUFNLENBQUN2RCxNQUFQLENBQWN5VCxjQUZqQjtBQUdiQyxNQUFBQSxjQUFjLEVBQUVuUSxNQUFNLENBQUN2RCxNQUFQLENBQWMwVDtBQUhqQixLQUFULENBQU47O0FBTUEsUUFBSTRNLFVBQVUsSUFBSSxDQUFDTSxTQUFuQixFQUE4QjtBQUM1QnJkLE1BQUFBLE1BQU0sQ0FBQ3NkLE9BQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDUCxVQUFELElBQWVNLFNBQW5CLEVBQThCO0FBQ25DcmQsTUFBQUEsTUFBTSxDQUFDdWQsTUFBUDtBQUNEOztBQUVEdmQsSUFBQUEsTUFBTSxDQUFDdWMsaUJBQVAsR0FBMkJILFVBQTNCO0FBQ0FwYyxJQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksbUJBQVosRUFBaUMyYixnQkFBakM7O0FBRUEsUUFBSVEsV0FBVyxJQUFJL2MsV0FBbkIsRUFBZ0M7QUFDOUJKLE1BQUFBLE1BQU0sQ0FBQzBTLFdBQVA7QUFDQTFTLE1BQUFBLE1BQU0sQ0FBQzZSLFVBQVA7QUFDQTdSLE1BQUFBLE1BQU0sQ0FBQ3NFLFlBQVA7QUFDQXRFLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZTlFLFdBQVcsR0FBRytGLFlBQWQsR0FBNkJ6USxNQUFNLENBQUN5USxZQUFuRCxFQUFpRSxDQUFqRSxFQUFvRSxLQUFwRTtBQUNEOztBQUVEelEsSUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFlBQVosRUFBMEIyYixnQkFBMUI7QUFDRDs7QUFFRCxXQUFTTixhQUFULENBQXVCekIsV0FBdkIsRUFBb0M0QyxJQUFwQyxFQUEwQ0MsV0FBMUMsRUFBdUQ7QUFDckQsUUFBSUQsSUFBSSxLQUFLLEtBQUssQ0FBbEIsRUFBcUI7QUFDbkJBLE1BQUFBLElBQUksR0FBRyxRQUFQO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDNUMsV0FBRCxJQUFnQjRDLElBQUksS0FBSyxXQUFULElBQXdCLENBQUNDLFdBQTdDLEVBQTBELE9BQU85dUIsU0FBUDtBQUMxRCxRQUFJeXRCLFVBQVUsR0FBRyxLQUFqQjtBQUNBLFFBQUkzdkIsTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsUUFBSW14QixZQUFZLEdBQUdGLElBQUksS0FBSyxRQUFULEdBQW9CL3dCLE1BQU0sQ0FBQ29wQixVQUEzQixHQUF3QzRILFdBQVcsQ0FBQzNaLFdBQXZFO0FBQ0EsUUFBSTZaLGFBQWEsR0FBR0gsSUFBSSxLQUFLLFFBQVQsR0FBb0Ivd0IsTUFBTSxDQUFDbXhCLFdBQTNCLEdBQXlDSCxXQUFXLENBQUMxWixZQUF6RTtBQUNBLFFBQUk4WixNQUFNLEdBQUdqMkIsTUFBTSxDQUFDb0IsSUFBUCxDQUFZNHhCLFdBQVosRUFBeUJ4cEIsR0FBekIsQ0FBNkIsVUFBVTBzQixLQUFWLEVBQWlCO0FBQ3pELFVBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxDQUFDdnZCLE9BQU4sQ0FBYyxHQUFkLE1BQXVCLENBQXhELEVBQTJEO0FBQ3pELFlBQUl3dkIsUUFBUSxHQUFHN25CLFVBQVUsQ0FBQzRuQixLQUFLLENBQUNFLE1BQU4sQ0FBYSxDQUFiLENBQUQsQ0FBekI7QUFDQSxZQUFJL3VCLEtBQUssR0FBRzB1QixhQUFhLEdBQUdJLFFBQTVCO0FBQ0EsZUFBTztBQUNMOXVCLFVBQUFBLEtBQUssRUFBRUEsS0FERjtBQUVMNnVCLFVBQUFBLEtBQUssRUFBRUE7QUFGRixTQUFQO0FBSUQ7O0FBRUQsYUFBTztBQUNMN3VCLFFBQUFBLEtBQUssRUFBRTZ1QixLQURGO0FBRUxBLFFBQUFBLEtBQUssRUFBRUE7QUFGRixPQUFQO0FBSUQsS0FkWSxDQUFiO0FBZUFELElBQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLFVBQVVqd0IsQ0FBVixFQUFha3dCLENBQWIsRUFBZ0I7QUFDMUIsYUFBT2hhLFFBQVEsQ0FBQ2xXLENBQUMsQ0FBQ2lCLEtBQUgsRUFBVSxFQUFWLENBQVIsR0FBd0JpVixRQUFRLENBQUNnYSxDQUFDLENBQUNqdkIsS0FBSCxFQUFVLEVBQVYsQ0FBdkM7QUFDRCxLQUZEOztBQUlBLFNBQUssSUFBSTNILENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd1MkIsTUFBTSxDQUFDdDJCLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekMsVUFBSTYyQixTQUFTLEdBQUdOLE1BQU0sQ0FBQ3YyQixDQUFELENBQXRCO0FBQUEsVUFDSXcyQixLQUFLLEdBQUdLLFNBQVMsQ0FBQ0wsS0FEdEI7QUFBQSxVQUVJN3VCLEtBQUssR0FBR2t2QixTQUFTLENBQUNsdkIsS0FGdEI7O0FBSUEsVUFBSUEsS0FBSyxJQUFJeXVCLFlBQWIsRUFBMkI7QUFDekJ0QixRQUFBQSxVQUFVLEdBQUcwQixLQUFiO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPMUIsVUFBVSxJQUFJLEtBQXJCO0FBQ0Q7O0FBRUQsTUFBSXhCLFdBQVcsR0FBRztBQUNoQkMsSUFBQUEsYUFBYSxFQUFFQSxhQURDO0FBRWhCd0IsSUFBQUEsYUFBYSxFQUFFQTtBQUZDLEdBQWxCOztBQUtBLFdBQVMrQixjQUFULENBQXdCL2QsT0FBeEIsRUFBaUNnZSxNQUFqQyxFQUF5QztBQUN2QyxRQUFJQyxhQUFhLEdBQUcsRUFBcEI7QUFDQWplLElBQUFBLE9BQU8sQ0FBQ3BYLE9BQVIsQ0FBZ0IsVUFBVXMxQixJQUFWLEVBQWdCO0FBQzlCLFVBQUksUUFBT0EsSUFBUCxNQUFnQixRQUFwQixFQUE4QjtBQUM1QjMyQixRQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVl1MUIsSUFBWixFQUFrQnQxQixPQUFsQixDQUEwQixVQUFVa0ksVUFBVixFQUFzQjtBQUM5QyxjQUFJb3RCLElBQUksQ0FBQ3B0QixVQUFELENBQVIsRUFBc0I7QUFDcEJtdEIsWUFBQUEsYUFBYSxDQUFDcndCLElBQWQsQ0FBbUJvd0IsTUFBTSxHQUFHbHRCLFVBQTVCO0FBQ0Q7QUFDRixTQUpEO0FBS0QsT0FORCxNQU1PLElBQUksT0FBT290QixJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQ25DRCxRQUFBQSxhQUFhLENBQUNyd0IsSUFBZCxDQUFtQm93QixNQUFNLEdBQUdFLElBQTVCO0FBQ0Q7QUFDRixLQVZEO0FBV0EsV0FBT0QsYUFBUDtBQUNEOztBQUVELFdBQVNFLFVBQVQsR0FBc0I7QUFDcEIsUUFBSXhlLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSTdPLFVBQVUsR0FBRzZPLE1BQU0sQ0FBQzdPLFVBQXhCO0FBQUEsUUFDSXNMLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BRHBCO0FBQUEsUUFFSW9JLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzZFLEdBRmpCO0FBQUEsUUFHSTFDLEdBQUcsR0FBR25DLE1BQU0sQ0FBQ21DLEdBSGpCO0FBQUEsUUFJSXJFLE1BQU0sR0FBR2tDLE1BQU0sQ0FBQ2xDLE1BSnBCO0FBQUEsUUFLSWhCLE9BQU8sR0FBR2tELE1BQU0sQ0FBQ2xELE9BTHJCLENBRm9CLENBT1U7O0FBRTlCLFFBQUkyaEIsUUFBUSxHQUFHTCxjQUFjLENBQUMsQ0FBQyxhQUFELEVBQWdCM2hCLE1BQU0sQ0FBQzZTLFNBQXZCLEVBQWtDO0FBQzlELHdCQUFrQnhTLE9BQU8sQ0FBQ0ksYUFBUixJQUF5QixDQUFDSixPQUFPLENBQUNFO0FBRFUsS0FBbEMsRUFFM0I7QUFDRCxtQkFBYVAsTUFBTSxDQUFDd2I7QUFEbkIsS0FGMkIsRUFJM0I7QUFDRCxvQkFBY3hiLE1BQU0sQ0FBQzRPO0FBRHBCLEtBSjJCLEVBTTNCO0FBQ0QsYUFBT3hHO0FBRE4sS0FOMkIsRUFRM0I7QUFDRCxrQkFBWXBJLE1BQU0sQ0FBQ2dLLGVBQVAsR0FBeUI7QUFEcEMsS0FSMkIsRUFVM0I7QUFDRCx5QkFBbUJoSyxNQUFNLENBQUNnSyxlQUFQLEdBQXlCLENBQXpCLElBQThCaEssTUFBTSxDQUFDcUssbUJBQVAsS0FBK0I7QUFEL0UsS0FWMkIsRUFZM0I7QUFDRCxpQkFBV2hKLE1BQU0sQ0FBQ087QUFEakIsS0FaMkIsRUFjM0I7QUFDRCxhQUFPUCxNQUFNLENBQUNNO0FBRGIsS0FkMkIsRUFnQjNCO0FBQ0Qsa0JBQVkzQixNQUFNLENBQUM0TTtBQURsQixLQWhCMkIsQ0FBRCxFQWtCekI1TSxNQUFNLENBQUN1Z0Isc0JBbEJrQixDQUE3QjtBQW1CQTdyQixJQUFBQSxVQUFVLENBQUNsRCxJQUFYLENBQWdCdkYsS0FBaEIsQ0FBc0J5SSxVQUF0QixFQUFrQ3N0QixRQUFsQztBQUNBdGMsSUFBQUEsR0FBRyxDQUFDcFIsUUFBSixDQUFhLEdBQUdyQixNQUFILENBQVV5QixVQUFWLEVBQXNCNkosSUFBdEIsQ0FBMkIsR0FBM0IsQ0FBYjtBQUNBZ0YsSUFBQUEsTUFBTSxDQUFDaWQsb0JBQVA7QUFDRDs7QUFFRCxXQUFTeUIsYUFBVCxHQUF5QjtBQUN2QixRQUFJMWUsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJbUMsR0FBRyxHQUFHbkMsTUFBTSxDQUFDbUMsR0FBakI7QUFBQSxRQUNJaFIsVUFBVSxHQUFHNk8sTUFBTSxDQUFDN08sVUFEeEI7QUFFQWdSLElBQUFBLEdBQUcsQ0FBQ3pRLFdBQUosQ0FBZ0JQLFVBQVUsQ0FBQzZKLElBQVgsQ0FBZ0IsR0FBaEIsQ0FBaEI7QUFDQWdGLElBQUFBLE1BQU0sQ0FBQ2lkLG9CQUFQO0FBQ0Q7O0FBRUQsTUFBSWhzQixPQUFPLEdBQUc7QUFDWnV0QixJQUFBQSxVQUFVLEVBQUVBLFVBREE7QUFFWkUsSUFBQUEsYUFBYSxFQUFFQTtBQUZILEdBQWQ7O0FBS0EsV0FBU0MsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEI3MUIsR0FBNUIsRUFBaUM4MUIsTUFBakMsRUFBeUNDLEtBQXpDLEVBQWdEQyxnQkFBaEQsRUFBa0UzeUIsUUFBbEUsRUFBNEU7QUFDMUUsUUFBSUssTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsUUFBSXl5QixLQUFKOztBQUVBLGFBQVNDLE9BQVQsR0FBbUI7QUFDakIsVUFBSTd5QixRQUFKLEVBQWNBLFFBQVE7QUFDdkI7O0FBRUQsUUFBSTh5QixTQUFTLEdBQUcxdUIsQ0FBQyxDQUFDb3VCLE9BQUQsQ0FBRCxDQUFXM2xCLE1BQVgsQ0FBa0IsU0FBbEIsRUFBNkIsQ0FBN0IsQ0FBaEI7O0FBRUEsUUFBSSxDQUFDaW1CLFNBQUQsS0FBZSxDQUFDTixPQUFPLENBQUNPLFFBQVQsSUFBcUIsQ0FBQ0osZ0JBQXJDLENBQUosRUFBNEQ7QUFDMUQsVUFBSWgyQixHQUFKLEVBQVM7QUFDUGkyQixRQUFBQSxLQUFLLEdBQUcsSUFBSXZ5QixNQUFNLENBQUNaLEtBQVgsRUFBUjtBQUNBbXpCLFFBQUFBLEtBQUssQ0FBQ0ksTUFBTixHQUFlSCxPQUFmO0FBQ0FELFFBQUFBLEtBQUssQ0FBQ0ssT0FBTixHQUFnQkosT0FBaEI7O0FBRUEsWUFBSUgsS0FBSixFQUFXO0FBQ1RFLFVBQUFBLEtBQUssQ0FBQ0YsS0FBTixHQUFjQSxLQUFkO0FBQ0Q7O0FBRUQsWUFBSUQsTUFBSixFQUFZO0FBQ1ZHLFVBQUFBLEtBQUssQ0FBQ0gsTUFBTixHQUFlQSxNQUFmO0FBQ0Q7O0FBRUQsWUFBSTkxQixHQUFKLEVBQVM7QUFDUGkyQixVQUFBQSxLQUFLLENBQUNqMkIsR0FBTixHQUFZQSxHQUFaO0FBQ0Q7QUFDRixPQWhCRCxNQWdCTztBQUNMazJCLFFBQUFBLE9BQU87QUFDUjtBQUNGLEtBcEJELE1Bb0JPO0FBQ0w7QUFDQUEsTUFBQUEsT0FBTztBQUNSO0FBQ0Y7O0FBRUQsV0FBU0ssYUFBVCxHQUF5QjtBQUN2QixRQUFJdGYsTUFBTSxHQUFHLElBQWI7QUFDQUEsSUFBQUEsTUFBTSxDQUFDdWYsWUFBUCxHQUFzQnZmLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVzlJLElBQVgsQ0FBZ0IsS0FBaEIsQ0FBdEI7O0FBRUEsYUFBUzRsQixPQUFULEdBQW1CO0FBQ2pCLFVBQUksT0FBT2pmLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sS0FBSyxJQUE1QyxJQUFvRCxDQUFDQSxNQUFyRCxJQUErREEsTUFBTSxDQUFDRyxTQUExRSxFQUFxRjtBQUNyRixVQUFJSCxNQUFNLENBQUN3ZixZQUFQLEtBQXdCN3dCLFNBQTVCLEVBQXVDcVIsTUFBTSxDQUFDd2YsWUFBUCxJQUF1QixDQUF2Qjs7QUFFdkMsVUFBSXhmLE1BQU0sQ0FBQ3dmLFlBQVAsS0FBd0J4ZixNQUFNLENBQUN1ZixZQUFQLENBQW9CaDRCLE1BQWhELEVBQXdEO0FBQ3RELFlBQUl5WSxNQUFNLENBQUN2RCxNQUFQLENBQWNnakIsbUJBQWxCLEVBQXVDemYsTUFBTSxDQUFDNk4sTUFBUDtBQUN2QzdOLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxhQUFaO0FBQ0Q7QUFDRjs7QUFFRCxTQUFLLElBQUkxWixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMFksTUFBTSxDQUFDdWYsWUFBUCxDQUFvQmg0QixNQUF4QyxFQUFnREQsQ0FBQyxJQUFJLENBQXJELEVBQXdEO0FBQ3RELFVBQUlzM0IsT0FBTyxHQUFHNWUsTUFBTSxDQUFDdWYsWUFBUCxDQUFvQmo0QixDQUFwQixDQUFkO0FBQ0EwWSxNQUFBQSxNQUFNLENBQUMyZSxTQUFQLENBQWlCQyxPQUFqQixFQUEwQkEsT0FBTyxDQUFDYyxVQUFSLElBQXNCZCxPQUFPLENBQUNsc0IsWUFBUixDQUFxQixLQUFyQixDQUFoRCxFQUE2RWtzQixPQUFPLENBQUNDLE1BQVIsSUFBa0JELE9BQU8sQ0FBQ2xzQixZQUFSLENBQXFCLFFBQXJCLENBQS9GLEVBQStIa3NCLE9BQU8sQ0FBQ0UsS0FBUixJQUFpQkYsT0FBTyxDQUFDbHNCLFlBQVIsQ0FBcUIsT0FBckIsQ0FBaEosRUFBK0ssSUFBL0ssRUFBcUx1c0IsT0FBckw7QUFDRDtBQUNGOztBQUVELE1BQUlVLE1BQU0sR0FBRztBQUNYaEIsSUFBQUEsU0FBUyxFQUFFQSxTQURBO0FBRVhXLElBQUFBLGFBQWEsRUFBRUE7QUFGSixHQUFiOztBQUtBLFdBQVN0VixhQUFULEdBQXlCO0FBQ3ZCLFFBQUloSyxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUNBLFFBQUltakIsU0FBUyxHQUFHNWYsTUFBTSxDQUFDOFMsUUFBdkI7QUFDQSxRQUFJK00saUJBQWlCLEdBQUc3ZixNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUFkLEdBQXVCLENBQXZCLElBQTRCa1YsTUFBTSxDQUFDa0osa0JBQVAsR0FBNEJsSixNQUFNLENBQUN1SixZQUFQLElBQXVCaEcsTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBZCxHQUF1QixDQUE5QyxDQUE1QixHQUErRXlZLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYyxDQUFkLEVBQWlCblAsV0FBakIsR0FBK0IrSixNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUFoTDs7QUFFQSxRQUFJa1YsTUFBTSxDQUFDa0osa0JBQVAsSUFBNkJsSixNQUFNLENBQUNvSixpQkFBcEMsSUFBeURnYSxpQkFBN0QsRUFBZ0Y7QUFDOUU3ZixNQUFBQSxNQUFNLENBQUM4UyxRQUFQLEdBQWtCK00saUJBQWlCLElBQUk3ZixNQUFNLENBQUNxRSxJQUE5QztBQUNELEtBRkQsTUFFTztBQUNMckUsTUFBQUEsTUFBTSxDQUFDOFMsUUFBUCxHQUFrQjlTLE1BQU0sQ0FBQ3VGLFFBQVAsQ0FBZ0JoZSxNQUFoQixLQUEyQixDQUE3QztBQUNEOztBQUVEeVksSUFBQUEsTUFBTSxDQUFDa1EsY0FBUCxHQUF3QixDQUFDbFEsTUFBTSxDQUFDOFMsUUFBaEM7QUFDQTlTLElBQUFBLE1BQU0sQ0FBQ21RLGNBQVAsR0FBd0IsQ0FBQ25RLE1BQU0sQ0FBQzhTLFFBQWhDLENBYnVCLENBYW1COztBQUUxQyxRQUFJOE0sU0FBUyxLQUFLNWYsTUFBTSxDQUFDOFMsUUFBekIsRUFBbUM5UyxNQUFNLENBQUNnQixJQUFQLENBQVloQixNQUFNLENBQUM4UyxRQUFQLEdBQWtCLE1BQWxCLEdBQTJCLFFBQXZDOztBQUVuQyxRQUFJOE0sU0FBUyxJQUFJQSxTQUFTLEtBQUs1ZixNQUFNLENBQUM4UyxRQUF0QyxFQUFnRDtBQUM5QzlTLE1BQUFBLE1BQU0sQ0FBQytMLEtBQVAsR0FBZSxLQUFmO0FBQ0EsVUFBSS9MLE1BQU0sQ0FBQ3dhLFVBQVgsRUFBdUJ4YSxNQUFNLENBQUN3YSxVQUFQLENBQWtCM00sTUFBbEI7QUFDeEI7QUFDRjs7QUFFRCxNQUFJaVMsZUFBZSxHQUFHO0FBQ3BCOVYsSUFBQUEsYUFBYSxFQUFFQTtBQURLLEdBQXRCO0FBSUEsTUFBSStWLFFBQVEsR0FBRztBQUNiN2UsSUFBQUEsSUFBSSxFQUFFLElBRE87QUFFYm9PLElBQUFBLFNBQVMsRUFBRSxZQUZFO0FBR2I2RSxJQUFBQSxpQkFBaUIsRUFBRSxXQUhOO0FBSWJyRSxJQUFBQSxZQUFZLEVBQUUsQ0FKRDtBQUtiekYsSUFBQUEsS0FBSyxFQUFFLEdBTE07QUFNYmhCLElBQUFBLE9BQU8sRUFBRSxLQU5JO0FBT2I0UyxJQUFBQSxvQkFBb0IsRUFBRSxJQVBUO0FBUWI5YSxJQUFBQSxjQUFjLEVBQUUsS0FSSDtBQVNicVcsSUFBQUEsTUFBTSxFQUFFLEtBVEs7QUFVYjlhLElBQUFBLGNBQWMsRUFBRSxLQVZIO0FBV2J3SSxJQUFBQSxPQUFPLEVBQUUsSUFYSTtBQVliO0FBQ0EzRyxJQUFBQSxLQUFLLEVBQUUsSUFiTTtBQWNiRSxJQUFBQSxNQUFNLEVBQUUsSUFkSztBQWViO0FBQ0FxUSxJQUFBQSw4QkFBOEIsRUFBRSxLQWhCbkI7QUFpQmI7QUFDQTFqQixJQUFBQSxTQUFTLEVBQUUsSUFsQkU7QUFtQmI0MEIsSUFBQUEsR0FBRyxFQUFFLElBbkJRO0FBb0JiO0FBQ0F2SyxJQUFBQSxrQkFBa0IsRUFBRSxLQXJCUDtBQXNCYkUsSUFBQUEsa0JBQWtCLEVBQUUsRUF0QlA7QUF1QmI7QUFDQXNDLElBQUFBLFFBQVEsRUFBRSxLQXhCRztBQXlCYlMsSUFBQUEsZ0JBQWdCLEVBQUUsSUF6Qkw7QUEwQmJTLElBQUFBLHFCQUFxQixFQUFFLENBMUJWO0FBMkJiUSxJQUFBQSxzQkFBc0IsRUFBRSxJQTNCWDtBQTRCYkYsSUFBQUEsMkJBQTJCLEVBQUUsQ0E1QmhCO0FBNkJiUixJQUFBQSw2QkFBNkIsRUFBRSxDQTdCbEI7QUE4QmJXLElBQUFBLGNBQWMsRUFBRSxLQTlCSDtBQStCYlosSUFBQUEsdUJBQXVCLEVBQUUsSUEvQlo7QUFnQ2I7QUFDQTNOLElBQUFBLFVBQVUsRUFBRSxLQWpDQztBQWtDYjtBQUNBMUMsSUFBQUEsY0FBYyxFQUFFLEtBbkNIO0FBb0NiO0FBQ0FvRixJQUFBQSxnQkFBZ0IsRUFBRSxLQXJDTDtBQXNDYjtBQUNBckYsSUFBQUEsTUFBTSxFQUFFLE9BdkNLO0FBd0NiO0FBQ0E7QUFDQWtTLElBQUFBLFdBQVcsRUFBRWpzQixTQTFDQTtBQTJDYjJ0QixJQUFBQSxlQUFlLEVBQUUsUUEzQ0o7QUE0Q2I7QUFDQXRXLElBQUFBLFlBQVksRUFBRSxDQTdDRDtBQThDYmEsSUFBQUEsYUFBYSxFQUFFLENBOUNGO0FBK0NiSixJQUFBQSxlQUFlLEVBQUUsQ0EvQ0o7QUFnRGJLLElBQUFBLG1CQUFtQixFQUFFLFFBaERSO0FBaURiUyxJQUFBQSxjQUFjLEVBQUUsQ0FqREg7QUFrRGJpQixJQUFBQSxrQkFBa0IsRUFBRSxDQWxEUDtBQW1EYkYsSUFBQUEsY0FBYyxFQUFFLEtBbkRIO0FBb0RiZ0IsSUFBQUEsb0JBQW9CLEVBQUUsS0FwRFQ7QUFxRGIzRCxJQUFBQSxrQkFBa0IsRUFBRSxDQXJEUDtBQXNEYjtBQUNBRSxJQUFBQSxpQkFBaUIsRUFBRSxDQXZETjtBQXdEYjtBQUNBd0gsSUFBQUEsbUJBQW1CLEVBQUUsSUF6RFI7QUEwRGIxRCxJQUFBQSx3QkFBd0IsRUFBRSxLQTFEYjtBQTJEYjtBQUNBSSxJQUFBQSxhQUFhLEVBQUUsS0E1REY7QUE2RGI7QUFDQS9CLElBQUFBLFlBQVksRUFBRSxLQTlERDtBQStEYjtBQUNBNFAsSUFBQUEsVUFBVSxFQUFFLENBaEVDO0FBaUViUixJQUFBQSxVQUFVLEVBQUUsRUFqRUM7QUFrRWJ2RSxJQUFBQSxhQUFhLEVBQUUsSUFsRUY7QUFtRWJ5SCxJQUFBQSxXQUFXLEVBQUUsSUFuRUE7QUFvRWJGLElBQUFBLFVBQVUsRUFBRSxJQXBFQztBQXFFYkMsSUFBQUEsZUFBZSxFQUFFLEdBckVKO0FBc0ViTixJQUFBQSxZQUFZLEVBQUUsR0F0RUQ7QUF1RWIvQixJQUFBQSxZQUFZLEVBQUUsSUF2RUQ7QUF3RWJ6QixJQUFBQSxjQUFjLEVBQUUsSUF4RUg7QUF5RWJoRixJQUFBQSxTQUFTLEVBQUUsQ0F6RUU7QUEwRWJnRyxJQUFBQSx3QkFBd0IsRUFBRSxLQTFFYjtBQTJFYmYsSUFBQUEsd0JBQXdCLEVBQUUsSUEzRWI7QUE0RWJDLElBQUFBLDZCQUE2QixFQUFFLEtBNUVsQjtBQTZFYk0sSUFBQUEsbUJBQW1CLEVBQUUsS0E3RVI7QUE4RWI7QUFDQWtKLElBQUFBLGlCQUFpQixFQUFFLElBL0VOO0FBZ0ZiO0FBQ0FsSSxJQUFBQSxVQUFVLEVBQUUsSUFqRkM7QUFrRmJELElBQUFBLGVBQWUsRUFBRSxJQWxGSjtBQW1GYjtBQUNBN04sSUFBQUEsbUJBQW1CLEVBQUUsS0FwRlI7QUFxRmJDLElBQUFBLHFCQUFxQixFQUFFLEtBckZWO0FBc0ZiO0FBQ0ErSSxJQUFBQSxVQUFVLEVBQUUsS0F2RkM7QUF3RmI7QUFDQWtJLElBQUFBLGFBQWEsRUFBRSxJQXpGRjtBQTBGYkMsSUFBQUEsd0JBQXdCLEVBQUUsSUExRmI7QUEyRmJ4TixJQUFBQSxtQkFBbUIsRUFBRSxLQTNGUjtBQTRGYjtBQUNBMFIsSUFBQUEsYUFBYSxFQUFFLElBN0ZGO0FBOEZiRyxJQUFBQSxtQkFBbUIsRUFBRSxJQTlGUjtBQStGYjtBQUNBOVMsSUFBQUEsSUFBSSxFQUFFLEtBaEdPO0FBaUdidUYsSUFBQUEsb0JBQW9CLEVBQUUsQ0FqR1Q7QUFrR2J6QixJQUFBQSxZQUFZLEVBQUUsSUFsR0Q7QUFtR2JxQixJQUFBQSxzQkFBc0IsRUFBRSxLQW5HWDtBQW9HYmxCLElBQUFBLGlCQUFpQixFQUFFLElBcEdOO0FBcUdiO0FBQ0FULElBQUFBLGNBQWMsRUFBRSxJQXRHSDtBQXVHYkQsSUFBQUEsY0FBYyxFQUFFLElBdkdIO0FBd0diK0UsSUFBQUEsWUFBWSxFQUFFLElBeEdEO0FBeUdiO0FBQ0FILElBQUFBLFNBQVMsRUFBRSxJQTFHRTtBQTJHYkgsSUFBQUEsY0FBYyxFQUFFLG1CQTNHSDtBQTRHYkksSUFBQUEsaUJBQWlCLEVBQUUsSUE1R047QUE2R2I7QUFDQStHLElBQUFBLGdCQUFnQixFQUFFLElBOUdMO0FBK0diO0FBQ0FrQixJQUFBQSxzQkFBc0IsRUFBRSxtQkFoSFg7QUFpSGI7QUFDQTNYLElBQUFBLFVBQVUsRUFBRSxjQWxIQztBQW1IYjRNLElBQUFBLGVBQWUsRUFBRSw4QkFuSEo7QUFvSGI3RixJQUFBQSxnQkFBZ0IsRUFBRSxxQkFwSEw7QUFxSGJHLElBQUFBLHlCQUF5QixFQUFFLCtCQXJIZDtBQXNIYnRCLElBQUFBLGlCQUFpQixFQUFFLHNCQXRITjtBQXVIYjJCLElBQUFBLG1CQUFtQixFQUFFLHdCQXZIUjtBQXdIYlAsSUFBQUEsY0FBYyxFQUFFLG1CQXhISDtBQXlIYkcsSUFBQUEsdUJBQXVCLEVBQUUsNkJBekhaO0FBMEhiRixJQUFBQSxjQUFjLEVBQUUsbUJBMUhIO0FBMkhiRyxJQUFBQSx1QkFBdUIsRUFBRSw2QkEzSFo7QUE0SGJ5VCxJQUFBQSxZQUFZLEVBQUUsZ0JBNUhEO0FBNkhiO0FBQ0EzUyxJQUFBQSxrQkFBa0IsRUFBRSxJQTlIUDtBQStIYjtBQUNBNFMsSUFBQUEsWUFBWSxFQUFFO0FBaElELEdBQWY7QUFtSUEsTUFBSUMsVUFBVSxHQUFHO0FBQ2Y1ZCxJQUFBQSxPQUFPLEVBQUVBLE9BRE07QUFFZlMsSUFBQUEsYUFBYSxFQUFFQSxhQUZBO0FBR2Y0SyxJQUFBQSxNQUFNLEVBQUVBLE1BSE87QUFJZjlDLElBQUFBLFNBQVMsRUFBRUEsU0FKSTtBQUtmbFIsSUFBQUEsVUFBVSxFQUFFQSxVQUxHO0FBTWZzTixJQUFBQSxLQUFLLEVBQUVBLEtBTlE7QUFPZndGLElBQUFBLElBQUksRUFBRUEsSUFQUztBQVFmc0csSUFBQUEsVUFBVSxFQUFFQSxVQVJHO0FBU2ZZLElBQUFBLFlBQVksRUFBRUEsWUFUQztBQVVmM2YsSUFBQUEsTUFBTSxFQUFFQSxNQVZPO0FBV2YwbUIsSUFBQUEsV0FBVyxFQUFFQSxXQVhFO0FBWWY1USxJQUFBQSxhQUFhLEVBQUU4VixlQVpBO0FBYWY3dUIsSUFBQUEsT0FBTyxFQUFFQSxPQWJNO0FBY2YwdUIsSUFBQUEsTUFBTSxFQUFFQTtBQWRPLEdBQWpCO0FBZ0JBLE1BQUlVLGdCQUFnQixHQUFHLEVBQXZCOztBQUVBLE1BQUluNUIsTUFBTSxHQUFHLGFBQWEsWUFBWTtBQUNwQyxhQUFTQSxNQUFULEdBQWtCO0FBQ2hCLFVBQUk2SSxFQUFKO0FBQ0EsVUFBSTBNLE1BQUo7O0FBRUEsV0FBSyxJQUFJekwsSUFBSSxHQUFHMUksU0FBUyxDQUFDZixNQUFyQixFQUE2QnVHLElBQUksR0FBRyxJQUFJNkIsS0FBSixDQUFVcUIsSUFBVixDQUFwQyxFQUFxREUsSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdGLElBQTNFLEVBQWlGRSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGcEQsUUFBQUEsSUFBSSxDQUFDb0QsSUFBRCxDQUFKLEdBQWE1SSxTQUFTLENBQUM0SSxJQUFELENBQXRCO0FBQ0Q7O0FBRUQsVUFBSXBELElBQUksQ0FBQ3ZHLE1BQUwsS0FBZ0IsQ0FBaEIsSUFBcUJ1RyxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFqRixXQUE3QixJQUE0Q2pCLE1BQU0sQ0FBQ08sU0FBUCxDQUFpQnVGLFFBQWpCLENBQTBCakYsSUFBMUIsQ0FBK0JxRixJQUFJLENBQUMsQ0FBRCxDQUFuQyxFQUF3QzBOLEtBQXhDLENBQThDLENBQTlDLEVBQWlELENBQUMsQ0FBbEQsTUFBeUQsUUFBekcsRUFBbUg7QUFDakhpQixRQUFBQSxNQUFNLEdBQUczTyxJQUFJLENBQUMsQ0FBRCxDQUFiO0FBQ0QsT0FGRCxNQUVPO0FBQ0xpQyxRQUFBQSxFQUFFLEdBQUdqQyxJQUFJLENBQUMsQ0FBRCxDQUFUO0FBQ0EyTyxRQUFBQSxNQUFNLEdBQUczTyxJQUFJLENBQUMsQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDMk8sTUFBTCxFQUFhQSxNQUFNLEdBQUcsRUFBVDtBQUNiQSxNQUFBQSxNQUFNLEdBQUdoQixNQUFNLENBQUMsRUFBRCxFQUFLZ0IsTUFBTCxDQUFmO0FBQ0EsVUFBSTFNLEVBQUUsSUFBSSxDQUFDME0sTUFBTSxDQUFDMU0sRUFBbEIsRUFBc0IwTSxNQUFNLENBQUMxTSxFQUFQLEdBQVlBLEVBQVo7O0FBRXRCLFVBQUkwTSxNQUFNLENBQUMxTSxFQUFQLElBQWFTLENBQUMsQ0FBQ2lNLE1BQU0sQ0FBQzFNLEVBQVIsQ0FBRCxDQUFheEksTUFBYixHQUFzQixDQUF2QyxFQUEwQztBQUN4QyxZQUFJKzRCLE9BQU8sR0FBRyxFQUFkO0FBQ0E5dkIsUUFBQUEsQ0FBQyxDQUFDaU0sTUFBTSxDQUFDMU0sRUFBUixDQUFELENBQWFvSCxJQUFiLENBQWtCLFVBQVVzbUIsV0FBVixFQUF1QjtBQUN2QyxjQUFJOEMsU0FBUyxHQUFHOWtCLE1BQU0sQ0FBQyxFQUFELEVBQUtnQixNQUFMLEVBQWE7QUFDakMxTSxZQUFBQSxFQUFFLEVBQUUwdEI7QUFENkIsV0FBYixDQUF0QjtBQUdBNkMsVUFBQUEsT0FBTyxDQUFDcnlCLElBQVIsQ0FBYSxJQUFJL0csTUFBSixDQUFXcTVCLFNBQVgsQ0FBYjtBQUNELFNBTEQ7QUFNQSxlQUFPRCxPQUFQO0FBQ0QsT0E1QmUsQ0E0QmQ7OztBQUdGLFVBQUl0Z0IsTUFBTSxHQUFHLElBQWI7QUFDQUEsTUFBQUEsTUFBTSxDQUFDN0QsVUFBUCxHQUFvQixJQUFwQjtBQUNBNkQsTUFBQUEsTUFBTSxDQUFDbEQsT0FBUCxHQUFpQmUsVUFBVSxFQUEzQjtBQUNBbUMsTUFBQUEsTUFBTSxDQUFDbEMsTUFBUCxHQUFnQm9CLFNBQVMsQ0FBQztBQUN4QjlULFFBQUFBLFNBQVMsRUFBRXFSLE1BQU0sQ0FBQ3JSO0FBRE0sT0FBRCxDQUF6QjtBQUdBNFUsTUFBQUEsTUFBTSxDQUFDWixPQUFQLEdBQWlCTyxVQUFVLEVBQTNCO0FBQ0FLLE1BQUFBLE1BQU0sQ0FBQ29ELGVBQVAsR0FBeUIsRUFBekI7QUFDQXBELE1BQUFBLE1BQU0sQ0FBQ3lELGtCQUFQLEdBQTRCLEVBQTVCOztBQUVBLFVBQUksT0FBT3pELE1BQU0sQ0FBQzJDLE9BQWQsS0FBMEIsV0FBOUIsRUFBMkM7QUFDekMzQyxRQUFBQSxNQUFNLENBQUMyQyxPQUFQLEdBQWlCLEVBQWpCO0FBQ0Q7O0FBRUQvYSxNQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlnWCxNQUFNLENBQUMyQyxPQUFuQixFQUE0QjFaLE9BQTVCLENBQW9DLFVBQVUyWixVQUFWLEVBQXNCO0FBQ3hELFlBQUkvYixNQUFNLEdBQUdtWixNQUFNLENBQUMyQyxPQUFQLENBQWVDLFVBQWYsQ0FBYjs7QUFFQSxZQUFJL2IsTUFBTSxDQUFDNFYsTUFBWCxFQUFtQjtBQUNqQixjQUFJK2pCLGVBQWUsR0FBRzU0QixNQUFNLENBQUNvQixJQUFQLENBQVluQyxNQUFNLENBQUM0VixNQUFuQixFQUEyQixDQUEzQixDQUF0QjtBQUNBLGNBQUlzRyxZQUFZLEdBQUdsYyxNQUFNLENBQUM0VixNQUFQLENBQWMrakIsZUFBZCxDQUFuQjtBQUNBLGNBQUksUUFBT3pkLFlBQVAsTUFBd0IsUUFBeEIsSUFBb0NBLFlBQVksS0FBSyxJQUF6RCxFQUErRDs7QUFFL0QsY0FBSSxDQUFDLFlBQUQsRUFBZSxZQUFmLEVBQTZCLFdBQTdCLEVBQTBDeFUsT0FBMUMsQ0FBa0RpeUIsZUFBbEQsS0FBc0UsQ0FBdEUsSUFBMkUvakIsTUFBTSxDQUFDK2pCLGVBQUQsQ0FBTixLQUE0QixJQUEzRyxFQUFpSDtBQUMvRy9qQixZQUFBQSxNQUFNLENBQUMrakIsZUFBRCxDQUFOLEdBQTBCO0FBQ3hCNWpCLGNBQUFBLElBQUksRUFBRTtBQURrQixhQUExQjtBQUdEOztBQUVELGNBQUksRUFBRTRqQixlQUFlLElBQUkvakIsTUFBbkIsSUFBNkIsYUFBYXNHLFlBQTVDLENBQUosRUFBK0Q7O0FBRS9ELGNBQUl0RyxNQUFNLENBQUMrakIsZUFBRCxDQUFOLEtBQTRCLElBQWhDLEVBQXNDO0FBQ3BDL2pCLFlBQUFBLE1BQU0sQ0FBQytqQixlQUFELENBQU4sR0FBMEI7QUFDeEJ0YixjQUFBQSxPQUFPLEVBQUU7QUFEZSxhQUExQjtBQUdEOztBQUVELGNBQUksUUFBT3pJLE1BQU0sQ0FBQytqQixlQUFELENBQWIsTUFBbUMsUUFBbkMsSUFBK0MsRUFBRSxhQUFhL2pCLE1BQU0sQ0FBQytqQixlQUFELENBQXJCLENBQW5ELEVBQTRGO0FBQzFGL2pCLFlBQUFBLE1BQU0sQ0FBQytqQixlQUFELENBQU4sQ0FBd0J0YixPQUF4QixHQUFrQyxJQUFsQztBQUNEOztBQUVELGNBQUksQ0FBQ3pJLE1BQU0sQ0FBQytqQixlQUFELENBQVgsRUFBOEIvakIsTUFBTSxDQUFDK2pCLGVBQUQsQ0FBTixHQUEwQjtBQUN0RHRiLFlBQUFBLE9BQU8sRUFBRTtBQUQ2QyxXQUExQjtBQUcvQjtBQUNGLE9BOUJELEVBN0NnQixDQTJFWjs7QUFFSixVQUFJdWIsWUFBWSxHQUFHaGxCLE1BQU0sQ0FBQyxFQUFELEVBQUtza0IsUUFBTCxDQUF6QjtBQUNBL2YsTUFBQUEsTUFBTSxDQUFDeUMsU0FBUCxDQUFpQmdlLFlBQWpCLEVBOUVnQixDQThFZ0I7O0FBRWhDemdCLE1BQUFBLE1BQU0sQ0FBQ3ZELE1BQVAsR0FBZ0JoQixNQUFNLENBQUMsRUFBRCxFQUFLZ2xCLFlBQUwsRUFBbUJKLGdCQUFuQixFQUFxQzVqQixNQUFyQyxDQUF0QjtBQUNBdUQsTUFBQUEsTUFBTSxDQUFDNGMsY0FBUCxHQUF3Qm5oQixNQUFNLENBQUMsRUFBRCxFQUFLdUUsTUFBTSxDQUFDdkQsTUFBWixDQUE5QjtBQUNBdUQsTUFBQUEsTUFBTSxDQUFDMGdCLFlBQVAsR0FBc0JqbEIsTUFBTSxDQUFDLEVBQUQsRUFBS2dCLE1BQUwsQ0FBNUIsQ0FsRmdCLENBa0YwQjs7QUFFMUMsVUFBSXVELE1BQU0sQ0FBQ3ZELE1BQVAsSUFBaUJ1RCxNQUFNLENBQUN2RCxNQUFQLENBQWN2SixFQUFuQyxFQUF1QztBQUNyQ3RMLFFBQUFBLE1BQU0sQ0FBQ29CLElBQVAsQ0FBWWdYLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3ZKLEVBQTFCLEVBQThCakssT0FBOUIsQ0FBc0MsVUFBVTAzQixTQUFWLEVBQXFCO0FBQ3pEM2dCLFVBQUFBLE1BQU0sQ0FBQzlNLEVBQVAsQ0FBVXl0QixTQUFWLEVBQXFCM2dCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3ZKLEVBQWQsQ0FBaUJ5dEIsU0FBakIsQ0FBckI7QUFDRCxTQUZEO0FBR0Q7O0FBRUQsVUFBSTNnQixNQUFNLENBQUN2RCxNQUFQLElBQWlCdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK0csS0FBbkMsRUFBMEM7QUFDeEN4RCxRQUFBQSxNQUFNLENBQUN3RCxLQUFQLENBQWF4RCxNQUFNLENBQUN2RCxNQUFQLENBQWMrRyxLQUEzQjtBQUNELE9BNUZlLENBNEZkOzs7QUFHRnhELE1BQUFBLE1BQU0sQ0FBQ3hQLENBQVAsR0FBV0EsQ0FBWCxDQS9GZ0IsQ0ErRkY7O0FBRWRpTCxNQUFBQSxNQUFNLENBQUN1RSxNQUFELEVBQVM7QUFDYmtGLFFBQUFBLE9BQU8sRUFBRWxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3lJLE9BRFY7QUFFYm5WLFFBQUFBLEVBQUUsRUFBRUEsRUFGUztBQUdiO0FBQ0FvQixRQUFBQSxVQUFVLEVBQUUsRUFKQztBQUtiO0FBQ0FpVSxRQUFBQSxNQUFNLEVBQUU1VSxDQUFDLEVBTkk7QUFPYmdWLFFBQUFBLFVBQVUsRUFBRSxFQVBDO0FBUWJELFFBQUFBLFFBQVEsRUFBRSxFQVJHO0FBU2JFLFFBQUFBLGVBQWUsRUFBRSxFQVRKO0FBVWI7QUFDQXpCLFFBQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULEdBQXdCO0FBQ3BDLGlCQUFPaEUsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNlMsU0FBZCxLQUE0QixZQUFuQztBQUNELFNBYlk7QUFjYnJMLFFBQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULEdBQXNCO0FBQ2hDLGlCQUFPakUsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNlMsU0FBZCxLQUE0QixVQUFuQztBQUNELFNBaEJZO0FBaUJiO0FBQ0E1RSxRQUFBQSxXQUFXLEVBQUUsQ0FsQkE7QUFtQmJ5QixRQUFBQSxTQUFTLEVBQUUsQ0FuQkU7QUFvQmI7QUFDQUwsUUFBQUEsV0FBVyxFQUFFLElBckJBO0FBc0JiQyxRQUFBQSxLQUFLLEVBQUUsS0F0Qk07QUF1QmI7QUFDQWhCLFFBQUFBLFNBQVMsRUFBRSxDQXhCRTtBQXlCYndELFFBQUFBLGlCQUFpQixFQUFFLENBekJOO0FBMEJiOUMsUUFBQUEsUUFBUSxFQUFFLENBMUJHO0FBMkJic04sUUFBQUEsUUFBUSxFQUFFLENBM0JHO0FBNEJibEssUUFBQUEsU0FBUyxFQUFFLEtBNUJFO0FBNkJiO0FBQ0FxQixRQUFBQSxjQUFjLEVBQUVsUSxNQUFNLENBQUN2RCxNQUFQLENBQWN5VCxjQTlCakI7QUErQmJDLFFBQUFBLGNBQWMsRUFBRW5RLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzBULGNBL0JqQjtBQWdDYjtBQUNBdUwsUUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsR0FBdUI7QUFDbEMsY0FBSTFlLEtBQUssR0FBRyxDQUFDLFlBQUQsRUFBZSxXQUFmLEVBQTRCLFVBQTVCLEVBQXdDLGFBQXhDLENBQVo7QUFDQSxjQUFJNGpCLE9BQU8sR0FBRyxDQUFDLFdBQUQsRUFBYyxXQUFkLEVBQTJCLFNBQTNCLENBQWQ7O0FBRUEsY0FBSTVnQixNQUFNLENBQUNsRCxPQUFQLENBQWVJLGFBQW5CLEVBQWtDO0FBQ2hDMGpCLFlBQUFBLE9BQU8sR0FBRyxDQUFDLGFBQUQsRUFBZ0IsYUFBaEIsRUFBK0IsV0FBL0IsQ0FBVjtBQUNEOztBQUVENWdCLFVBQUFBLE1BQU0sQ0FBQzZnQixnQkFBUCxHQUEwQjtBQUN4QmxGLFlBQUFBLEtBQUssRUFBRTNlLEtBQUssQ0FBQyxDQUFELENBRFk7QUFFeEI0ZSxZQUFBQSxJQUFJLEVBQUU1ZSxLQUFLLENBQUMsQ0FBRCxDQUZhO0FBR3hCNmUsWUFBQUEsR0FBRyxFQUFFN2UsS0FBSyxDQUFDLENBQUQsQ0FIYztBQUl4QmdmLFlBQUFBLE1BQU0sRUFBRWhmLEtBQUssQ0FBQyxDQUFEO0FBSlcsV0FBMUI7QUFNQWdELFVBQUFBLE1BQU0sQ0FBQzhnQixrQkFBUCxHQUE0QjtBQUMxQm5GLFlBQUFBLEtBQUssRUFBRWlGLE9BQU8sQ0FBQyxDQUFELENBRFk7QUFFMUJoRixZQUFBQSxJQUFJLEVBQUVnRixPQUFPLENBQUMsQ0FBRCxDQUZhO0FBRzFCL0UsWUFBQUEsR0FBRyxFQUFFK0UsT0FBTyxDQUFDLENBQUQ7QUFIYyxXQUE1QjtBQUtBLGlCQUFPNWdCLE1BQU0sQ0FBQ2xELE9BQVAsQ0FBZUUsS0FBZixJQUF3QixDQUFDZ0QsTUFBTSxDQUFDdkQsTUFBUCxDQUFjb1csYUFBdkMsR0FBdUQ3UyxNQUFNLENBQUM2Z0IsZ0JBQTlELEdBQWlGN2dCLE1BQU0sQ0FBQzhnQixrQkFBL0Y7QUFDRCxTQXBCWSxFQWpDQTtBQXNEYi9NLFFBQUFBLGVBQWUsRUFBRTtBQUNmUyxVQUFBQSxTQUFTLEVBQUU3bEIsU0FESTtBQUVmOGxCLFVBQUFBLE9BQU8sRUFBRTlsQixTQUZNO0FBR2ZvbkIsVUFBQUEsbUJBQW1CLEVBQUVwbkIsU0FITjtBQUlmdW5CLFVBQUFBLGNBQWMsRUFBRXZuQixTQUpEO0FBS2ZxbkIsVUFBQUEsV0FBVyxFQUFFcm5CLFNBTEU7QUFNZnFmLFVBQUFBLGdCQUFnQixFQUFFcmYsU0FOSDtBQU9mK29CLFVBQUFBLGNBQWMsRUFBRS9vQixTQVBEO0FBUWZ5bkIsVUFBQUEsa0JBQWtCLEVBQUV6bkIsU0FSTDtBQVNmO0FBQ0EwbkIsVUFBQUEsWUFBWSxFQUFFLHVEQVZDO0FBV2Y7QUFDQW1DLFVBQUFBLGFBQWEsRUFBRXBlLEdBQUcsRUFaSDtBQWFmMm1CLFVBQUFBLFlBQVksRUFBRXB5QixTQWJDO0FBY2Y7QUFDQXVwQixVQUFBQSxVQUFVLEVBQUUsRUFmRztBQWdCZlAsVUFBQUEsbUJBQW1CLEVBQUVocEIsU0FoQk47QUFpQmZ5bEIsVUFBQUEsWUFBWSxFQUFFemxCLFNBakJDO0FBa0Jmc25CLFVBQUFBLFdBQVcsRUFBRXRuQjtBQWxCRSxTQXRESjtBQTBFYjtBQUNBcW1CLFFBQUFBLFVBQVUsRUFBRSxJQTNFQztBQTRFYjtBQUNBdUIsUUFBQUEsY0FBYyxFQUFFdlcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOFosY0E3RWpCO0FBOEVidkMsUUFBQUEsT0FBTyxFQUFFO0FBQ1B1QixVQUFBQSxNQUFNLEVBQUUsQ0FERDtBQUVQQyxVQUFBQSxNQUFNLEVBQUUsQ0FGRDtBQUdQTixVQUFBQSxRQUFRLEVBQUUsQ0FISDtBQUlQRyxVQUFBQSxRQUFRLEVBQUUsQ0FKSDtBQUtQOUMsVUFBQUEsSUFBSSxFQUFFO0FBTEMsU0E5RUk7QUFxRmI7QUFDQWdOLFFBQUFBLFlBQVksRUFBRSxFQXRGRDtBQXVGYkMsUUFBQUEsWUFBWSxFQUFFO0FBdkZELE9BQVQsQ0FBTixDQWpHZ0IsQ0F5TFo7O0FBRUp4ZixNQUFBQSxNQUFNLENBQUM2QyxVQUFQO0FBQ0E3QyxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksU0FBWixFQTVMZ0IsQ0E0TFE7O0FBRXhCLFVBQUloQixNQUFNLENBQUN2RCxNQUFQLENBQWN5RSxJQUFsQixFQUF3QjtBQUN0QmxCLFFBQUFBLE1BQU0sQ0FBQ2tCLElBQVA7QUFDRCxPQWhNZSxDQWdNZDs7O0FBR0YsYUFBT2xCLE1BQVA7QUFDRDs7QUFFRCxRQUFJZ2hCLE1BQU0sR0FBRzk1QixNQUFNLENBQUNpQixTQUFwQjs7QUFFQTY0QixJQUFBQSxNQUFNLENBQUN6RCxNQUFQLEdBQWdCLFNBQVNBLE1BQVQsR0FBa0I7QUFDaEMsVUFBSXZkLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSUEsTUFBTSxDQUFDa0YsT0FBWCxFQUFvQjtBQUNwQmxGLE1BQUFBLE1BQU0sQ0FBQ2tGLE9BQVAsR0FBaUIsSUFBakI7O0FBRUEsVUFBSWxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dXLFVBQWxCLEVBQThCO0FBQzVCalQsUUFBQUEsTUFBTSxDQUFDMlMsYUFBUDtBQUNEOztBQUVEM1MsTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFFBQVo7QUFDRCxLQVZEOztBQVlBZ2dCLElBQUFBLE1BQU0sQ0FBQzFELE9BQVAsR0FBaUIsU0FBU0EsT0FBVCxHQUFtQjtBQUNsQyxVQUFJdGQsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQ2tGLE9BQVosRUFBcUI7QUFDckJsRixNQUFBQSxNQUFNLENBQUNrRixPQUFQLEdBQWlCLEtBQWpCOztBQUVBLFVBQUlsRixNQUFNLENBQUN2RCxNQUFQLENBQWN3VyxVQUFsQixFQUE4QjtBQUM1QmpULFFBQUFBLE1BQU0sQ0FBQ2dULGVBQVA7QUFDRDs7QUFFRGhULE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxTQUFaO0FBQ0QsS0FWRDs7QUFZQWdnQixJQUFBQSxNQUFNLENBQUNDLFdBQVAsR0FBcUIsU0FBU0EsV0FBVCxDQUFxQnhWLFFBQXJCLEVBQStCcEIsS0FBL0IsRUFBc0M7QUFDekQsVUFBSXJLLE1BQU0sR0FBRyxJQUFiO0FBQ0F5TCxNQUFBQSxRQUFRLEdBQUcvRSxJQUFJLENBQUNpQixHQUFMLENBQVNqQixJQUFJLENBQUNLLEdBQUwsQ0FBUzBFLFFBQVQsRUFBbUIsQ0FBbkIsQ0FBVCxFQUFnQyxDQUFoQyxDQUFYO0FBQ0EsVUFBSTlELEdBQUcsR0FBRzNILE1BQU0sQ0FBQ29MLFlBQVAsRUFBVjtBQUNBLFVBQUlyRSxHQUFHLEdBQUcvRyxNQUFNLENBQUM2TCxZQUFQLEVBQVY7QUFDQSxVQUFJcVYsT0FBTyxHQUFHLENBQUNuYSxHQUFHLEdBQUdZLEdBQVAsSUFBYzhELFFBQWQsR0FBeUI5RCxHQUF2QztBQUNBM0gsTUFBQUEsTUFBTSxDQUFDeU8sV0FBUCxDQUFtQnlTLE9BQW5CLEVBQTRCLE9BQU83VyxLQUFQLEtBQWlCLFdBQWpCLEdBQStCLENBQS9CLEdBQW1DQSxLQUEvRDtBQUNBckssTUFBQUEsTUFBTSxDQUFDZ04saUJBQVA7QUFDQWhOLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0QsS0FURDs7QUFXQThVLElBQUFBLE1BQU0sQ0FBQy9ELG9CQUFQLEdBQThCLFNBQVNBLG9CQUFULEdBQWdDO0FBQzVELFVBQUlqZCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMGpCLFlBQWYsSUFBK0IsQ0FBQ25nQixNQUFNLENBQUNqUSxFQUEzQyxFQUErQztBQUMvQyxVQUFJa0IsT0FBTyxHQUFHK08sTUFBTSxDQUFDalEsRUFBUCxDQUFVbUMsU0FBVixDQUFvQlosS0FBcEIsQ0FBMEIsR0FBMUIsRUFBK0JwQixNQUEvQixDQUFzQyxVQUFVZ0MsU0FBVixFQUFxQjtBQUN2RSxlQUFPQSxTQUFTLENBQUMzRCxPQUFWLENBQWtCLGtCQUFsQixNQUEwQyxDQUExQyxJQUErQzJELFNBQVMsQ0FBQzNELE9BQVYsQ0FBa0J5UixNQUFNLENBQUN2RCxNQUFQLENBQWN1Z0Isc0JBQWhDLE1BQTRELENBQWxIO0FBQ0QsT0FGYSxDQUFkO0FBR0FoZCxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksbUJBQVosRUFBaUMvUCxPQUFPLENBQUMrSixJQUFSLENBQWEsR0FBYixDQUFqQztBQUNELEtBUEQ7O0FBU0FnbUIsSUFBQUEsTUFBTSxDQUFDRyxlQUFQLEdBQXlCLFNBQVNBLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQ3pELFVBQUlwaEIsTUFBTSxHQUFHLElBQWI7QUFDQSxhQUFPb2hCLE9BQU8sQ0FBQ2x2QixTQUFSLENBQWtCWixLQUFsQixDQUF3QixHQUF4QixFQUE2QnBCLE1BQTdCLENBQW9DLFVBQVVnQyxTQUFWLEVBQXFCO0FBQzlELGVBQU9BLFNBQVMsQ0FBQzNELE9BQVYsQ0FBa0IsY0FBbEIsTUFBc0MsQ0FBdEMsSUFBMkMyRCxTQUFTLENBQUMzRCxPQUFWLENBQWtCeVIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBaEMsTUFBZ0QsQ0FBbEc7QUFDRCxPQUZNLEVBRUpySyxJQUZJLENBRUMsR0FGRCxDQUFQO0FBR0QsS0FMRDs7QUFPQWdtQixJQUFBQSxNQUFNLENBQUNqVSxpQkFBUCxHQUEyQixTQUFTQSxpQkFBVCxHQUE2QjtBQUN0RCxVQUFJL00sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzBqQixZQUFmLElBQStCLENBQUNuZ0IsTUFBTSxDQUFDalEsRUFBM0MsRUFBK0M7QUFDL0MsVUFBSXN4QixPQUFPLEdBQUcsRUFBZDtBQUNBcmhCLE1BQUFBLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY2pPLElBQWQsQ0FBbUIsVUFBVWlxQixPQUFWLEVBQW1CO0FBQ3BDLFlBQUlqd0IsVUFBVSxHQUFHNk8sTUFBTSxDQUFDbWhCLGVBQVAsQ0FBdUJDLE9BQXZCLENBQWpCO0FBQ0FDLFFBQUFBLE9BQU8sQ0FBQ3B6QixJQUFSLENBQWE7QUFDWG16QixVQUFBQSxPQUFPLEVBQUVBLE9BREU7QUFFWGp3QixVQUFBQSxVQUFVLEVBQUVBO0FBRkQsU0FBYjtBQUlBNk8sUUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGFBQVosRUFBMkJvZ0IsT0FBM0IsRUFBb0Nqd0IsVUFBcEM7QUFDRCxPQVBEO0FBUUE2TyxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZUFBWixFQUE2QnFnQixPQUE3QjtBQUNELEtBYkQ7O0FBZUFMLElBQUFBLE1BQU0sQ0FBQ3JQLG9CQUFQLEdBQThCLFNBQVNBLG9CQUFULEdBQWdDO0FBQzVELFVBQUkzUixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFwQjtBQUFBLFVBQ0kySSxNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQURwQjtBQUFBLFVBRUlJLFVBQVUsR0FBR3hGLE1BQU0sQ0FBQ3dGLFVBRnhCO0FBQUEsVUFHSVosVUFBVSxHQUFHNUUsTUFBTSxDQUFDcUUsSUFIeEI7QUFBQSxVQUlJcUcsV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FKekI7QUFLQSxVQUFJNFcsR0FBRyxHQUFHLENBQVY7O0FBRUEsVUFBSTdrQixNQUFNLENBQUM2TCxjQUFYLEVBQTJCO0FBQ3pCLFlBQUl0QixTQUFTLEdBQUc1QixNQUFNLENBQUNzRixXQUFELENBQU4sQ0FBb0JyQyxlQUFwQztBQUNBLFlBQUlrWixTQUFKOztBQUVBLGFBQUssSUFBSWo2QixDQUFDLEdBQUdvakIsV0FBVyxHQUFHLENBQTNCLEVBQThCcGpCLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQXpDLEVBQWlERCxDQUFDLElBQUksQ0FBdEQsRUFBeUQ7QUFDdkQsY0FBSThkLE1BQU0sQ0FBQzlkLENBQUQsQ0FBTixJQUFhLENBQUNpNkIsU0FBbEIsRUFBNkI7QUFDM0J2YSxZQUFBQSxTQUFTLElBQUk1QixNQUFNLENBQUM5ZCxDQUFELENBQU4sQ0FBVStnQixlQUF2QjtBQUNBaVosWUFBQUEsR0FBRyxJQUFJLENBQVA7QUFDQSxnQkFBSXRhLFNBQVMsR0FBR3BDLFVBQWhCLEVBQTRCMmMsU0FBUyxHQUFHLElBQVo7QUFDN0I7QUFDRjs7QUFFRCxhQUFLLElBQUl6WSxFQUFFLEdBQUc0QixXQUFXLEdBQUcsQ0FBNUIsRUFBK0I1QixFQUFFLElBQUksQ0FBckMsRUFBd0NBLEVBQUUsSUFBSSxDQUE5QyxFQUFpRDtBQUMvQyxjQUFJMUQsTUFBTSxDQUFDMEQsRUFBRCxDQUFOLElBQWMsQ0FBQ3lZLFNBQW5CLEVBQThCO0FBQzVCdmEsWUFBQUEsU0FBUyxJQUFJNUIsTUFBTSxDQUFDMEQsRUFBRCxDQUFOLENBQVdULGVBQXhCO0FBQ0FpWixZQUFBQSxHQUFHLElBQUksQ0FBUDtBQUNBLGdCQUFJdGEsU0FBUyxHQUFHcEMsVUFBaEIsRUFBNEIyYyxTQUFTLEdBQUcsSUFBWjtBQUM3QjtBQUNGO0FBQ0YsT0FuQkQsTUFtQk87QUFDTCxhQUFLLElBQUl2WSxHQUFHLEdBQUcwQixXQUFXLEdBQUcsQ0FBN0IsRUFBZ0MxQixHQUFHLEdBQUc1RCxNQUFNLENBQUM3ZCxNQUE3QyxFQUFxRHloQixHQUFHLElBQUksQ0FBNUQsRUFBK0Q7QUFDN0QsY0FBSXhELFVBQVUsQ0FBQ3dELEdBQUQsQ0FBVixHQUFrQnhELFVBQVUsQ0FBQ2tGLFdBQUQsQ0FBNUIsR0FBNEM5RixVQUFoRCxFQUE0RDtBQUMxRDBjLFlBQUFBLEdBQUcsSUFBSSxDQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELGFBQU9BLEdBQVA7QUFDRCxLQXJDRDs7QUF1Q0FOLElBQUFBLE1BQU0sQ0FBQ25ULE1BQVAsR0FBZ0IsU0FBU0EsTUFBVCxHQUFrQjtBQUNoQyxVQUFJN04sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUF0QixFQUFpQztBQUNqQyxVQUFJb0YsUUFBUSxHQUFHdkYsTUFBTSxDQUFDdUYsUUFBdEI7QUFBQSxVQUNJOUksTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFEcEIsQ0FIZ0MsQ0FJSjs7QUFFNUIsVUFBSUEsTUFBTSxDQUFDbWUsV0FBWCxFQUF3QjtBQUN0QjVhLFFBQUFBLE1BQU0sQ0FBQzZhLGFBQVA7QUFDRDs7QUFFRDdhLE1BQUFBLE1BQU0sQ0FBQzZELFVBQVA7QUFDQTdELE1BQUFBLE1BQU0sQ0FBQ3NFLFlBQVA7QUFDQXRFLE1BQUFBLE1BQU0sQ0FBQzBMLGNBQVA7QUFDQTFMLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQOztBQUVBLGVBQVMrQixZQUFULEdBQXdCO0FBQ3RCLFlBQUl1VCxjQUFjLEdBQUd4aEIsTUFBTSxDQUFDOEUsWUFBUCxHQUFzQjlFLE1BQU0sQ0FBQytLLFNBQVAsR0FBbUIsQ0FBQyxDQUExQyxHQUE4Qy9LLE1BQU0sQ0FBQytLLFNBQTFFO0FBQ0EsWUFBSWdFLFlBQVksR0FBR3JJLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU2pCLElBQUksQ0FBQ0ssR0FBTCxDQUFTeWEsY0FBVCxFQUF5QnhoQixNQUFNLENBQUM2TCxZQUFQLEVBQXpCLENBQVQsRUFBMEQ3TCxNQUFNLENBQUNvTCxZQUFQLEVBQTFELENBQW5CO0FBQ0FwTCxRQUFBQSxNQUFNLENBQUNpTyxZQUFQLENBQW9CYyxZQUFwQjtBQUNBL08sUUFBQUEsTUFBTSxDQUFDZ04saUJBQVA7QUFDQWhOLFFBQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0Q7O0FBRUQsVUFBSXVWLFVBQUo7O0FBRUEsVUFBSXpoQixNQUFNLENBQUN2RCxNQUFQLENBQWN3YixRQUFsQixFQUE0QjtBQUMxQmhLLFFBQUFBLFlBQVk7O0FBRVosWUFBSWpPLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRPLFVBQWxCLEVBQThCO0FBQzVCckwsVUFBQUEsTUFBTSxDQUFDb0ssZ0JBQVA7QUFDRDtBQUNGLE9BTkQsTUFNTztBQUNMLFlBQUksQ0FBQ3BLLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY29LLGFBQWQsS0FBZ0MsTUFBaEMsSUFBMEM3RyxNQUFNLENBQUN2RCxNQUFQLENBQWNvSyxhQUFkLEdBQThCLENBQXpFLEtBQStFN0csTUFBTSxDQUFDK0wsS0FBdEYsSUFBK0YsQ0FBQy9MLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzZMLGNBQWxILEVBQWtJO0FBQ2hJbVosVUFBQUEsVUFBVSxHQUFHemhCLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUIsQ0FBdEMsRUFBeUMsQ0FBekMsRUFBNEMsS0FBNUMsRUFBbUQsSUFBbkQsQ0FBYjtBQUNELFNBRkQsTUFFTztBQUNMazZCLFVBQUFBLFVBQVUsR0FBR3poQixNQUFNLENBQUN3UCxPQUFQLENBQWV4UCxNQUFNLENBQUMwSyxXQUF0QixFQUFtQyxDQUFuQyxFQUFzQyxLQUF0QyxFQUE2QyxJQUE3QyxDQUFiO0FBQ0Q7O0FBRUQsWUFBSSxDQUFDK1csVUFBTCxFQUFpQjtBQUNmeFQsVUFBQUEsWUFBWTtBQUNiO0FBQ0Y7O0FBRUQsVUFBSXhSLE1BQU0sQ0FBQ3NOLGFBQVAsSUFBd0J4RSxRQUFRLEtBQUt2RixNQUFNLENBQUN1RixRQUFoRCxFQUEwRDtBQUN4RHZGLFFBQUFBLE1BQU0sQ0FBQ2dLLGFBQVA7QUFDRDs7QUFFRGhLLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxRQUFaO0FBQ0QsS0FoREQ7O0FBa0RBZ2dCLElBQUFBLE1BQU0sQ0FBQzVELGVBQVAsR0FBeUIsU0FBU0EsZUFBVCxDQUF5QnNFLFlBQXpCLEVBQXVDQyxVQUF2QyxFQUFtRDtBQUMxRSxVQUFJQSxVQUFVLEtBQUssS0FBSyxDQUF4QixFQUEyQjtBQUN6QkEsUUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDRDs7QUFFRCxVQUFJM2hCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTRoQixnQkFBZ0IsR0FBRzVoQixNQUFNLENBQUN2RCxNQUFQLENBQWM2UyxTQUFyQzs7QUFFQSxVQUFJLENBQUNvUyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0FBLFFBQUFBLFlBQVksR0FBR0UsZ0JBQWdCLEtBQUssWUFBckIsR0FBb0MsVUFBcEMsR0FBaUQsWUFBaEU7QUFDRDs7QUFFRCxVQUFJRixZQUFZLEtBQUtFLGdCQUFqQixJQUFxQ0YsWUFBWSxLQUFLLFlBQWpCLElBQWlDQSxZQUFZLEtBQUssVUFBM0YsRUFBdUc7QUFDckcsZUFBTzFoQixNQUFQO0FBQ0Q7O0FBRURBLE1BQUFBLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBV3pRLFdBQVgsQ0FBdUIsS0FBS3NPLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VnQixzQkFBbkIsR0FBNEM0RSxnQkFBbkUsRUFBcUY3d0IsUUFBckYsQ0FBOEYsS0FBS2lQLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VnQixzQkFBbkIsR0FBNEMwRSxZQUExSTtBQUNBMWhCLE1BQUFBLE1BQU0sQ0FBQ2lkLG9CQUFQO0FBQ0FqZCxNQUFBQSxNQUFNLENBQUN2RCxNQUFQLENBQWM2UyxTQUFkLEdBQTBCb1MsWUFBMUI7QUFDQTFoQixNQUFBQSxNQUFNLENBQUNvRixNQUFQLENBQWNqTyxJQUFkLENBQW1CLFVBQVVpcUIsT0FBVixFQUFtQjtBQUNwQyxZQUFJTSxZQUFZLEtBQUssVUFBckIsRUFBaUM7QUFDL0JOLFVBQUFBLE9BQU8sQ0FBQ24zQixLQUFSLENBQWNzVSxLQUFkLEdBQXNCLEVBQXRCO0FBQ0QsU0FGRCxNQUVPO0FBQ0w2aUIsVUFBQUEsT0FBTyxDQUFDbjNCLEtBQVIsQ0FBY3dVLE1BQWQsR0FBdUIsRUFBdkI7QUFDRDtBQUNGLE9BTkQ7QUFPQXVCLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxpQkFBWjtBQUNBLFVBQUkyZ0IsVUFBSixFQUFnQjNoQixNQUFNLENBQUM2TixNQUFQO0FBQ2hCLGFBQU83TixNQUFQO0FBQ0QsS0E5QkQ7O0FBZ0NBZ2hCLElBQUFBLE1BQU0sQ0FBQ2EsS0FBUCxHQUFlLFNBQVNBLEtBQVQsQ0FBZTl4QixFQUFmLEVBQW1CO0FBQ2hDLFVBQUlpUSxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUlBLE1BQU0sQ0FBQzhoQixPQUFYLEVBQW9CLE9BQU8sSUFBUCxDQUZZLENBRUM7O0FBRWpDLFVBQUkzZixHQUFHLEdBQUczUixDQUFDLENBQUNULEVBQUUsSUFBSWlRLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzFNLEVBQXJCLENBQVg7QUFDQUEsTUFBQUEsRUFBRSxHQUFHb1MsR0FBRyxDQUFDLENBQUQsQ0FBUjs7QUFFQSxVQUFJLENBQUNwUyxFQUFMLEVBQVM7QUFDUCxlQUFPLEtBQVA7QUFDRDs7QUFFREEsTUFBQUEsRUFBRSxDQUFDaVEsTUFBSCxHQUFZQSxNQUFaOztBQUVBLFVBQUkraEIsVUFBVSxHQUFHLFNBQVNBLFVBQVQsR0FBc0I7QUFDckMsWUFBSWh5QixFQUFFLElBQUlBLEVBQUUsQ0FBQzZrQixVQUFULElBQXVCN2tCLEVBQUUsQ0FBQzZrQixVQUFILENBQWNuckIsYUFBekMsRUFBd0Q7QUFDdEQsY0FBSXFHLEdBQUcsR0FBR1UsQ0FBQyxDQUFDVCxFQUFFLENBQUM2a0IsVUFBSCxDQUFjbnJCLGFBQWQsQ0FBNEIsTUFBTXVXLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3lqQixZQUFoRCxDQUFELENBQVgsQ0FEc0QsQ0FDc0I7O0FBRTVFcHdCLFVBQUFBLEdBQUcsQ0FBQy9GLFFBQUosR0FBZSxVQUFVd1gsT0FBVixFQUFtQjtBQUNoQyxtQkFBT1ksR0FBRyxDQUFDcFksUUFBSixDQUFhd1gsT0FBYixDQUFQO0FBQ0QsV0FGRDs7QUFJQSxpQkFBT3pSLEdBQVA7QUFDRDs7QUFFRCxlQUFPcVMsR0FBRyxDQUFDcFksUUFBSixDQUFhLE1BQU1pVyxNQUFNLENBQUN2RCxNQUFQLENBQWN5akIsWUFBakMsQ0FBUDtBQUNELE9BWkQsQ0FiZ0MsQ0F5QjdCOzs7QUFHSCxVQUFJN2QsVUFBVSxHQUFHMGYsVUFBVSxFQUEzQjs7QUFFQSxVQUFJMWYsVUFBVSxDQUFDOWEsTUFBWCxLQUFzQixDQUF0QixJQUEyQnlZLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY0MsY0FBN0MsRUFBNkQ7QUFDM0QsWUFBSXpSLFFBQVEsR0FBR0YsV0FBVyxFQUExQjtBQUNBLFlBQUlpM0IsT0FBTyxHQUFHLzJCLFFBQVEsQ0FBQ25CLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtBQUNBdVksUUFBQUEsVUFBVSxHQUFHN1IsQ0FBQyxDQUFDd3hCLE9BQUQsQ0FBZDtBQUNBQSxRQUFBQSxPQUFPLENBQUM5dkIsU0FBUixHQUFvQjhOLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3lqQixZQUFsQztBQUNBL2QsUUFBQUEsR0FBRyxDQUFDbkssTUFBSixDQUFXZ3FCLE9BQVg7QUFDQTdmLFFBQUFBLEdBQUcsQ0FBQ3BZLFFBQUosQ0FBYSxNQUFNaVcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBakMsRUFBNkNsTyxJQUE3QyxDQUFrRCxVQUFVaXFCLE9BQVYsRUFBbUI7QUFDbkUvZSxVQUFBQSxVQUFVLENBQUNySyxNQUFYLENBQWtCb3BCLE9BQWxCO0FBQ0QsU0FGRDtBQUdEOztBQUVEM2xCLE1BQUFBLE1BQU0sQ0FBQ3VFLE1BQUQsRUFBUztBQUNibUMsUUFBQUEsR0FBRyxFQUFFQSxHQURRO0FBRWJwUyxRQUFBQSxFQUFFLEVBQUVBLEVBRlM7QUFHYnNTLFFBQUFBLFVBQVUsRUFBRUEsVUFIQztBQUliOEwsUUFBQUEsU0FBUyxFQUFFOUwsVUFBVSxDQUFDLENBQUQsQ0FKUjtBQUtieWYsUUFBQUEsT0FBTyxFQUFFLElBTEk7QUFNYjtBQUNBamQsUUFBQUEsR0FBRyxFQUFFOVUsRUFBRSxDQUFDd2YsR0FBSCxDQUFPaFEsV0FBUCxPQUF5QixLQUF6QixJQUFrQzRDLEdBQUcsQ0FBQ2xMLEdBQUosQ0FBUSxXQUFSLE1BQXlCLEtBUG5EO0FBUWI2TixRQUFBQSxZQUFZLEVBQUU5RSxNQUFNLENBQUN2RCxNQUFQLENBQWM2UyxTQUFkLEtBQTRCLFlBQTVCLEtBQTZDdmYsRUFBRSxDQUFDd2YsR0FBSCxDQUFPaFEsV0FBUCxPQUF5QixLQUF6QixJQUFrQzRDLEdBQUcsQ0FBQ2xMLEdBQUosQ0FBUSxXQUFSLE1BQXlCLEtBQXhHLENBUkQ7QUFTYjhOLFFBQUFBLFFBQVEsRUFBRTFDLFVBQVUsQ0FBQ3BMLEdBQVgsQ0FBZSxTQUFmLE1BQThCO0FBVDNCLE9BQVQsQ0FBTjtBQVdBLGFBQU8sSUFBUDtBQUNELEtBckREOztBQXVEQStwQixJQUFBQSxNQUFNLENBQUM5ZixJQUFQLEdBQWMsU0FBU0EsSUFBVCxDQUFjblIsRUFBZCxFQUFrQjtBQUM5QixVQUFJaVEsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJQSxNQUFNLENBQUNJLFdBQVgsRUFBd0IsT0FBT0osTUFBUDtBQUN4QixVQUFJOGhCLE9BQU8sR0FBRzloQixNQUFNLENBQUM2aEIsS0FBUCxDQUFhOXhCLEVBQWIsQ0FBZDtBQUNBLFVBQUkreEIsT0FBTyxLQUFLLEtBQWhCLEVBQXVCLE9BQU85aEIsTUFBUDtBQUN2QkEsTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFlBQVosRUFMOEIsQ0FLSDs7QUFFM0IsVUFBSWhCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY21lLFdBQWxCLEVBQStCO0FBQzdCNWEsUUFBQUEsTUFBTSxDQUFDNmEsYUFBUDtBQUNELE9BVDZCLENBUzVCOzs7QUFHRjdhLE1BQUFBLE1BQU0sQ0FBQ3dlLFVBQVAsR0FaOEIsQ0FZVDs7QUFFckIsVUFBSXhlLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCM00sUUFBQUEsTUFBTSxDQUFDNlIsVUFBUDtBQUNELE9BaEI2QixDQWdCNUI7OztBQUdGN1IsTUFBQUEsTUFBTSxDQUFDNkQsVUFBUCxHQW5COEIsQ0FtQlQ7O0FBRXJCN0QsTUFBQUEsTUFBTSxDQUFDc0UsWUFBUDs7QUFFQSxVQUFJdEUsTUFBTSxDQUFDdkQsTUFBUCxDQUFjc04sYUFBbEIsRUFBaUM7QUFDL0IvSixRQUFBQSxNQUFNLENBQUNnSyxhQUFQO0FBQ0QsT0F6QjZCLENBeUI1Qjs7O0FBR0YsVUFBSWhLLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dXLFVBQWQsSUFBNEJqVCxNQUFNLENBQUNrRixPQUF2QyxFQUFnRDtBQUM5Q2xGLFFBQUFBLE1BQU0sQ0FBQzJTLGFBQVA7QUFDRDs7QUFFRCxVQUFJM1MsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNmlCLGFBQWxCLEVBQWlDO0FBQy9CdGYsUUFBQUEsTUFBTSxDQUFDc2YsYUFBUDtBQUNELE9BbEM2QixDQWtDNUI7OztBQUdGLFVBQUl0ZixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFsQixFQUF3QjtBQUN0QjNNLFFBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FULFlBQWQsR0FBNkI5UCxNQUFNLENBQUN5USxZQUFuRCxFQUFpRSxDQUFqRSxFQUFvRXpRLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhRLGtCQUFsRixFQUFzRyxLQUF0RyxFQUE2RyxJQUE3RztBQUNELE9BRkQsTUFFTztBQUNMdk4sUUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFleFAsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcVQsWUFBN0IsRUFBMkMsQ0FBM0MsRUFBOEM5UCxNQUFNLENBQUN2RCxNQUFQLENBQWM4USxrQkFBNUQsRUFBZ0YsS0FBaEYsRUFBdUYsSUFBdkY7QUFDRCxPQXpDNkIsQ0F5QzVCOzs7QUFHRnZOLE1BQUFBLE1BQU0sQ0FBQ3liLFlBQVAsR0E1QzhCLENBNENQOztBQUV2QnpiLE1BQUFBLE1BQU0sQ0FBQ0ksV0FBUCxHQUFxQixJQUFyQixDQTlDOEIsQ0E4Q0g7O0FBRTNCSixNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksTUFBWjtBQUNBaEIsTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFdBQVo7QUFDQSxhQUFPaEIsTUFBUDtBQUNELEtBbkREOztBQXFEQWdoQixJQUFBQSxNQUFNLENBQUM1ZixPQUFQLEdBQWlCLFNBQVNBLE9BQVQsQ0FBaUI2Z0IsY0FBakIsRUFBaUNDLFdBQWpDLEVBQThDO0FBQzdELFVBQUlELGNBQWMsS0FBSyxLQUFLLENBQTVCLEVBQStCO0FBQzdCQSxRQUFBQSxjQUFjLEdBQUcsSUFBakI7QUFDRDs7QUFFRCxVQUFJQyxXQUFXLEtBQUssS0FBSyxDQUF6QixFQUE0QjtBQUMxQkEsUUFBQUEsV0FBVyxHQUFHLElBQWQ7QUFDRDs7QUFFRCxVQUFJbGlCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQXBCO0FBQUEsVUFDSTBGLEdBQUcsR0FBR25DLE1BQU0sQ0FBQ21DLEdBRGpCO0FBQUEsVUFFSUUsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFGeEI7QUFBQSxVQUdJK0MsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFIcEI7O0FBS0EsVUFBSSxPQUFPcEYsTUFBTSxDQUFDdkQsTUFBZCxLQUF5QixXQUF6QixJQUF3Q3VELE1BQU0sQ0FBQ0csU0FBbkQsRUFBOEQ7QUFDNUQsZUFBTyxJQUFQO0FBQ0Q7O0FBRURILE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxlQUFaLEVBbkI2RCxDQW1CL0I7O0FBRTlCaEIsTUFBQUEsTUFBTSxDQUFDSSxXQUFQLEdBQXFCLEtBQXJCLENBckI2RCxDQXFCakM7O0FBRTVCSixNQUFBQSxNQUFNLENBQUNrYyxZQUFQLEdBdkI2RCxDQXVCdEM7O0FBRXZCLFVBQUl6ZixNQUFNLENBQUNrUSxJQUFYLEVBQWlCO0FBQ2YzTSxRQUFBQSxNQUFNLENBQUMwUyxXQUFQO0FBQ0QsT0EzQjRELENBMkIzRDs7O0FBR0YsVUFBSXdQLFdBQUosRUFBaUI7QUFDZmxpQixRQUFBQSxNQUFNLENBQUMwZSxhQUFQO0FBQ0F2YyxRQUFBQSxHQUFHLENBQUN2UCxVQUFKLENBQWUsT0FBZjtBQUNBeVAsUUFBQUEsVUFBVSxDQUFDelAsVUFBWCxDQUFzQixPQUF0Qjs7QUFFQSxZQUFJd1MsTUFBTSxJQUFJQSxNQUFNLENBQUM3ZCxNQUFyQixFQUE2QjtBQUMzQjZkLFVBQUFBLE1BQU0sQ0FBQzFULFdBQVAsQ0FBbUIsQ0FBQytLLE1BQU0sQ0FBQ3dPLGlCQUFSLEVBQTJCeE8sTUFBTSxDQUFDMlAsZ0JBQWxDLEVBQW9EM1AsTUFBTSxDQUFDNFAsY0FBM0QsRUFBMkU1UCxNQUFNLENBQUM2UCxjQUFsRixFQUFrR3RSLElBQWxHLENBQXVHLEdBQXZHLENBQW5CLEVBQWdJcEksVUFBaEksQ0FBMkksT0FBM0ksRUFBb0pBLFVBQXBKLENBQStKLHlCQUEvSjtBQUNEO0FBQ0Y7O0FBRURvTixNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksU0FBWixFQXhDNkQsQ0F3Q3JDOztBQUV4QnBaLE1BQUFBLE1BQU0sQ0FBQ29CLElBQVAsQ0FBWWdYLE1BQU0sQ0FBQ29ELGVBQW5CLEVBQW9DbmEsT0FBcEMsQ0FBNEMsVUFBVTAzQixTQUFWLEVBQXFCO0FBQy9EM2dCLFFBQUFBLE1BQU0sQ0FBQ3ZMLEdBQVAsQ0FBV2tzQixTQUFYO0FBQ0QsT0FGRDs7QUFJQSxVQUFJc0IsY0FBYyxLQUFLLEtBQXZCLEVBQThCO0FBQzVCamlCLFFBQUFBLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVyxDQUFYLEVBQWNuQyxNQUFkLEdBQXVCLElBQXZCO0FBQ0FoRyxRQUFBQSxXQUFXLENBQUNnRyxNQUFELENBQVg7QUFDRDs7QUFFREEsTUFBQUEsTUFBTSxDQUFDRyxTQUFQLEdBQW1CLElBQW5CO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0FyREQ7O0FBdURBalosSUFBQUEsTUFBTSxDQUFDaTdCLGNBQVAsR0FBd0IsU0FBU0EsY0FBVCxDQUF3QkMsV0FBeEIsRUFBcUM7QUFDM0QzbUIsTUFBQUEsTUFBTSxDQUFDNGtCLGdCQUFELEVBQW1CK0IsV0FBbkIsQ0FBTjtBQUNELEtBRkQ7O0FBSUFsN0IsSUFBQUEsTUFBTSxDQUFDbTdCLGFBQVAsR0FBdUIsU0FBU0EsYUFBVCxDQUF1Qng3QixNQUF2QixFQUErQjtBQUNwRCxVQUFJLENBQUNLLE1BQU0sQ0FBQ2lCLFNBQVAsQ0FBaUJ3YSxPQUF0QixFQUErQnpiLE1BQU0sQ0FBQ2lCLFNBQVAsQ0FBaUJ3YSxPQUFqQixHQUEyQixFQUEzQjtBQUMvQixVQUFJNUMsSUFBSSxHQUFHbFosTUFBTSxDQUFDa1osSUFBUCxJQUFlblksTUFBTSxDQUFDb0IsSUFBUCxDQUFZOUIsTUFBTSxDQUFDaUIsU0FBUCxDQUFpQndhLE9BQTdCLEVBQXNDcGIsTUFBdEMsR0FBK0MsR0FBL0MsR0FBcUQ2UyxHQUFHLEVBQWxGO0FBQ0FsVCxNQUFBQSxNQUFNLENBQUNpQixTQUFQLENBQWlCd2EsT0FBakIsQ0FBeUI1QyxJQUF6QixJQUFpQ2xaLE1BQWpDO0FBQ0QsS0FKRDs7QUFNQUssSUFBQUEsTUFBTSxDQUFDbzdCLEdBQVAsR0FBYSxTQUFTQSxHQUFULENBQWF6N0IsTUFBYixFQUFxQjtBQUNoQyxVQUFJOEksS0FBSyxDQUFDSyxPQUFOLENBQWNuSixNQUFkLENBQUosRUFBMkI7QUFDekJBLFFBQUFBLE1BQU0sQ0FBQ29DLE9BQVAsQ0FBZSxVQUFVczVCLENBQVYsRUFBYTtBQUMxQixpQkFBT3I3QixNQUFNLENBQUNtN0IsYUFBUCxDQUFxQkUsQ0FBckIsQ0FBUDtBQUNELFNBRkQ7QUFHQSxlQUFPcjdCLE1BQVA7QUFDRDs7QUFFREEsTUFBQUEsTUFBTSxDQUFDbTdCLGFBQVAsQ0FBcUJ4N0IsTUFBckI7QUFDQSxhQUFPSyxNQUFQO0FBQ0QsS0FWRDs7QUFZQWEsSUFBQUEsWUFBWSxDQUFDYixNQUFELEVBQVMsSUFBVCxFQUFlLENBQUM7QUFDMUJZLE1BQUFBLEdBQUcsRUFBRSxrQkFEcUI7QUFFMUJnSCxNQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLGVBQU91eEIsZ0JBQVA7QUFDRDtBQUp5QixLQUFELEVBS3hCO0FBQ0R2NEIsTUFBQUEsR0FBRyxFQUFFLFVBREo7QUFFRGdILE1BQUFBLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7QUFDbEIsZUFBT2l4QixRQUFQO0FBQ0Q7QUFKQSxLQUx3QixDQUFmLENBQVo7O0FBWUEsV0FBTzc0QixNQUFQO0FBQ0QsR0Exa0J5QixFQUExQjs7QUE0a0JBVSxFQUFBQSxNQUFNLENBQUNvQixJQUFQLENBQVlvM0IsVUFBWixFQUF3Qm4zQixPQUF4QixDQUFnQyxVQUFVdTVCLGNBQVYsRUFBMEI7QUFDeEQ1NkIsSUFBQUEsTUFBTSxDQUFDb0IsSUFBUCxDQUFZbzNCLFVBQVUsQ0FBQ29DLGNBQUQsQ0FBdEIsRUFBd0N2NUIsT0FBeEMsQ0FBZ0QsVUFBVXc1QixXQUFWLEVBQXVCO0FBQ3JFdjdCLE1BQUFBLE1BQU0sQ0FBQ2lCLFNBQVAsQ0FBaUJzNkIsV0FBakIsSUFBZ0NyQyxVQUFVLENBQUNvQyxjQUFELENBQVYsQ0FBMkJDLFdBQTNCLENBQWhDO0FBQ0QsS0FGRDtBQUdELEdBSkQ7QUFLQXY3QixFQUFBQSxNQUFNLENBQUNvN0IsR0FBUCxDQUFXLENBQUN4aUIsTUFBRCxFQUFTeUMsVUFBVCxDQUFYO0FBRUEsTUFBSW1nQixPQUFPLEdBQUc7QUFDWjdVLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCOFUsS0FBaEIsRUFBdUI7QUFDN0IsVUFBSTNpQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUk0aUIsY0FBYyxHQUFHNWlCLE1BQU0sQ0FBQ3ZELE1BQTVCO0FBQUEsVUFDSW9LLGFBQWEsR0FBRytiLGNBQWMsQ0FBQy9iLGFBRG5DO0FBQUEsVUFFSVUsY0FBYyxHQUFHcWIsY0FBYyxDQUFDcmIsY0FGcEM7QUFBQSxVQUdJZSxjQUFjLEdBQUdzYSxjQUFjLENBQUN0YSxjQUhwQztBQUlBLFVBQUl1YSxxQkFBcUIsR0FBRzdpQixNQUFNLENBQUN2RCxNQUFQLENBQWN3SSxPQUExQztBQUFBLFVBQ0k2ZCxlQUFlLEdBQUdELHFCQUFxQixDQUFDQyxlQUQ1QztBQUFBLFVBRUlDLGNBQWMsR0FBR0YscUJBQXFCLENBQUNFLGNBRjNDO0FBR0EsVUFBSUMsZUFBZSxHQUFHaGpCLE1BQU0sQ0FBQ2lGLE9BQTdCO0FBQUEsVUFDSWdlLFlBQVksR0FBR0QsZUFBZSxDQUFDRSxJQURuQztBQUFBLFVBRUlDLFVBQVUsR0FBR0gsZUFBZSxDQUFDdG5CLEVBRmpDO0FBQUEsVUFHSTBKLE1BQU0sR0FBRzRkLGVBQWUsQ0FBQzVkLE1BSDdCO0FBQUEsVUFJSWdlLGtCQUFrQixHQUFHSixlQUFlLENBQUN4ZCxVQUp6QztBQUFBLFVBS0k2ZCxXQUFXLEdBQUdMLGVBQWUsQ0FBQ0ssV0FMbEM7QUFBQSxVQU1JQyxjQUFjLEdBQUdOLGVBQWUsQ0FBQzFzQixNQU5yQztBQU9BMEosTUFBQUEsTUFBTSxDQUFDZ04saUJBQVA7QUFDQSxVQUFJdEMsV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FBUCxJQUFzQixDQUF4QztBQUNBLFVBQUk2WSxVQUFKO0FBQ0EsVUFBSXZqQixNQUFNLENBQUM4RSxZQUFYLEVBQXlCeWUsVUFBVSxHQUFHLE9BQWIsQ0FBekIsS0FBbURBLFVBQVUsR0FBR3ZqQixNQUFNLENBQUNnRSxZQUFQLEtBQXdCLE1BQXhCLEdBQWlDLEtBQTlDO0FBQ25ELFVBQUl3ZixXQUFKO0FBQ0EsVUFBSUMsWUFBSjs7QUFFQSxVQUFJbmIsY0FBSixFQUFvQjtBQUNsQmtiLFFBQUFBLFdBQVcsR0FBRzljLElBQUksQ0FBQ0MsS0FBTCxDQUFXRSxhQUFhLEdBQUcsQ0FBM0IsSUFBZ0NVLGNBQWhDLEdBQWlEd2IsY0FBL0Q7QUFDQVUsUUFBQUEsWUFBWSxHQUFHL2MsSUFBSSxDQUFDQyxLQUFMLENBQVdFLGFBQWEsR0FBRyxDQUEzQixJQUFnQ1UsY0FBaEMsR0FBaUR1YixlQUFoRTtBQUNELE9BSEQsTUFHTztBQUNMVSxRQUFBQSxXQUFXLEdBQUczYyxhQUFhLElBQUlVLGNBQWMsR0FBRyxDQUFyQixDQUFiLEdBQXVDd2IsY0FBckQ7QUFDQVUsUUFBQUEsWUFBWSxHQUFHbGMsY0FBYyxHQUFHdWIsZUFBaEM7QUFDRDs7QUFFRCxVQUFJSSxJQUFJLEdBQUd4YyxJQUFJLENBQUNLLEdBQUwsQ0FBUyxDQUFDMkQsV0FBVyxJQUFJLENBQWhCLElBQXFCK1ksWUFBOUIsRUFBNEMsQ0FBNUMsQ0FBWDtBQUNBLFVBQUkvbkIsRUFBRSxHQUFHZ0wsSUFBSSxDQUFDaUIsR0FBTCxDQUFTLENBQUMrQyxXQUFXLElBQUksQ0FBaEIsSUFBcUI4WSxXQUE5QixFQUEyQ3BlLE1BQU0sQ0FBQzdkLE1BQVAsR0FBZ0IsQ0FBM0QsQ0FBVDtBQUNBLFVBQUkrTyxNQUFNLEdBQUcsQ0FBQzBKLE1BQU0sQ0FBQ3dGLFVBQVAsQ0FBa0IwZCxJQUFsQixLQUEyQixDQUE1QixLQUFrQ2xqQixNQUFNLENBQUN3RixVQUFQLENBQWtCLENBQWxCLEtBQXdCLENBQTFELENBQWI7QUFDQS9KLE1BQUFBLE1BQU0sQ0FBQ3VFLE1BQU0sQ0FBQ2lGLE9BQVIsRUFBaUI7QUFDckJpZSxRQUFBQSxJQUFJLEVBQUVBLElBRGU7QUFFckJ4bkIsUUFBQUEsRUFBRSxFQUFFQSxFQUZpQjtBQUdyQnBGLFFBQUFBLE1BQU0sRUFBRUEsTUFIYTtBQUlyQmtQLFFBQUFBLFVBQVUsRUFBRXhGLE1BQU0sQ0FBQ3dGO0FBSkUsT0FBakIsQ0FBTjs7QUFPQSxlQUFTa2UsVUFBVCxHQUFzQjtBQUNwQjFqQixRQUFBQSxNQUFNLENBQUNzRSxZQUFQO0FBQ0F0RSxRQUFBQSxNQUFNLENBQUMwTCxjQUFQO0FBQ0ExTCxRQUFBQSxNQUFNLENBQUNrTSxtQkFBUDs7QUFFQSxZQUFJbE0sTUFBTSxDQUFDMmpCLElBQVAsSUFBZTNqQixNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBZCxDQUFtQnplLE9BQXRDLEVBQStDO0FBQzdDbEYsVUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWUMsSUFBWjtBQUNEO0FBQ0Y7O0FBRUQsVUFBSVgsWUFBWSxLQUFLQyxJQUFqQixJQUF5QkMsVUFBVSxLQUFLem5CLEVBQXhDLElBQThDLENBQUNpbkIsS0FBbkQsRUFBMEQ7QUFDeEQsWUFBSTNpQixNQUFNLENBQUN3RixVQUFQLEtBQXNCNGQsa0JBQXRCLElBQTRDOXNCLE1BQU0sS0FBS2d0QixjQUEzRCxFQUEyRTtBQUN6RXRqQixVQUFBQSxNQUFNLENBQUNvRixNQUFQLENBQWNuTyxHQUFkLENBQWtCc3NCLFVBQWxCLEVBQThCanRCLE1BQU0sR0FBRyxJQUF2QztBQUNEOztBQUVEMEosUUFBQUEsTUFBTSxDQUFDMEwsY0FBUDtBQUNBO0FBQ0Q7O0FBRUQsVUFBSTFMLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0I0ZSxjQUExQixFQUEwQztBQUN4QzdqQixRQUFBQSxNQUFNLENBQUN2RCxNQUFQLENBQWN3SSxPQUFkLENBQXNCNGUsY0FBdEIsQ0FBcUNwN0IsSUFBckMsQ0FBMEN1WCxNQUExQyxFQUFrRDtBQUNoRDFKLFVBQUFBLE1BQU0sRUFBRUEsTUFEd0M7QUFFaEQ0c0IsVUFBQUEsSUFBSSxFQUFFQSxJQUYwQztBQUdoRHhuQixVQUFBQSxFQUFFLEVBQUVBLEVBSDRDO0FBSWhEMEosVUFBQUEsTUFBTSxFQUFFLFNBQVMwZSxTQUFULEdBQXFCO0FBQzNCLGdCQUFJQyxjQUFjLEdBQUcsRUFBckI7O0FBRUEsaUJBQUssSUFBSXo4QixDQUFDLEdBQUc0N0IsSUFBYixFQUFtQjU3QixDQUFDLElBQUlvVSxFQUF4QixFQUE0QnBVLENBQUMsSUFBSSxDQUFqQyxFQUFvQztBQUNsQ3k4QixjQUFBQSxjQUFjLENBQUM5MUIsSUFBZixDQUFvQm1YLE1BQU0sQ0FBQzlkLENBQUQsQ0FBMUI7QUFDRDs7QUFFRCxtQkFBT3k4QixjQUFQO0FBQ0QsV0FSTztBQUp3QyxTQUFsRDs7QUFlQSxZQUFJL2pCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0IrZSxvQkFBMUIsRUFBZ0Q7QUFDOUNOLFVBQUFBLFVBQVU7QUFDWDs7QUFFRDtBQUNEOztBQUVELFVBQUlPLGNBQWMsR0FBRyxFQUFyQjtBQUNBLFVBQUlDLGFBQWEsR0FBRyxFQUFwQjs7QUFFQSxVQUFJdkIsS0FBSixFQUFXO0FBQ1QzaUIsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQmhKLElBQWxCLENBQXVCLE1BQU0yRyxNQUFNLENBQUN2RCxNQUFQLENBQWM0SSxVQUEzQyxFQUF1RHZULE1BQXZEO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBSyxJQUFJeEssQ0FBQyxHQUFHMjdCLFlBQWIsRUFBMkIzN0IsQ0FBQyxJQUFJNjdCLFVBQWhDLEVBQTRDNzdCLENBQUMsSUFBSSxDQUFqRCxFQUFvRDtBQUNsRCxjQUFJQSxDQUFDLEdBQUc0N0IsSUFBSixJQUFZNTdCLENBQUMsR0FBR29VLEVBQXBCLEVBQXdCO0FBQ3RCc0UsWUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQmhKLElBQWxCLENBQXVCLE1BQU0yRyxNQUFNLENBQUN2RCxNQUFQLENBQWM0SSxVQUFwQixHQUFpQyw2QkFBakMsR0FBaUUvZCxDQUFqRSxHQUFxRSxLQUE1RixFQUFtR3dLLE1BQW5HO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQUssSUFBSWdYLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUcxRCxNQUFNLENBQUM3ZCxNQUE3QixFQUFxQ3VoQixFQUFFLElBQUksQ0FBM0MsRUFBOEM7QUFDNUMsWUFBSUEsRUFBRSxJQUFJb2EsSUFBTixJQUFjcGEsRUFBRSxJQUFJcE4sRUFBeEIsRUFBNEI7QUFDMUIsY0FBSSxPQUFPeW5CLFVBQVAsS0FBc0IsV0FBdEIsSUFBcUNSLEtBQXpDLEVBQWdEO0FBQzlDdUIsWUFBQUEsYUFBYSxDQUFDajJCLElBQWQsQ0FBbUI2YSxFQUFuQjtBQUNELFdBRkQsTUFFTztBQUNMLGdCQUFJQSxFQUFFLEdBQUdxYSxVQUFULEVBQXFCZSxhQUFhLENBQUNqMkIsSUFBZCxDQUFtQjZhLEVBQW5CO0FBQ3JCLGdCQUFJQSxFQUFFLEdBQUdtYSxZQUFULEVBQXVCZ0IsY0FBYyxDQUFDaDJCLElBQWYsQ0FBb0I2YSxFQUFwQjtBQUN4QjtBQUNGO0FBQ0Y7O0FBRURvYixNQUFBQSxhQUFhLENBQUNqN0IsT0FBZCxDQUFzQixVQUFVbU8sS0FBVixFQUFpQjtBQUNyQzRJLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JySyxNQUFsQixDQUF5QnFyQixXQUFXLENBQUNqZSxNQUFNLENBQUNoTyxLQUFELENBQVAsRUFBZ0JBLEtBQWhCLENBQXBDO0FBQ0QsT0FGRDtBQUdBNnNCLE1BQUFBLGNBQWMsQ0FBQ2hHLElBQWYsQ0FBb0IsVUFBVWp3QixDQUFWLEVBQWFrd0IsQ0FBYixFQUFnQjtBQUNsQyxlQUFPQSxDQUFDLEdBQUdsd0IsQ0FBWDtBQUNELE9BRkQsRUFFRy9FLE9BRkgsQ0FFVyxVQUFVbU8sS0FBVixFQUFpQjtBQUMxQjRJLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JoSyxPQUFsQixDQUEwQmdyQixXQUFXLENBQUNqZSxNQUFNLENBQUNoTyxLQUFELENBQVAsRUFBZ0JBLEtBQWhCLENBQXJDO0FBQ0QsT0FKRDtBQUtBNEksTUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQnRZLFFBQWxCLENBQTJCLGVBQTNCLEVBQTRDa04sR0FBNUMsQ0FBZ0Rzc0IsVUFBaEQsRUFBNERqdEIsTUFBTSxHQUFHLElBQXJFO0FBQ0FvdEIsTUFBQUEsVUFBVTtBQUNYLEtBdEhXO0FBdUhaTCxJQUFBQSxXQUFXLEVBQUUsU0FBU0EsV0FBVCxDQUFxQmxjLEtBQXJCLEVBQTRCL1AsS0FBNUIsRUFBbUM7QUFDOUMsVUFBSTRJLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQTNCOztBQUVBLFVBQUl4SSxNQUFNLENBQUMwbkIsS0FBUCxJQUFnQm5rQixNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLENBQXFCL3NCLEtBQXJCLENBQXBCLEVBQWlEO0FBQy9DLGVBQU80SSxNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLENBQXFCL3NCLEtBQXJCLENBQVA7QUFDRDs7QUFFRCxVQUFJZ3RCLFFBQVEsR0FBRzNuQixNQUFNLENBQUM0bUIsV0FBUCxHQUFxQjd5QixDQUFDLENBQUNpTSxNQUFNLENBQUM0bUIsV0FBUCxDQUFtQjU2QixJQUFuQixDQUF3QnVYLE1BQXhCLEVBQWdDbUgsS0FBaEMsRUFBdUMvUCxLQUF2QyxDQUFELENBQXRCLEdBQXdFNUcsQ0FBQyxDQUFDLGtCQUFrQndQLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRJLFVBQWhDLEdBQTZDLCtCQUE3QyxHQUErRWpPLEtBQS9FLEdBQXVGLEtBQXZGLEdBQStGK1AsS0FBL0YsR0FBdUcsUUFBeEcsQ0FBeEY7QUFDQSxVQUFJLENBQUNpZCxRQUFRLENBQUM1eEIsSUFBVCxDQUFjLHlCQUFkLENBQUwsRUFBK0M0eEIsUUFBUSxDQUFDNXhCLElBQVQsQ0FBYyx5QkFBZCxFQUF5QzRFLEtBQXpDO0FBQy9DLFVBQUlxRixNQUFNLENBQUMwbkIsS0FBWCxFQUFrQm5rQixNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLENBQXFCL3NCLEtBQXJCLElBQThCZ3RCLFFBQTlCO0FBQ2xCLGFBQU9BLFFBQVA7QUFDRCxLQW5JVztBQW9JWmxSLElBQUFBLFdBQVcsRUFBRSxTQUFTQSxXQUFULENBQXFCOU4sTUFBckIsRUFBNkI7QUFDeEMsVUFBSXBGLE1BQU0sR0FBRyxJQUFiOztBQUVBLFVBQUksUUFBT29GLE1BQVAsTUFBa0IsUUFBbEIsSUFBOEIsWUFBWUEsTUFBOUMsRUFBc0Q7QUFDcEQsYUFBSyxJQUFJOWQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekMsY0FBSThkLE1BQU0sQ0FBQzlkLENBQUQsQ0FBVixFQUFlMFksTUFBTSxDQUFDaUYsT0FBUCxDQUFlRyxNQUFmLENBQXNCblgsSUFBdEIsQ0FBMkJtWCxNQUFNLENBQUM5ZCxDQUFELENBQWpDO0FBQ2hCO0FBQ0YsT0FKRCxNQUlPO0FBQ0wwWSxRQUFBQSxNQUFNLENBQUNpRixPQUFQLENBQWVHLE1BQWYsQ0FBc0JuWCxJQUF0QixDQUEyQm1YLE1BQTNCO0FBQ0Q7O0FBRURwRixNQUFBQSxNQUFNLENBQUNpRixPQUFQLENBQWU0SSxNQUFmLENBQXNCLElBQXRCO0FBQ0QsS0FoSlc7QUFpSlpzRixJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQi9OLE1BQXRCLEVBQThCO0FBQzFDLFVBQUlwRixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUkwSyxXQUFXLEdBQUcxSyxNQUFNLENBQUMwSyxXQUF6QjtBQUNBLFVBQUl1QyxjQUFjLEdBQUd2QyxXQUFXLEdBQUcsQ0FBbkM7QUFDQSxVQUFJMlosaUJBQWlCLEdBQUcsQ0FBeEI7O0FBRUEsVUFBSTEwQixLQUFLLENBQUNLLE9BQU4sQ0FBY29WLE1BQWQsQ0FBSixFQUEyQjtBQUN6QixhQUFLLElBQUk5ZCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHOGQsTUFBTSxDQUFDN2QsTUFBM0IsRUFBbUNELENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxjQUFJOGQsTUFBTSxDQUFDOWQsQ0FBRCxDQUFWLEVBQWUwWSxNQUFNLENBQUNpRixPQUFQLENBQWVHLE1BQWYsQ0FBc0J4UixPQUF0QixDQUE4QndSLE1BQU0sQ0FBQzlkLENBQUQsQ0FBcEM7QUFDaEI7O0FBRUQybEIsUUFBQUEsY0FBYyxHQUFHdkMsV0FBVyxHQUFHdEYsTUFBTSxDQUFDN2QsTUFBdEM7QUFDQTg4QixRQUFBQSxpQkFBaUIsR0FBR2pmLE1BQU0sQ0FBQzdkLE1BQTNCO0FBQ0QsT0FQRCxNQU9PO0FBQ0x5WSxRQUFBQSxNQUFNLENBQUNpRixPQUFQLENBQWVHLE1BQWYsQ0FBc0J4UixPQUF0QixDQUE4QndSLE1BQTlCO0FBQ0Q7O0FBRUQsVUFBSXBGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JrZixLQUExQixFQUFpQztBQUMvQixZQUFJQSxLQUFLLEdBQUdua0IsTUFBTSxDQUFDaUYsT0FBUCxDQUFla2YsS0FBM0I7QUFDQSxZQUFJRyxRQUFRLEdBQUcsRUFBZjtBQUNBMThCLFFBQUFBLE1BQU0sQ0FBQ29CLElBQVAsQ0FBWW03QixLQUFaLEVBQW1CbDdCLE9BQW5CLENBQTJCLFVBQVVzN0IsV0FBVixFQUF1QjtBQUNoRCxjQUFJQyxTQUFTLEdBQUdMLEtBQUssQ0FBQ0ksV0FBRCxDQUFyQjtBQUNBLGNBQUlFLGFBQWEsR0FBR0QsU0FBUyxDQUFDaHlCLElBQVYsQ0FBZSx5QkFBZixDQUFwQjs7QUFFQSxjQUFJaXlCLGFBQUosRUFBbUI7QUFDakJELFlBQUFBLFNBQVMsQ0FBQ2h5QixJQUFWLENBQWUseUJBQWYsRUFBMEMwUixRQUFRLENBQUN1Z0IsYUFBRCxFQUFnQixFQUFoQixDQUFSLEdBQThCLENBQXhFO0FBQ0Q7O0FBRURILFVBQUFBLFFBQVEsQ0FBQ3BnQixRQUFRLENBQUNxZ0IsV0FBRCxFQUFjLEVBQWQsQ0FBUixHQUE0QkYsaUJBQTdCLENBQVIsR0FBMERHLFNBQTFEO0FBQ0QsU0FURDtBQVVBeGtCLFFBQUFBLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZWtmLEtBQWYsR0FBdUJHLFFBQXZCO0FBQ0Q7O0FBRUR0a0IsTUFBQUEsTUFBTSxDQUFDaUYsT0FBUCxDQUFlNEksTUFBZixDQUFzQixJQUF0QjtBQUNBN04sTUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFldkMsY0FBZixFQUErQixDQUEvQjtBQUNELEtBcExXO0FBcUxad0csSUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJDLGFBQXJCLEVBQW9DO0FBQy9DLFVBQUkxVCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksT0FBTzBULGFBQVAsS0FBeUIsV0FBekIsSUFBd0NBLGFBQWEsS0FBSyxJQUE5RCxFQUFvRTtBQUNwRSxVQUFJaEosV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FBekI7O0FBRUEsVUFBSS9hLEtBQUssQ0FBQ0ssT0FBTixDQUFjMGpCLGFBQWQsQ0FBSixFQUFrQztBQUNoQyxhQUFLLElBQUlwc0IsQ0FBQyxHQUFHb3NCLGFBQWEsQ0FBQ25zQixNQUFkLEdBQXVCLENBQXBDLEVBQXVDRCxDQUFDLElBQUksQ0FBNUMsRUFBK0NBLENBQUMsSUFBSSxDQUFwRCxFQUF1RDtBQUNyRDBZLFVBQUFBLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZUcsTUFBZixDQUFzQnRRLE1BQXRCLENBQTZCNGUsYUFBYSxDQUFDcHNCLENBQUQsQ0FBMUMsRUFBK0MsQ0FBL0M7O0FBRUEsY0FBSTBZLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JrZixLQUExQixFQUFpQztBQUMvQixtQkFBT25rQixNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLENBQXFCelEsYUFBYSxDQUFDcHNCLENBQUQsQ0FBbEMsQ0FBUDtBQUNEOztBQUVELGNBQUlvc0IsYUFBYSxDQUFDcHNCLENBQUQsQ0FBYixHQUFtQm9qQixXQUF2QixFQUFvQ0EsV0FBVyxJQUFJLENBQWY7QUFDcENBLFVBQUFBLFdBQVcsR0FBR2hFLElBQUksQ0FBQ0ssR0FBTCxDQUFTMkQsV0FBVCxFQUFzQixDQUF0QixDQUFkO0FBQ0Q7QUFDRixPQVhELE1BV087QUFDTDFLLFFBQUFBLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZUcsTUFBZixDQUFzQnRRLE1BQXRCLENBQTZCNGUsYUFBN0IsRUFBNEMsQ0FBNUM7O0FBRUEsWUFBSTFULE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JrZixLQUExQixFQUFpQztBQUMvQixpQkFBT25rQixNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLENBQXFCelEsYUFBckIsQ0FBUDtBQUNEOztBQUVELFlBQUlBLGFBQWEsR0FBR2hKLFdBQXBCLEVBQWlDQSxXQUFXLElBQUksQ0FBZjtBQUNqQ0EsUUFBQUEsV0FBVyxHQUFHaEUsSUFBSSxDQUFDSyxHQUFMLENBQVMyRCxXQUFULEVBQXNCLENBQXRCLENBQWQ7QUFDRDs7QUFFRDFLLE1BQUFBLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZTRJLE1BQWYsQ0FBc0IsSUFBdEI7QUFDQTdOLE1BQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZTlFLFdBQWYsRUFBNEIsQ0FBNUI7QUFDRCxLQWxOVztBQW1OWmtKLElBQUFBLGVBQWUsRUFBRSxTQUFTQSxlQUFULEdBQTJCO0FBQzFDLFVBQUk1VCxNQUFNLEdBQUcsSUFBYjtBQUNBQSxNQUFBQSxNQUFNLENBQUNpRixPQUFQLENBQWVHLE1BQWYsR0FBd0IsRUFBeEI7O0FBRUEsVUFBSXBGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JrZixLQUExQixFQUFpQztBQUMvQm5rQixRQUFBQSxNQUFNLENBQUNpRixPQUFQLENBQWVrZixLQUFmLEdBQXVCLEVBQXZCO0FBQ0Q7O0FBRURua0IsTUFBQUEsTUFBTSxDQUFDaUYsT0FBUCxDQUFlNEksTUFBZixDQUFzQixJQUF0QjtBQUNBN04sTUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlLENBQWYsRUFBa0IsQ0FBbEI7QUFDRDtBQTdOVyxHQUFkO0FBK05BLE1BQUlrVixTQUFTLEdBQUc7QUFDZDNrQixJQUFBQSxJQUFJLEVBQUUsU0FEUTtBQUVkdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ053SSxNQUFBQSxPQUFPLEVBQUU7QUFDUEMsUUFBQUEsT0FBTyxFQUFFLEtBREY7QUFFUEUsUUFBQUEsTUFBTSxFQUFFLEVBRkQ7QUFHUCtlLFFBQUFBLEtBQUssRUFBRSxJQUhBO0FBSVBkLFFBQUFBLFdBQVcsRUFBRSxJQUpOO0FBS1BRLFFBQUFBLGNBQWMsRUFBRSxJQUxUO0FBTVBHLFFBQUFBLG9CQUFvQixFQUFFLElBTmY7QUFPUGxCLFFBQUFBLGVBQWUsRUFBRSxDQVBWO0FBUVBDLFFBQUFBLGNBQWMsRUFBRTtBQVJUO0FBREgsS0FGTTtBQWNkbDJCLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEJpRixRQUFBQSxPQUFPLEVBQUU3YyxRQUFRLENBQUMsRUFBRCxFQUFLczZCLE9BQUwsRUFBYztBQUM3QnRkLFVBQUFBLE1BQU0sRUFBRXBGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JHLE1BREQ7QUFFN0IrZSxVQUFBQSxLQUFLLEVBQUU7QUFGc0IsU0FBZDtBQURPLE9BQVQsQ0FBakI7QUFNRCxLQXRCYTtBQXVCZGp4QixJQUFBQSxFQUFFLEVBQUU7QUFDRnl4QixNQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxDQUFvQjNrQixNQUFwQixFQUE0QjtBQUN0QyxZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQTNCLEVBQW9DO0FBQ3BDbEYsUUFBQUEsTUFBTSxDQUFDN08sVUFBUCxDQUFrQmxELElBQWxCLENBQXVCK1IsTUFBTSxDQUFDdkQsTUFBUCxDQUFjdWdCLHNCQUFkLEdBQXVDLFNBQTlEO0FBQ0EsWUFBSTRILGVBQWUsR0FBRztBQUNwQjNhLFVBQUFBLG1CQUFtQixFQUFFO0FBREQsU0FBdEI7QUFHQXhPLFFBQUFBLE1BQU0sQ0FBQ3VFLE1BQU0sQ0FBQ3ZELE1BQVIsRUFBZ0Jtb0IsZUFBaEIsQ0FBTjtBQUNBbnBCLFFBQUFBLE1BQU0sQ0FBQ3VFLE1BQU0sQ0FBQzRjLGNBQVIsRUFBd0JnSSxlQUF4QixDQUFOOztBQUVBLFlBQUksQ0FBQzVrQixNQUFNLENBQUN2RCxNQUFQLENBQWNxVCxZQUFuQixFQUFpQztBQUMvQjlQLFVBQUFBLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZTRJLE1BQWY7QUFDRDtBQUNGLE9BYkM7QUFjRkksTUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsQ0FBc0JqTyxNQUF0QixFQUE4QjtBQUMxQyxZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQTNCLEVBQW9DO0FBQ3BDbEYsUUFBQUEsTUFBTSxDQUFDaUYsT0FBUCxDQUFlNEksTUFBZjtBQUNEO0FBakJDO0FBdkJVLEdBQWhCO0FBNENBLE1BQUlnWCxRQUFRLEdBQUc7QUFDYkMsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0Ixd0IsS0FBaEIsRUFBdUI7QUFDN0IsVUFBSTRMLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSSxDQUFDQSxNQUFNLENBQUNrRixPQUFaLEVBQXFCO0FBQ3JCLFVBQUl6WSxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJdEIsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsVUFBSThaLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzhFLFlBQWpCO0FBQ0EsVUFBSW5YLENBQUMsR0FBR3lHLEtBQVI7QUFDQSxVQUFJekcsQ0FBQyxDQUFDc21CLGFBQU4sRUFBcUJ0bUIsQ0FBQyxHQUFHQSxDQUFDLENBQUNzbUIsYUFBTixDQVBRLENBT2E7O0FBRTFDLFVBQUk4USxFQUFFLEdBQUdwM0IsQ0FBQyxDQUFDcTNCLE9BQUYsSUFBYXIzQixDQUFDLENBQUNzM0IsUUFBeEI7QUFDQSxVQUFJQyxVQUFVLEdBQUdsbEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMG9CLFFBQWQsQ0FBdUJELFVBQXhDO0FBQ0EsVUFBSUUsUUFBUSxHQUFHRixVQUFVLElBQUlILEVBQUUsS0FBSyxFQUFwQztBQUNBLFVBQUlNLFVBQVUsR0FBR0gsVUFBVSxJQUFJSCxFQUFFLEtBQUssRUFBdEM7QUFDQSxVQUFJTyxXQUFXLEdBQUdQLEVBQUUsS0FBSyxFQUF6QjtBQUNBLFVBQUlRLFlBQVksR0FBR1IsRUFBRSxLQUFLLEVBQTFCO0FBQ0EsVUFBSVMsU0FBUyxHQUFHVCxFQUFFLEtBQUssRUFBdkI7QUFDQSxVQUFJVSxXQUFXLEdBQUdWLEVBQUUsS0FBSyxFQUF6QixDQWhCNkIsQ0FnQkE7O0FBRTdCLFVBQUksQ0FBQy9rQixNQUFNLENBQUNrUSxjQUFSLEtBQTJCbFEsTUFBTSxDQUFDZ0UsWUFBUCxNQUF5QnVoQixZQUF6QixJQUF5Q3ZsQixNQUFNLENBQUNpRSxVQUFQLE1BQXVCd2hCLFdBQWhFLElBQStFSixVQUExRyxDQUFKLEVBQTJIO0FBQ3pILGVBQU8sS0FBUDtBQUNEOztBQUVELFVBQUksQ0FBQ3JsQixNQUFNLENBQUNtUSxjQUFSLEtBQTJCblEsTUFBTSxDQUFDZ0UsWUFBUCxNQUF5QnNoQixXQUF6QixJQUF3Q3RsQixNQUFNLENBQUNpRSxVQUFQLE1BQXVCdWhCLFNBQS9ELElBQTRFSixRQUF2RyxDQUFKLEVBQXNIO0FBQ3BILGVBQU8sS0FBUDtBQUNEOztBQUVELFVBQUl6M0IsQ0FBQyxDQUFDKzNCLFFBQUYsSUFBYy8zQixDQUFDLENBQUNnNEIsTUFBaEIsSUFBMEJoNEIsQ0FBQyxDQUFDaTRCLE9BQTVCLElBQXVDajRCLENBQUMsQ0FBQ2s0QixPQUE3QyxFQUFzRDtBQUNwRCxlQUFPbDNCLFNBQVA7QUFDRDs7QUFFRCxVQUFJMUQsUUFBUSxDQUFDM0IsYUFBVCxJQUEwQjJCLFFBQVEsQ0FBQzNCLGFBQVQsQ0FBdUJFLFFBQWpELEtBQThEeUIsUUFBUSxDQUFDM0IsYUFBVCxDQUF1QkUsUUFBdkIsQ0FBZ0MrVixXQUFoQyxPQUFrRCxPQUFsRCxJQUE2RHRVLFFBQVEsQ0FBQzNCLGFBQVQsQ0FBdUJFLFFBQXZCLENBQWdDK1YsV0FBaEMsT0FBa0QsVUFBN0ssQ0FBSixFQUE4TDtBQUM1TCxlQUFPNVEsU0FBUDtBQUNEOztBQUVELFVBQUlxUixNQUFNLENBQUN2RCxNQUFQLENBQWMwb0IsUUFBZCxDQUF1QlcsY0FBdkIsS0FBMENWLFFBQVEsSUFBSUMsVUFBWixJQUEwQkMsV0FBMUIsSUFBeUNDLFlBQXpDLElBQXlEQyxTQUF6RCxJQUFzRUMsV0FBaEgsQ0FBSixFQUFrSTtBQUNoSSxZQUFJTSxNQUFNLEdBQUcsS0FBYixDQURnSSxDQUM1Rzs7QUFFcEIsWUFBSS9sQixNQUFNLENBQUNtQyxHQUFQLENBQVdwTyxPQUFYLENBQW1CLE1BQU1pTSxNQUFNLENBQUN2RCxNQUFQLENBQWM0SSxVQUF2QyxFQUFtRDlkLE1BQW5ELEdBQTRELENBQTVELElBQWlFeVksTUFBTSxDQUFDbUMsR0FBUCxDQUFXcE8sT0FBWCxDQUFtQixNQUFNaU0sTUFBTSxDQUFDdkQsTUFBUCxDQUFjMlAsZ0JBQXZDLEVBQXlEN2tCLE1BQXpELEtBQW9FLENBQXpJLEVBQTRJO0FBQzFJLGlCQUFPb0gsU0FBUDtBQUNEOztBQUVELFlBQUl3VCxHQUFHLEdBQUduQyxNQUFNLENBQUNtQyxHQUFqQjtBQUNBLFlBQUk2akIsV0FBVyxHQUFHN2pCLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTzJCLFdBQXpCO0FBQ0EsWUFBSW1pQixZQUFZLEdBQUc5akIsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPNEIsWUFBMUI7QUFDQSxZQUFJbWlCLFdBQVcsR0FBR3o1QixNQUFNLENBQUNvcEIsVUFBekI7QUFDQSxZQUFJc1EsWUFBWSxHQUFHMTVCLE1BQU0sQ0FBQ214QixXQUExQjtBQUNBLFlBQUl3SSxZQUFZLEdBQUdwbUIsTUFBTSxDQUFDbUMsR0FBUCxDQUFXN0wsTUFBWCxFQUFuQjtBQUNBLFlBQUl1TyxHQUFKLEVBQVN1aEIsWUFBWSxDQUFDcHZCLElBQWIsSUFBcUJnSixNQUFNLENBQUNtQyxHQUFQLENBQVcsQ0FBWCxFQUFjdEwsVUFBbkM7QUFDVCxZQUFJd3ZCLFdBQVcsR0FBRyxDQUFDLENBQUNELFlBQVksQ0FBQ3B2QixJQUFkLEVBQW9Cb3ZCLFlBQVksQ0FBQ3J2QixHQUFqQyxDQUFELEVBQXdDLENBQUNxdkIsWUFBWSxDQUFDcHZCLElBQWIsR0FBb0JndkIsV0FBckIsRUFBa0NJLFlBQVksQ0FBQ3J2QixHQUEvQyxDQUF4QyxFQUE2RixDQUFDcXZCLFlBQVksQ0FBQ3B2QixJQUFkLEVBQW9Cb3ZCLFlBQVksQ0FBQ3J2QixHQUFiLEdBQW1Ca3ZCLFlBQXZDLENBQTdGLEVBQW1KLENBQUNHLFlBQVksQ0FBQ3B2QixJQUFiLEdBQW9CZ3ZCLFdBQXJCLEVBQWtDSSxZQUFZLENBQUNydkIsR0FBYixHQUFtQmt2QixZQUFyRCxDQUFuSixDQUFsQjs7QUFFQSxhQUFLLElBQUkzK0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRysrQixXQUFXLENBQUM5K0IsTUFBaEMsRUFBd0NELENBQUMsSUFBSSxDQUE3QyxFQUFnRDtBQUM5QyxjQUFJdzJCLEtBQUssR0FBR3VJLFdBQVcsQ0FBQy8rQixDQUFELENBQXZCOztBQUVBLGNBQUl3MkIsS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFZLENBQVosSUFBaUJBLEtBQUssQ0FBQyxDQUFELENBQUwsSUFBWW9JLFdBQTdCLElBQTRDcEksS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFZLENBQXhELElBQTZEQSxLQUFLLENBQUMsQ0FBRCxDQUFMLElBQVlxSSxZQUE3RSxFQUEyRjtBQUN6RixnQkFBSXJJLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxDQUFiLElBQWtCQSxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQWEsQ0FBbkMsRUFBc0MsU0FEbUQsQ0FDekM7O0FBRWhEaUksWUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRDtBQUNGOztBQUVELFlBQUksQ0FBQ0EsTUFBTCxFQUFhLE9BQU9wM0IsU0FBUDtBQUNkOztBQUVELFVBQUlxUixNQUFNLENBQUNnRSxZQUFQLEVBQUosRUFBMkI7QUFDekIsWUFBSW9oQixRQUFRLElBQUlDLFVBQVosSUFBMEJDLFdBQTFCLElBQXlDQyxZQUE3QyxFQUEyRDtBQUN6RCxjQUFJNTNCLENBQUMsQ0FBQ21vQixjQUFOLEVBQXNCbm9CLENBQUMsQ0FBQ21vQixjQUFGLEdBQXRCLEtBQThDbm9CLENBQUMsQ0FBQzI0QixXQUFGLEdBQWdCLEtBQWhCO0FBQy9DOztBQUVELFlBQUksQ0FBQ2pCLFVBQVUsSUFBSUUsWUFBZixLQUFnQyxDQUFDMWdCLEdBQWpDLElBQXdDLENBQUN1Z0IsUUFBUSxJQUFJRSxXQUFiLEtBQTZCemdCLEdBQXpFLEVBQThFN0UsTUFBTSxDQUFDMFEsU0FBUDtBQUM5RSxZQUFJLENBQUMwVSxRQUFRLElBQUlFLFdBQWIsS0FBNkIsQ0FBQ3pnQixHQUE5QixJQUFxQyxDQUFDd2dCLFVBQVUsSUFBSUUsWUFBZixLQUFnQzFnQixHQUF6RSxFQUE4RTdFLE1BQU0sQ0FBQytRLFNBQVA7QUFDL0UsT0FQRCxNQU9PO0FBQ0wsWUFBSXFVLFFBQVEsSUFBSUMsVUFBWixJQUEwQkcsU0FBMUIsSUFBdUNDLFdBQTNDLEVBQXdEO0FBQ3RELGNBQUk5M0IsQ0FBQyxDQUFDbW9CLGNBQU4sRUFBc0Jub0IsQ0FBQyxDQUFDbW9CLGNBQUYsR0FBdEIsS0FBOENub0IsQ0FBQyxDQUFDMjRCLFdBQUYsR0FBZ0IsS0FBaEI7QUFDL0M7O0FBRUQsWUFBSWpCLFVBQVUsSUFBSUksV0FBbEIsRUFBK0J6bEIsTUFBTSxDQUFDMFEsU0FBUDtBQUMvQixZQUFJMFUsUUFBUSxJQUFJSSxTQUFoQixFQUEyQnhsQixNQUFNLENBQUMrUSxTQUFQO0FBQzVCOztBQUVEL1EsTUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFVBQVosRUFBd0IrakIsRUFBeEI7QUFDQSxhQUFPcDJCLFNBQVA7QUFDRCxLQWxGWTtBQW1GYjR1QixJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJdmQsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJL1UsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsVUFBSWlWLE1BQU0sQ0FBQ21sQixRQUFQLENBQWdCamdCLE9BQXBCLEVBQTZCO0FBQzdCMVUsTUFBQUEsQ0FBQyxDQUFDdkYsUUFBRCxDQUFELENBQVlpSSxFQUFaLENBQWUsU0FBZixFQUEwQjhNLE1BQU0sQ0FBQ21sQixRQUFQLENBQWdCTCxNQUExQztBQUNBOWtCLE1BQUFBLE1BQU0sQ0FBQ21sQixRQUFQLENBQWdCamdCLE9BQWhCLEdBQTBCLElBQTFCO0FBQ0QsS0F6Rlk7QUEwRmJvWSxJQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixVQUFJdGQsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJL1UsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsVUFBSSxDQUFDaVYsTUFBTSxDQUFDbWxCLFFBQVAsQ0FBZ0JqZ0IsT0FBckIsRUFBOEI7QUFDOUIxVSxNQUFBQSxDQUFDLENBQUN2RixRQUFELENBQUQsQ0FBWXdKLEdBQVosQ0FBZ0IsU0FBaEIsRUFBMkJ1TCxNQUFNLENBQUNtbEIsUUFBUCxDQUFnQkwsTUFBM0M7QUFDQTlrQixNQUFBQSxNQUFNLENBQUNtbEIsUUFBUCxDQUFnQmpnQixPQUFoQixHQUEwQixLQUExQjtBQUNEO0FBaEdZLEdBQWY7QUFrR0EsTUFBSXFoQixVQUFVLEdBQUc7QUFDZnhtQixJQUFBQSxJQUFJLEVBQUUsVUFEUztBQUVmdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ04wb0IsTUFBQUEsUUFBUSxFQUFFO0FBQ1JqZ0IsUUFBQUEsT0FBTyxFQUFFLEtBREQ7QUFFUjRnQixRQUFBQSxjQUFjLEVBQUUsSUFGUjtBQUdSWixRQUFBQSxVQUFVLEVBQUU7QUFISjtBQURKLEtBRk87QUFTZnI0QixJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCbWxCLFFBQUFBLFFBQVEsRUFBRS84QixRQUFRLENBQUM7QUFDakI4YyxVQUFBQSxPQUFPLEVBQUU7QUFEUSxTQUFELEVBRWYyZixRQUZlO0FBRE0sT0FBVCxDQUFqQjtBQUtELEtBaEJjO0FBaUJmM3hCLElBQUFBLEVBQUUsRUFBRTtBQUNGZ08sTUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsQ0FBY2xCLE1BQWQsRUFBc0I7QUFDMUIsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMG9CLFFBQWQsQ0FBdUJqZ0IsT0FBM0IsRUFBb0M7QUFDbENsRixVQUFBQSxNQUFNLENBQUNtbEIsUUFBUCxDQUFnQjVILE1BQWhCO0FBQ0Q7QUFDRixPQUxDO0FBTUZuYyxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDLFlBQUlBLE1BQU0sQ0FBQ21sQixRQUFQLENBQWdCamdCLE9BQXBCLEVBQTZCO0FBQzNCbEYsVUFBQUEsTUFBTSxDQUFDbWxCLFFBQVAsQ0FBZ0I3SCxPQUFoQjtBQUNEO0FBQ0Y7QUFWQztBQWpCVyxHQUFqQjtBQStCQTs7QUFFQSxXQUFTa0osZ0JBQVQsR0FBNEI7QUFDMUIsUUFBSXY3QixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQSxRQUFJNDFCLFNBQVMsR0FBRyxTQUFoQjtBQUNBLFFBQUk4RixXQUFXLElBQUk5RixTQUFTLElBQUkxMUIsUUFBakIsQ0FBZjs7QUFFQSxRQUFJLENBQUN3N0IsV0FBTCxFQUFrQjtBQUNoQixVQUFJNXBCLE9BQU8sR0FBRzVSLFFBQVEsQ0FBQ25CLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtBQUNBK1MsTUFBQUEsT0FBTyxDQUFDM1MsWUFBUixDQUFxQnkyQixTQUFyQixFQUFnQyxTQUFoQztBQUNBOEYsTUFBQUEsV0FBVyxHQUFHLE9BQU81cEIsT0FBTyxDQUFDOGpCLFNBQUQsQ0FBZCxLQUE4QixVQUE1QztBQUNEOztBQUVELFFBQUksQ0FBQzhGLFdBQUQsSUFBZ0J4N0IsUUFBUSxDQUFDeTdCLGNBQXpCLElBQTJDejdCLFFBQVEsQ0FBQ3k3QixjQUFULENBQXdCQyxVQUFuRSxJQUFpRjtBQUNyRjtBQUNBMTdCLElBQUFBLFFBQVEsQ0FBQ3k3QixjQUFULENBQXdCQyxVQUF4QixDQUFtQyxFQUFuQyxFQUF1QyxFQUF2QyxNQUErQyxJQUYvQyxFQUVxRDtBQUNuRDtBQUNBRixNQUFBQSxXQUFXLEdBQUd4N0IsUUFBUSxDQUFDeTdCLGNBQVQsQ0FBd0JDLFVBQXhCLENBQW1DLGNBQW5DLEVBQW1ELEtBQW5ELENBQWQ7QUFDRDs7QUFFRCxXQUFPRixXQUFQO0FBQ0Q7O0FBRUQsTUFBSUcsVUFBVSxHQUFHO0FBQ2ZDLElBQUFBLGNBQWMsRUFBRXpzQixHQUFHLEVBREo7QUFFZjBzQixJQUFBQSxtQkFBbUIsRUFBRW40QixTQUZOO0FBR2ZvNEIsSUFBQUEsaUJBQWlCLEVBQUUsRUFISjtBQUlmM3lCLElBQUFBLEtBQUssRUFBRSxTQUFTQSxLQUFULEdBQWlCO0FBQ3RCLFVBQUkzSCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJRSxNQUFNLENBQUN0QixTQUFQLENBQWlCQyxTQUFqQixDQUEyQm1ELE9BQTNCLENBQW1DLFNBQW5DLElBQWdELENBQUMsQ0FBckQsRUFBd0QsT0FBTyxnQkFBUDtBQUN4RCxhQUFPaTRCLGdCQUFnQixLQUFLLE9BQUwsR0FBZSxZQUF0QztBQUNELEtBUmM7QUFTZnhWLElBQUFBLFNBQVMsRUFBRSxTQUFTQSxTQUFULENBQW1CcmpCLENBQW5CLEVBQXNCO0FBQy9CO0FBQ0EsVUFBSXE1QixVQUFVLEdBQUcsRUFBakI7QUFDQSxVQUFJQyxXQUFXLEdBQUcsRUFBbEI7QUFDQSxVQUFJQyxXQUFXLEdBQUcsR0FBbEI7QUFDQSxVQUFJQyxFQUFFLEdBQUcsQ0FBVDtBQUNBLFVBQUlDLEVBQUUsR0FBRyxDQUFULENBTitCLENBTW5COztBQUVaLFVBQUlDLEVBQUUsR0FBRyxDQUFUO0FBQ0EsVUFBSUMsRUFBRSxHQUFHLENBQVQsQ0FUK0IsQ0FTbkI7QUFDWjs7QUFFQSxVQUFJLFlBQVkzNUIsQ0FBaEIsRUFBbUI7QUFDakJ5NUIsUUFBQUEsRUFBRSxHQUFHejVCLENBQUMsQ0FBQ3lILE1BQVA7QUFDRDs7QUFFRCxVQUFJLGdCQUFnQnpILENBQXBCLEVBQXVCO0FBQ3JCeTVCLFFBQUFBLEVBQUUsR0FBRyxDQUFDejVCLENBQUMsQ0FBQzQ1QixVQUFILEdBQWdCLEdBQXJCO0FBQ0Q7O0FBRUQsVUFBSSxpQkFBaUI1NUIsQ0FBckIsRUFBd0I7QUFDdEJ5NUIsUUFBQUEsRUFBRSxHQUFHLENBQUN6NUIsQ0FBQyxDQUFDNjVCLFdBQUgsR0FBaUIsR0FBdEI7QUFDRDs7QUFFRCxVQUFJLGlCQUFpQjc1QixDQUFyQixFQUF3QjtBQUN0Qnc1QixRQUFBQSxFQUFFLEdBQUcsQ0FBQ3g1QixDQUFDLENBQUM4NUIsV0FBSCxHQUFpQixHQUF0QjtBQUNELE9BMUI4QixDQTBCN0I7OztBQUdGLFVBQUksVUFBVTk1QixDQUFWLElBQWVBLENBQUMsQ0FBQzZNLElBQUYsS0FBVzdNLENBQUMsQ0FBQys1QixlQUFoQyxFQUFpRDtBQUMvQ1AsUUFBQUEsRUFBRSxHQUFHQyxFQUFMO0FBQ0FBLFFBQUFBLEVBQUUsR0FBRyxDQUFMO0FBQ0Q7O0FBRURDLE1BQUFBLEVBQUUsR0FBR0YsRUFBRSxHQUFHSCxVQUFWO0FBQ0FNLE1BQUFBLEVBQUUsR0FBR0YsRUFBRSxHQUFHSixVQUFWOztBQUVBLFVBQUksWUFBWXI1QixDQUFoQixFQUFtQjtBQUNqQjI1QixRQUFBQSxFQUFFLEdBQUczNUIsQ0FBQyxDQUFDZzZCLE1BQVA7QUFDRDs7QUFFRCxVQUFJLFlBQVloNkIsQ0FBaEIsRUFBbUI7QUFDakIwNUIsUUFBQUEsRUFBRSxHQUFHMTVCLENBQUMsQ0FBQ2k2QixNQUFQO0FBQ0Q7O0FBRUQsVUFBSWo2QixDQUFDLENBQUMrM0IsUUFBRixJQUFjLENBQUMyQixFQUFuQixFQUF1QjtBQUNyQjtBQUNBQSxRQUFBQSxFQUFFLEdBQUdDLEVBQUw7QUFDQUEsUUFBQUEsRUFBRSxHQUFHLENBQUw7QUFDRDs7QUFFRCxVQUFJLENBQUNELEVBQUUsSUFBSUMsRUFBUCxLQUFjMzVCLENBQUMsQ0FBQ2s2QixTQUFwQixFQUErQjtBQUM3QixZQUFJbDZCLENBQUMsQ0FBQ2s2QixTQUFGLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCO0FBQ0FSLFVBQUFBLEVBQUUsSUFBSUosV0FBTjtBQUNBSyxVQUFBQSxFQUFFLElBQUlMLFdBQU47QUFDRCxTQUpELE1BSU87QUFDTDtBQUNBSSxVQUFBQSxFQUFFLElBQUlILFdBQU47QUFDQUksVUFBQUEsRUFBRSxJQUFJSixXQUFOO0FBQ0Q7QUFDRixPQTdEOEIsQ0E2RDdCOzs7QUFHRixVQUFJRyxFQUFFLElBQUksQ0FBQ0YsRUFBWCxFQUFlO0FBQ2JBLFFBQUFBLEVBQUUsR0FBR0UsRUFBRSxHQUFHLENBQUwsR0FBUyxDQUFDLENBQVYsR0FBYyxDQUFuQjtBQUNEOztBQUVELFVBQUlDLEVBQUUsSUFBSSxDQUFDRixFQUFYLEVBQWU7QUFDYkEsUUFBQUEsRUFBRSxHQUFHRSxFQUFFLEdBQUcsQ0FBTCxHQUFTLENBQUMsQ0FBVixHQUFjLENBQW5CO0FBQ0Q7O0FBRUQsYUFBTztBQUNMUSxRQUFBQSxLQUFLLEVBQUVYLEVBREY7QUFFTFksUUFBQUEsS0FBSyxFQUFFWCxFQUZGO0FBR0xZLFFBQUFBLE1BQU0sRUFBRVgsRUFISDtBQUlMWSxRQUFBQSxNQUFNLEVBQUVYO0FBSkgsT0FBUDtBQU1ELEtBdkZjO0FBd0ZmWSxJQUFBQSxnQkFBZ0IsRUFBRSxTQUFTQSxnQkFBVCxHQUE0QjtBQUM1QyxVQUFJbG9CLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSSxDQUFDQSxNQUFNLENBQUNrRixPQUFaLEVBQXFCO0FBQ3JCbEYsTUFBQUEsTUFBTSxDQUFDbW9CLFlBQVAsR0FBc0IsSUFBdEI7QUFDRCxLQTVGYztBQTZGZkMsSUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEI7QUFDNUMsVUFBSXBvQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDa0YsT0FBWixFQUFxQjtBQUNyQmxGLE1BQUFBLE1BQU0sQ0FBQ21vQixZQUFQLEdBQXNCLEtBQXRCO0FBQ0QsS0FqR2M7QUFrR2ZyRCxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjF3QixLQUFoQixFQUF1QjtBQUM3QixVQUFJekcsQ0FBQyxHQUFHeUcsS0FBUjtBQUNBLFVBQUl5akIsbUJBQW1CLEdBQUcsSUFBMUI7QUFDQSxVQUFJN1gsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQ2tGLE9BQVosRUFBcUI7QUFDckIsVUFBSXpJLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRyQixVQUEzQjs7QUFFQSxVQUFJcm9CLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQWxCLEVBQTJCO0FBQ3pCMWIsUUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDRDs7QUFFRCxVQUFJMXVCLE1BQU0sR0FBRzRZLE1BQU0sQ0FBQ21DLEdBQXBCOztBQUVBLFVBQUluQyxNQUFNLENBQUN2RCxNQUFQLENBQWM0ckIsVUFBZCxDQUF5QkMsWUFBekIsS0FBMEMsV0FBOUMsRUFBMkQ7QUFDekRsaEMsUUFBQUEsTUFBTSxHQUFHb0osQ0FBQyxDQUFDd1AsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNHJCLFVBQWQsQ0FBeUJDLFlBQTFCLENBQVY7QUFDRDs7QUFFRCxVQUFJLENBQUN0b0IsTUFBTSxDQUFDbW9CLFlBQVIsSUFBd0IsQ0FBQy9nQyxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVVtTCxRQUFWLENBQW1CNUUsQ0FBQyxDQUFDdkcsTUFBckIsQ0FBekIsSUFBeUQsQ0FBQ3FWLE1BQU0sQ0FBQzhyQixjQUFyRSxFQUFxRixPQUFPLElBQVA7QUFDckYsVUFBSTU2QixDQUFDLENBQUNzbUIsYUFBTixFQUFxQnRtQixDQUFDLEdBQUdBLENBQUMsQ0FBQ3NtQixhQUFOLENBbEJRLENBa0JhOztBQUUxQyxVQUFJdVUsS0FBSyxHQUFHLENBQVo7QUFDQSxVQUFJQyxTQUFTLEdBQUd6b0IsTUFBTSxDQUFDOEUsWUFBUCxHQUFzQixDQUFDLENBQXZCLEdBQTJCLENBQTNDO0FBQ0EsVUFBSXZQLElBQUksR0FBR3F4QixVQUFVLENBQUM1VixTQUFYLENBQXFCcmpCLENBQXJCLENBQVg7O0FBRUEsVUFBSThPLE1BQU0sQ0FBQ2lzQixXQUFYLEVBQXdCO0FBQ3RCLFlBQUkxb0IsTUFBTSxDQUFDZ0UsWUFBUCxFQUFKLEVBQTJCO0FBQ3pCLGNBQUkwQyxJQUFJLENBQUM2QixHQUFMLENBQVNoVCxJQUFJLENBQUN5eUIsTUFBZCxJQUF3QnRoQixJQUFJLENBQUM2QixHQUFMLENBQVNoVCxJQUFJLENBQUMweUIsTUFBZCxDQUE1QixFQUFtRE8sS0FBSyxHQUFHLENBQUNqekIsSUFBSSxDQUFDeXlCLE1BQU4sR0FBZVMsU0FBdkIsQ0FBbkQsS0FBeUYsT0FBTyxJQUFQO0FBQzFGLFNBRkQsTUFFTyxJQUFJL2hCLElBQUksQ0FBQzZCLEdBQUwsQ0FBU2hULElBQUksQ0FBQzB5QixNQUFkLElBQXdCdmhCLElBQUksQ0FBQzZCLEdBQUwsQ0FBU2hULElBQUksQ0FBQ3l5QixNQUFkLENBQTVCLEVBQW1EUSxLQUFLLEdBQUcsQ0FBQ2p6QixJQUFJLENBQUMweUIsTUFBZCxDQUFuRCxLQUE2RSxPQUFPLElBQVA7QUFDckYsT0FKRCxNQUlPO0FBQ0xPLFFBQUFBLEtBQUssR0FBRzloQixJQUFJLENBQUM2QixHQUFMLENBQVNoVCxJQUFJLENBQUN5eUIsTUFBZCxJQUF3QnRoQixJQUFJLENBQUM2QixHQUFMLENBQVNoVCxJQUFJLENBQUMweUIsTUFBZCxDQUF4QixHQUFnRCxDQUFDMXlCLElBQUksQ0FBQ3l5QixNQUFOLEdBQWVTLFNBQS9ELEdBQTJFLENBQUNsekIsSUFBSSxDQUFDMHlCLE1BQXpGO0FBQ0Q7O0FBRUQsVUFBSU8sS0FBSyxLQUFLLENBQWQsRUFBaUIsT0FBTyxJQUFQO0FBQ2pCLFVBQUkvckIsTUFBTSxDQUFDa3NCLE1BQVgsRUFBbUJILEtBQUssR0FBRyxDQUFDQSxLQUFULENBakNVLENBaUNNOztBQUVuQyxVQUFJSSxTQUFTLEdBQUc1b0IsTUFBTSxDQUFDekYsWUFBUCxLQUF3Qml1QixLQUFLLEdBQUcvckIsTUFBTSxDQUFDb3NCLFdBQXZEO0FBQ0EsVUFBSUQsU0FBUyxJQUFJNW9CLE1BQU0sQ0FBQ29MLFlBQVAsRUFBakIsRUFBd0N3ZCxTQUFTLEdBQUc1b0IsTUFBTSxDQUFDb0wsWUFBUCxFQUFaO0FBQ3hDLFVBQUl3ZCxTQUFTLElBQUk1b0IsTUFBTSxDQUFDNkwsWUFBUCxFQUFqQixFQUF3QytjLFNBQVMsR0FBRzVvQixNQUFNLENBQUM2TCxZQUFQLEVBQVosQ0FyQ1gsQ0FxQzhDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQWdNLE1BQUFBLG1CQUFtQixHQUFHN1gsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBZCxHQUFxQixJQUFyQixHQUE0QixFQUFFaWMsU0FBUyxLQUFLNW9CLE1BQU0sQ0FBQ29MLFlBQVAsRUFBZCxJQUF1Q3dkLFNBQVMsS0FBSzVvQixNQUFNLENBQUM2TCxZQUFQLEVBQXZELENBQWxEO0FBQ0EsVUFBSWdNLG1CQUFtQixJQUFJN1gsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2EsTUFBekMsRUFBaUQ3cEIsQ0FBQyxDQUFDOHBCLGVBQUY7O0FBRWpELFVBQUksQ0FBQ3pYLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3diLFFBQW5CLEVBQTZCO0FBQzNCO0FBQ0EsWUFBSTZRLFFBQVEsR0FBRztBQUNiMVEsVUFBQUEsSUFBSSxFQUFFaGUsR0FBRyxFQURJO0FBRWJvdUIsVUFBQUEsS0FBSyxFQUFFOWhCLElBQUksQ0FBQzZCLEdBQUwsQ0FBU2lnQixLQUFULENBRk07QUFHYmxaLFVBQUFBLFNBQVMsRUFBRTVJLElBQUksQ0FBQ3FpQixJQUFMLENBQVVQLEtBQVYsQ0FIRTtBQUliUSxVQUFBQSxHQUFHLEVBQUU1MEI7QUFKUSxTQUFmLENBRjJCLENBT3hCOztBQUVILFlBQUkyeUIsaUJBQWlCLEdBQUcvbUIsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J0QixpQkFBMUM7O0FBRUEsWUFBSUEsaUJBQWlCLENBQUN4L0IsTUFBbEIsSUFBNEIsQ0FBaEMsRUFBbUM7QUFDakN3L0IsVUFBQUEsaUJBQWlCLENBQUNrQyxLQUFsQixHQURpQyxDQUNOO0FBQzVCOztBQUVELFlBQUlDLFNBQVMsR0FBR25DLGlCQUFpQixDQUFDeC9CLE1BQWxCLEdBQTJCdy9CLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQ3gvQixNQUFsQixHQUEyQixDQUE1QixDQUE1QyxHQUE2RW9ILFNBQTdGO0FBQ0FvNEIsUUFBQUEsaUJBQWlCLENBQUM5NEIsSUFBbEIsQ0FBdUI2NkIsUUFBdkIsRUFoQjJCLENBZ0JPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBSUksU0FBSixFQUFlO0FBQ2IsY0FBSUosUUFBUSxDQUFDeFosU0FBVCxLQUF1QjRaLFNBQVMsQ0FBQzVaLFNBQWpDLElBQThDd1osUUFBUSxDQUFDTixLQUFULEdBQWlCVSxTQUFTLENBQUNWLEtBQXpFLElBQWtGTSxRQUFRLENBQUMxUSxJQUFULEdBQWdCOFEsU0FBUyxDQUFDOVEsSUFBVixHQUFpQixHQUF2SCxFQUE0SDtBQUMxSHBZLFlBQUFBLE1BQU0sQ0FBQ3FvQixVQUFQLENBQWtCYyxhQUFsQixDQUFnQ0wsUUFBaEM7QUFDRDtBQUNGLFNBSkQsTUFJTztBQUNMOW9CLFVBQUFBLE1BQU0sQ0FBQ3FvQixVQUFQLENBQWtCYyxhQUFsQixDQUFnQ0wsUUFBaEM7QUFDRCxTQTdCMEIsQ0E2QnpCO0FBQ0Y7OztBQUdBLFlBQUk5b0IsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0JlLGFBQWxCLENBQWdDTixRQUFoQyxDQUFKLEVBQStDO0FBQzdDLGlCQUFPLElBQVA7QUFDRDtBQUNGLE9BcENELE1Bb0NPO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUlPLFNBQVMsR0FBRztBQUNkalIsVUFBQUEsSUFBSSxFQUFFaGUsR0FBRyxFQURLO0FBRWRvdUIsVUFBQUEsS0FBSyxFQUFFOWhCLElBQUksQ0FBQzZCLEdBQUwsQ0FBU2lnQixLQUFULENBRk87QUFHZGxaLFVBQUFBLFNBQVMsRUFBRTVJLElBQUksQ0FBQ3FpQixJQUFMLENBQVVQLEtBQVY7QUFIRyxTQUFoQjtBQUtBLFlBQUkxQixtQkFBbUIsR0FBRzltQixNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnZCLG1CQUE1QztBQUNBLFlBQUl3QyxpQkFBaUIsR0FBR3hDLG1CQUFtQixJQUFJdUMsU0FBUyxDQUFDalIsSUFBVixHQUFpQjBPLG1CQUFtQixDQUFDMU8sSUFBcEIsR0FBMkIsR0FBbkUsSUFBMEVpUixTQUFTLENBQUNiLEtBQVYsSUFBbUIxQixtQkFBbUIsQ0FBQzBCLEtBQWpILElBQTBIYSxTQUFTLENBQUMvWixTQUFWLEtBQXdCd1gsbUJBQW1CLENBQUN4WCxTQUE5TDs7QUFFQSxZQUFJLENBQUNnYSxpQkFBTCxFQUF3QjtBQUN0QnRwQixVQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnZCLG1CQUFsQixHQUF3Q240QixTQUF4Qzs7QUFFQSxjQUFJcVIsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbEIsRUFBd0I7QUFDdEIzTSxZQUFBQSxNQUFNLENBQUM2USxPQUFQO0FBQ0Q7O0FBRUQsY0FBSXNILFFBQVEsR0FBR25ZLE1BQU0sQ0FBQ3pGLFlBQVAsS0FBd0JpdUIsS0FBSyxHQUFHL3JCLE1BQU0sQ0FBQ29zQixXQUF0RDtBQUNBLGNBQUk3YyxZQUFZLEdBQUdoTSxNQUFNLENBQUM4TCxXQUExQjtBQUNBLGNBQUlHLE1BQU0sR0FBR2pNLE1BQU0sQ0FBQytMLEtBQXBCO0FBQ0EsY0FBSW9NLFFBQVEsSUFBSW5ZLE1BQU0sQ0FBQ29MLFlBQVAsRUFBaEIsRUFBdUMrTSxRQUFRLEdBQUduWSxNQUFNLENBQUNvTCxZQUFQLEVBQVg7QUFDdkMsY0FBSStNLFFBQVEsSUFBSW5ZLE1BQU0sQ0FBQzZMLFlBQVAsRUFBaEIsRUFBdUNzTSxRQUFRLEdBQUduWSxNQUFNLENBQUM2TCxZQUFQLEVBQVg7QUFDdkM3TCxVQUFBQSxNQUFNLENBQUN1SyxhQUFQLENBQXFCLENBQXJCO0FBQ0F2SyxVQUFBQSxNQUFNLENBQUNpTyxZQUFQLENBQW9Ca0ssUUFBcEI7QUFDQW5ZLFVBQUFBLE1BQU0sQ0FBQzBMLGNBQVA7QUFDQTFMLFVBQUFBLE1BQU0sQ0FBQ2dOLGlCQUFQO0FBQ0FoTixVQUFBQSxNQUFNLENBQUNrTSxtQkFBUDs7QUFFQSxjQUFJLENBQUNGLFlBQUQsSUFBaUJoTSxNQUFNLENBQUM4TCxXQUF4QixJQUF1QyxDQUFDRyxNQUFELElBQVdqTSxNQUFNLENBQUMrTCxLQUE3RCxFQUFvRTtBQUNsRS9MLFlBQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0Q7O0FBRUQsY0FBSWxNLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY21kLGNBQWxCLEVBQWtDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTN0QixZQUFBQSxZQUFZLENBQUMrVCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQmtCLE9BQW5CLENBQVo7QUFDQXZwQixZQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQmtCLE9BQWxCLEdBQTRCNTZCLFNBQTVCO0FBQ0EsZ0JBQUk2NkIsa0JBQWtCLEdBQUd4cEIsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J0QixpQkFBM0M7O0FBRUEsZ0JBQUl5QyxrQkFBa0IsQ0FBQ2ppQyxNQUFuQixJQUE2QixFQUFqQyxFQUFxQztBQUNuQ2lpQyxjQUFBQSxrQkFBa0IsQ0FBQ1AsS0FBbkIsR0FEbUMsQ0FDUDs7QUFFN0I7O0FBRUQsZ0JBQUlRLFVBQVUsR0FBR0Qsa0JBQWtCLENBQUNqaUMsTUFBbkIsR0FBNEJpaUMsa0JBQWtCLENBQUNBLGtCQUFrQixDQUFDamlDLE1BQW5CLEdBQTRCLENBQTdCLENBQTlDLEdBQWdGb0gsU0FBakc7O0FBRUEsZ0JBQUkrNkIsVUFBVSxHQUFHRixrQkFBa0IsQ0FBQyxDQUFELENBQW5DOztBQUVBQSxZQUFBQSxrQkFBa0IsQ0FBQ3Y3QixJQUFuQixDQUF3Qm83QixTQUF4Qjs7QUFFQSxnQkFBSUksVUFBVSxLQUFLSixTQUFTLENBQUNiLEtBQVYsR0FBa0JpQixVQUFVLENBQUNqQixLQUE3QixJQUFzQ2EsU0FBUyxDQUFDL1osU0FBVixLQUF3Qm1hLFVBQVUsQ0FBQ25hLFNBQTlFLENBQWQsRUFBd0c7QUFDdEc7QUFDQWthLGNBQUFBLGtCQUFrQixDQUFDMTBCLE1BQW5CLENBQTBCLENBQTFCO0FBQ0QsYUFIRCxNQUdPLElBQUkwMEIsa0JBQWtCLENBQUNqaUMsTUFBbkIsSUFBNkIsRUFBN0IsSUFBbUM4aEMsU0FBUyxDQUFDalIsSUFBVixHQUFpQnNSLFVBQVUsQ0FBQ3RSLElBQTVCLEdBQW1DLEdBQXRFLElBQTZFc1IsVUFBVSxDQUFDbEIsS0FBWCxHQUFtQmEsU0FBUyxDQUFDYixLQUE3QixJQUFzQyxDQUFuSCxJQUF3SGEsU0FBUyxDQUFDYixLQUFWLElBQW1CLENBQS9JLEVBQWtKO0FBQ3ZKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFJbUIsZUFBZSxHQUFHbkIsS0FBSyxHQUFHLENBQVIsR0FBWSxHQUFaLEdBQWtCLEdBQXhDO0FBQ0F4b0IsY0FBQUEsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J2QixtQkFBbEIsR0FBd0N1QyxTQUF4Qzs7QUFFQUcsY0FBQUEsa0JBQWtCLENBQUMxMEIsTUFBbkIsQ0FBMEIsQ0FBMUI7O0FBRUFrTCxjQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQmtCLE9BQWxCLEdBQTRCcnZCLFFBQVEsQ0FBQyxZQUFZO0FBQy9DOEYsZ0JBQUFBLE1BQU0sQ0FBQ3NSLGNBQVAsQ0FBc0J0UixNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUFwQyxFQUEyQyxJQUEzQyxFQUFpRDFiLFNBQWpELEVBQTREZzdCLGVBQTVEO0FBQ0QsZUFGbUMsRUFFakMsQ0FGaUMsQ0FBcEMsQ0FadUosQ0FjaEo7QUFDUjs7QUFFRCxnQkFBSSxDQUFDM3BCLE1BQU0sQ0FBQ3FvQixVQUFQLENBQWtCa0IsT0FBdkIsRUFBZ0M7QUFDOUI7QUFDQTtBQUNBO0FBQ0F2cEIsY0FBQUEsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0JrQixPQUFsQixHQUE0QnJ2QixRQUFRLENBQUMsWUFBWTtBQUMvQyxvQkFBSXl2QixlQUFlLEdBQUcsR0FBdEI7QUFDQTNwQixnQkFBQUEsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J2QixtQkFBbEIsR0FBd0N1QyxTQUF4Qzs7QUFFQUcsZ0JBQUFBLGtCQUFrQixDQUFDMTBCLE1BQW5CLENBQTBCLENBQTFCOztBQUVBa0wsZ0JBQUFBLE1BQU0sQ0FBQ3NSLGNBQVAsQ0FBc0J0UixNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUFwQyxFQUEyQyxJQUEzQyxFQUFpRDFiLFNBQWpELEVBQTREZzdCLGVBQTVEO0FBQ0QsZUFQbUMsRUFPakMsR0FQaUMsQ0FBcEM7QUFRRDtBQUNGLFdBbEZxQixDQWtGcEI7OztBQUdGLGNBQUksQ0FBQ0wsaUJBQUwsRUFBd0J0cEIsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFFBQVosRUFBc0JyVCxDQUF0QixFQXJGRixDQXFGNEI7O0FBRWxELGNBQUlxUyxNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLElBQTBCOWEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjbXRCLDRCQUE1QyxFQUEwRTVwQixNQUFNLENBQUM4YSxRQUFQLENBQWdCK08sSUFBaEIsR0F2RnBELENBdUY0RTs7QUFFbEcsY0FBSTFSLFFBQVEsS0FBS25ZLE1BQU0sQ0FBQ29MLFlBQVAsRUFBYixJQUFzQytNLFFBQVEsS0FBS25ZLE1BQU0sQ0FBQzZMLFlBQVAsRUFBdkQsRUFBOEUsT0FBTyxJQUFQO0FBQy9FO0FBQ0Y7O0FBRUQsVUFBSWxlLENBQUMsQ0FBQ21vQixjQUFOLEVBQXNCbm9CLENBQUMsQ0FBQ21vQixjQUFGLEdBQXRCLEtBQThDbm9CLENBQUMsQ0FBQzI0QixXQUFGLEdBQWdCLEtBQWhCO0FBQzlDLGFBQU8sS0FBUDtBQUNELEtBblNjO0FBb1NmNkMsSUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJMLFFBQXZCLEVBQWlDO0FBQzlDLFVBQUk5b0IsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJdlQsTUFBTSxHQUFHRixTQUFTLEVBQXRCOztBQUVBLFVBQUksS0FBS2tRLE1BQUwsQ0FBWTRyQixVQUFaLENBQXVCeUIsY0FBdkIsSUFBeUNoQixRQUFRLENBQUNOLEtBQVQsR0FBaUIsS0FBSy9yQixNQUFMLENBQVk0ckIsVUFBWixDQUF1QnlCLGNBQXJGLEVBQXFHO0FBQ25HO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQsVUFBSSxLQUFLcnRCLE1BQUwsQ0FBWTRyQixVQUFaLENBQXVCMEIsYUFBdkIsSUFBd0MzdkIsR0FBRyxLQUFLNEYsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J4QixjQUExQixHQUEyQyxLQUFLcHFCLE1BQUwsQ0FBWTRyQixVQUFaLENBQXVCMEIsYUFBOUcsRUFBNkg7QUFDM0g7QUFDQSxlQUFPLEtBQVA7QUFDRCxPQVo2QyxDQVk1QztBQUNGO0FBQ0E7OztBQUdBLFVBQUlqQixRQUFRLENBQUNOLEtBQVQsSUFBa0IsQ0FBbEIsSUFBdUJwdUIsR0FBRyxLQUFLNEYsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0J4QixjQUExQixHQUEyQyxFQUF0RSxFQUEwRTtBQUN4RTtBQUNBLGVBQU8sSUFBUDtBQUNELE9BcEI2QyxDQW9CNUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxVQUFJaUMsUUFBUSxDQUFDeFosU0FBVCxHQUFxQixDQUF6QixFQUE0QjtBQUMxQixZQUFJLENBQUMsQ0FBQ3RQLE1BQU0sQ0FBQytMLEtBQVIsSUFBaUIvTCxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFoQyxLQUF5QyxDQUFDM00sTUFBTSxDQUFDNk8sU0FBckQsRUFBZ0U7QUFDOUQ3TyxVQUFBQSxNQUFNLENBQUMwUSxTQUFQO0FBQ0ExUSxVQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksUUFBWixFQUFzQjhuQixRQUFRLENBQUNFLEdBQS9CO0FBQ0Q7QUFDRixPQUxELE1BS08sSUFBSSxDQUFDLENBQUNocEIsTUFBTSxDQUFDOEwsV0FBUixJQUF1QjlMLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQXRDLEtBQStDLENBQUMzTSxNQUFNLENBQUM2TyxTQUEzRCxFQUFzRTtBQUMzRTdPLFFBQUFBLE1BQU0sQ0FBQytRLFNBQVA7QUFDQS9RLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxRQUFaLEVBQXNCOG5CLFFBQVEsQ0FBQ0UsR0FBL0I7QUFDRCxPQTFDNkMsQ0EwQzVDOzs7QUFHRmhwQixNQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnhCLGNBQWxCLEdBQW1DLElBQUlwNkIsTUFBTSxDQUFDWCxJQUFYLEdBQWtCaytCLE9BQWxCLEVBQW5DLENBN0M4QyxDQTZDa0I7O0FBRWhFLGFBQU8sS0FBUDtBQUNELEtBcFZjO0FBcVZmWixJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1Qk4sUUFBdkIsRUFBaUM7QUFDOUMsVUFBSTlvQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWM0ckIsVUFBM0I7O0FBRUEsVUFBSVMsUUFBUSxDQUFDeFosU0FBVCxHQUFxQixDQUF6QixFQUE0QjtBQUMxQixZQUFJdFAsTUFBTSxDQUFDK0wsS0FBUCxJQUFnQixDQUFDL0wsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBL0IsSUFBdUNsUSxNQUFNLENBQUM4ckIsY0FBbEQsRUFBa0U7QUFDaEU7QUFDQSxpQkFBTyxJQUFQO0FBQ0Q7QUFDRixPQUxELE1BS08sSUFBSXZvQixNQUFNLENBQUM4TCxXQUFQLElBQXNCLENBQUM5TCxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFyQyxJQUE2Q2xRLE1BQU0sQ0FBQzhyQixjQUF4RCxFQUF3RTtBQUM3RTtBQUNBLGVBQU8sSUFBUDtBQUNEOztBQUVELGFBQU8sS0FBUDtBQUNELEtBcFdjO0FBcVdmaEwsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEIsVUFBSXZkLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTVMLEtBQUssR0FBR3d5QixVQUFVLENBQUN4eUIsS0FBWCxFQUFaOztBQUVBLFVBQUk0TCxNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFsQixFQUEyQjtBQUN6QnJKLFFBQUFBLE1BQU0sQ0FBQ21PLFNBQVAsQ0FBaUI5a0IsbUJBQWpCLENBQXFDK0ssS0FBckMsRUFBNEM0TCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnZELE1BQTlEO0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDMXdCLEtBQUwsRUFBWSxPQUFPLEtBQVA7QUFDWixVQUFJNEwsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0JuakIsT0FBdEIsRUFBK0IsT0FBTyxLQUFQO0FBQy9CLFVBQUk5ZCxNQUFNLEdBQUc0WSxNQUFNLENBQUNtQyxHQUFwQjs7QUFFQSxVQUFJbkMsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNHJCLFVBQWQsQ0FBeUJDLFlBQXpCLEtBQTBDLFdBQTlDLEVBQTJEO0FBQ3pEbGhDLFFBQUFBLE1BQU0sR0FBR29KLENBQUMsQ0FBQ3dQLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRyQixVQUFkLENBQXlCQyxZQUExQixDQUFWO0FBQ0Q7O0FBRURsaEMsTUFBQUEsTUFBTSxDQUFDOEwsRUFBUCxDQUFVLFlBQVYsRUFBd0I4TSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQkgsZ0JBQTFDO0FBQ0E5Z0MsTUFBQUEsTUFBTSxDQUFDOEwsRUFBUCxDQUFVLFlBQVYsRUFBd0I4TSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQkQsZ0JBQTFDO0FBQ0FoaEMsTUFBQUEsTUFBTSxDQUFDOEwsRUFBUCxDQUFVa0IsS0FBVixFQUFpQjRMLE1BQU0sQ0FBQ3FvQixVQUFQLENBQWtCdkQsTUFBbkM7QUFDQTlrQixNQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQm5qQixPQUFsQixHQUE0QixJQUE1QjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBM1hjO0FBNFhmb1ksSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSXRkLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTVMLEtBQUssR0FBR3d5QixVQUFVLENBQUN4eUIsS0FBWCxFQUFaOztBQUVBLFVBQUk0TCxNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFsQixFQUEyQjtBQUN6QnJKLFFBQUFBLE1BQU0sQ0FBQ21PLFNBQVAsQ0FBaUIva0IsZ0JBQWpCLENBQWtDZ0wsS0FBbEMsRUFBeUM0TCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnZELE1BQTNEO0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDMXdCLEtBQUwsRUFBWSxPQUFPLEtBQVA7QUFDWixVQUFJLENBQUM0TCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQm5qQixPQUF2QixFQUFnQyxPQUFPLEtBQVA7QUFDaEMsVUFBSTlkLE1BQU0sR0FBRzRZLE1BQU0sQ0FBQ21DLEdBQXBCOztBQUVBLFVBQUluQyxNQUFNLENBQUN2RCxNQUFQLENBQWM0ckIsVUFBZCxDQUF5QkMsWUFBekIsS0FBMEMsV0FBOUMsRUFBMkQ7QUFDekRsaEMsUUFBQUEsTUFBTSxHQUFHb0osQ0FBQyxDQUFDd1AsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNHJCLFVBQWQsQ0FBeUJDLFlBQTFCLENBQVY7QUFDRDs7QUFFRGxoQyxNQUFBQSxNQUFNLENBQUNxTixHQUFQLENBQVdMLEtBQVgsRUFBa0I0TCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQnZELE1BQXBDO0FBQ0E5a0IsTUFBQUEsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0JuakIsT0FBbEIsR0FBNEIsS0FBNUI7QUFDQSxhQUFPLElBQVA7QUFDRDtBQWhaYyxHQUFqQjtBQWtaQSxNQUFJK2tCLFlBQVksR0FBRztBQUNqQmxxQixJQUFBQSxJQUFJLEVBQUUsWUFEVztBQUVqQnRELElBQUFBLE1BQU0sRUFBRTtBQUNONHJCLE1BQUFBLFVBQVUsRUFBRTtBQUNWbmpCLFFBQUFBLE9BQU8sRUFBRSxLQURDO0FBRVZxakIsUUFBQUEsY0FBYyxFQUFFLEtBRk47QUFHVkksUUFBQUEsTUFBTSxFQUFFLEtBSEU7QUFJVkQsUUFBQUEsV0FBVyxFQUFFLEtBSkg7QUFLVkcsUUFBQUEsV0FBVyxFQUFFLENBTEg7QUFNVlAsUUFBQUEsWUFBWSxFQUFFLFdBTko7QUFPVndCLFFBQUFBLGNBQWMsRUFBRSxJQVBOO0FBUVZDLFFBQUFBLGFBQWEsRUFBRTtBQVJMO0FBRE4sS0FGUztBQWNqQmw5QixJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCcW9CLFFBQUFBLFVBQVUsRUFBRTtBQUNWbmpCLFVBQUFBLE9BQU8sRUFBRSxLQURDO0FBRVYyaEIsVUFBQUEsY0FBYyxFQUFFenNCLEdBQUcsRUFGVDtBQUdWMHNCLFVBQUFBLG1CQUFtQixFQUFFbjRCLFNBSFg7QUFJVm80QixVQUFBQSxpQkFBaUIsRUFBRSxFQUpUO0FBS1Z4SixVQUFBQSxNQUFNLEVBQUVxSixVQUFVLENBQUNySixNQUxUO0FBTVZELFVBQUFBLE9BQU8sRUFBRXNKLFVBQVUsQ0FBQ3RKLE9BTlY7QUFPVndILFVBQUFBLE1BQU0sRUFBRThCLFVBQVUsQ0FBQzlCLE1BUFQ7QUFRVm9ELFVBQUFBLGdCQUFnQixFQUFFdEIsVUFBVSxDQUFDc0IsZ0JBUm5CO0FBU1ZFLFVBQUFBLGdCQUFnQixFQUFFeEIsVUFBVSxDQUFDd0IsZ0JBVG5CO0FBVVZlLFVBQUFBLGFBQWEsRUFBRXZDLFVBQVUsQ0FBQ3VDLGFBVmhCO0FBV1ZDLFVBQUFBLGFBQWEsRUFBRXhDLFVBQVUsQ0FBQ3dDO0FBWGhCO0FBRFksT0FBVCxDQUFqQjtBQWVELEtBL0JnQjtBQWdDakJsMkIsSUFBQUEsRUFBRSxFQUFFO0FBQ0ZnTyxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQixZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRyQixVQUFkLENBQXlCbmpCLE9BQTFCLElBQXFDbEYsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE0sT0FBdkQsRUFBZ0U7QUFDOURySixVQUFBQSxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQi9LLE9BQWxCO0FBQ0Q7O0FBRUQsWUFBSXRkLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRyQixVQUFkLENBQXlCbmpCLE9BQTdCLEVBQXNDbEYsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0I5SyxNQUFsQjtBQUN2QyxPQVBDO0FBUUZuYyxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQWxCLEVBQTJCO0FBQ3pCckosVUFBQUEsTUFBTSxDQUFDcW9CLFVBQVAsQ0FBa0I5SyxNQUFsQjtBQUNEOztBQUVELFlBQUl2ZCxNQUFNLENBQUNxb0IsVUFBUCxDQUFrQm5qQixPQUF0QixFQUErQmxGLE1BQU0sQ0FBQ3FvQixVQUFQLENBQWtCL0ssT0FBbEI7QUFDaEM7QUFkQztBQWhDYSxHQUFuQjtBQWtEQSxNQUFJNE0sVUFBVSxHQUFHO0FBQ2ZDLElBQUFBLFFBQVEsRUFBRSxTQUFTQSxRQUFULENBQWtCaG9CLEdBQWxCLEVBQXVCaW9CLFFBQXZCLEVBQWlDO0FBQ3pDam9CLE1BQUFBLEdBQUcsQ0FBQ2lvQixRQUFRLEdBQUcsVUFBSCxHQUFnQixhQUF6QixDQUFILENBQTJDLEtBQUszdEIsTUFBTCxDQUFZK2QsVUFBWixDQUF1QjZQLGFBQWxFO0FBQ0EsVUFBSWxvQixHQUFHLENBQUMsQ0FBRCxDQUFILElBQVVBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT21vQixPQUFQLEtBQW1CLFFBQWpDLEVBQTJDbm9CLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2lvQixRQUFQLEdBQWtCQSxRQUFsQjtBQUM1QyxLQUpjO0FBS2Z2YyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QjtBQUNBLFVBQUk3TixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWMrZCxVQUEzQjtBQUNBLFVBQUkyUCxRQUFRLEdBQUducUIsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQjJQLFFBQWpDO0FBQ0EsVUFBSW5xQixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFsQixFQUF3QjtBQUN4QixVQUFJNGQsa0JBQWtCLEdBQUd2cUIsTUFBTSxDQUFDd2EsVUFBaEM7QUFBQSxVQUNJZ1EsT0FBTyxHQUFHRCxrQkFBa0IsQ0FBQ0MsT0FEakM7QUFBQSxVQUVJQyxPQUFPLEdBQUdGLGtCQUFrQixDQUFDRSxPQUZqQzs7QUFJQSxVQUFJQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ2xqQyxNQUFSLEdBQWlCLENBQWhDLEVBQW1DO0FBQ2pDLFlBQUl5WSxNQUFNLENBQUM4TCxXQUFYLEVBQXdCO0FBQ3RCcWUsVUFBQUEsUUFBUSxDQUFDTSxPQUFELEVBQVUsSUFBVixDQUFSO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLFVBQUFBLFFBQVEsQ0FBQ00sT0FBRCxFQUFVLEtBQVYsQ0FBUjtBQUNEOztBQUVELFlBQUl6cUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjc04sYUFBZCxJQUErQi9KLE1BQU0sQ0FBQ2tGLE9BQTFDLEVBQW1EO0FBQ2pEdWxCLFVBQUFBLE9BQU8sQ0FBQ3pxQixNQUFNLENBQUM4UyxRQUFQLEdBQWtCLFVBQWxCLEdBQStCLGFBQWhDLENBQVAsQ0FBc0RyVyxNQUFNLENBQUNpdUIsU0FBN0Q7QUFDRDtBQUNGOztBQUVELFVBQUlGLE9BQU8sSUFBSUEsT0FBTyxDQUFDampDLE1BQVIsR0FBaUIsQ0FBaEMsRUFBbUM7QUFDakMsWUFBSXlZLE1BQU0sQ0FBQytMLEtBQVgsRUFBa0I7QUFDaEJvZSxVQUFBQSxRQUFRLENBQUNLLE9BQUQsRUFBVSxJQUFWLENBQVI7QUFDRCxTQUZELE1BRU87QUFDTEwsVUFBQUEsUUFBUSxDQUFDSyxPQUFELEVBQVUsS0FBVixDQUFSO0FBQ0Q7O0FBRUQsWUFBSXhxQixNQUFNLENBQUN2RCxNQUFQLENBQWNzTixhQUFkLElBQStCL0osTUFBTSxDQUFDa0YsT0FBMUMsRUFBbUQ7QUFDakRzbEIsVUFBQUEsT0FBTyxDQUFDeHFCLE1BQU0sQ0FBQzhTLFFBQVAsR0FBa0IsVUFBbEIsR0FBK0IsYUFBaEMsQ0FBUCxDQUFzRHJXLE1BQU0sQ0FBQ2l1QixTQUE3RDtBQUNEO0FBQ0Y7QUFDRixLQXRDYztBQXVDZkMsSUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJoOUIsQ0FBckIsRUFBd0I7QUFDbkMsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0FyUyxNQUFBQSxDQUFDLENBQUNtb0IsY0FBRjtBQUNBLFVBQUk5VixNQUFNLENBQUM4TCxXQUFQLElBQXNCLENBQUM5TCxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUF6QyxFQUErQztBQUMvQzNNLE1BQUFBLE1BQU0sQ0FBQytRLFNBQVA7QUFDRCxLQTVDYztBQTZDZjZaLElBQUFBLFdBQVcsRUFBRSxTQUFTQSxXQUFULENBQXFCajlCLENBQXJCLEVBQXdCO0FBQ25DLFVBQUlxUyxNQUFNLEdBQUcsSUFBYjtBQUNBclMsTUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDQSxVQUFJOVYsTUFBTSxDQUFDK0wsS0FBUCxJQUFnQixDQUFDL0wsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbkMsRUFBeUM7QUFDekMzTSxNQUFBQSxNQUFNLENBQUMwUSxTQUFQO0FBQ0QsS0FsRGM7QUFtRGZ4UCxJQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQjtBQUNwQixVQUFJbEIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2QsVUFBM0I7QUFDQXhhLE1BQUFBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytkLFVBQWQsR0FBMkJqZSx5QkFBeUIsQ0FBQ3lELE1BQU0sQ0FBQ21DLEdBQVIsRUFBYW5DLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytkLFVBQTNCLEVBQXVDeGEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjQyxjQUFyRCxFQUFxRTtBQUN2SCtkLFFBQUFBLE1BQU0sRUFBRSxvQkFEK0c7QUFFdkhDLFFBQUFBLE1BQU0sRUFBRTtBQUYrRyxPQUFyRSxDQUFwRDtBQUlBLFVBQUksRUFBRWplLE1BQU0sQ0FBQ2dlLE1BQVAsSUFBaUJoZSxNQUFNLENBQUNpZSxNQUExQixDQUFKLEVBQXVDO0FBQ3ZDLFVBQUk4UCxPQUFKO0FBQ0EsVUFBSUMsT0FBSjs7QUFFQSxVQUFJaHVCLE1BQU0sQ0FBQ2dlLE1BQVgsRUFBbUI7QUFDakIrUCxRQUFBQSxPQUFPLEdBQUdoNkIsQ0FBQyxDQUFDaU0sTUFBTSxDQUFDZ2UsTUFBUixDQUFYOztBQUVBLFlBQUl6YSxNQUFNLENBQUN2RCxNQUFQLENBQWN3akIsaUJBQWQsSUFBbUMsT0FBT3hqQixNQUFNLENBQUNnZSxNQUFkLEtBQXlCLFFBQTVELElBQXdFK1AsT0FBTyxDQUFDampDLE1BQVIsR0FBaUIsQ0FBekYsSUFBOEZ5WSxNQUFNLENBQUNtQyxHQUFQLENBQVc5SSxJQUFYLENBQWdCb0QsTUFBTSxDQUFDZ2UsTUFBdkIsRUFBK0JsekIsTUFBL0IsS0FBMEMsQ0FBNUksRUFBK0k7QUFDN0lpakMsVUFBQUEsT0FBTyxHQUFHeHFCLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVzlJLElBQVgsQ0FBZ0JvRCxNQUFNLENBQUNnZSxNQUF2QixDQUFWO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJaGUsTUFBTSxDQUFDaWUsTUFBWCxFQUFtQjtBQUNqQitQLFFBQUFBLE9BQU8sR0FBR2o2QixDQUFDLENBQUNpTSxNQUFNLENBQUNpZSxNQUFSLENBQVg7O0FBRUEsWUFBSTFhLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dqQixpQkFBZCxJQUFtQyxPQUFPeGpCLE1BQU0sQ0FBQ2llLE1BQWQsS0FBeUIsUUFBNUQsSUFBd0UrUCxPQUFPLENBQUNsakMsTUFBUixHQUFpQixDQUF6RixJQUE4RnlZLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVzlJLElBQVgsQ0FBZ0JvRCxNQUFNLENBQUNpZSxNQUF2QixFQUErQm56QixNQUEvQixLQUEwQyxDQUE1SSxFQUErSTtBQUM3SWtqQyxVQUFBQSxPQUFPLEdBQUd6cUIsTUFBTSxDQUFDbUMsR0FBUCxDQUFXOUksSUFBWCxDQUFnQm9ELE1BQU0sQ0FBQ2llLE1BQXZCLENBQVY7QUFDRDtBQUNGOztBQUVELFVBQUk4UCxPQUFPLElBQUlBLE9BQU8sQ0FBQ2pqQyxNQUFSLEdBQWlCLENBQWhDLEVBQW1DO0FBQ2pDaWpDLFFBQUFBLE9BQU8sQ0FBQ3QzQixFQUFSLENBQVcsT0FBWCxFQUFvQjhNLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JvUSxXQUF0QztBQUNEOztBQUVELFVBQUlILE9BQU8sSUFBSUEsT0FBTyxDQUFDbGpDLE1BQVIsR0FBaUIsQ0FBaEMsRUFBbUM7QUFDakNrakMsUUFBQUEsT0FBTyxDQUFDdjNCLEVBQVIsQ0FBVyxPQUFYLEVBQW9COE0sTUFBTSxDQUFDd2EsVUFBUCxDQUFrQm1RLFdBQXRDO0FBQ0Q7O0FBRURsdkIsTUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDd2EsVUFBUixFQUFvQjtBQUN4QmdRLFFBQUFBLE9BQU8sRUFBRUEsT0FEZTtBQUV4Qi9QLFFBQUFBLE1BQU0sRUFBRStQLE9BQU8sSUFBSUEsT0FBTyxDQUFDLENBQUQsQ0FGRjtBQUd4QkMsUUFBQUEsT0FBTyxFQUFFQSxPQUhlO0FBSXhCL1AsUUFBQUEsTUFBTSxFQUFFK1AsT0FBTyxJQUFJQSxPQUFPLENBQUMsQ0FBRDtBQUpGLE9BQXBCLENBQU47O0FBT0EsVUFBSSxDQUFDenFCLE1BQU0sQ0FBQ2tGLE9BQVosRUFBcUI7QUFDbkIsWUFBSXNsQixPQUFKLEVBQWFBLE9BQU8sQ0FBQ3o1QixRQUFSLENBQWlCMEwsTUFBTSxDQUFDaXVCLFNBQXhCO0FBQ2IsWUFBSUQsT0FBSixFQUFhQSxPQUFPLENBQUMxNUIsUUFBUixDQUFpQjBMLE1BQU0sQ0FBQ2l1QixTQUF4QjtBQUNkO0FBQ0YsS0FqR2M7QUFrR2Z0cEIsSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSXBCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTZxQixtQkFBbUIsR0FBRzdxQixNQUFNLENBQUN3YSxVQUFqQztBQUFBLFVBQ0lnUSxPQUFPLEdBQUdLLG1CQUFtQixDQUFDTCxPQURsQztBQUFBLFVBRUlDLE9BQU8sR0FBR0ksbUJBQW1CLENBQUNKLE9BRmxDOztBQUlBLFVBQUlELE9BQU8sSUFBSUEsT0FBTyxDQUFDampDLE1BQXZCLEVBQStCO0FBQzdCaWpDLFFBQUFBLE9BQU8sQ0FBQy8xQixHQUFSLENBQVksT0FBWixFQUFxQnVMLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JvUSxXQUF2QztBQUNBSixRQUFBQSxPQUFPLENBQUM5NEIsV0FBUixDQUFvQnNPLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytkLFVBQWQsQ0FBeUI2UCxhQUE3QztBQUNEOztBQUVELFVBQUlJLE9BQU8sSUFBSUEsT0FBTyxDQUFDbGpDLE1BQXZCLEVBQStCO0FBQzdCa2pDLFFBQUFBLE9BQU8sQ0FBQ2gyQixHQUFSLENBQVksT0FBWixFQUFxQnVMLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JtUSxXQUF2QztBQUNBRixRQUFBQSxPQUFPLENBQUMvNEIsV0FBUixDQUFvQnNPLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytkLFVBQWQsQ0FBeUI2UCxhQUE3QztBQUNEO0FBQ0Y7QUFqSGMsR0FBakI7QUFtSEEsTUFBSVMsWUFBWSxHQUFHO0FBQ2pCL3FCLElBQUFBLElBQUksRUFBRSxZQURXO0FBRWpCdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ04rZCxNQUFBQSxVQUFVLEVBQUU7QUFDVkMsUUFBQUEsTUFBTSxFQUFFLElBREU7QUFFVkMsUUFBQUEsTUFBTSxFQUFFLElBRkU7QUFHVnFRLFFBQUFBLFdBQVcsRUFBRSxLQUhIO0FBSVZWLFFBQUFBLGFBQWEsRUFBRSx3QkFKTDtBQUtWVyxRQUFBQSxXQUFXLEVBQUUsc0JBTEg7QUFNVk4sUUFBQUEsU0FBUyxFQUFFO0FBTkQ7QUFETixLQUZTO0FBWWpCNzlCLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEJ3YSxRQUFBQSxVQUFVLEVBQUVweUIsUUFBUSxDQUFDLEVBQUQsRUFBSzhoQyxVQUFMO0FBREksT0FBVCxDQUFqQjtBQUdELEtBakJnQjtBQWtCakJoM0IsSUFBQUEsRUFBRSxFQUFFO0FBQ0ZnTyxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQkEsUUFBQUEsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQnRaLElBQWxCO0FBQ0FsQixRQUFBQSxNQUFNLENBQUN3YSxVQUFQLENBQWtCM00sTUFBbEI7QUFDRCxPQUpDO0FBS0ZvZCxNQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQmpyQixNQUFoQixFQUF3QjtBQUM5QkEsUUFBQUEsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQjNNLE1BQWxCO0FBQ0QsT0FQQztBQVFGcWQsTUFBQUEsUUFBUSxFQUFFLFNBQVNBLFFBQVQsQ0FBa0JsckIsTUFBbEIsRUFBMEI7QUFDbENBLFFBQUFBLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0IzTSxNQUFsQjtBQUNELE9BVkM7QUFXRnpNLE1BQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCcEIsTUFBakIsRUFBeUI7QUFDaENBLFFBQUFBLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JwWixPQUFsQjtBQUNELE9BYkM7QUFjRix3QkFBa0IsU0FBUytwQixhQUFULENBQXVCbnJCLE1BQXZCLEVBQStCO0FBQy9DLFlBQUlvckIsbUJBQW1CLEdBQUdwckIsTUFBTSxDQUFDd2EsVUFBakM7QUFBQSxZQUNJZ1EsT0FBTyxHQUFHWSxtQkFBbUIsQ0FBQ1osT0FEbEM7QUFBQSxZQUVJQyxPQUFPLEdBQUdXLG1CQUFtQixDQUFDWCxPQUZsQzs7QUFJQSxZQUFJRCxPQUFKLEVBQWE7QUFDWEEsVUFBQUEsT0FBTyxDQUFDeHFCLE1BQU0sQ0FBQ2tGLE9BQVAsR0FBaUIsYUFBakIsR0FBaUMsVUFBbEMsQ0FBUCxDQUFxRGxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYytkLFVBQWQsQ0FBeUJrUSxTQUE5RTtBQUNEOztBQUVELFlBQUlELE9BQUosRUFBYTtBQUNYQSxVQUFBQSxPQUFPLENBQUN6cUIsTUFBTSxDQUFDa0YsT0FBUCxHQUFpQixhQUFqQixHQUFpQyxVQUFsQyxDQUFQLENBQXFEbEYsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2QsVUFBZCxDQUF5QmtRLFNBQTlFO0FBQ0Q7QUFDRixPQTFCQztBQTJCRlcsTUFBQUEsS0FBSyxFQUFFLFNBQVNBLEtBQVQsQ0FBZXJyQixNQUFmLEVBQXVCclMsQ0FBdkIsRUFBMEI7QUFDL0IsWUFBSTI5QixtQkFBbUIsR0FBR3RyQixNQUFNLENBQUN3YSxVQUFqQztBQUFBLFlBQ0lnUSxPQUFPLEdBQUdjLG1CQUFtQixDQUFDZCxPQURsQztBQUFBLFlBRUlDLE9BQU8sR0FBR2EsbUJBQW1CLENBQUNiLE9BRmxDO0FBR0EsWUFBSWMsUUFBUSxHQUFHNTlCLENBQUMsQ0FBQ3ZHLE1BQWpCOztBQUVBLFlBQUk0WSxNQUFNLENBQUN2RCxNQUFQLENBQWMrZCxVQUFkLENBQXlCdVEsV0FBekIsSUFBd0MsQ0FBQ3Y2QixDQUFDLENBQUMrNkIsUUFBRCxDQUFELENBQVkxM0IsRUFBWixDQUFlNDJCLE9BQWYsQ0FBekMsSUFBb0UsQ0FBQ2o2QixDQUFDLENBQUMrNkIsUUFBRCxDQUFELENBQVkxM0IsRUFBWixDQUFlMjJCLE9BQWYsQ0FBekUsRUFBa0c7QUFDaEcsY0FBSXhxQixNQUFNLENBQUN3ckIsVUFBUCxJQUFxQnhyQixNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBbkMsSUFBaUR4ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJDLFNBQTFFLEtBQXdGenJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCejdCLEVBQWxCLEtBQXlCdzdCLFFBQXpCLElBQXFDdnJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCejdCLEVBQWxCLENBQXFCd0MsUUFBckIsQ0FBOEJnNUIsUUFBOUIsQ0FBN0gsQ0FBSixFQUEySztBQUMzSyxjQUFJRyxRQUFKOztBQUVBLGNBQUlsQixPQUFKLEVBQWE7QUFDWGtCLFlBQUFBLFFBQVEsR0FBR2xCLE9BQU8sQ0FBQ3A0QixRQUFSLENBQWlCNE4sTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2QsVUFBZCxDQUF5QndRLFdBQTFDLENBQVg7QUFDRCxXQUZELE1BRU8sSUFBSVAsT0FBSixFQUFhO0FBQ2xCaUIsWUFBQUEsUUFBUSxHQUFHakIsT0FBTyxDQUFDcjRCLFFBQVIsQ0FBaUI0TixNQUFNLENBQUN2RCxNQUFQLENBQWMrZCxVQUFkLENBQXlCd1EsV0FBMUMsQ0FBWDtBQUNEOztBQUVELGNBQUlVLFFBQVEsS0FBSyxJQUFqQixFQUF1QjtBQUNyQjFyQixZQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZ0JBQVo7QUFDRCxXQUZELE1BRU87QUFDTGhCLFlBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxnQkFBWjtBQUNEOztBQUVELGNBQUl3cEIsT0FBSixFQUFhO0FBQ1hBLFlBQUFBLE9BQU8sQ0FBQ3o0QixXQUFSLENBQW9CaU8sTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2QsVUFBZCxDQUF5QndRLFdBQTdDO0FBQ0Q7O0FBRUQsY0FBSVAsT0FBSixFQUFhO0FBQ1hBLFlBQUFBLE9BQU8sQ0FBQzE0QixXQUFSLENBQW9CaU8sTUFBTSxDQUFDdkQsTUFBUCxDQUFjK2QsVUFBZCxDQUF5QndRLFdBQTdDO0FBQ0Q7QUFDRjtBQUNGO0FBekRDO0FBbEJhLEdBQW5CO0FBK0VBLE1BQUlXLFVBQVUsR0FBRztBQUNmOWQsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEI7QUFDQSxVQUFJN04sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJNkUsR0FBRyxHQUFHN0UsTUFBTSxDQUFDNkUsR0FBakI7QUFDQSxVQUFJcEksTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQTNCO0FBQ0EsVUFBSSxDQUFDL3VCLE1BQU0sQ0FBQzFNLEVBQVIsSUFBYyxDQUFDaVEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0J6N0IsRUFBakMsSUFBdUMsQ0FBQ2lRLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQTFELElBQWlFbkMsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JycEIsR0FBbEIsQ0FBc0I1YSxNQUF0QixLQUFpQyxDQUF0RyxFQUF5RztBQUN6RyxVQUFJK2QsWUFBWSxHQUFHdEYsTUFBTSxDQUFDaUYsT0FBUCxJQUFrQmpGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQXhDLEdBQWtEbEYsTUFBTSxDQUFDaUYsT0FBUCxDQUFlRyxNQUFmLENBQXNCN2QsTUFBeEUsR0FBaUZ5WSxNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUFsSDtBQUNBLFVBQUk0YSxHQUFHLEdBQUduQyxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnJwQixHQUE1QixDQVB3QixDQU9TOztBQUVqQyxVQUFJK2UsT0FBSjtBQUNBLFVBQUkwSyxLQUFLLEdBQUc1ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBZCxHQUFxQmpHLElBQUksQ0FBQ0UsSUFBTCxDQUFVLENBQUN0QixZQUFZLEdBQUd0RixNQUFNLENBQUN5USxZQUFQLEdBQXNCLENBQXRDLElBQTJDelEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOEssY0FBbkUsQ0FBckIsR0FBMEd2SCxNQUFNLENBQUN1RixRQUFQLENBQWdCaGUsTUFBdEk7O0FBRUEsVUFBSXlZLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCdVUsUUFBQUEsT0FBTyxHQUFHeGEsSUFBSSxDQUFDRSxJQUFMLENBQVUsQ0FBQzVHLE1BQU0sQ0FBQzBLLFdBQVAsR0FBcUIxSyxNQUFNLENBQUN5USxZQUE3QixJQUE2Q3pRLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzhLLGNBQXJFLENBQVY7O0FBRUEsWUFBSTJaLE9BQU8sR0FBRzViLFlBQVksR0FBRyxDQUFmLEdBQW1CdEYsTUFBTSxDQUFDeVEsWUFBUCxHQUFzQixDQUF2RCxFQUEwRDtBQUN4RHlRLFVBQUFBLE9BQU8sSUFBSTViLFlBQVksR0FBR3RGLE1BQU0sQ0FBQ3lRLFlBQVAsR0FBc0IsQ0FBaEQ7QUFDRDs7QUFFRCxZQUFJeVEsT0FBTyxHQUFHMEssS0FBSyxHQUFHLENBQXRCLEVBQXlCMUssT0FBTyxJQUFJMEssS0FBWDtBQUN6QixZQUFJMUssT0FBTyxHQUFHLENBQVYsSUFBZWxoQixNQUFNLENBQUN2RCxNQUFQLENBQWNvdkIsY0FBZCxLQUFpQyxTQUFwRCxFQUErRDNLLE9BQU8sR0FBRzBLLEtBQUssR0FBRzFLLE9BQWxCO0FBQ2hFLE9BVEQsTUFTTyxJQUFJLE9BQU9saEIsTUFBTSxDQUFDOEosU0FBZCxLQUE0QixXQUFoQyxFQUE2QztBQUNsRG9YLFFBQUFBLE9BQU8sR0FBR2xoQixNQUFNLENBQUM4SixTQUFqQjtBQUNELE9BRk0sTUFFQTtBQUNMb1gsUUFBQUEsT0FBTyxHQUFHbGhCLE1BQU0sQ0FBQzBLLFdBQVAsSUFBc0IsQ0FBaEM7QUFDRCxPQXpCdUIsQ0F5QnRCOzs7QUFHRixVQUFJak8sTUFBTSxDQUFDNFgsSUFBUCxLQUFnQixTQUFoQixJQUE2QnJVLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCTSxPQUEvQyxJQUEwRDlyQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBbEIsQ0FBMEJ2a0MsTUFBMUIsR0FBbUMsQ0FBakcsRUFBb0c7QUFDbEcsWUFBSXVrQyxPQUFPLEdBQUc5ckIsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JNLE9BQWhDO0FBQ0EsWUFBSUMsVUFBSjtBQUNBLFlBQUlDLFNBQUo7QUFDQSxZQUFJQyxRQUFKOztBQUVBLFlBQUl4dkIsTUFBTSxDQUFDeXZCLGNBQVgsRUFBMkI7QUFDekJsc0IsVUFBQUEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JXLFVBQWxCLEdBQStCTCxPQUFPLENBQUNoMEIsRUFBUixDQUFXLENBQVgsRUFBY2tJLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0IsWUFBeEIsR0FBdUMsYUFBckQsRUFBb0UsSUFBcEUsQ0FBL0I7QUFDQTdCLFVBQUFBLEdBQUcsQ0FBQ2xMLEdBQUosQ0FBUStJLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0IsT0FBeEIsR0FBa0MsUUFBMUMsRUFBb0RoRSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQlcsVUFBbEIsSUFBZ0MxdkIsTUFBTSxDQUFDMnZCLGtCQUFQLEdBQTRCLENBQTVELElBQWlFLElBQXJIOztBQUVBLGNBQUkzdkIsTUFBTSxDQUFDMnZCLGtCQUFQLEdBQTRCLENBQTVCLElBQWlDcHNCLE1BQU0sQ0FBQ2tOLGFBQVAsS0FBeUJ2ZSxTQUE5RCxFQUF5RTtBQUN2RXFSLFlBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCYSxrQkFBbEIsSUFBd0NuTCxPQUFPLEdBQUdsaEIsTUFBTSxDQUFDa04sYUFBekQ7O0FBRUEsZ0JBQUlsTixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQmEsa0JBQWxCLEdBQXVDNXZCLE1BQU0sQ0FBQzJ2QixrQkFBUCxHQUE0QixDQUF2RSxFQUEwRTtBQUN4RXBzQixjQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQmEsa0JBQWxCLEdBQXVDNXZCLE1BQU0sQ0FBQzJ2QixrQkFBUCxHQUE0QixDQUFuRTtBQUNELGFBRkQsTUFFTyxJQUFJcHNCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCYSxrQkFBbEIsR0FBdUMsQ0FBM0MsRUFBOEM7QUFDbkRyc0IsY0FBQUEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JhLGtCQUFsQixHQUF1QyxDQUF2QztBQUNEO0FBQ0Y7O0FBRUROLFVBQUFBLFVBQVUsR0FBRzdLLE9BQU8sR0FBR2xoQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQmEsa0JBQXpDO0FBQ0FMLFVBQUFBLFNBQVMsR0FBR0QsVUFBVSxJQUFJcmxCLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU21rQixPQUFPLENBQUN2a0MsTUFBakIsRUFBeUJrVixNQUFNLENBQUMydkIsa0JBQWhDLElBQXNELENBQTFELENBQXRCO0FBQ0FILFVBQUFBLFFBQVEsR0FBRyxDQUFDRCxTQUFTLEdBQUdELFVBQWIsSUFBMkIsQ0FBdEM7QUFDRDs7QUFFREQsUUFBQUEsT0FBTyxDQUFDcDZCLFdBQVIsQ0FBb0IrSyxNQUFNLENBQUM2dkIsaUJBQVAsR0FBMkIsR0FBM0IsR0FBaUM3dkIsTUFBTSxDQUFDNnZCLGlCQUF4QyxHQUE0RCxRQUE1RCxHQUF1RTd2QixNQUFNLENBQUM2dkIsaUJBQTlFLEdBQWtHLGFBQWxHLEdBQWtIN3ZCLE1BQU0sQ0FBQzZ2QixpQkFBekgsR0FBNkksUUFBN0ksR0FBd0o3dkIsTUFBTSxDQUFDNnZCLGlCQUEvSixHQUFtTCxhQUFuTCxHQUFtTTd2QixNQUFNLENBQUM2dkIsaUJBQTFNLEdBQThOLE9BQWxQOztBQUVBLFlBQUlucUIsR0FBRyxDQUFDNWEsTUFBSixHQUFhLENBQWpCLEVBQW9CO0FBQ2xCdWtDLFVBQUFBLE9BQU8sQ0FBQzMwQixJQUFSLENBQWEsVUFBVW8xQixNQUFWLEVBQWtCO0FBQzdCLGdCQUFJQyxPQUFPLEdBQUdoOEIsQ0FBQyxDQUFDKzdCLE1BQUQsQ0FBZjtBQUNBLGdCQUFJRSxXQUFXLEdBQUdELE9BQU8sQ0FBQ3AxQixLQUFSLEVBQWxCOztBQUVBLGdCQUFJcTFCLFdBQVcsS0FBS3ZMLE9BQXBCLEVBQTZCO0FBQzNCc0wsY0FBQUEsT0FBTyxDQUFDejdCLFFBQVIsQ0FBaUIwTCxNQUFNLENBQUM2dkIsaUJBQXhCO0FBQ0Q7O0FBRUQsZ0JBQUk3dkIsTUFBTSxDQUFDeXZCLGNBQVgsRUFBMkI7QUFDekIsa0JBQUlPLFdBQVcsSUFBSVYsVUFBZixJQUE2QlUsV0FBVyxJQUFJVCxTQUFoRCxFQUEyRDtBQUN6RFEsZ0JBQUFBLE9BQU8sQ0FBQ3o3QixRQUFSLENBQWlCMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLE9BQTVDO0FBQ0Q7O0FBRUQsa0JBQUlHLFdBQVcsS0FBS1YsVUFBcEIsRUFBZ0M7QUFDOUJTLGdCQUFBQSxPQUFPLENBQUM1ekIsSUFBUixHQUFlN0gsUUFBZixDQUF3QjBMLE1BQU0sQ0FBQzZ2QixpQkFBUCxHQUEyQixPQUFuRCxFQUE0RDF6QixJQUE1RCxHQUFtRTdILFFBQW5FLENBQTRFMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLFlBQXZHO0FBQ0Q7O0FBRUQsa0JBQUlHLFdBQVcsS0FBS1QsU0FBcEIsRUFBK0I7QUFDN0JRLGdCQUFBQSxPQUFPLENBQUNqMEIsSUFBUixHQUFleEgsUUFBZixDQUF3QjBMLE1BQU0sQ0FBQzZ2QixpQkFBUCxHQUEyQixPQUFuRCxFQUE0RC96QixJQUE1RCxHQUFtRXhILFFBQW5FLENBQTRFMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLFlBQXZHO0FBQ0Q7QUFDRjtBQUNGLFdBckJEO0FBc0JELFNBdkJELE1BdUJPO0FBQ0wsY0FBSUUsT0FBTyxHQUFHVixPQUFPLENBQUNoMEIsRUFBUixDQUFXb3BCLE9BQVgsQ0FBZDtBQUNBLGNBQUl1TCxXQUFXLEdBQUdELE9BQU8sQ0FBQ3AxQixLQUFSLEVBQWxCO0FBQ0FvMUIsVUFBQUEsT0FBTyxDQUFDejdCLFFBQVIsQ0FBaUIwTCxNQUFNLENBQUM2dkIsaUJBQXhCOztBQUVBLGNBQUk3dkIsTUFBTSxDQUFDeXZCLGNBQVgsRUFBMkI7QUFDekIsZ0JBQUlRLHFCQUFxQixHQUFHWixPQUFPLENBQUNoMEIsRUFBUixDQUFXaTBCLFVBQVgsQ0FBNUI7QUFDQSxnQkFBSVksb0JBQW9CLEdBQUdiLE9BQU8sQ0FBQ2gwQixFQUFSLENBQVdrMEIsU0FBWCxDQUEzQjs7QUFFQSxpQkFBSyxJQUFJMWtDLENBQUMsR0FBR3lrQyxVQUFiLEVBQXlCemtDLENBQUMsSUFBSTBrQyxTQUE5QixFQUF5QzFrQyxDQUFDLElBQUksQ0FBOUMsRUFBaUQ7QUFDL0N3a0MsY0FBQUEsT0FBTyxDQUFDaDBCLEVBQVIsQ0FBV3hRLENBQVgsRUFBY3lKLFFBQWQsQ0FBdUIwTCxNQUFNLENBQUM2dkIsaUJBQVAsR0FBMkIsT0FBbEQ7QUFDRDs7QUFFRCxnQkFBSXRzQixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFsQixFQUF3QjtBQUN0QixrQkFBSThmLFdBQVcsSUFBSVgsT0FBTyxDQUFDdmtDLE1BQVIsR0FBaUJrVixNQUFNLENBQUMydkIsa0JBQTNDLEVBQStEO0FBQzdELHFCQUFLLElBQUl0akIsRUFBRSxHQUFHck0sTUFBTSxDQUFDMnZCLGtCQUFyQixFQUF5Q3RqQixFQUFFLElBQUksQ0FBL0MsRUFBa0RBLEVBQUUsSUFBSSxDQUF4RCxFQUEyRDtBQUN6RGdqQixrQkFBQUEsT0FBTyxDQUFDaDBCLEVBQVIsQ0FBV2cwQixPQUFPLENBQUN2a0MsTUFBUixHQUFpQnVoQixFQUE1QixFQUFnQy9YLFFBQWhDLENBQXlDMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLE9BQXBFO0FBQ0Q7O0FBRURSLGdCQUFBQSxPQUFPLENBQUNoMEIsRUFBUixDQUFXZzBCLE9BQU8sQ0FBQ3ZrQyxNQUFSLEdBQWlCa1YsTUFBTSxDQUFDMnZCLGtCQUF4QixHQUE2QyxDQUF4RCxFQUEyRHI3QixRQUEzRCxDQUFvRTBMLE1BQU0sQ0FBQzZ2QixpQkFBUCxHQUEyQixPQUEvRjtBQUNELGVBTkQsTUFNTztBQUNMSSxnQkFBQUEscUJBQXFCLENBQUM5ekIsSUFBdEIsR0FBNkI3SCxRQUE3QixDQUFzQzBMLE1BQU0sQ0FBQzZ2QixpQkFBUCxHQUEyQixPQUFqRSxFQUEwRTF6QixJQUExRSxHQUFpRjdILFFBQWpGLENBQTBGMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLFlBQXJIO0FBQ0FLLGdCQUFBQSxvQkFBb0IsQ0FBQ3AwQixJQUFyQixHQUE0QnhILFFBQTVCLENBQXFDMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLE9BQWhFLEVBQXlFL3pCLElBQXpFLEdBQWdGeEgsUUFBaEYsQ0FBeUYwTCxNQUFNLENBQUM2dkIsaUJBQVAsR0FBMkIsWUFBcEg7QUFDRDtBQUNGLGFBWEQsTUFXTztBQUNMSSxjQUFBQSxxQkFBcUIsQ0FBQzl6QixJQUF0QixHQUE2QjdILFFBQTdCLENBQXNDMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLE9BQWpFLEVBQTBFMXpCLElBQTFFLEdBQWlGN0gsUUFBakYsQ0FBMEYwTCxNQUFNLENBQUM2dkIsaUJBQVAsR0FBMkIsWUFBckg7QUFDQUssY0FBQUEsb0JBQW9CLENBQUNwMEIsSUFBckIsR0FBNEJ4SCxRQUE1QixDQUFxQzBMLE1BQU0sQ0FBQzZ2QixpQkFBUCxHQUEyQixPQUFoRSxFQUF5RS96QixJQUF6RSxHQUFnRnhILFFBQWhGLENBQXlGMEwsTUFBTSxDQUFDNnZCLGlCQUFQLEdBQTJCLFlBQXBIO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFlBQUk3dkIsTUFBTSxDQUFDeXZCLGNBQVgsRUFBMkI7QUFDekIsY0FBSVUsb0JBQW9CLEdBQUdsbUIsSUFBSSxDQUFDaUIsR0FBTCxDQUFTbWtCLE9BQU8sQ0FBQ3ZrQyxNQUFqQixFQUF5QmtWLE1BQU0sQ0FBQzJ2QixrQkFBUCxHQUE0QixDQUFyRCxDQUEzQjtBQUNBLGNBQUlTLGFBQWEsR0FBRyxDQUFDN3NCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCVyxVQUFsQixHQUErQlMsb0JBQS9CLEdBQXNENXNCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCVyxVQUF6RSxJQUF1RixDQUF2RixHQUEyRkYsUUFBUSxHQUFHanNCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCVyxVQUE1STtBQUNBLGNBQUk1SSxVQUFVLEdBQUcxZSxHQUFHLEdBQUcsT0FBSCxHQUFhLE1BQWpDO0FBQ0FpbkIsVUFBQUEsT0FBTyxDQUFDNzBCLEdBQVIsQ0FBWStJLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0J1ZixVQUF4QixHQUFxQyxLQUFqRCxFQUF3RHNKLGFBQWEsR0FBRyxJQUF4RTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSXB3QixNQUFNLENBQUM0WCxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQzlCbFMsUUFBQUEsR0FBRyxDQUFDOUksSUFBSixDQUFTaUQsaUJBQWlCLENBQUNHLE1BQU0sQ0FBQ3F3QixZQUFSLENBQTFCLEVBQWlEeDFCLElBQWpELENBQXNEbUYsTUFBTSxDQUFDc3dCLHFCQUFQLENBQTZCN0wsT0FBTyxHQUFHLENBQXZDLENBQXREO0FBQ0EvZSxRQUFBQSxHQUFHLENBQUM5SSxJQUFKLENBQVNpRCxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFDdXdCLFVBQVIsQ0FBMUIsRUFBK0MxMUIsSUFBL0MsQ0FBb0RtRixNQUFNLENBQUN3d0IsbUJBQVAsQ0FBMkJyQixLQUEzQixDQUFwRDtBQUNEOztBQUVELFVBQUludkIsTUFBTSxDQUFDNFgsSUFBUCxLQUFnQixhQUFwQixFQUFtQztBQUNqQyxZQUFJNlksb0JBQUo7O0FBRUEsWUFBSXp3QixNQUFNLENBQUMwd0IsbUJBQVgsRUFBZ0M7QUFDOUJELFVBQUFBLG9CQUFvQixHQUFHbHRCLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0IsVUFBeEIsR0FBcUMsWUFBNUQ7QUFDRCxTQUZELE1BRU87QUFDTGtwQixVQUFBQSxvQkFBb0IsR0FBR2x0QixNQUFNLENBQUNnRSxZQUFQLEtBQXdCLFlBQXhCLEdBQXVDLFVBQTlEO0FBQ0Q7O0FBRUQsWUFBSW9wQixLQUFLLEdBQUcsQ0FBQ2xNLE9BQU8sR0FBRyxDQUFYLElBQWdCMEssS0FBNUI7QUFDQSxZQUFJeUIsTUFBTSxHQUFHLENBQWI7QUFDQSxZQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFFQSxZQUFJSixvQkFBb0IsS0FBSyxZQUE3QixFQUEyQztBQUN6Q0csVUFBQUEsTUFBTSxHQUFHRCxLQUFUO0FBQ0QsU0FGRCxNQUVPO0FBQ0xFLFVBQUFBLE1BQU0sR0FBR0YsS0FBVDtBQUNEOztBQUVEanJCLFFBQUFBLEdBQUcsQ0FBQzlJLElBQUosQ0FBU2lELGlCQUFpQixDQUFDRyxNQUFNLENBQUM4d0Isb0JBQVIsQ0FBMUIsRUFBeUR6NkIsU0FBekQsQ0FBbUUsK0JBQStCdTZCLE1BQS9CLEdBQXdDLFdBQXhDLEdBQXNEQyxNQUF0RCxHQUErRCxHQUFsSSxFQUF1SXp6QixVQUF2SSxDQUFrSm1HLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzROLEtBQWhLO0FBQ0Q7O0FBRUQsVUFBSTVOLE1BQU0sQ0FBQzRYLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEI1WCxNQUFNLENBQUMrd0IsWUFBdkMsRUFBcUQ7QUFDbkRyckIsUUFBQUEsR0FBRyxDQUFDMVIsSUFBSixDQUFTZ00sTUFBTSxDQUFDK3dCLFlBQVAsQ0FBb0J4dEIsTUFBcEIsRUFBNEJraEIsT0FBTyxHQUFHLENBQXRDLEVBQXlDMEssS0FBekMsQ0FBVDtBQUNBNXJCLFFBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxrQkFBWixFQUFnQ21CLEdBQUcsQ0FBQyxDQUFELENBQW5DO0FBQ0QsT0FIRCxNQUdPO0FBQ0xuQyxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksa0JBQVosRUFBZ0NtQixHQUFHLENBQUMsQ0FBRCxDQUFuQztBQUNEOztBQUVELFVBQUluQyxNQUFNLENBQUN2RCxNQUFQLENBQWNzTixhQUFkLElBQStCL0osTUFBTSxDQUFDa0YsT0FBMUMsRUFBbUQ7QUFDakQvQyxRQUFBQSxHQUFHLENBQUNuQyxNQUFNLENBQUM4UyxRQUFQLEdBQWtCLFVBQWxCLEdBQStCLGFBQWhDLENBQUgsQ0FBa0RyVyxNQUFNLENBQUNpdUIsU0FBekQ7QUFDRDtBQUNGLEtBM0pjO0FBNEpmK0MsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEI7QUFDQSxVQUFJenRCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYyt1QixVQUEzQjtBQUNBLFVBQUksQ0FBQy91QixNQUFNLENBQUMxTSxFQUFSLElBQWMsQ0FBQ2lRLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCejdCLEVBQWpDLElBQXVDLENBQUNpUSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnJwQixHQUExRCxJQUFpRW5DLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQWxCLENBQXNCNWEsTUFBdEIsS0FBaUMsQ0FBdEcsRUFBeUc7QUFDekcsVUFBSStkLFlBQVksR0FBR3RGLE1BQU0sQ0FBQ2lGLE9BQVAsSUFBa0JqRixNQUFNLENBQUN2RCxNQUFQLENBQWN3SSxPQUFkLENBQXNCQyxPQUF4QyxHQUFrRGxGLE1BQU0sQ0FBQ2lGLE9BQVAsQ0FBZUcsTUFBZixDQUFzQjdkLE1BQXhFLEdBQWlGeVksTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBbEg7QUFDQSxVQUFJNGEsR0FBRyxHQUFHbkMsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JycEIsR0FBNUI7QUFDQSxVQUFJdXJCLGNBQWMsR0FBRyxFQUFyQjs7QUFFQSxVQUFJanhCLE1BQU0sQ0FBQzRYLElBQVAsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDN0IsWUFBSXNaLGVBQWUsR0FBRzN0QixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFkLEdBQXFCakcsSUFBSSxDQUFDRSxJQUFMLENBQVUsQ0FBQ3RCLFlBQVksR0FBR3RGLE1BQU0sQ0FBQ3lRLFlBQVAsR0FBc0IsQ0FBdEMsSUFBMkN6USxNQUFNLENBQUN2RCxNQUFQLENBQWM4SyxjQUFuRSxDQUFyQixHQUEwR3ZILE1BQU0sQ0FBQ3VGLFFBQVAsQ0FBZ0JoZSxNQUFoSjs7QUFFQSxZQUFJeVksTUFBTSxDQUFDdkQsTUFBUCxDQUFjd2IsUUFBZCxJQUEwQixDQUFDalksTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBekMsSUFBaURnaEIsZUFBZSxHQUFHcm9CLFlBQXZFLEVBQXFGO0FBQ25GcW9CLFVBQUFBLGVBQWUsR0FBR3JvQixZQUFsQjtBQUNEOztBQUVELGFBQUssSUFBSWhlLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdxbUMsZUFBcEIsRUFBcUNybUMsQ0FBQyxJQUFJLENBQTFDLEVBQTZDO0FBQzNDLGNBQUltVixNQUFNLENBQUNteEIsWUFBWCxFQUF5QjtBQUN2QkYsWUFBQUEsY0FBYyxJQUFJanhCLE1BQU0sQ0FBQ214QixZQUFQLENBQW9CbmxDLElBQXBCLENBQXlCdVgsTUFBekIsRUFBaUMxWSxDQUFqQyxFQUFvQ21WLE1BQU0sQ0FBQ294QixXQUEzQyxDQUFsQjtBQUNELFdBRkQsTUFFTztBQUNMSCxZQUFBQSxjQUFjLElBQUksTUFBTWp4QixNQUFNLENBQUNxeEIsYUFBYixHQUE2QixXQUE3QixHQUEyQ3J4QixNQUFNLENBQUNveEIsV0FBbEQsR0FBZ0UsT0FBaEUsR0FBMEVweEIsTUFBTSxDQUFDcXhCLGFBQWpGLEdBQWlHLEdBQW5IO0FBQ0Q7QUFDRjs7QUFFRDNyQixRQUFBQSxHQUFHLENBQUMxUixJQUFKLENBQVNpOUIsY0FBVDtBQUNBMXRCLFFBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCTSxPQUFsQixHQUE0QjNwQixHQUFHLENBQUM5SSxJQUFKLENBQVNpRCxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFDb3hCLFdBQVIsQ0FBMUIsQ0FBNUI7QUFDRDs7QUFFRCxVQUFJcHhCLE1BQU0sQ0FBQzRYLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUIsWUFBSTVYLE1BQU0sQ0FBQ3N4QixjQUFYLEVBQTJCO0FBQ3pCTCxVQUFBQSxjQUFjLEdBQUdqeEIsTUFBTSxDQUFDc3hCLGNBQVAsQ0FBc0J0bEMsSUFBdEIsQ0FBMkJ1WCxNQUEzQixFQUFtQ3ZELE1BQU0sQ0FBQ3F3QixZQUExQyxFQUF3RHJ3QixNQUFNLENBQUN1d0IsVUFBL0QsQ0FBakI7QUFDRCxTQUZELE1BRU87QUFDTFUsVUFBQUEsY0FBYyxHQUFHLG1CQUFtQmp4QixNQUFNLENBQUNxd0IsWUFBMUIsR0FBeUMsWUFBekMsR0FBd0QsS0FBeEQsSUFBaUUsbUJBQW1CcndCLE1BQU0sQ0FBQ3V3QixVQUExQixHQUF1QyxZQUF4RyxDQUFqQjtBQUNEOztBQUVEN3FCLFFBQUFBLEdBQUcsQ0FBQzFSLElBQUosQ0FBU2k5QixjQUFUO0FBQ0Q7O0FBRUQsVUFBSWp4QixNQUFNLENBQUM0WCxJQUFQLEtBQWdCLGFBQXBCLEVBQW1DO0FBQ2pDLFlBQUk1WCxNQUFNLENBQUN1eEIsaUJBQVgsRUFBOEI7QUFDNUJOLFVBQUFBLGNBQWMsR0FBR2p4QixNQUFNLENBQUN1eEIsaUJBQVAsQ0FBeUJ2bEMsSUFBekIsQ0FBOEJ1WCxNQUE5QixFQUFzQ3ZELE1BQU0sQ0FBQzh3QixvQkFBN0MsQ0FBakI7QUFDRCxTQUZELE1BRU87QUFDTEcsVUFBQUEsY0FBYyxHQUFHLG1CQUFtQmp4QixNQUFNLENBQUM4d0Isb0JBQTFCLEdBQWlELFlBQWxFO0FBQ0Q7O0FBRURwckIsUUFBQUEsR0FBRyxDQUFDMVIsSUFBSixDQUFTaTlCLGNBQVQ7QUFDRDs7QUFFRCxVQUFJanhCLE1BQU0sQ0FBQzRYLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUJyVSxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksa0JBQVosRUFBZ0NoQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnJwQixHQUFsQixDQUFzQixDQUF0QixDQUFoQztBQUNEO0FBQ0YsS0EvTWM7QUFnTmZqQixJQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQjtBQUNwQixVQUFJbEIsTUFBTSxHQUFHLElBQWI7QUFDQUEsTUFBQUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsR0FBMkJqdkIseUJBQXlCLENBQUN5RCxNQUFNLENBQUNtQyxHQUFSLEVBQWFuQyxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBM0IsRUFBdUN4ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjQyxjQUFyRCxFQUFxRTtBQUN2SDNNLFFBQUFBLEVBQUUsRUFBRTtBQURtSCxPQUFyRSxDQUFwRDtBQUdBLFVBQUkwTSxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBM0I7QUFDQSxVQUFJLENBQUMvdUIsTUFBTSxDQUFDMU0sRUFBWixFQUFnQjtBQUNoQixVQUFJb1MsR0FBRyxHQUFHM1IsQ0FBQyxDQUFDaU0sTUFBTSxDQUFDMU0sRUFBUixDQUFYO0FBQ0EsVUFBSW9TLEdBQUcsQ0FBQzVhLE1BQUosS0FBZSxDQUFuQixFQUFzQjs7QUFFdEIsVUFBSXlZLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dqQixpQkFBZCxJQUFtQyxPQUFPeGpCLE1BQU0sQ0FBQzFNLEVBQWQsS0FBcUIsUUFBeEQsSUFBb0VvUyxHQUFHLENBQUM1YSxNQUFKLEdBQWEsQ0FBckYsRUFBd0Y7QUFDdEY0YSxRQUFBQSxHQUFHLEdBQUduQyxNQUFNLENBQUNtQyxHQUFQLENBQVc5SSxJQUFYLENBQWdCb0QsTUFBTSxDQUFDMU0sRUFBdkIsQ0FBTjtBQUNEOztBQUVELFVBQUkwTSxNQUFNLENBQUM0WCxJQUFQLEtBQWdCLFNBQWhCLElBQTZCNVgsTUFBTSxDQUFDZ3ZCLFNBQXhDLEVBQW1EO0FBQ2pEdHBCLFFBQUFBLEdBQUcsQ0FBQ3BSLFFBQUosQ0FBYTBMLE1BQU0sQ0FBQ3d4QixjQUFwQjtBQUNEOztBQUVEOXJCLE1BQUFBLEdBQUcsQ0FBQ3BSLFFBQUosQ0FBYTBMLE1BQU0sQ0FBQ3l4QixhQUFQLEdBQXVCenhCLE1BQU0sQ0FBQzRYLElBQTNDOztBQUVBLFVBQUk1WCxNQUFNLENBQUM0WCxJQUFQLEtBQWdCLFNBQWhCLElBQTZCNVgsTUFBTSxDQUFDeXZCLGNBQXhDLEVBQXdEO0FBQ3REL3BCLFFBQUFBLEdBQUcsQ0FBQ3BSLFFBQUosQ0FBYSxLQUFLMEwsTUFBTSxDQUFDeXhCLGFBQVosR0FBNEJ6eEIsTUFBTSxDQUFDNFgsSUFBbkMsR0FBMEMsVUFBdkQ7QUFDQXJVLFFBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCYSxrQkFBbEIsR0FBdUMsQ0FBdkM7O0FBRUEsWUFBSTV2QixNQUFNLENBQUMydkIsa0JBQVAsR0FBNEIsQ0FBaEMsRUFBbUM7QUFDakMzdkIsVUFBQUEsTUFBTSxDQUFDMnZCLGtCQUFQLEdBQTRCLENBQTVCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJM3ZCLE1BQU0sQ0FBQzRYLElBQVAsS0FBZ0IsYUFBaEIsSUFBaUM1WCxNQUFNLENBQUMwd0IsbUJBQTVDLEVBQWlFO0FBQy9EaHJCLFFBQUFBLEdBQUcsQ0FBQ3BSLFFBQUosQ0FBYTBMLE1BQU0sQ0FBQzB4Qix3QkFBcEI7QUFDRDs7QUFFRCxVQUFJMXhCLE1BQU0sQ0FBQ2d2QixTQUFYLEVBQXNCO0FBQ3BCdHBCLFFBQUFBLEdBQUcsQ0FBQ2pQLEVBQUosQ0FBTyxPQUFQLEVBQWdCb0osaUJBQWlCLENBQUNHLE1BQU0sQ0FBQ294QixXQUFSLENBQWpDLEVBQXVELFNBQVMzUyxPQUFULENBQWlCdnRCLENBQWpCLEVBQW9CO0FBQ3pFQSxVQUFBQSxDQUFDLENBQUNtb0IsY0FBRjtBQUNBLGNBQUkxZSxLQUFLLEdBQUc1RyxDQUFDLENBQUMsSUFBRCxDQUFELENBQVE0RyxLQUFSLEtBQWtCNEksTUFBTSxDQUFDdkQsTUFBUCxDQUFjOEssY0FBNUM7QUFDQSxjQUFJdkgsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbEIsRUFBd0J2VixLQUFLLElBQUk0SSxNQUFNLENBQUN5USxZQUFoQjtBQUN4QnpRLFVBQUFBLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXBZLEtBQWY7QUFDRCxTQUxEO0FBTUQ7O0FBRURxRSxNQUFBQSxNQUFNLENBQUN1RSxNQUFNLENBQUN3ckIsVUFBUixFQUFvQjtBQUN4QnJwQixRQUFBQSxHQUFHLEVBQUVBLEdBRG1CO0FBRXhCcFMsUUFBQUEsRUFBRSxFQUFFb1MsR0FBRyxDQUFDLENBQUQ7QUFGaUIsT0FBcEIsQ0FBTjs7QUFLQSxVQUFJLENBQUNuQyxNQUFNLENBQUNrRixPQUFaLEVBQXFCO0FBQ25CL0MsUUFBQUEsR0FBRyxDQUFDcFIsUUFBSixDQUFhMEwsTUFBTSxDQUFDaXVCLFNBQXBCO0FBQ0Q7QUFDRixLQWxRYztBQW1RZnRwQixJQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixVQUFJcEIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQTNCO0FBQ0EsVUFBSSxDQUFDL3VCLE1BQU0sQ0FBQzFNLEVBQVIsSUFBYyxDQUFDaVEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0J6N0IsRUFBakMsSUFBdUMsQ0FBQ2lRLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQTFELElBQWlFbkMsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JycEIsR0FBbEIsQ0FBc0I1YSxNQUF0QixLQUFpQyxDQUF0RyxFQUF5RztBQUN6RyxVQUFJNGEsR0FBRyxHQUFHbkMsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JycEIsR0FBNUI7QUFDQUEsTUFBQUEsR0FBRyxDQUFDelEsV0FBSixDQUFnQitLLE1BQU0sQ0FBQ3V1QixXQUF2QjtBQUNBN29CLE1BQUFBLEdBQUcsQ0FBQ3pRLFdBQUosQ0FBZ0IrSyxNQUFNLENBQUN5eEIsYUFBUCxHQUF1Qnp4QixNQUFNLENBQUM0WCxJQUE5QztBQUNBLFVBQUlyVSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBdEIsRUFBK0I5ckIsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JNLE9BQWxCLENBQTBCcDZCLFdBQTFCLENBQXNDK0ssTUFBTSxDQUFDNnZCLGlCQUE3Qzs7QUFFL0IsVUFBSTd2QixNQUFNLENBQUNndkIsU0FBWCxFQUFzQjtBQUNwQnRwQixRQUFBQSxHQUFHLENBQUMxTixHQUFKLENBQVEsT0FBUixFQUFpQjZILGlCQUFpQixDQUFDRyxNQUFNLENBQUNveEIsV0FBUixDQUFsQztBQUNEO0FBQ0Y7QUEvUWMsR0FBakI7QUFpUkEsTUFBSU8sWUFBWSxHQUFHO0FBQ2pCcnVCLElBQUFBLElBQUksRUFBRSxZQURXO0FBRWpCdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ04rdUIsTUFBQUEsVUFBVSxFQUFFO0FBQ1Z6N0IsUUFBQUEsRUFBRSxFQUFFLElBRE07QUFFVis5QixRQUFBQSxhQUFhLEVBQUUsTUFGTDtBQUdWckMsUUFBQUEsU0FBUyxFQUFFLEtBSEQ7QUFJVlYsUUFBQUEsV0FBVyxFQUFFLEtBSkg7QUFLVjZDLFFBQUFBLFlBQVksRUFBRSxJQUxKO0FBTVZJLFFBQUFBLGlCQUFpQixFQUFFLElBTlQ7QUFPVkQsUUFBQUEsY0FBYyxFQUFFLElBUE47QUFRVlAsUUFBQUEsWUFBWSxFQUFFLElBUko7QUFTVkwsUUFBQUEsbUJBQW1CLEVBQUUsS0FUWDtBQVVWOVksUUFBQUEsSUFBSSxFQUFFLFNBVkk7QUFXVjtBQUNBNlgsUUFBQUEsY0FBYyxFQUFFLEtBWk47QUFhVkUsUUFBQUEsa0JBQWtCLEVBQUUsQ0FiVjtBQWNWVyxRQUFBQSxxQkFBcUIsRUFBRSxTQUFTQSxxQkFBVCxDQUErQnNCLE1BQS9CLEVBQXVDO0FBQzVELGlCQUFPQSxNQUFQO0FBQ0QsU0FoQlM7QUFpQlZwQixRQUFBQSxtQkFBbUIsRUFBRSxTQUFTQSxtQkFBVCxDQUE2Qm9CLE1BQTdCLEVBQXFDO0FBQ3hELGlCQUFPQSxNQUFQO0FBQ0QsU0FuQlM7QUFvQlZSLFFBQUFBLFdBQVcsRUFBRSwwQkFwQkg7QUFxQlZ2QixRQUFBQSxpQkFBaUIsRUFBRSxpQ0FyQlQ7QUFzQlY0QixRQUFBQSxhQUFhLEVBQUUsb0JBdEJMO0FBdUJWO0FBQ0FwQixRQUFBQSxZQUFZLEVBQUUsMkJBeEJKO0FBeUJWRSxRQUFBQSxVQUFVLEVBQUUseUJBekJGO0FBMEJWaEMsUUFBQUEsV0FBVyxFQUFFLDBCQTFCSDtBQTJCVnVDLFFBQUFBLG9CQUFvQixFQUFFLG9DQTNCWjtBQTRCVlksUUFBQUEsd0JBQXdCLEVBQUUsd0NBNUJoQjtBQTZCVkYsUUFBQUEsY0FBYyxFQUFFLDZCQTdCTjtBQThCVjtBQUNBdkQsUUFBQUEsU0FBUyxFQUFFO0FBL0JEO0FBRE4sS0FGUztBQXFDakI3OUIsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEIsVUFBSW1ULE1BQU0sR0FBRyxJQUFiO0FBQ0E1RCxNQUFBQSxpQkFBaUIsQ0FBQzRELE1BQUQsRUFBUztBQUN4QndyQixRQUFBQSxVQUFVLEVBQUVwakMsUUFBUSxDQUFDO0FBQ25CaWtDLFVBQUFBLGtCQUFrQixFQUFFO0FBREQsU0FBRCxFQUVqQlYsVUFGaUI7QUFESSxPQUFULENBQWpCO0FBS0QsS0E1Q2dCO0FBNkNqQno0QixJQUFBQSxFQUFFLEVBQUU7QUFDRmdPLE1BQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULENBQWNsQixNQUFkLEVBQXNCO0FBQzFCQSxRQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnRxQixJQUFsQjtBQUNBbEIsUUFBQUEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JpQyxNQUFsQjtBQUNBenRCLFFBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCM2QsTUFBbEI7QUFDRCxPQUxDO0FBTUZ5Z0IsTUFBQUEsaUJBQWlCLEVBQUUsU0FBU0EsaUJBQVQsQ0FBMkJ0dUIsTUFBM0IsRUFBbUM7QUFDcEQsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbEIsRUFBd0I7QUFDdEIzTSxVQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQjNkLE1BQWxCO0FBQ0QsU0FGRCxNQUVPLElBQUksT0FBTzdOLE1BQU0sQ0FBQzhKLFNBQWQsS0FBNEIsV0FBaEMsRUFBNkM7QUFDbEQ5SixVQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQjNkLE1BQWxCO0FBQ0Q7QUFDRixPQVpDO0FBYUYwZ0IsTUFBQUEsZUFBZSxFQUFFLFNBQVNBLGVBQVQsQ0FBeUJ2dUIsTUFBekIsRUFBaUM7QUFDaEQsWUFBSSxDQUFDQSxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFuQixFQUF5QjtBQUN2QjNNLFVBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCM2QsTUFBbEI7QUFDRDtBQUNGLE9BakJDO0FBa0JGMmdCLE1BQUFBLGtCQUFrQixFQUFFLFNBQVNBLGtCQUFULENBQTRCeHVCLE1BQTVCLEVBQW9DO0FBQ3RELFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCM00sVUFBQUEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JpQyxNQUFsQjtBQUNBenRCLFVBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCM2QsTUFBbEI7QUFDRDtBQUNGLE9BdkJDO0FBd0JGNGdCLE1BQUFBLG9CQUFvQixFQUFFLFNBQVNBLG9CQUFULENBQThCenVCLE1BQTlCLEVBQXNDO0FBQzFELFlBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbkIsRUFBeUI7QUFDdkIzTSxVQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQmlDLE1BQWxCO0FBQ0F6dEIsVUFBQUEsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0IzZCxNQUFsQjtBQUNEO0FBQ0YsT0E3QkM7QUE4QkZ6TSxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDQSxRQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnBxQixPQUFsQjtBQUNELE9BaENDO0FBaUNGLHdCQUFrQixTQUFTK3BCLGFBQVQsQ0FBdUJuckIsTUFBdkIsRUFBK0I7QUFDL0MsWUFBSW1DLEdBQUcsR0FBR25DLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQTVCOztBQUVBLFlBQUlBLEdBQUosRUFBUztBQUNQQSxVQUFBQSxHQUFHLENBQUNuQyxNQUFNLENBQUNrRixPQUFQLEdBQWlCLGFBQWpCLEdBQWlDLFVBQWxDLENBQUgsQ0FBaURsRixNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QmQsU0FBMUU7QUFDRDtBQUNGLE9BdkNDO0FBd0NGVyxNQUFBQSxLQUFLLEVBQUUsU0FBU0EsS0FBVCxDQUFlcnJCLE1BQWYsRUFBdUJyUyxDQUF2QixFQUEwQjtBQUMvQixZQUFJNDlCLFFBQVEsR0FBRzU5QixDQUFDLENBQUN2RyxNQUFqQjs7QUFFQSxZQUFJNFksTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJ6N0IsRUFBekIsSUFBK0JpUSxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QlQsV0FBeEQsSUFBdUUvcUIsTUFBTSxDQUFDd3JCLFVBQVAsQ0FBa0JycEIsR0FBbEIsQ0FBc0I1YSxNQUF0QixHQUErQixDQUF0RyxJQUEyRyxDQUFDaUosQ0FBQyxDQUFDKzZCLFFBQUQsQ0FBRCxDQUFZbjVCLFFBQVosQ0FBcUI0TixNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QnFDLFdBQTlDLENBQWhILEVBQTRLO0FBQzFLLGNBQUk3dEIsTUFBTSxDQUFDd2EsVUFBUCxLQUFzQnhhLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JDLE1BQWxCLElBQTRCOFEsUUFBUSxLQUFLdnJCLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JDLE1BQTNELElBQXFFemEsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQkUsTUFBbEIsSUFBNEI2USxRQUFRLEtBQUt2ckIsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQkUsTUFBdEosQ0FBSixFQUFtSztBQUNuSyxjQUFJZ1IsUUFBUSxHQUFHMXJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQWxCLENBQXNCL1AsUUFBdEIsQ0FBK0I0TixNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QlIsV0FBeEQsQ0FBZjs7QUFFQSxjQUFJVSxRQUFRLEtBQUssSUFBakIsRUFBdUI7QUFDckIxckIsWUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLGdCQUFaO0FBQ0QsV0FGRCxNQUVPO0FBQ0xoQixZQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZ0JBQVo7QUFDRDs7QUFFRGhCLFVBQUFBLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCcnBCLEdBQWxCLENBQXNCcFEsV0FBdEIsQ0FBa0NpTyxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QlIsV0FBM0Q7QUFDRDtBQUNGO0FBdkRDO0FBN0NhLEdBQW5CO0FBd0dBLE1BQUkwRCxTQUFTLEdBQUc7QUFDZHpnQixJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQyxVQUFJak8sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUFkLENBQXdCNStCLEVBQXpCLElBQStCLENBQUNpUSxNQUFNLENBQUMydUIsU0FBUCxDQUFpQjUrQixFQUFyRCxFQUF5RDtBQUN6RCxVQUFJNCtCLFNBQVMsR0FBRzN1QixNQUFNLENBQUMydUIsU0FBdkI7QUFBQSxVQUNJOXBCLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzhFLFlBRGpCO0FBQUEsVUFFSTJHLFFBQVEsR0FBR3pMLE1BQU0sQ0FBQ3lMLFFBRnRCO0FBR0EsVUFBSW1qQixRQUFRLEdBQUdELFNBQVMsQ0FBQ0MsUUFBekI7QUFBQSxVQUNJQyxTQUFTLEdBQUdGLFNBQVMsQ0FBQ0UsU0FEMUI7QUFBQSxVQUVJQyxPQUFPLEdBQUdILFNBQVMsQ0FBQ0csT0FGeEI7QUFBQSxVQUdJM3NCLEdBQUcsR0FBR3dzQixTQUFTLENBQUN4c0IsR0FIcEI7QUFJQSxVQUFJMUYsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQTNCO0FBQ0EsVUFBSUksT0FBTyxHQUFHSCxRQUFkO0FBQ0EsVUFBSUksTUFBTSxHQUFHLENBQUNILFNBQVMsR0FBR0QsUUFBYixJQUF5Qm5qQixRQUF0Qzs7QUFFQSxVQUFJNUcsR0FBSixFQUFTO0FBQ1BtcUIsUUFBQUEsTUFBTSxHQUFHLENBQUNBLE1BQVY7O0FBRUEsWUFBSUEsTUFBTSxHQUFHLENBQWIsRUFBZ0I7QUFDZEQsVUFBQUEsT0FBTyxHQUFHSCxRQUFRLEdBQUdJLE1BQXJCO0FBQ0FBLFVBQUFBLE1BQU0sR0FBRyxDQUFUO0FBQ0QsU0FIRCxNQUdPLElBQUksQ0FBQ0EsTUFBRCxHQUFVSixRQUFWLEdBQXFCQyxTQUF6QixFQUFvQztBQUN6Q0UsVUFBQUEsT0FBTyxHQUFHRixTQUFTLEdBQUdHLE1BQXRCO0FBQ0Q7QUFDRixPQVRELE1BU08sSUFBSUEsTUFBTSxHQUFHLENBQWIsRUFBZ0I7QUFDckJELFFBQUFBLE9BQU8sR0FBR0gsUUFBUSxHQUFHSSxNQUFyQjtBQUNBQSxRQUFBQSxNQUFNLEdBQUcsQ0FBVDtBQUNELE9BSE0sTUFHQSxJQUFJQSxNQUFNLEdBQUdKLFFBQVQsR0FBb0JDLFNBQXhCLEVBQW1DO0FBQ3hDRSxRQUFBQSxPQUFPLEdBQUdGLFNBQVMsR0FBR0csTUFBdEI7QUFDRDs7QUFFRCxVQUFJaHZCLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBSixFQUEyQjtBQUN6QjhxQixRQUFBQSxPQUFPLENBQUNoOEIsU0FBUixDQUFrQixpQkFBaUJrOEIsTUFBakIsR0FBMEIsV0FBNUM7QUFDQUYsUUFBQUEsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXN2tDLEtBQVgsQ0FBaUJzVSxLQUFqQixHQUF5Qnd3QixPQUFPLEdBQUcsSUFBbkM7QUFDRCxPQUhELE1BR087QUFDTEQsUUFBQUEsT0FBTyxDQUFDaDhCLFNBQVIsQ0FBa0Isc0JBQXNCazhCLE1BQXRCLEdBQStCLFFBQWpEO0FBQ0FGLFFBQUFBLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBVzdrQyxLQUFYLENBQWlCd1UsTUFBakIsR0FBMEJzd0IsT0FBTyxHQUFHLElBQXBDO0FBQ0Q7O0FBRUQsVUFBSXR5QixNQUFNLENBQUN3eUIsSUFBWCxFQUFpQjtBQUNmaGpDLFFBQUFBLFlBQVksQ0FBQytULE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCcEYsT0FBbEIsQ0FBWjtBQUNBcG5CLFFBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2xZLEtBQVAsQ0FBYWlsQyxPQUFiLEdBQXVCLENBQXZCO0FBQ0FsdkIsUUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJwRixPQUFqQixHQUEyQnY5QixVQUFVLENBQUMsWUFBWTtBQUNoRG1XLFVBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2xZLEtBQVAsQ0FBYWlsQyxPQUFiLEdBQXVCLENBQXZCO0FBQ0Evc0IsVUFBQUEsR0FBRyxDQUFDdEksVUFBSixDQUFlLEdBQWY7QUFDRCxTQUhvQyxFQUdsQyxJQUhrQyxDQUFyQztBQUlEO0FBQ0YsS0EvQ2E7QUFnRGQwUSxJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QnZYLFFBQXZCLEVBQWlDO0FBQzlDLFVBQUlnTixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQWQsQ0FBd0I1K0IsRUFBekIsSUFBK0IsQ0FBQ2lRLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCNStCLEVBQXJELEVBQXlEO0FBQ3pEaVEsTUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJHLE9BQWpCLENBQXlCajFCLFVBQXpCLENBQW9DN0csUUFBcEM7QUFDRCxLQXBEYTtBQXFEZDZRLElBQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULEdBQXNCO0FBQ2hDLFVBQUk3RCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQWQsQ0FBd0I1K0IsRUFBekIsSUFBK0IsQ0FBQ2lRLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCNStCLEVBQXJELEVBQXlEO0FBQ3pELFVBQUk0K0IsU0FBUyxHQUFHM3VCLE1BQU0sQ0FBQzJ1QixTQUF2QjtBQUNBLFVBQUlHLE9BQU8sR0FBR0gsU0FBUyxDQUFDRyxPQUF4QjtBQUFBLFVBQ0kzc0IsR0FBRyxHQUFHd3NCLFNBQVMsQ0FBQ3hzQixHQURwQjtBQUVBMnNCLE1BQUFBLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBVzdrQyxLQUFYLENBQWlCc1UsS0FBakIsR0FBeUIsRUFBekI7QUFDQXV3QixNQUFBQSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVc3a0MsS0FBWCxDQUFpQndVLE1BQWpCLEdBQTBCLEVBQTFCO0FBQ0EsVUFBSW93QixTQUFTLEdBQUc3dUIsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QjdCLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2xNLFdBQS9CLEdBQTZDa00sR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPOUwsWUFBcEU7QUFDQSxVQUFJODRCLE9BQU8sR0FBR252QixNQUFNLENBQUNxRSxJQUFQLEdBQWNyRSxNQUFNLENBQUNtRyxXQUFuQztBQUNBLFVBQUlpcEIsV0FBVyxHQUFHRCxPQUFPLElBQUlOLFNBQVMsR0FBRzd1QixNQUFNLENBQUNxRSxJQUF2QixDQUF6QjtBQUNBLFVBQUl1cUIsUUFBSjs7QUFFQSxVQUFJNXVCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUFkLENBQXdCQyxRQUF4QixLQUFxQyxNQUF6QyxFQUFpRDtBQUMvQ0EsUUFBQUEsUUFBUSxHQUFHQyxTQUFTLEdBQUdNLE9BQXZCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xQLFFBQUFBLFFBQVEsR0FBRzFxQixRQUFRLENBQUNsRSxNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBZCxDQUF3QkMsUUFBekIsRUFBbUMsRUFBbkMsQ0FBbkI7QUFDRDs7QUFFRCxVQUFJNXVCLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBSixFQUEyQjtBQUN6QjhxQixRQUFBQSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVc3a0MsS0FBWCxDQUFpQnNVLEtBQWpCLEdBQXlCcXdCLFFBQVEsR0FBRyxJQUFwQztBQUNELE9BRkQsTUFFTztBQUNMRSxRQUFBQSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVc3a0MsS0FBWCxDQUFpQndVLE1BQWpCLEdBQTBCbXdCLFFBQVEsR0FBRyxJQUFyQztBQUNEOztBQUVELFVBQUlPLE9BQU8sSUFBSSxDQUFmLEVBQWtCO0FBQ2hCaHRCLFFBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2xZLEtBQVAsQ0FBYW9sQyxPQUFiLEdBQXVCLE1BQXZCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xsdEIsUUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPbFksS0FBUCxDQUFhb2xDLE9BQWIsR0FBdUIsRUFBdkI7QUFDRDs7QUFFRCxVQUFJcnZCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUFkLENBQXdCTSxJQUE1QixFQUFrQztBQUNoQzlzQixRQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9sWSxLQUFQLENBQWFpbEMsT0FBYixHQUF1QixDQUF2QjtBQUNEOztBQUVEenpCLE1BQUFBLE1BQU0sQ0FBQ2t6QixTQUFELEVBQVk7QUFDaEJFLFFBQUFBLFNBQVMsRUFBRUEsU0FESztBQUVoQk0sUUFBQUEsT0FBTyxFQUFFQSxPQUZPO0FBR2hCQyxRQUFBQSxXQUFXLEVBQUVBLFdBSEc7QUFJaEJSLFFBQUFBLFFBQVEsRUFBRUE7QUFKTSxPQUFaLENBQU47O0FBT0EsVUFBSTV1QixNQUFNLENBQUN2RCxNQUFQLENBQWNzTixhQUFkLElBQStCL0osTUFBTSxDQUFDa0YsT0FBMUMsRUFBbUQ7QUFDakR5cEIsUUFBQUEsU0FBUyxDQUFDeHNCLEdBQVYsQ0FBY25DLE1BQU0sQ0FBQzhTLFFBQVAsR0FBa0IsVUFBbEIsR0FBK0IsYUFBN0MsRUFBNEQ5UyxNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBZCxDQUF3QmpFLFNBQXBGO0FBQ0Q7QUFDRixLQWxHYTtBQW1HZDRFLElBQUFBLGtCQUFrQixFQUFFLFNBQVNBLGtCQUFULENBQTRCM2hDLENBQTVCLEVBQStCO0FBQ2pELFVBQUlxUyxNQUFNLEdBQUcsSUFBYjs7QUFFQSxVQUFJQSxNQUFNLENBQUNnRSxZQUFQLEVBQUosRUFBMkI7QUFDekIsZUFBT3JXLENBQUMsQ0FBQzBtQixJQUFGLEtBQVcsWUFBWCxJQUEyQjFtQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFdBQXRDLEdBQW9EMW1CLENBQUMsQ0FBQ3duQixhQUFGLENBQWdCLENBQWhCLEVBQW1Cb2EsT0FBdkUsR0FBaUY1aEMsQ0FBQyxDQUFDNGhDLE9BQTFGO0FBQ0Q7O0FBRUQsYUFBTzVoQyxDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsSUFBMkIxbUIsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxXQUF0QyxHQUFvRDFtQixDQUFDLENBQUN3bkIsYUFBRixDQUFnQixDQUFoQixFQUFtQnFhLE9BQXZFLEdBQWlGN2hDLENBQUMsQ0FBQzZoQyxPQUExRjtBQUNELEtBM0dhO0FBNEdkQyxJQUFBQSxlQUFlLEVBQUUsU0FBU0EsZUFBVCxDQUF5QjloQyxDQUF6QixFQUE0QjtBQUMzQyxVQUFJcVMsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJMnVCLFNBQVMsR0FBRzN1QixNQUFNLENBQUMydUIsU0FBdkI7QUFBQSxVQUNJOXBCLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzhFLFlBRGpCO0FBRUEsVUFBSTNDLEdBQUcsR0FBR3dzQixTQUFTLENBQUN4c0IsR0FBcEI7QUFBQSxVQUNJeXNCLFFBQVEsR0FBR0QsU0FBUyxDQUFDQyxRQUR6QjtBQUFBLFVBRUlDLFNBQVMsR0FBR0YsU0FBUyxDQUFDRSxTQUYxQjtBQUFBLFVBR0lhLFlBQVksR0FBR2YsU0FBUyxDQUFDZSxZQUg3QjtBQUlBLFVBQUlDLGFBQUo7QUFDQUEsTUFBQUEsYUFBYSxHQUFHLENBQUNoQixTQUFTLENBQUNXLGtCQUFWLENBQTZCM2hDLENBQTdCLElBQWtDd1UsR0FBRyxDQUFDN0wsTUFBSixHQUFhMEosTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixNQUF4QixHQUFpQyxLQUE5QyxDQUFsQyxJQUEwRjByQixZQUFZLEtBQUssSUFBakIsR0FBd0JBLFlBQXhCLEdBQXVDZCxRQUFRLEdBQUcsQ0FBNUksQ0FBRCxLQUFvSkMsU0FBUyxHQUFHRCxRQUFoSyxDQUFoQjtBQUNBZSxNQUFBQSxhQUFhLEdBQUdqcEIsSUFBSSxDQUFDSyxHQUFMLENBQVNMLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU2dvQixhQUFULEVBQXdCLENBQXhCLENBQVQsRUFBcUMsQ0FBckMsQ0FBaEI7O0FBRUEsVUFBSTlxQixHQUFKLEVBQVM7QUFDUDhxQixRQUFBQSxhQUFhLEdBQUcsSUFBSUEsYUFBcEI7QUFDRDs7QUFFRCxVQUFJeFgsUUFBUSxHQUFHblksTUFBTSxDQUFDb0wsWUFBUCxLQUF3QixDQUFDcEwsTUFBTSxDQUFDNkwsWUFBUCxLQUF3QjdMLE1BQU0sQ0FBQ29MLFlBQVAsRUFBekIsSUFBa0R1a0IsYUFBekY7QUFDQTN2QixNQUFBQSxNQUFNLENBQUMwTCxjQUFQLENBQXNCeU0sUUFBdEI7QUFDQW5ZLE1BQUFBLE1BQU0sQ0FBQ2lPLFlBQVAsQ0FBb0JrSyxRQUFwQjtBQUNBblksTUFBQUEsTUFBTSxDQUFDZ04saUJBQVA7QUFDQWhOLE1BQUFBLE1BQU0sQ0FBQ2tNLG1CQUFQO0FBQ0QsS0FqSWE7QUFrSWQwakIsSUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJqaUMsQ0FBckIsRUFBd0I7QUFDbkMsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUEzQjtBQUNBLFVBQUlBLFNBQVMsR0FBRzN1QixNQUFNLENBQUMydUIsU0FBdkI7QUFBQSxVQUNJdHNCLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRHhCO0FBRUEsVUFBSUYsR0FBRyxHQUFHd3NCLFNBQVMsQ0FBQ3hzQixHQUFwQjtBQUFBLFVBQ0kyc0IsT0FBTyxHQUFHSCxTQUFTLENBQUNHLE9BRHhCO0FBRUE5dUIsTUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJuYSxTQUFqQixHQUE2QixJQUE3QjtBQUNBeFUsTUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJlLFlBQWpCLEdBQWdDL2hDLENBQUMsQ0FBQ3ZHLE1BQUYsS0FBYTBuQyxPQUFPLENBQUMsQ0FBRCxDQUFwQixJQUEyQm5oQyxDQUFDLENBQUN2RyxNQUFGLEtBQWEwbkMsT0FBeEMsR0FBa0RILFNBQVMsQ0FBQ1csa0JBQVYsQ0FBNkIzaEMsQ0FBN0IsSUFBa0NBLENBQUMsQ0FBQ3ZHLE1BQUYsQ0FBU29QLHFCQUFULEdBQWlDd0osTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixNQUF4QixHQUFpQyxLQUFsRSxDQUFwRixHQUErSixJQUEvTDtBQUNBclcsTUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDQW5vQixNQUFBQSxDQUFDLENBQUM4cEIsZUFBRjtBQUNBcFYsTUFBQUEsVUFBVSxDQUFDeEksVUFBWCxDQUFzQixHQUF0QjtBQUNBaTFCLE1BQUFBLE9BQU8sQ0FBQ2oxQixVQUFSLENBQW1CLEdBQW5CO0FBQ0E4MEIsTUFBQUEsU0FBUyxDQUFDYyxlQUFWLENBQTBCOWhDLENBQTFCO0FBQ0ExQixNQUFBQSxZQUFZLENBQUMrVCxNQUFNLENBQUMydUIsU0FBUCxDQUFpQmtCLFdBQWxCLENBQVo7QUFDQTF0QixNQUFBQSxHQUFHLENBQUN0SSxVQUFKLENBQWUsQ0FBZjs7QUFFQSxVQUFJNEMsTUFBTSxDQUFDd3lCLElBQVgsRUFBaUI7QUFDZjlzQixRQUFBQSxHQUFHLENBQUNsTCxHQUFKLENBQVEsU0FBUixFQUFtQixDQUFuQjtBQUNEOztBQUVELFVBQUkrSSxNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFsQixFQUEyQjtBQUN6QnJKLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JwTCxHQUFsQixDQUFzQixrQkFBdEIsRUFBMEMsTUFBMUM7QUFDRDs7QUFFRCtJLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxvQkFBWixFQUFrQ3JULENBQWxDO0FBQ0QsS0E1SmE7QUE2SmRtaUMsSUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsQ0FBb0JuaUMsQ0FBcEIsRUFBdUI7QUFDakMsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTJ1QixTQUFTLEdBQUczdUIsTUFBTSxDQUFDMnVCLFNBQXZCO0FBQUEsVUFDSXRzQixVQUFVLEdBQUdyQyxNQUFNLENBQUNxQyxVQUR4QjtBQUVBLFVBQUlGLEdBQUcsR0FBR3dzQixTQUFTLENBQUN4c0IsR0FBcEI7QUFBQSxVQUNJMnNCLE9BQU8sR0FBR0gsU0FBUyxDQUFDRyxPQUR4QjtBQUVBLFVBQUksQ0FBQzl1QixNQUFNLENBQUMydUIsU0FBUCxDQUFpQm5hLFNBQXRCLEVBQWlDO0FBQ2pDLFVBQUk3bUIsQ0FBQyxDQUFDbW9CLGNBQU4sRUFBc0Jub0IsQ0FBQyxDQUFDbW9CLGNBQUYsR0FBdEIsS0FBOENub0IsQ0FBQyxDQUFDMjRCLFdBQUYsR0FBZ0IsS0FBaEI7QUFDOUNxSSxNQUFBQSxTQUFTLENBQUNjLGVBQVYsQ0FBMEI5aEMsQ0FBMUI7QUFDQTBVLE1BQUFBLFVBQVUsQ0FBQ3hJLFVBQVgsQ0FBc0IsQ0FBdEI7QUFDQXNJLE1BQUFBLEdBQUcsQ0FBQ3RJLFVBQUosQ0FBZSxDQUFmO0FBQ0FpMUIsTUFBQUEsT0FBTyxDQUFDajFCLFVBQVIsQ0FBbUIsQ0FBbkI7QUFDQW1HLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxtQkFBWixFQUFpQ3JULENBQWpDO0FBQ0QsS0ExS2E7QUEyS2RvaUMsSUFBQUEsU0FBUyxFQUFFLFNBQVNBLFNBQVQsQ0FBbUJwaUMsQ0FBbkIsRUFBc0I7QUFDL0IsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUEzQjtBQUNBLFVBQUlBLFNBQVMsR0FBRzN1QixNQUFNLENBQUMydUIsU0FBdkI7QUFBQSxVQUNJdHNCLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBRHhCO0FBRUEsVUFBSUYsR0FBRyxHQUFHd3NCLFNBQVMsQ0FBQ3hzQixHQUFwQjtBQUNBLFVBQUksQ0FBQ25DLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCbmEsU0FBdEIsRUFBaUM7QUFDakN4VSxNQUFBQSxNQUFNLENBQUMydUIsU0FBUCxDQUFpQm5hLFNBQWpCLEdBQTZCLEtBQTdCOztBQUVBLFVBQUl4VSxNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFsQixFQUEyQjtBQUN6QnJKLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JwTCxHQUFsQixDQUFzQixrQkFBdEIsRUFBMEMsRUFBMUM7QUFDQW9MLFFBQUFBLFVBQVUsQ0FBQ3hJLFVBQVgsQ0FBc0IsRUFBdEI7QUFDRDs7QUFFRCxVQUFJNEMsTUFBTSxDQUFDd3lCLElBQVgsRUFBaUI7QUFDZmhqQyxRQUFBQSxZQUFZLENBQUMrVCxNQUFNLENBQUMydUIsU0FBUCxDQUFpQmtCLFdBQWxCLENBQVo7QUFDQTd2QixRQUFBQSxNQUFNLENBQUMydUIsU0FBUCxDQUFpQmtCLFdBQWpCLEdBQStCMzFCLFFBQVEsQ0FBQyxZQUFZO0FBQ2xEaUksVUFBQUEsR0FBRyxDQUFDbEwsR0FBSixDQUFRLFNBQVIsRUFBbUIsQ0FBbkI7QUFDQWtMLFVBQUFBLEdBQUcsQ0FBQ3RJLFVBQUosQ0FBZSxHQUFmO0FBQ0QsU0FIc0MsRUFHcEMsSUFIb0MsQ0FBdkM7QUFJRDs7QUFFRG1HLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxrQkFBWixFQUFnQ3JULENBQWhDOztBQUVBLFVBQUk4TyxNQUFNLENBQUN1ekIsYUFBWCxFQUEwQjtBQUN4Qmh3QixRQUFBQSxNQUFNLENBQUNzUixjQUFQO0FBQ0Q7QUFDRixLQXRNYTtBQXVNZDJlLElBQUFBLGVBQWUsRUFBRSxTQUFTQSxlQUFULEdBQTJCO0FBQzFDLFVBQUlqd0IsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUFkLENBQXdCNStCLEVBQTdCLEVBQWlDO0FBQ2pDLFVBQUk5RSxRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQSxVQUFJNGpDLFNBQVMsR0FBRzN1QixNQUFNLENBQUMydUIsU0FBdkI7QUFBQSxVQUNJOU4sZ0JBQWdCLEdBQUc3Z0IsTUFBTSxDQUFDNmdCLGdCQUQ5QjtBQUFBLFVBRUlDLGtCQUFrQixHQUFHOWdCLE1BQU0sQ0FBQzhnQixrQkFGaEM7QUFBQSxVQUdJcmtCLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BSHBCO0FBQUEsVUFJSUssT0FBTyxHQUFHa0QsTUFBTSxDQUFDbEQsT0FKckI7QUFLQSxVQUFJcUYsR0FBRyxHQUFHd3NCLFNBQVMsQ0FBQ3hzQixHQUFwQjtBQUNBLFVBQUkvYSxNQUFNLEdBQUcrYSxHQUFHLENBQUMsQ0FBRCxDQUFoQjtBQUNBLFVBQUkrdEIsY0FBYyxHQUFHcHpCLE9BQU8sQ0FBQ1MsZUFBUixJQUEyQmQsTUFBTSxDQUFDcWYsZ0JBQWxDLEdBQXFEO0FBQ3hFQyxRQUFBQSxPQUFPLEVBQUUsS0FEK0Q7QUFFeEV2b0IsUUFBQUEsT0FBTyxFQUFFO0FBRitELE9BQXJELEdBR2pCLEtBSEo7QUFJQSxVQUFJK0osZUFBZSxHQUFHVCxPQUFPLENBQUNTLGVBQVIsSUFBMkJkLE1BQU0sQ0FBQ3FmLGdCQUFsQyxHQUFxRDtBQUN6RUMsUUFBQUEsT0FBTyxFQUFFLElBRGdFO0FBRXpFdm9CLFFBQUFBLE9BQU8sRUFBRTtBQUZnRSxPQUFyRCxHQUdsQixLQUhKO0FBSUEsVUFBSSxDQUFDcE0sTUFBTCxFQUFhOztBQUViLFVBQUksQ0FBQzBWLE9BQU8sQ0FBQ0UsS0FBYixFQUFvQjtBQUNsQjVWLFFBQUFBLE1BQU0sQ0FBQ2dDLGdCQUFQLENBQXdCMDNCLGtCQUFrQixDQUFDbkYsS0FBM0MsRUFBa0QzYixNQUFNLENBQUMydUIsU0FBUCxDQUFpQmlCLFdBQW5FLEVBQWdGTSxjQUFoRjtBQUNBamxDLFFBQUFBLFFBQVEsQ0FBQzdCLGdCQUFULENBQTBCMDNCLGtCQUFrQixDQUFDbEYsSUFBN0MsRUFBbUQ1YixNQUFNLENBQUMydUIsU0FBUCxDQUFpQm1CLFVBQXBFLEVBQWdGSSxjQUFoRjtBQUNBamxDLFFBQUFBLFFBQVEsQ0FBQzdCLGdCQUFULENBQTBCMDNCLGtCQUFrQixDQUFDakYsR0FBN0MsRUFBa0Q3YixNQUFNLENBQUMydUIsU0FBUCxDQUFpQm9CLFNBQW5FLEVBQThFeHlCLGVBQTlFO0FBQ0QsT0FKRCxNQUlPO0FBQ0xuVyxRQUFBQSxNQUFNLENBQUNnQyxnQkFBUCxDQUF3QnkzQixnQkFBZ0IsQ0FBQ2xGLEtBQXpDLEVBQWdEM2IsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJpQixXQUFqRSxFQUE4RU0sY0FBOUU7QUFDQTlvQyxRQUFBQSxNQUFNLENBQUNnQyxnQkFBUCxDQUF3QnkzQixnQkFBZ0IsQ0FBQ2pGLElBQXpDLEVBQStDNWIsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJtQixVQUFoRSxFQUE0RUksY0FBNUU7QUFDQTlvQyxRQUFBQSxNQUFNLENBQUNnQyxnQkFBUCxDQUF3QnkzQixnQkFBZ0IsQ0FBQ2hGLEdBQXpDLEVBQThDN2IsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJvQixTQUEvRCxFQUEwRXh5QixlQUExRTtBQUNEO0FBQ0YsS0FyT2E7QUFzT2Q0eUIsSUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEI7QUFDNUMsVUFBSW53QixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQWQsQ0FBd0I1K0IsRUFBN0IsRUFBaUM7QUFDakMsVUFBSTlFLFFBQVEsR0FBR0YsV0FBVyxFQUExQjtBQUNBLFVBQUk0akMsU0FBUyxHQUFHM3VCLE1BQU0sQ0FBQzJ1QixTQUF2QjtBQUFBLFVBQ0k5TixnQkFBZ0IsR0FBRzdnQixNQUFNLENBQUM2Z0IsZ0JBRDlCO0FBQUEsVUFFSUMsa0JBQWtCLEdBQUc5Z0IsTUFBTSxDQUFDOGdCLGtCQUZoQztBQUFBLFVBR0lya0IsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFIcEI7QUFBQSxVQUlJSyxPQUFPLEdBQUdrRCxNQUFNLENBQUNsRCxPQUpyQjtBQUtBLFVBQUlxRixHQUFHLEdBQUd3c0IsU0FBUyxDQUFDeHNCLEdBQXBCO0FBQ0EsVUFBSS9hLE1BQU0sR0FBRythLEdBQUcsQ0FBQyxDQUFELENBQWhCO0FBQ0EsVUFBSSt0QixjQUFjLEdBQUdwekIsT0FBTyxDQUFDUyxlQUFSLElBQTJCZCxNQUFNLENBQUNxZixnQkFBbEMsR0FBcUQ7QUFDeEVDLFFBQUFBLE9BQU8sRUFBRSxLQUQrRDtBQUV4RXZvQixRQUFBQSxPQUFPLEVBQUU7QUFGK0QsT0FBckQsR0FHakIsS0FISjtBQUlBLFVBQUkrSixlQUFlLEdBQUdULE9BQU8sQ0FBQ1MsZUFBUixJQUEyQmQsTUFBTSxDQUFDcWYsZ0JBQWxDLEdBQXFEO0FBQ3pFQyxRQUFBQSxPQUFPLEVBQUUsSUFEZ0U7QUFFekV2b0IsUUFBQUEsT0FBTyxFQUFFO0FBRmdFLE9BQXJELEdBR2xCLEtBSEo7QUFJQSxVQUFJLENBQUNwTSxNQUFMLEVBQWE7O0FBRWIsVUFBSSxDQUFDMFYsT0FBTyxDQUFDRSxLQUFiLEVBQW9CO0FBQ2xCNVYsUUFBQUEsTUFBTSxDQUFDaUMsbUJBQVAsQ0FBMkJ5M0Isa0JBQWtCLENBQUNuRixLQUE5QyxFQUFxRDNiLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCaUIsV0FBdEUsRUFBbUZNLGNBQW5GO0FBQ0FqbEMsUUFBQUEsUUFBUSxDQUFDNUIsbUJBQVQsQ0FBNkJ5M0Isa0JBQWtCLENBQUNsRixJQUFoRCxFQUFzRDViLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCbUIsVUFBdkUsRUFBbUZJLGNBQW5GO0FBQ0FqbEMsUUFBQUEsUUFBUSxDQUFDNUIsbUJBQVQsQ0FBNkJ5M0Isa0JBQWtCLENBQUNqRixHQUFoRCxFQUFxRDdiLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCb0IsU0FBdEUsRUFBaUZ4eUIsZUFBakY7QUFDRCxPQUpELE1BSU87QUFDTG5XLFFBQUFBLE1BQU0sQ0FBQ2lDLG1CQUFQLENBQTJCdzNCLGdCQUFnQixDQUFDbEYsS0FBNUMsRUFBbUQzYixNQUFNLENBQUMydUIsU0FBUCxDQUFpQmlCLFdBQXBFLEVBQWlGTSxjQUFqRjtBQUNBOW9DLFFBQUFBLE1BQU0sQ0FBQ2lDLG1CQUFQLENBQTJCdzNCLGdCQUFnQixDQUFDakYsSUFBNUMsRUFBa0Q1YixNQUFNLENBQUMydUIsU0FBUCxDQUFpQm1CLFVBQW5FLEVBQStFSSxjQUEvRTtBQUNBOW9DLFFBQUFBLE1BQU0sQ0FBQ2lDLG1CQUFQLENBQTJCdzNCLGdCQUFnQixDQUFDaEYsR0FBNUMsRUFBaUQ3YixNQUFNLENBQUMydUIsU0FBUCxDQUFpQm9CLFNBQWxFLEVBQTZFeHlCLGVBQTdFO0FBQ0Q7QUFDRixLQXBRYTtBQXFRZDJELElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUkydUIsU0FBUyxHQUFHM3VCLE1BQU0sQ0FBQzJ1QixTQUF2QjtBQUFBLFVBQ0l5QixTQUFTLEdBQUdwd0IsTUFBTSxDQUFDbUMsR0FEdkI7QUFFQW5DLE1BQUFBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2t5QixTQUFkLEdBQTBCcHlCLHlCQUF5QixDQUFDNnpCLFNBQUQsRUFBWXB3QixNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBMUIsRUFBcUMzdUIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjQyxjQUFuRCxFQUFtRTtBQUNwSDNNLFFBQUFBLEVBQUUsRUFBRTtBQURnSCxPQUFuRSxDQUFuRDtBQUdBLFVBQUkwTSxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBM0I7QUFDQSxVQUFJLENBQUNseUIsTUFBTSxDQUFDMU0sRUFBWixFQUFnQjtBQUNoQixVQUFJb1MsR0FBRyxHQUFHM1IsQ0FBQyxDQUFDaU0sTUFBTSxDQUFDMU0sRUFBUixDQUFYOztBQUVBLFVBQUlpUSxNQUFNLENBQUN2RCxNQUFQLENBQWN3akIsaUJBQWQsSUFBbUMsT0FBT3hqQixNQUFNLENBQUMxTSxFQUFkLEtBQXFCLFFBQXhELElBQW9Fb1MsR0FBRyxDQUFDNWEsTUFBSixHQUFhLENBQWpGLElBQXNGNm9DLFNBQVMsQ0FBQy8yQixJQUFWLENBQWVvRCxNQUFNLENBQUMxTSxFQUF0QixFQUEwQnhJLE1BQTFCLEtBQXFDLENBQS9ILEVBQWtJO0FBQ2hJNGEsUUFBQUEsR0FBRyxHQUFHaXVCLFNBQVMsQ0FBQy8yQixJQUFWLENBQWVvRCxNQUFNLENBQUMxTSxFQUF0QixDQUFOO0FBQ0Q7O0FBRUQsVUFBSSsrQixPQUFPLEdBQUczc0IsR0FBRyxDQUFDOUksSUFBSixDQUFTLE1BQU0yRyxNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBZCxDQUF3QjBCLFNBQXZDLENBQWQ7O0FBRUEsVUFBSXZCLE9BQU8sQ0FBQ3ZuQyxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCdW5DLFFBQUFBLE9BQU8sR0FBR3QrQixDQUFDLENBQUMsa0JBQWtCd1AsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQWQsQ0FBd0IwQixTQUExQyxHQUFzRCxXQUF2RCxDQUFYO0FBQ0FsdUIsUUFBQUEsR0FBRyxDQUFDbkssTUFBSixDQUFXODJCLE9BQVg7QUFDRDs7QUFFRHJ6QixNQUFBQSxNQUFNLENBQUNrekIsU0FBRCxFQUFZO0FBQ2hCeHNCLFFBQUFBLEdBQUcsRUFBRUEsR0FEVztBQUVoQnBTLFFBQUFBLEVBQUUsRUFBRW9TLEdBQUcsQ0FBQyxDQUFELENBRlM7QUFHaEIyc0IsUUFBQUEsT0FBTyxFQUFFQSxPQUhPO0FBSWhCd0IsUUFBQUEsTUFBTSxFQUFFeEIsT0FBTyxDQUFDLENBQUQ7QUFKQyxPQUFaLENBQU47O0FBT0EsVUFBSXJ5QixNQUFNLENBQUM4ekIsU0FBWCxFQUFzQjtBQUNwQjVCLFFBQUFBLFNBQVMsQ0FBQ3NCLGVBQVY7QUFDRDs7QUFFRCxVQUFJOXRCLEdBQUosRUFBUztBQUNQQSxRQUFBQSxHQUFHLENBQUNuQyxNQUFNLENBQUNrRixPQUFQLEdBQWlCLGFBQWpCLEdBQWlDLFVBQWxDLENBQUgsQ0FBaURsRixNQUFNLENBQUN2RCxNQUFQLENBQWNreUIsU0FBZCxDQUF3QmpFLFNBQXpFO0FBQ0Q7QUFDRixLQXpTYTtBQTBTZHRwQixJQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixVQUFJcEIsTUFBTSxHQUFHLElBQWI7QUFDQUEsTUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJ3QixnQkFBakI7QUFDRDtBQTdTYSxHQUFoQjtBQStTQSxNQUFJSyxXQUFXLEdBQUc7QUFDaEJ6d0IsSUFBQUEsSUFBSSxFQUFFLFdBRFU7QUFFaEJ0RCxJQUFBQSxNQUFNLEVBQUU7QUFDTmt5QixNQUFBQSxTQUFTLEVBQUU7QUFDVDUrQixRQUFBQSxFQUFFLEVBQUUsSUFESztBQUVUNitCLFFBQUFBLFFBQVEsRUFBRSxNQUZEO0FBR1RLLFFBQUFBLElBQUksRUFBRSxLQUhHO0FBSVRzQixRQUFBQSxTQUFTLEVBQUUsS0FKRjtBQUtUUCxRQUFBQSxhQUFhLEVBQUUsSUFMTjtBQU1UdEYsUUFBQUEsU0FBUyxFQUFFLHVCQU5GO0FBT1QyRixRQUFBQSxTQUFTLEVBQUU7QUFQRjtBQURMLEtBRlE7QUFhaEJ4akMsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEIsVUFBSW1ULE1BQU0sR0FBRyxJQUFiO0FBQ0E1RCxNQUFBQSxpQkFBaUIsQ0FBQzRELE1BQUQsRUFBUztBQUN4QjJ1QixRQUFBQSxTQUFTLEVBQUV2bUMsUUFBUSxDQUFDO0FBQ2xCb3NCLFVBQUFBLFNBQVMsRUFBRSxLQURPO0FBRWxCK1UsVUFBQUEsT0FBTyxFQUFFLElBRlM7QUFHbEJzRyxVQUFBQSxXQUFXLEVBQUU7QUFISyxTQUFELEVBSWhCbkIsU0FKZ0I7QUFESyxPQUFULENBQWpCO0FBT0QsS0F0QmU7QUF1QmhCeDdCLElBQUFBLEVBQUUsRUFBRTtBQUNGZ08sTUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsQ0FBY2xCLE1BQWQsRUFBc0I7QUFDMUJBLFFBQUFBLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCenRCLElBQWpCO0FBQ0FsQixRQUFBQSxNQUFNLENBQUMydUIsU0FBUCxDQUFpQjlxQixVQUFqQjtBQUNBN0QsUUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUIxZ0IsWUFBakI7QUFDRCxPQUxDO0FBTUZKLE1BQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCN04sTUFBaEIsRUFBd0I7QUFDOUJBLFFBQUFBLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCOXFCLFVBQWpCO0FBQ0QsT0FSQztBQVNGNUQsTUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JELE1BQWhCLEVBQXdCO0FBQzlCQSxRQUFBQSxNQUFNLENBQUMydUIsU0FBUCxDQUFpQjlxQixVQUFqQjtBQUNELE9BWEM7QUFZRmpDLE1BQUFBLGNBQWMsRUFBRSxTQUFTQSxjQUFULENBQXdCNUIsTUFBeEIsRUFBZ0M7QUFDOUNBLFFBQUFBLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCOXFCLFVBQWpCO0FBQ0QsT0FkQztBQWVGb0ssTUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsQ0FBc0JqTyxNQUF0QixFQUE4QjtBQUMxQ0EsUUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUIxZ0IsWUFBakI7QUFDRCxPQWpCQztBQWtCRjFELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5QztBQUN0RGdOLFFBQUFBLE1BQU0sQ0FBQzJ1QixTQUFQLENBQWlCcGtCLGFBQWpCLENBQStCdlgsUUFBL0I7QUFDRCxPQXBCQztBQXFCRix3QkFBa0IsU0FBU200QixhQUFULENBQXVCbnJCLE1BQXZCLEVBQStCO0FBQy9DLFlBQUltQyxHQUFHLEdBQUduQyxNQUFNLENBQUMydUIsU0FBUCxDQUFpQnhzQixHQUEzQjs7QUFFQSxZQUFJQSxHQUFKLEVBQVM7QUFDUEEsVUFBQUEsR0FBRyxDQUFDbkMsTUFBTSxDQUFDa0YsT0FBUCxHQUFpQixhQUFqQixHQUFpQyxVQUFsQyxDQUFILENBQWlEbEYsTUFBTSxDQUFDdkQsTUFBUCxDQUFja3lCLFNBQWQsQ0FBd0JqRSxTQUF6RTtBQUNEO0FBQ0YsT0EzQkM7QUE0QkZ0cEIsTUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBaUJwQixNQUFqQixFQUF5QjtBQUNoQ0EsUUFBQUEsTUFBTSxDQUFDMnVCLFNBQVAsQ0FBaUJ2dEIsT0FBakI7QUFDRDtBQTlCQztBQXZCWSxHQUFsQjtBQXlEQSxNQUFJcXZCLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQjNnQyxFQUF0QixFQUEwQjBiLFFBQTFCLEVBQW9DO0FBQ2hELFVBQUl6TCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUk2RSxHQUFHLEdBQUc3RSxNQUFNLENBQUM2RSxHQUFqQjtBQUNBLFVBQUkxQyxHQUFHLEdBQUczUixDQUFDLENBQUNULEVBQUQsQ0FBWDtBQUNBLFVBQUkwNEIsU0FBUyxHQUFHNWpCLEdBQUcsR0FBRyxDQUFDLENBQUosR0FBUSxDQUEzQjtBQUNBLFVBQUl6WCxDQUFDLEdBQUcrVSxHQUFHLENBQUMzUCxJQUFKLENBQVMsc0JBQVQsS0FBb0MsR0FBNUM7QUFDQSxVQUFJNGIsQ0FBQyxHQUFHak0sR0FBRyxDQUFDM1AsSUFBSixDQUFTLHdCQUFULENBQVI7QUFDQSxVQUFJNmIsQ0FBQyxHQUFHbE0sR0FBRyxDQUFDM1AsSUFBSixDQUFTLHdCQUFULENBQVI7QUFDQSxVQUFJNDZCLEtBQUssR0FBR2pyQixHQUFHLENBQUMzUCxJQUFKLENBQVMsNEJBQVQsQ0FBWjtBQUNBLFVBQUkwOEIsT0FBTyxHQUFHL3NCLEdBQUcsQ0FBQzNQLElBQUosQ0FBUyw4QkFBVCxDQUFkOztBQUVBLFVBQUk0YixDQUFDLElBQUlDLENBQVQsRUFBWTtBQUNWRCxRQUFBQSxDQUFDLEdBQUdBLENBQUMsSUFBSSxHQUFUO0FBQ0FDLFFBQUFBLENBQUMsR0FBR0EsQ0FBQyxJQUFJLEdBQVQ7QUFDRCxPQUhELE1BR08sSUFBSXJPLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBSixFQUEyQjtBQUNoQ29LLFFBQUFBLENBQUMsR0FBR2hoQixDQUFKO0FBQ0FpaEIsUUFBQUEsQ0FBQyxHQUFHLEdBQUo7QUFDRCxPQUhNLE1BR0E7QUFDTEEsUUFBQUEsQ0FBQyxHQUFHamhCLENBQUo7QUFDQWdoQixRQUFBQSxDQUFDLEdBQUcsR0FBSjtBQUNEOztBQUVELFVBQUlBLENBQUMsQ0FBQzdmLE9BQUYsQ0FBVSxHQUFWLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCNmYsUUFBQUEsQ0FBQyxHQUFHbEssUUFBUSxDQUFDa0ssQ0FBRCxFQUFJLEVBQUosQ0FBUixHQUFrQjNDLFFBQWxCLEdBQTZCZ2QsU0FBN0IsR0FBeUMsR0FBN0M7QUFDRCxPQUZELE1BRU87QUFDTHJhLFFBQUFBLENBQUMsR0FBR0EsQ0FBQyxHQUFHM0MsUUFBSixHQUFlZ2QsU0FBZixHQUEyQixJQUEvQjtBQUNEOztBQUVELFVBQUlwYSxDQUFDLENBQUM5ZixPQUFGLENBQVUsR0FBVixLQUFrQixDQUF0QixFQUF5QjtBQUN2QjhmLFFBQUFBLENBQUMsR0FBR25LLFFBQVEsQ0FBQ21LLENBQUQsRUFBSSxFQUFKLENBQVIsR0FBa0I1QyxRQUFsQixHQUE2QixHQUFqQztBQUNELE9BRkQsTUFFTztBQUNMNEMsUUFBQUEsQ0FBQyxHQUFHQSxDQUFDLEdBQUc1QyxRQUFKLEdBQWUsSUFBbkI7QUFDRDs7QUFFRCxVQUFJLE9BQU95akIsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsT0FBTyxLQUFLLElBQWxELEVBQXdEO0FBQ3RELFlBQUl5QixjQUFjLEdBQUd6QixPQUFPLEdBQUcsQ0FBQ0EsT0FBTyxHQUFHLENBQVgsS0FBaUIsSUFBSXhvQixJQUFJLENBQUM2QixHQUFMLENBQVNrRCxRQUFULENBQXJCLENBQS9CO0FBQ0F0SixRQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9sWSxLQUFQLENBQWFpbEMsT0FBYixHQUF1QnlCLGNBQXZCO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPdkQsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsS0FBSyxLQUFLLElBQTlDLEVBQW9EO0FBQ2xEanJCLFFBQUFBLEdBQUcsQ0FBQ3JQLFNBQUosQ0FBYyxpQkFBaUJzYixDQUFqQixHQUFxQixJQUFyQixHQUE0QkMsQ0FBNUIsR0FBZ0MsUUFBOUM7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFJdWlCLFlBQVksR0FBR3hELEtBQUssR0FBRyxDQUFDQSxLQUFLLEdBQUcsQ0FBVCxLQUFlLElBQUkxbUIsSUFBSSxDQUFDNkIsR0FBTCxDQUFTa0QsUUFBVCxDQUFuQixDQUEzQjtBQUNBdEosUUFBQUEsR0FBRyxDQUFDclAsU0FBSixDQUFjLGlCQUFpQnNiLENBQWpCLEdBQXFCLElBQXJCLEdBQTRCQyxDQUE1QixHQUFnQyxlQUFoQyxHQUFrRHVpQixZQUFsRCxHQUFpRSxHQUEvRTtBQUNEO0FBQ0YsS0E5Q1k7QUErQ2IzaUIsSUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsR0FBd0I7QUFDcEMsVUFBSWpPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSW1DLEdBQUcsR0FBR25DLE1BQU0sQ0FBQ21DLEdBQWpCO0FBQUEsVUFDSWlELE1BQU0sR0FBR3BGLE1BQU0sQ0FBQ29GLE1BRHBCO0FBQUEsVUFFSXFHLFFBQVEsR0FBR3pMLE1BQU0sQ0FBQ3lMLFFBRnRCO0FBQUEsVUFHSWxHLFFBQVEsR0FBR3ZGLE1BQU0sQ0FBQ3VGLFFBSHRCO0FBSUFwRCxNQUFBQSxHQUFHLENBQUNwWSxRQUFKLENBQWEsMElBQWIsRUFBeUpvTixJQUF6SixDQUE4SixVQUFVcEgsRUFBVixFQUFjO0FBQzFLaVEsUUFBQUEsTUFBTSxDQUFDNndCLFFBQVAsQ0FBZ0JILFlBQWhCLENBQTZCM2dDLEVBQTdCLEVBQWlDMGIsUUFBakM7QUFDRCxPQUZEO0FBR0FyRyxNQUFBQSxNQUFNLENBQUNqTyxJQUFQLENBQVksVUFBVWlxQixPQUFWLEVBQW1CaFksVUFBbkIsRUFBK0I7QUFDekMsWUFBSStCLGFBQWEsR0FBR2lXLE9BQU8sQ0FBQzNWLFFBQTVCOztBQUVBLFlBQUl6TCxNQUFNLENBQUN2RCxNQUFQLENBQWM4SyxjQUFkLEdBQStCLENBQS9CLElBQW9DdkgsTUFBTSxDQUFDdkQsTUFBUCxDQUFjb0ssYUFBZCxLQUFnQyxNQUF4RSxFQUFnRjtBQUM5RXNFLFVBQUFBLGFBQWEsSUFBSXpFLElBQUksQ0FBQ0UsSUFBTCxDQUFVd0MsVUFBVSxHQUFHLENBQXZCLElBQTRCcUMsUUFBUSxJQUFJbEcsUUFBUSxDQUFDaGUsTUFBVCxHQUFrQixDQUF0QixDQUFyRDtBQUNEOztBQUVENGpCLFFBQUFBLGFBQWEsR0FBR3pFLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU2pCLElBQUksQ0FBQ0ssR0FBTCxDQUFTb0UsYUFBVCxFQUF3QixDQUFDLENBQXpCLENBQVQsRUFBc0MsQ0FBdEMsQ0FBaEI7QUFDQTNhLFFBQUFBLENBQUMsQ0FBQzR3QixPQUFELENBQUQsQ0FBVy9uQixJQUFYLENBQWdCLDBJQUFoQixFQUE0SmxDLElBQTVKLENBQWlLLFVBQVVwSCxFQUFWLEVBQWM7QUFDN0tpUSxVQUFBQSxNQUFNLENBQUM2d0IsUUFBUCxDQUFnQkgsWUFBaEIsQ0FBNkIzZ0MsRUFBN0IsRUFBaUNvYixhQUFqQztBQUNELFNBRkQ7QUFHRCxPQVhEO0FBWUQsS0FwRVk7QUFxRWJaLElBQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdlgsUUFBdkIsRUFBaUM7QUFDOUMsVUFBSUEsUUFBUSxLQUFLLEtBQUssQ0FBdEIsRUFBeUI7QUFDdkJBLFFBQUFBLFFBQVEsR0FBRyxLQUFLeUosTUFBTCxDQUFZNE4sS0FBdkI7QUFDRDs7QUFFRCxVQUFJckssTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJbUMsR0FBRyxHQUFHbkMsTUFBTSxDQUFDbUMsR0FBakI7QUFDQUEsTUFBQUEsR0FBRyxDQUFDOUksSUFBSixDQUFTLDBJQUFULEVBQXFKbEMsSUFBckosQ0FBMEosVUFBVTI1QixVQUFWLEVBQXNCO0FBQzlLLFlBQUlDLFdBQVcsR0FBR3ZnQyxDQUFDLENBQUNzZ0MsVUFBRCxDQUFuQjtBQUNBLFlBQUlFLGdCQUFnQixHQUFHOXNCLFFBQVEsQ0FBQzZzQixXQUFXLENBQUN2K0IsSUFBWixDQUFpQiwrQkFBakIsQ0FBRCxFQUFvRCxFQUFwRCxDQUFSLElBQW1FUSxRQUExRjtBQUNBLFlBQUlBLFFBQVEsS0FBSyxDQUFqQixFQUFvQmcrQixnQkFBZ0IsR0FBRyxDQUFuQjtBQUNwQkQsUUFBQUEsV0FBVyxDQUFDbDNCLFVBQVosQ0FBdUJtM0IsZ0JBQXZCO0FBQ0QsT0FMRDtBQU1EO0FBbEZZLEdBQWY7QUFvRkEsTUFBSUMsVUFBVSxHQUFHO0FBQ2ZseEIsSUFBQUEsSUFBSSxFQUFFLFVBRFM7QUFFZnRELElBQUFBLE1BQU0sRUFBRTtBQUNObzBCLE1BQUFBLFFBQVEsRUFBRTtBQUNSM3JCLFFBQUFBLE9BQU8sRUFBRTtBQUREO0FBREosS0FGTztBQU9mclksSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEIsVUFBSW1ULE1BQU0sR0FBRyxJQUFiO0FBQ0E1RCxNQUFBQSxpQkFBaUIsQ0FBQzRELE1BQUQsRUFBUztBQUN4QjZ3QixRQUFBQSxRQUFRLEVBQUV6b0MsUUFBUSxDQUFDLEVBQUQsRUFBS3FvQyxRQUFMO0FBRE0sT0FBVCxDQUFqQjtBQUdELEtBWmM7QUFhZnY5QixJQUFBQSxFQUFFLEVBQUU7QUFDRnl4QixNQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxDQUFvQjNrQixNQUFwQixFQUE0QjtBQUN0QyxZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY28wQixRQUFkLENBQXVCM3JCLE9BQTVCLEVBQXFDO0FBQ3JDbEYsUUFBQUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjd04sbUJBQWQsR0FBb0MsSUFBcEM7QUFDQWpLLFFBQUFBLE1BQU0sQ0FBQzRjLGNBQVAsQ0FBc0IzUyxtQkFBdEIsR0FBNEMsSUFBNUM7QUFDRCxPQUxDO0FBTUYvSSxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQixZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY28wQixRQUFkLENBQXVCM3JCLE9BQTVCLEVBQXFDO0FBQ3JDbEYsUUFBQUEsTUFBTSxDQUFDNndCLFFBQVAsQ0FBZ0I1aUIsWUFBaEI7QUFDRCxPQVRDO0FBVUZBLE1BQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULENBQXNCak8sTUFBdEIsRUFBOEI7QUFDMUMsWUFBSSxDQUFDQSxNQUFNLENBQUN2RCxNQUFQLENBQWNvMEIsUUFBZCxDQUF1QjNyQixPQUE1QixFQUFxQztBQUNyQ2xGLFFBQUFBLE1BQU0sQ0FBQzZ3QixRQUFQLENBQWdCNWlCLFlBQWhCO0FBQ0QsT0FiQztBQWNGMUQsTUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJ2SyxNQUF2QixFQUErQmhOLFFBQS9CLEVBQXlDO0FBQ3RELFlBQUksQ0FBQ2dOLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY28wQixRQUFkLENBQXVCM3JCLE9BQTVCLEVBQXFDO0FBQ3JDbEYsUUFBQUEsTUFBTSxDQUFDNndCLFFBQVAsQ0FBZ0J0bUIsYUFBaEIsQ0FBOEJ2WCxRQUE5QjtBQUNEO0FBakJDO0FBYlcsR0FBakI7QUFrQ0EsTUFBSWsrQixJQUFJLEdBQUc7QUFDVDtBQUNBQyxJQUFBQSx5QkFBeUIsRUFBRSxTQUFTQSx5QkFBVCxDQUFtQ3hqQyxDQUFuQyxFQUFzQztBQUMvRCxVQUFJQSxDQUFDLENBQUN3bkIsYUFBRixDQUFnQjV0QixNQUFoQixHQUF5QixDQUE3QixFQUFnQyxPQUFPLENBQVA7QUFDaEMsVUFBSTZwQyxFQUFFLEdBQUd6akMsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJDLEtBQTVCO0FBQ0EsVUFBSWljLEVBQUUsR0FBRzFqQyxDQUFDLENBQUN3bkIsYUFBRixDQUFnQixDQUFoQixFQUFtQkcsS0FBNUI7QUFDQSxVQUFJZ2MsRUFBRSxHQUFHM2pDLENBQUMsQ0FBQ3duQixhQUFGLENBQWdCLENBQWhCLEVBQW1CQyxLQUE1QjtBQUNBLFVBQUltYyxFQUFFLEdBQUc1akMsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJHLEtBQTVCO0FBQ0EsVUFBSXdELFFBQVEsR0FBR3BTLElBQUksQ0FBQ3dRLElBQUwsQ0FBVXhRLElBQUksQ0FBQ3lRLEdBQUwsQ0FBU21hLEVBQUUsR0FBR0YsRUFBZCxFQUFrQixDQUFsQixJQUF1QjFxQixJQUFJLENBQUN5USxHQUFMLENBQVNvYSxFQUFFLEdBQUdGLEVBQWQsRUFBa0IsQ0FBbEIsQ0FBakMsQ0FBZjtBQUNBLGFBQU92WSxRQUFQO0FBQ0QsS0FWUTtBQVdUO0FBQ0EwWSxJQUFBQSxjQUFjLEVBQUUsU0FBU0EsY0FBVCxDQUF3QjdqQyxDQUF4QixFQUEyQjtBQUN6QyxVQUFJcVMsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJbEQsT0FBTyxHQUFHa0QsTUFBTSxDQUFDbEQsT0FBckI7QUFDQSxVQUFJTCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWNnMUIsSUFBM0I7QUFDQSxVQUFJQSxJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQW5CO0FBQ0FELE1BQUFBLElBQUksQ0FBQ0Usa0JBQUwsR0FBMEIsS0FBMUI7QUFDQUYsTUFBQUEsSUFBSSxDQUFDRyxnQkFBTCxHQUF3QixLQUF4Qjs7QUFFQSxVQUFJLENBQUM5MEIsT0FBTyxDQUFDYSxRQUFiLEVBQXVCO0FBQ3JCLFlBQUloUSxDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsSUFBMkIxbUIsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxZQUFYLElBQTJCMW1CLENBQUMsQ0FBQ3duQixhQUFGLENBQWdCNXRCLE1BQWhCLEdBQXlCLENBQW5GLEVBQXNGO0FBQ3BGO0FBQ0Q7O0FBRURrcUMsUUFBQUEsSUFBSSxDQUFDRSxrQkFBTCxHQUEwQixJQUExQjtBQUNBRCxRQUFBQSxPQUFPLENBQUNHLFVBQVIsR0FBcUJYLElBQUksQ0FBQ0MseUJBQUwsQ0FBK0J4akMsQ0FBL0IsQ0FBckI7QUFDRDs7QUFFRCxVQUFJLENBQUMrakMsT0FBTyxDQUFDdE4sUUFBVCxJQUFxQixDQUFDc04sT0FBTyxDQUFDdE4sUUFBUixDQUFpQjc4QixNQUEzQyxFQUFtRDtBQUNqRG1xQyxRQUFBQSxPQUFPLENBQUN0TixRQUFSLEdBQW1CNXpCLENBQUMsQ0FBQzdDLENBQUMsQ0FBQ3ZHLE1BQUgsQ0FBRCxDQUFZZ1MsT0FBWixDQUFvQixNQUFNNEcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBeEMsQ0FBbkI7QUFDQSxZQUFJcXNCLE9BQU8sQ0FBQ3ROLFFBQVIsQ0FBaUI3OEIsTUFBakIsS0FBNEIsQ0FBaEMsRUFBbUNtcUMsT0FBTyxDQUFDdE4sUUFBUixHQUFtQnBrQixNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCa0ksTUFBTSxDQUFDMEssV0FBeEIsQ0FBbkI7QUFDbkNnbkIsUUFBQUEsT0FBTyxDQUFDSSxRQUFSLEdBQW1CSixPQUFPLENBQUN0TixRQUFSLENBQWlCL3FCLElBQWpCLENBQXNCLGdEQUF0QixDQUFuQjtBQUNBcTRCLFFBQUFBLE9BQU8sQ0FBQ0ssWUFBUixHQUF1QkwsT0FBTyxDQUFDSSxRQUFSLENBQWlCNzRCLE1BQWpCLENBQXdCLE1BQU13RCxNQUFNLENBQUN1MUIsY0FBckMsQ0FBdkI7QUFDQU4sUUFBQUEsT0FBTyxDQUFDTyxRQUFSLEdBQW1CUCxPQUFPLENBQUNLLFlBQVIsQ0FBcUJ2L0IsSUFBckIsQ0FBMEIsa0JBQTFCLEtBQWlEaUssTUFBTSxDQUFDdzFCLFFBQTNFOztBQUVBLFlBQUlQLE9BQU8sQ0FBQ0ssWUFBUixDQUFxQnhxQyxNQUFyQixLQUFnQyxDQUFwQyxFQUF1QztBQUNyQ21xQyxVQUFBQSxPQUFPLENBQUNJLFFBQVIsR0FBbUJuakMsU0FBbkI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSStpQyxPQUFPLENBQUNJLFFBQVosRUFBc0I7QUFDcEJKLFFBQUFBLE9BQU8sQ0FBQ0ksUUFBUixDQUFpQmo0QixVQUFqQixDQUE0QixDQUE1QjtBQUNEOztBQUVEbUcsTUFBQUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWVMsU0FBWixHQUF3QixJQUF4QjtBQUNELEtBaERRO0FBaURUQyxJQUFBQSxlQUFlLEVBQUUsU0FBU0EsZUFBVCxDQUF5QnhrQyxDQUF6QixFQUE0QjtBQUMzQyxVQUFJcVMsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJbEQsT0FBTyxHQUFHa0QsTUFBTSxDQUFDbEQsT0FBckI7QUFDQSxVQUFJTCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWNnMUIsSUFBM0I7QUFDQSxVQUFJQSxJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQW5COztBQUVBLFVBQUksQ0FBQzUwQixPQUFPLENBQUNhLFFBQWIsRUFBdUI7QUFDckIsWUFBSWhRLENBQUMsQ0FBQzBtQixJQUFGLEtBQVcsV0FBWCxJQUEwQjFtQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFdBQVgsSUFBMEIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0I1dEIsTUFBaEIsR0FBeUIsQ0FBakYsRUFBb0Y7QUFDbEY7QUFDRDs7QUFFRGtxQyxRQUFBQSxJQUFJLENBQUNHLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0FGLFFBQUFBLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQmxCLElBQUksQ0FBQ0MseUJBQUwsQ0FBK0J4akMsQ0FBL0IsQ0FBcEI7QUFDRDs7QUFFRCxVQUFJLENBQUMrakMsT0FBTyxDQUFDSSxRQUFULElBQXFCSixPQUFPLENBQUNJLFFBQVIsQ0FBaUJ2cUMsTUFBakIsS0FBNEIsQ0FBckQsRUFBd0Q7QUFDdEQsWUFBSW9HLENBQUMsQ0FBQzBtQixJQUFGLEtBQVcsZUFBZixFQUFnQ29kLElBQUksQ0FBQ0QsY0FBTCxDQUFvQjdqQyxDQUFwQjtBQUNoQztBQUNEOztBQUVELFVBQUltUCxPQUFPLENBQUNhLFFBQVosRUFBc0I7QUFDcEI4ekIsUUFBQUEsSUFBSSxDQUFDckUsS0FBTCxHQUFhei9CLENBQUMsQ0FBQ3kvQixLQUFGLEdBQVVxRSxJQUFJLENBQUNiLFlBQTVCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xhLFFBQUFBLElBQUksQ0FBQ3JFLEtBQUwsR0FBYXNFLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQlYsT0FBTyxDQUFDRyxVQUE1QixHQUF5Q0osSUFBSSxDQUFDYixZQUEzRDtBQUNEOztBQUVELFVBQUlhLElBQUksQ0FBQ3JFLEtBQUwsR0FBYXNFLE9BQU8sQ0FBQ08sUUFBekIsRUFBbUM7QUFDakNSLFFBQUFBLElBQUksQ0FBQ3JFLEtBQUwsR0FBYXNFLE9BQU8sQ0FBQ08sUUFBUixHQUFtQixDQUFuQixHQUF1QnZyQixJQUFJLENBQUN5USxHQUFMLENBQVNzYSxJQUFJLENBQUNyRSxLQUFMLEdBQWFzRSxPQUFPLENBQUNPLFFBQXJCLEdBQWdDLENBQXpDLEVBQTRDLEdBQTVDLENBQXBDO0FBQ0Q7O0FBRUQsVUFBSVIsSUFBSSxDQUFDckUsS0FBTCxHQUFhM3dCLE1BQU0sQ0FBQ3NoQixRQUF4QixFQUFrQztBQUNoQzBULFFBQUFBLElBQUksQ0FBQ3JFLEtBQUwsR0FBYTN3QixNQUFNLENBQUNzaEIsUUFBUCxHQUFrQixDQUFsQixHQUFzQnJYLElBQUksQ0FBQ3lRLEdBQUwsQ0FBUzFhLE1BQU0sQ0FBQ3NoQixRQUFQLEdBQWtCMFQsSUFBSSxDQUFDckUsS0FBdkIsR0FBK0IsQ0FBeEMsRUFBMkMsR0FBM0MsQ0FBbkM7QUFDRDs7QUFFRHNFLE1BQUFBLE9BQU8sQ0FBQ0ksUUFBUixDQUFpQmgvQixTQUFqQixDQUEyQiw4QkFBOEIyK0IsSUFBSSxDQUFDckUsS0FBbkMsR0FBMkMsR0FBdEU7QUFDRCxLQXJGUTtBQXNGVGlGLElBQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULENBQXNCMWtDLENBQXRCLEVBQXlCO0FBQ3JDLFVBQUlxUyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUlsQyxNQUFNLEdBQUdrQyxNQUFNLENBQUNsQyxNQUFwQjtBQUNBLFVBQUloQixPQUFPLEdBQUdrRCxNQUFNLENBQUNsRCxPQUFyQjtBQUNBLFVBQUlMLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUEzQjtBQUNBLFVBQUlBLElBQUksR0FBR3p4QixNQUFNLENBQUN5eEIsSUFBbEI7QUFDQSxVQUFJQyxPQUFPLEdBQUdELElBQUksQ0FBQ0MsT0FBbkI7O0FBRUEsVUFBSSxDQUFDNTBCLE9BQU8sQ0FBQ2EsUUFBYixFQUF1QjtBQUNyQixZQUFJLENBQUM4ekIsSUFBSSxDQUFDRSxrQkFBTixJQUE0QixDQUFDRixJQUFJLENBQUNHLGdCQUF0QyxFQUF3RDtBQUN0RDtBQUNEOztBQUVELFlBQUlqa0MsQ0FBQyxDQUFDMG1CLElBQUYsS0FBVyxVQUFYLElBQXlCMW1CLENBQUMsQ0FBQzBtQixJQUFGLEtBQVcsVUFBWCxJQUF5QjFtQixDQUFDLENBQUNrcEIsY0FBRixDQUFpQnR2QixNQUFqQixHQUEwQixDQUFuRCxJQUF3RCxDQUFDdVcsTUFBTSxDQUFDTyxPQUE3RixFQUFzRztBQUNwRztBQUNEOztBQUVEb3pCLFFBQUFBLElBQUksQ0FBQ0Usa0JBQUwsR0FBMEIsS0FBMUI7QUFDQUYsUUFBQUEsSUFBSSxDQUFDRyxnQkFBTCxHQUF3QixLQUF4QjtBQUNEOztBQUVELFVBQUksQ0FBQ0YsT0FBTyxDQUFDSSxRQUFULElBQXFCSixPQUFPLENBQUNJLFFBQVIsQ0FBaUJ2cUMsTUFBakIsS0FBNEIsQ0FBckQsRUFBd0Q7QUFDeERrcUMsTUFBQUEsSUFBSSxDQUFDckUsS0FBTCxHQUFhMW1CLElBQUksQ0FBQ0ssR0FBTCxDQUFTTCxJQUFJLENBQUNpQixHQUFMLENBQVM4cEIsSUFBSSxDQUFDckUsS0FBZCxFQUFxQnNFLE9BQU8sQ0FBQ08sUUFBN0IsQ0FBVCxFQUFpRHgxQixNQUFNLENBQUNzaEIsUUFBeEQsQ0FBYjtBQUNBMlQsTUFBQUEsT0FBTyxDQUFDSSxRQUFSLENBQWlCajRCLFVBQWpCLENBQTRCbUcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE4sS0FBMUMsRUFBaUR2WCxTQUFqRCxDQUEyRCw4QkFBOEIyK0IsSUFBSSxDQUFDckUsS0FBbkMsR0FBMkMsR0FBdEc7QUFDQXFFLE1BQUFBLElBQUksQ0FBQ2IsWUFBTCxHQUFvQmEsSUFBSSxDQUFDckUsS0FBekI7QUFDQXFFLE1BQUFBLElBQUksQ0FBQ1MsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFVBQUlULElBQUksQ0FBQ3JFLEtBQUwsS0FBZSxDQUFuQixFQUFzQnNFLE9BQU8sQ0FBQ3ROLFFBQVIsR0FBbUJ6MUIsU0FBbkI7QUFDdkIsS0FqSFE7QUFrSFRtbEIsSUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsQ0FBc0JubUIsQ0FBdEIsRUFBeUI7QUFDckMsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSWxDLE1BQU0sR0FBR2tDLE1BQU0sQ0FBQ2xDLE1BQXBCO0FBQ0EsVUFBSTJ6QixJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQW5CO0FBQUEsVUFDSTFTLEtBQUssR0FBR3lTLElBQUksQ0FBQ3pTLEtBRGpCO0FBRUEsVUFBSSxDQUFDMFMsT0FBTyxDQUFDSSxRQUFULElBQXFCSixPQUFPLENBQUNJLFFBQVIsQ0FBaUJ2cUMsTUFBakIsS0FBNEIsQ0FBckQsRUFBd0Q7QUFDeEQsVUFBSXkzQixLQUFLLENBQUN4SyxTQUFWLEVBQXFCO0FBQ3JCLFVBQUkxVyxNQUFNLENBQUNPLE9BQVAsSUFBa0IxUSxDQUFDLENBQUMySCxVQUF4QixFQUFvQzNILENBQUMsQ0FBQ21vQixjQUFGO0FBQ3BDa0osTUFBQUEsS0FBSyxDQUFDeEssU0FBTixHQUFrQixJQUFsQjtBQUNBd0ssTUFBQUEsS0FBSyxDQUFDc1QsWUFBTixDQUFtQmxrQixDQUFuQixHQUF1QnpnQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsR0FBMEIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJDLEtBQTdDLEdBQXFEem5CLENBQUMsQ0FBQ3luQixLQUE5RTtBQUNBNEosTUFBQUEsS0FBSyxDQUFDc1QsWUFBTixDQUFtQmprQixDQUFuQixHQUF1QjFnQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFlBQVgsR0FBMEIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJHLEtBQTdDLEdBQXFEM25CLENBQUMsQ0FBQzJuQixLQUE5RTtBQUNELEtBOUhRO0FBK0hUcUIsSUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJocEIsQ0FBckIsRUFBd0I7QUFDbkMsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXl4QixJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQW5CO0FBQUEsVUFDSTFTLEtBQUssR0FBR3lTLElBQUksQ0FBQ3pTLEtBRGpCO0FBQUEsVUFFSWpHLFFBQVEsR0FBRzBZLElBQUksQ0FBQzFZLFFBRnBCO0FBR0EsVUFBSSxDQUFDMlksT0FBTyxDQUFDSSxRQUFULElBQXFCSixPQUFPLENBQUNJLFFBQVIsQ0FBaUJ2cUMsTUFBakIsS0FBNEIsQ0FBckQsRUFBd0Q7QUFDeER5WSxNQUFBQSxNQUFNLENBQUNnVixVQUFQLEdBQW9CLEtBQXBCO0FBQ0EsVUFBSSxDQUFDZ0ssS0FBSyxDQUFDeEssU0FBUCxJQUFvQixDQUFDa2QsT0FBTyxDQUFDdE4sUUFBakMsRUFBMkM7O0FBRTNDLFVBQUksQ0FBQ3BGLEtBQUssQ0FBQ3ZLLE9BQVgsRUFBb0I7QUFDbEJ1SyxRQUFBQSxLQUFLLENBQUN6Z0IsS0FBTixHQUFjbXpCLE9BQU8sQ0FBQ0ksUUFBUixDQUFpQixDQUFqQixFQUFvQjc3QixXQUFsQztBQUNBK29CLFFBQUFBLEtBQUssQ0FBQ3ZnQixNQUFOLEdBQWVpekIsT0FBTyxDQUFDSSxRQUFSLENBQWlCLENBQWpCLEVBQW9CejdCLFlBQW5DO0FBQ0Eyb0IsUUFBQUEsS0FBSyxDQUFDekosTUFBTixHQUFlaGIsWUFBWSxDQUFDbTNCLE9BQU8sQ0FBQ0ssWUFBUixDQUFxQixDQUFyQixDQUFELEVBQTBCLEdBQTFCLENBQVosSUFBOEMsQ0FBN0Q7QUFDQS9TLFFBQUFBLEtBQUssQ0FBQ3hKLE1BQU4sR0FBZWpiLFlBQVksQ0FBQ20zQixPQUFPLENBQUNLLFlBQVIsQ0FBcUIsQ0FBckIsQ0FBRCxFQUEwQixHQUExQixDQUFaLElBQThDLENBQTdEO0FBQ0FMLFFBQUFBLE9BQU8sQ0FBQ2EsVUFBUixHQUFxQmIsT0FBTyxDQUFDdE4sUUFBUixDQUFpQixDQUFqQixFQUFvQm51QixXQUF6QztBQUNBeTdCLFFBQUFBLE9BQU8sQ0FBQ2MsV0FBUixHQUFzQmQsT0FBTyxDQUFDdE4sUUFBUixDQUFpQixDQUFqQixFQUFvQi90QixZQUExQztBQUNBcTdCLFFBQUFBLE9BQU8sQ0FBQ0ssWUFBUixDQUFxQmw0QixVQUFyQixDQUFnQyxDQUFoQzs7QUFFQSxZQUFJbUcsTUFBTSxDQUFDNkUsR0FBWCxFQUFnQjtBQUNkbWEsVUFBQUEsS0FBSyxDQUFDekosTUFBTixHQUFlLENBQUN5SixLQUFLLENBQUN6SixNQUF0QjtBQUNBeUosVUFBQUEsS0FBSyxDQUFDeEosTUFBTixHQUFlLENBQUN3SixLQUFLLENBQUN4SixNQUF0QjtBQUNEO0FBQ0YsT0F2QmtDLENBdUJqQzs7O0FBR0YsVUFBSWlkLFdBQVcsR0FBR3pULEtBQUssQ0FBQ3pnQixLQUFOLEdBQWNrekIsSUFBSSxDQUFDckUsS0FBckM7QUFDQSxVQUFJc0YsWUFBWSxHQUFHMVQsS0FBSyxDQUFDdmdCLE1BQU4sR0FBZWd6QixJQUFJLENBQUNyRSxLQUF2QztBQUNBLFVBQUlxRixXQUFXLEdBQUdmLE9BQU8sQ0FBQ2EsVUFBdEIsSUFBb0NHLFlBQVksR0FBR2hCLE9BQU8sQ0FBQ2MsV0FBL0QsRUFBNEU7QUFDNUV4VCxNQUFBQSxLQUFLLENBQUMyVCxJQUFOLEdBQWFqc0IsSUFBSSxDQUFDaUIsR0FBTCxDQUFTK3BCLE9BQU8sQ0FBQ2EsVUFBUixHQUFxQixDQUFyQixHQUF5QkUsV0FBVyxHQUFHLENBQWhELEVBQW1ELENBQW5ELENBQWI7QUFDQXpULE1BQUFBLEtBQUssQ0FBQzRULElBQU4sR0FBYSxDQUFDNVQsS0FBSyxDQUFDMlQsSUFBcEI7QUFDQTNULE1BQUFBLEtBQUssQ0FBQzZULElBQU4sR0FBYW5zQixJQUFJLENBQUNpQixHQUFMLENBQVMrcEIsT0FBTyxDQUFDYyxXQUFSLEdBQXNCLENBQXRCLEdBQTBCRSxZQUFZLEdBQUcsQ0FBbEQsRUFBcUQsQ0FBckQsQ0FBYjtBQUNBMVQsTUFBQUEsS0FBSyxDQUFDOFQsSUFBTixHQUFhLENBQUM5VCxLQUFLLENBQUM2VCxJQUFwQjtBQUNBN1QsTUFBQUEsS0FBSyxDQUFDK1QsY0FBTixDQUFxQjNrQixDQUFyQixHQUF5QnpnQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFdBQVgsR0FBeUIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJDLEtBQTVDLEdBQW9Eem5CLENBQUMsQ0FBQ3luQixLQUEvRTtBQUNBNEosTUFBQUEsS0FBSyxDQUFDK1QsY0FBTixDQUFxQjFrQixDQUFyQixHQUF5QjFnQixDQUFDLENBQUMwbUIsSUFBRixLQUFXLFdBQVgsR0FBeUIxbUIsQ0FBQyxDQUFDd25CLGFBQUYsQ0FBZ0IsQ0FBaEIsRUFBbUJHLEtBQTVDLEdBQW9EM25CLENBQUMsQ0FBQzJuQixLQUEvRTs7QUFFQSxVQUFJLENBQUMwSixLQUFLLENBQUN2SyxPQUFQLElBQWtCLENBQUNnZCxJQUFJLENBQUNTLFNBQTVCLEVBQXVDO0FBQ3JDLFlBQUlseUIsTUFBTSxDQUFDZ0UsWUFBUCxPQUEwQjBDLElBQUksQ0FBQ0MsS0FBTCxDQUFXcVksS0FBSyxDQUFDMlQsSUFBakIsTUFBMkJqc0IsSUFBSSxDQUFDQyxLQUFMLENBQVdxWSxLQUFLLENBQUN6SixNQUFqQixDQUEzQixJQUF1RHlKLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIza0IsQ0FBckIsR0FBeUI0USxLQUFLLENBQUNzVCxZQUFOLENBQW1CbGtCLENBQW5HLElBQXdHMUgsSUFBSSxDQUFDQyxLQUFMLENBQVdxWSxLQUFLLENBQUM0VCxJQUFqQixNQUEyQmxzQixJQUFJLENBQUNDLEtBQUwsQ0FBV3FZLEtBQUssQ0FBQ3pKLE1BQWpCLENBQTNCLElBQXVEeUosS0FBSyxDQUFDK1QsY0FBTixDQUFxQjNrQixDQUFyQixHQUF5QjRRLEtBQUssQ0FBQ3NULFlBQU4sQ0FBbUJsa0IsQ0FBck8sQ0FBSixFQUE2TztBQUMzTzRRLFVBQUFBLEtBQUssQ0FBQ3hLLFNBQU4sR0FBa0IsS0FBbEI7QUFDQTtBQUNEOztBQUVELFlBQUksQ0FBQ3hVLE1BQU0sQ0FBQ2dFLFlBQVAsRUFBRCxLQUEyQjBDLElBQUksQ0FBQ0MsS0FBTCxDQUFXcVksS0FBSyxDQUFDNlQsSUFBakIsTUFBMkJuc0IsSUFBSSxDQUFDQyxLQUFMLENBQVdxWSxLQUFLLENBQUN4SixNQUFqQixDQUEzQixJQUF1RHdKLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIxa0IsQ0FBckIsR0FBeUIyUSxLQUFLLENBQUNzVCxZQUFOLENBQW1CamtCLENBQW5HLElBQXdHM0gsSUFBSSxDQUFDQyxLQUFMLENBQVdxWSxLQUFLLENBQUM4VCxJQUFqQixNQUEyQnBzQixJQUFJLENBQUNDLEtBQUwsQ0FBV3FZLEtBQUssQ0FBQ3hKLE1BQWpCLENBQTNCLElBQXVEd0osS0FBSyxDQUFDK1QsY0FBTixDQUFxQjFrQixDQUFyQixHQUF5QjJRLEtBQUssQ0FBQ3NULFlBQU4sQ0FBbUJqa0IsQ0FBdE8sQ0FBSixFQUE4TztBQUM1TzJRLFVBQUFBLEtBQUssQ0FBQ3hLLFNBQU4sR0FBa0IsS0FBbEI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSTdtQixDQUFDLENBQUMySCxVQUFOLEVBQWtCO0FBQ2hCM0gsUUFBQUEsQ0FBQyxDQUFDbW9CLGNBQUY7QUFDRDs7QUFFRG5vQixNQUFBQSxDQUFDLENBQUM4cEIsZUFBRjtBQUNBdUgsTUFBQUEsS0FBSyxDQUFDdkssT0FBTixHQUFnQixJQUFoQjtBQUNBdUssTUFBQUEsS0FBSyxDQUFDOUosUUFBTixHQUFpQjhKLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIza0IsQ0FBckIsR0FBeUI0USxLQUFLLENBQUNzVCxZQUFOLENBQW1CbGtCLENBQTVDLEdBQWdENFEsS0FBSyxDQUFDekosTUFBdkU7QUFDQXlKLE1BQUFBLEtBQUssQ0FBQzNKLFFBQU4sR0FBaUIySixLQUFLLENBQUMrVCxjQUFOLENBQXFCMWtCLENBQXJCLEdBQXlCMlEsS0FBSyxDQUFDc1QsWUFBTixDQUFtQmprQixDQUE1QyxHQUFnRDJRLEtBQUssQ0FBQ3hKLE1BQXZFOztBQUVBLFVBQUl3SixLQUFLLENBQUM5SixRQUFOLEdBQWlCOEosS0FBSyxDQUFDMlQsSUFBM0IsRUFBaUM7QUFDL0IzVCxRQUFBQSxLQUFLLENBQUM5SixRQUFOLEdBQWlCOEosS0FBSyxDQUFDMlQsSUFBTixHQUFhLENBQWIsR0FBaUJqc0IsSUFBSSxDQUFDeVEsR0FBTCxDQUFTNkgsS0FBSyxDQUFDMlQsSUFBTixHQUFhM1QsS0FBSyxDQUFDOUosUUFBbkIsR0FBOEIsQ0FBdkMsRUFBMEMsR0FBMUMsQ0FBbEM7QUFDRDs7QUFFRCxVQUFJOEosS0FBSyxDQUFDOUosUUFBTixHQUFpQjhKLEtBQUssQ0FBQzRULElBQTNCLEVBQWlDO0FBQy9CNVQsUUFBQUEsS0FBSyxDQUFDOUosUUFBTixHQUFpQjhKLEtBQUssQ0FBQzRULElBQU4sR0FBYSxDQUFiLEdBQWlCbHNCLElBQUksQ0FBQ3lRLEdBQUwsQ0FBUzZILEtBQUssQ0FBQzlKLFFBQU4sR0FBaUI4SixLQUFLLENBQUM0VCxJQUF2QixHQUE4QixDQUF2QyxFQUEwQyxHQUExQyxDQUFsQztBQUNEOztBQUVELFVBQUk1VCxLQUFLLENBQUMzSixRQUFOLEdBQWlCMkosS0FBSyxDQUFDNlQsSUFBM0IsRUFBaUM7QUFDL0I3VCxRQUFBQSxLQUFLLENBQUMzSixRQUFOLEdBQWlCMkosS0FBSyxDQUFDNlQsSUFBTixHQUFhLENBQWIsR0FBaUJuc0IsSUFBSSxDQUFDeVEsR0FBTCxDQUFTNkgsS0FBSyxDQUFDNlQsSUFBTixHQUFhN1QsS0FBSyxDQUFDM0osUUFBbkIsR0FBOEIsQ0FBdkMsRUFBMEMsR0FBMUMsQ0FBbEM7QUFDRDs7QUFFRCxVQUFJMkosS0FBSyxDQUFDM0osUUFBTixHQUFpQjJKLEtBQUssQ0FBQzhULElBQTNCLEVBQWlDO0FBQy9COVQsUUFBQUEsS0FBSyxDQUFDM0osUUFBTixHQUFpQjJKLEtBQUssQ0FBQzhULElBQU4sR0FBYSxDQUFiLEdBQWlCcHNCLElBQUksQ0FBQ3lRLEdBQUwsQ0FBUzZILEtBQUssQ0FBQzNKLFFBQU4sR0FBaUIySixLQUFLLENBQUM4VCxJQUF2QixHQUE4QixDQUF2QyxFQUEwQyxHQUExQyxDQUFsQztBQUNELE9BdkVrQyxDQXVFakM7OztBQUdGLFVBQUksQ0FBQy9aLFFBQVEsQ0FBQ2lhLGFBQWQsRUFBNkJqYSxRQUFRLENBQUNpYSxhQUFULEdBQXlCaFUsS0FBSyxDQUFDK1QsY0FBTixDQUFxQjNrQixDQUE5QztBQUM3QixVQUFJLENBQUMySyxRQUFRLENBQUNrYSxhQUFkLEVBQTZCbGEsUUFBUSxDQUFDa2EsYUFBVCxHQUF5QmpVLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIxa0IsQ0FBOUM7QUFDN0IsVUFBSSxDQUFDMEssUUFBUSxDQUFDbWEsUUFBZCxFQUF3Qm5hLFFBQVEsQ0FBQ21hLFFBQVQsR0FBb0JwbkMsSUFBSSxDQUFDc08sR0FBTCxFQUFwQjtBQUN4QjJlLE1BQUFBLFFBQVEsQ0FBQzNLLENBQVQsR0FBYSxDQUFDNFEsS0FBSyxDQUFDK1QsY0FBTixDQUFxQjNrQixDQUFyQixHQUF5QjJLLFFBQVEsQ0FBQ2lhLGFBQW5DLEtBQXFEbG5DLElBQUksQ0FBQ3NPLEdBQUwsS0FBYTJlLFFBQVEsQ0FBQ21hLFFBQTNFLElBQXVGLENBQXBHO0FBQ0FuYSxNQUFBQSxRQUFRLENBQUMxSyxDQUFULEdBQWEsQ0FBQzJRLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIxa0IsQ0FBckIsR0FBeUIwSyxRQUFRLENBQUNrYSxhQUFuQyxLQUFxRG5uQyxJQUFJLENBQUNzTyxHQUFMLEtBQWEyZSxRQUFRLENBQUNtYSxRQUEzRSxJQUF1RixDQUFwRztBQUNBLFVBQUl4c0IsSUFBSSxDQUFDNkIsR0FBTCxDQUFTeVcsS0FBSyxDQUFDK1QsY0FBTixDQUFxQjNrQixDQUFyQixHQUF5QjJLLFFBQVEsQ0FBQ2lhLGFBQTNDLElBQTRELENBQWhFLEVBQW1FamEsUUFBUSxDQUFDM0ssQ0FBVCxHQUFhLENBQWI7QUFDbkUsVUFBSTFILElBQUksQ0FBQzZCLEdBQUwsQ0FBU3lXLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIxa0IsQ0FBckIsR0FBeUIwSyxRQUFRLENBQUNrYSxhQUEzQyxJQUE0RCxDQUFoRSxFQUFtRWxhLFFBQVEsQ0FBQzFLLENBQVQsR0FBYSxDQUFiO0FBQ25FMEssTUFBQUEsUUFBUSxDQUFDaWEsYUFBVCxHQUF5QmhVLEtBQUssQ0FBQytULGNBQU4sQ0FBcUIza0IsQ0FBOUM7QUFDQTJLLE1BQUFBLFFBQVEsQ0FBQ2thLGFBQVQsR0FBeUJqVSxLQUFLLENBQUMrVCxjQUFOLENBQXFCMWtCLENBQTlDO0FBQ0EwSyxNQUFBQSxRQUFRLENBQUNtYSxRQUFULEdBQW9CcG5DLElBQUksQ0FBQ3NPLEdBQUwsRUFBcEI7QUFDQXMzQixNQUFBQSxPQUFPLENBQUNLLFlBQVIsQ0FBcUJqL0IsU0FBckIsQ0FBK0IsaUJBQWlCa3NCLEtBQUssQ0FBQzlKLFFBQXZCLEdBQWtDLE1BQWxDLEdBQTJDOEosS0FBSyxDQUFDM0osUUFBakQsR0FBNEQsT0FBM0Y7QUFDRCxLQXBOUTtBQXFOVGdELElBQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULEdBQXNCO0FBQ2hDLFVBQUlyWSxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl5eEIsSUFBSSxHQUFHenhCLE1BQU0sQ0FBQ3l4QixJQUFsQjtBQUNBLFVBQUlDLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFuQjtBQUFBLFVBQ0kxUyxLQUFLLEdBQUd5UyxJQUFJLENBQUN6UyxLQURqQjtBQUFBLFVBRUlqRyxRQUFRLEdBQUcwWSxJQUFJLENBQUMxWSxRQUZwQjtBQUdBLFVBQUksQ0FBQzJZLE9BQU8sQ0FBQ0ksUUFBVCxJQUFxQkosT0FBTyxDQUFDSSxRQUFSLENBQWlCdnFDLE1BQWpCLEtBQTRCLENBQXJELEVBQXdEOztBQUV4RCxVQUFJLENBQUN5M0IsS0FBSyxDQUFDeEssU0FBUCxJQUFvQixDQUFDd0ssS0FBSyxDQUFDdkssT0FBL0IsRUFBd0M7QUFDdEN1SyxRQUFBQSxLQUFLLENBQUN4SyxTQUFOLEdBQWtCLEtBQWxCO0FBQ0F3SyxRQUFBQSxLQUFLLENBQUN2SyxPQUFOLEdBQWdCLEtBQWhCO0FBQ0E7QUFDRDs7QUFFRHVLLE1BQUFBLEtBQUssQ0FBQ3hLLFNBQU4sR0FBa0IsS0FBbEI7QUFDQXdLLE1BQUFBLEtBQUssQ0FBQ3ZLLE9BQU4sR0FBZ0IsS0FBaEI7QUFDQSxVQUFJMGUsaUJBQWlCLEdBQUcsR0FBeEI7QUFDQSxVQUFJQyxpQkFBaUIsR0FBRyxHQUF4QjtBQUNBLFVBQUlDLGlCQUFpQixHQUFHdGEsUUFBUSxDQUFDM0ssQ0FBVCxHQUFhK2tCLGlCQUFyQztBQUNBLFVBQUlHLFlBQVksR0FBR3RVLEtBQUssQ0FBQzlKLFFBQU4sR0FBaUJtZSxpQkFBcEM7QUFDQSxVQUFJRSxpQkFBaUIsR0FBR3hhLFFBQVEsQ0FBQzFLLENBQVQsR0FBYStrQixpQkFBckM7QUFDQSxVQUFJSSxZQUFZLEdBQUd4VSxLQUFLLENBQUMzSixRQUFOLEdBQWlCa2UsaUJBQXBDLENBckJnQyxDQXFCdUI7O0FBRXZELFVBQUl4YSxRQUFRLENBQUMzSyxDQUFULEtBQWUsQ0FBbkIsRUFBc0Ira0IsaUJBQWlCLEdBQUd6c0IsSUFBSSxDQUFDNkIsR0FBTCxDQUFTLENBQUMrcUIsWUFBWSxHQUFHdFUsS0FBSyxDQUFDOUosUUFBdEIsSUFBa0M2RCxRQUFRLENBQUMzSyxDQUFwRCxDQUFwQjtBQUN0QixVQUFJMkssUUFBUSxDQUFDMUssQ0FBVCxLQUFlLENBQW5CLEVBQXNCK2tCLGlCQUFpQixHQUFHMXNCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUyxDQUFDaXJCLFlBQVksR0FBR3hVLEtBQUssQ0FBQzNKLFFBQXRCLElBQWtDMEQsUUFBUSxDQUFDMUssQ0FBcEQsQ0FBcEI7QUFDdEIsVUFBSTZLLGdCQUFnQixHQUFHeFMsSUFBSSxDQUFDSyxHQUFMLENBQVNvc0IsaUJBQVQsRUFBNEJDLGlCQUE1QixDQUF2QjtBQUNBcFUsTUFBQUEsS0FBSyxDQUFDOUosUUFBTixHQUFpQm9lLFlBQWpCO0FBQ0F0VSxNQUFBQSxLQUFLLENBQUMzSixRQUFOLEdBQWlCbWUsWUFBakIsQ0EzQmdDLENBMkJEOztBQUUvQixVQUFJZixXQUFXLEdBQUd6VCxLQUFLLENBQUN6Z0IsS0FBTixHQUFja3pCLElBQUksQ0FBQ3JFLEtBQXJDO0FBQ0EsVUFBSXNGLFlBQVksR0FBRzFULEtBQUssQ0FBQ3ZnQixNQUFOLEdBQWVnekIsSUFBSSxDQUFDckUsS0FBdkM7QUFDQXBPLE1BQUFBLEtBQUssQ0FBQzJULElBQU4sR0FBYWpzQixJQUFJLENBQUNpQixHQUFMLENBQVMrcEIsT0FBTyxDQUFDYSxVQUFSLEdBQXFCLENBQXJCLEdBQXlCRSxXQUFXLEdBQUcsQ0FBaEQsRUFBbUQsQ0FBbkQsQ0FBYjtBQUNBelQsTUFBQUEsS0FBSyxDQUFDNFQsSUFBTixHQUFhLENBQUM1VCxLQUFLLENBQUMyVCxJQUFwQjtBQUNBM1QsTUFBQUEsS0FBSyxDQUFDNlQsSUFBTixHQUFhbnNCLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUytwQixPQUFPLENBQUNjLFdBQVIsR0FBc0IsQ0FBdEIsR0FBMEJFLFlBQVksR0FBRyxDQUFsRCxFQUFxRCxDQUFyRCxDQUFiO0FBQ0ExVCxNQUFBQSxLQUFLLENBQUM4VCxJQUFOLEdBQWEsQ0FBQzlULEtBQUssQ0FBQzZULElBQXBCO0FBQ0E3VCxNQUFBQSxLQUFLLENBQUM5SixRQUFOLEdBQWlCeE8sSUFBSSxDQUFDSyxHQUFMLENBQVNMLElBQUksQ0FBQ2lCLEdBQUwsQ0FBU3FYLEtBQUssQ0FBQzlKLFFBQWYsRUFBeUI4SixLQUFLLENBQUM0VCxJQUEvQixDQUFULEVBQStDNVQsS0FBSyxDQUFDMlQsSUFBckQsQ0FBakI7QUFDQTNULE1BQUFBLEtBQUssQ0FBQzNKLFFBQU4sR0FBaUIzTyxJQUFJLENBQUNLLEdBQUwsQ0FBU0wsSUFBSSxDQUFDaUIsR0FBTCxDQUFTcVgsS0FBSyxDQUFDM0osUUFBZixFQUF5QjJKLEtBQUssQ0FBQzhULElBQS9CLENBQVQsRUFBK0M5VCxLQUFLLENBQUM2VCxJQUFyRCxDQUFqQjtBQUNBbkIsTUFBQUEsT0FBTyxDQUFDSyxZQUFSLENBQXFCbDRCLFVBQXJCLENBQWdDcWYsZ0JBQWhDLEVBQWtEcG1CLFNBQWxELENBQTRELGlCQUFpQmtzQixLQUFLLENBQUM5SixRQUF2QixHQUFrQyxNQUFsQyxHQUEyQzhKLEtBQUssQ0FBQzNKLFFBQWpELEdBQTRELE9BQXhIO0FBQ0QsS0EzUFE7QUE0UFRvZSxJQUFBQSxlQUFlLEVBQUUsU0FBU0EsZUFBVCxHQUEyQjtBQUMxQyxVQUFJenpCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXl4QixJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQW5COztBQUVBLFVBQUlBLE9BQU8sQ0FBQ3ROLFFBQVIsSUFBb0Jwa0IsTUFBTSxDQUFDa04sYUFBUCxLQUF5QmxOLE1BQU0sQ0FBQzBLLFdBQXhELEVBQXFFO0FBQ25FLFlBQUlnbkIsT0FBTyxDQUFDSSxRQUFaLEVBQXNCO0FBQ3BCSixVQUFBQSxPQUFPLENBQUNJLFFBQVIsQ0FBaUJoL0IsU0FBakIsQ0FBMkIsNkJBQTNCO0FBQ0Q7O0FBRUQsWUFBSTQrQixPQUFPLENBQUNLLFlBQVosRUFBMEI7QUFDeEJMLFVBQUFBLE9BQU8sQ0FBQ0ssWUFBUixDQUFxQmovQixTQUFyQixDQUErQixvQkFBL0I7QUFDRDs7QUFFRDIrQixRQUFBQSxJQUFJLENBQUNyRSxLQUFMLEdBQWEsQ0FBYjtBQUNBcUUsUUFBQUEsSUFBSSxDQUFDYixZQUFMLEdBQW9CLENBQXBCO0FBQ0FjLFFBQUFBLE9BQU8sQ0FBQ3ROLFFBQVIsR0FBbUJ6MUIsU0FBbkI7QUFDQStpQyxRQUFBQSxPQUFPLENBQUNJLFFBQVIsR0FBbUJuakMsU0FBbkI7QUFDQStpQyxRQUFBQSxPQUFPLENBQUNLLFlBQVIsR0FBdUJwakMsU0FBdkI7QUFDRDtBQUNGLEtBaFJRO0FBaVJUO0FBQ0F3RCxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQnhFLENBQWhCLEVBQW1CO0FBQ3pCLFVBQUlxUyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl5eEIsSUFBSSxHQUFHenhCLE1BQU0sQ0FBQ3l4QixJQUFsQjs7QUFFQSxVQUFJQSxJQUFJLENBQUNyRSxLQUFMLElBQWNxRSxJQUFJLENBQUNyRSxLQUFMLEtBQWUsQ0FBakMsRUFBb0M7QUFDbEM7QUFDQXFFLFFBQUFBLElBQUksQ0FBQ2lDLEdBQUw7QUFDRCxPQUhELE1BR087QUFDTDtBQUNBakMsUUFBQUEsSUFBSSxNQUFKLENBQVE5akMsQ0FBUjtBQUNEO0FBQ0YsS0E3UlE7QUE4UlQsVUFBSSxTQUFTZ21DLEdBQVQsQ0FBYWhtQyxDQUFiLEVBQWdCO0FBQ2xCLFVBQUlxUyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2VCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJa2xDLElBQUksR0FBR3p4QixNQUFNLENBQUN5eEIsSUFBbEI7QUFDQSxVQUFJaDFCLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUEzQjtBQUNBLFVBQUlDLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFuQjtBQUFBLFVBQ0kxUyxLQUFLLEdBQUd5UyxJQUFJLENBQUN6UyxLQURqQjs7QUFHQSxVQUFJLENBQUMwUyxPQUFPLENBQUN0TixRQUFiLEVBQXVCO0FBQ3JCLFlBQUlwa0IsTUFBTSxDQUFDdkQsTUFBUCxDQUFjd0ksT0FBZCxJQUF5QmpGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQS9DLElBQTBEbEYsTUFBTSxDQUFDaUYsT0FBckUsRUFBOEU7QUFDNUV5c0IsVUFBQUEsT0FBTyxDQUFDdE4sUUFBUixHQUFtQnBrQixNQUFNLENBQUNxQyxVQUFQLENBQWtCdFksUUFBbEIsQ0FBMkIsTUFBTWlXLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzJQLGdCQUEvQyxDQUFuQjtBQUNELFNBRkQsTUFFTztBQUNMc2xCLFVBQUFBLE9BQU8sQ0FBQ3ROLFFBQVIsR0FBbUJwa0IsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQmtJLE1BQU0sQ0FBQzBLLFdBQXhCLENBQW5CO0FBQ0Q7O0FBRURnbkIsUUFBQUEsT0FBTyxDQUFDSSxRQUFSLEdBQW1CSixPQUFPLENBQUN0TixRQUFSLENBQWlCL3FCLElBQWpCLENBQXNCLGdEQUF0QixDQUFuQjtBQUNBcTRCLFFBQUFBLE9BQU8sQ0FBQ0ssWUFBUixHQUF1QkwsT0FBTyxDQUFDSSxRQUFSLENBQWlCNzRCLE1BQWpCLENBQXdCLE1BQU13RCxNQUFNLENBQUN1MUIsY0FBckMsQ0FBdkI7QUFDRDs7QUFFRCxVQUFJLENBQUNOLE9BQU8sQ0FBQ0ksUUFBVCxJQUFxQkosT0FBTyxDQUFDSSxRQUFSLENBQWlCdnFDLE1BQWpCLEtBQTRCLENBQWpELElBQXNELENBQUNtcUMsT0FBTyxDQUFDSyxZQUEvRCxJQUErRUwsT0FBTyxDQUFDSyxZQUFSLENBQXFCeHFDLE1BQXJCLEtBQWdDLENBQW5ILEVBQXNIO0FBQ3RIbXFDLE1BQUFBLE9BQU8sQ0FBQ3ROLFFBQVIsQ0FBaUJyekIsUUFBakIsQ0FBMEIsS0FBSzBMLE1BQU0sQ0FBQ20zQixnQkFBdEM7QUFDQSxVQUFJQyxNQUFKO0FBQ0EsVUFBSUMsTUFBSjtBQUNBLFVBQUlDLE9BQUo7QUFDQSxVQUFJQyxPQUFKO0FBQ0EsVUFBSWhkLEtBQUo7QUFDQSxVQUFJQyxLQUFKO0FBQ0EsVUFBSWdkLFVBQUo7QUFDQSxVQUFJQyxVQUFKO0FBQ0EsVUFBSUMsVUFBSjtBQUNBLFVBQUlDLFdBQUo7QUFDQSxVQUFJM0IsV0FBSjtBQUNBLFVBQUlDLFlBQUo7QUFDQSxVQUFJMkIsYUFBSjtBQUNBLFVBQUlDLGFBQUo7QUFDQSxVQUFJQyxhQUFKO0FBQ0EsVUFBSUMsYUFBSjtBQUNBLFVBQUlqQyxVQUFKO0FBQ0EsVUFBSUMsV0FBSjs7QUFFQSxVQUFJLE9BQU94VCxLQUFLLENBQUNzVCxZQUFOLENBQW1CbGtCLENBQTFCLEtBQWdDLFdBQWhDLElBQStDemdCLENBQW5ELEVBQXNEO0FBQ3BEa21DLFFBQUFBLE1BQU0sR0FBR2xtQyxDQUFDLENBQUMwbUIsSUFBRixLQUFXLFVBQVgsR0FBd0IxbUIsQ0FBQyxDQUFDa3BCLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0J6QixLQUE1QyxHQUFvRHpuQixDQUFDLENBQUN5bkIsS0FBL0Q7QUFDQTBlLFFBQUFBLE1BQU0sR0FBR25tQyxDQUFDLENBQUMwbUIsSUFBRixLQUFXLFVBQVgsR0FBd0IxbUIsQ0FBQyxDQUFDa3BCLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0J2QixLQUE1QyxHQUFvRDNuQixDQUFDLENBQUMybkIsS0FBL0Q7QUFDRCxPQUhELE1BR087QUFDTHVlLFFBQUFBLE1BQU0sR0FBRzdVLEtBQUssQ0FBQ3NULFlBQU4sQ0FBbUJsa0IsQ0FBNUI7QUFDQTBsQixRQUFBQSxNQUFNLEdBQUc5VSxLQUFLLENBQUNzVCxZQUFOLENBQW1CamtCLENBQTVCO0FBQ0Q7O0FBRURvakIsTUFBQUEsSUFBSSxDQUFDckUsS0FBTCxHQUFhc0UsT0FBTyxDQUFDSyxZQUFSLENBQXFCdi9CLElBQXJCLENBQTBCLGtCQUExQixLQUFpRGlLLE1BQU0sQ0FBQ3cxQixRQUFyRTtBQUNBUixNQUFBQSxJQUFJLENBQUNiLFlBQUwsR0FBb0JjLE9BQU8sQ0FBQ0ssWUFBUixDQUFxQnYvQixJQUFyQixDQUEwQixrQkFBMUIsS0FBaURpSyxNQUFNLENBQUN3MUIsUUFBNUU7O0FBRUEsVUFBSXRrQyxDQUFKLEVBQU87QUFDTDRrQyxRQUFBQSxVQUFVLEdBQUdiLE9BQU8sQ0FBQ3ROLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0JudUIsV0FBakM7QUFDQXU4QixRQUFBQSxXQUFXLEdBQUdkLE9BQU8sQ0FBQ3ROLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0IvdEIsWUFBbEM7QUFDQTA5QixRQUFBQSxPQUFPLEdBQUdyQyxPQUFPLENBQUN0TixRQUFSLENBQWlCOXRCLE1BQWpCLEdBQTBCVSxJQUExQixHQUFpQ3ZLLE1BQU0sQ0FBQ3FLLE9BQWxEO0FBQ0FrOUIsUUFBQUEsT0FBTyxHQUFHdEMsT0FBTyxDQUFDdE4sUUFBUixDQUFpQjl0QixNQUFqQixHQUEwQlMsR0FBMUIsR0FBZ0N0SyxNQUFNLENBQUNtSyxPQUFqRDtBQUNBb2dCLFFBQUFBLEtBQUssR0FBRytjLE9BQU8sR0FBR3hCLFVBQVUsR0FBRyxDQUF2QixHQUEyQnNCLE1BQW5DO0FBQ0E1YyxRQUFBQSxLQUFLLEdBQUcrYyxPQUFPLEdBQUd4QixXQUFXLEdBQUcsQ0FBeEIsR0FBNEJzQixNQUFwQztBQUNBSyxRQUFBQSxVQUFVLEdBQUd6QyxPQUFPLENBQUNJLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0I3N0IsV0FBakM7QUFDQW0rQixRQUFBQSxXQUFXLEdBQUcxQyxPQUFPLENBQUNJLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0J6N0IsWUFBbEM7QUFDQW84QixRQUFBQSxXQUFXLEdBQUcwQixVQUFVLEdBQUcxQyxJQUFJLENBQUNyRSxLQUFoQztBQUNBc0YsUUFBQUEsWUFBWSxHQUFHMEIsV0FBVyxHQUFHM0MsSUFBSSxDQUFDckUsS0FBbEM7QUFDQWlILFFBQUFBLGFBQWEsR0FBRzN0QixJQUFJLENBQUNpQixHQUFMLENBQVM0cUIsVUFBVSxHQUFHLENBQWIsR0FBaUJFLFdBQVcsR0FBRyxDQUF4QyxFQUEyQyxDQUEzQyxDQUFoQjtBQUNBNkIsUUFBQUEsYUFBYSxHQUFHNXRCLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUzZxQixXQUFXLEdBQUcsQ0FBZCxHQUFrQkUsWUFBWSxHQUFHLENBQTFDLEVBQTZDLENBQTdDLENBQWhCO0FBQ0E2QixRQUFBQSxhQUFhLEdBQUcsQ0FBQ0YsYUFBakI7QUFDQUcsUUFBQUEsYUFBYSxHQUFHLENBQUNGLGFBQWpCO0FBQ0FMLFFBQUFBLFVBQVUsR0FBR2pkLEtBQUssR0FBR3lhLElBQUksQ0FBQ3JFLEtBQTFCO0FBQ0E4RyxRQUFBQSxVQUFVLEdBQUdqZCxLQUFLLEdBQUd3YSxJQUFJLENBQUNyRSxLQUExQjs7QUFFQSxZQUFJNkcsVUFBVSxHQUFHSSxhQUFqQixFQUFnQztBQUM5QkosVUFBQUEsVUFBVSxHQUFHSSxhQUFiO0FBQ0Q7O0FBRUQsWUFBSUosVUFBVSxHQUFHTSxhQUFqQixFQUFnQztBQUM5Qk4sVUFBQUEsVUFBVSxHQUFHTSxhQUFiO0FBQ0Q7O0FBRUQsWUFBSUwsVUFBVSxHQUFHSSxhQUFqQixFQUFnQztBQUM5QkosVUFBQUEsVUFBVSxHQUFHSSxhQUFiO0FBQ0Q7O0FBRUQsWUFBSUosVUFBVSxHQUFHTSxhQUFqQixFQUFnQztBQUM5Qk4sVUFBQUEsVUFBVSxHQUFHTSxhQUFiO0FBQ0Q7QUFDRixPQWpDRCxNQWlDTztBQUNMUCxRQUFBQSxVQUFVLEdBQUcsQ0FBYjtBQUNBQyxRQUFBQSxVQUFVLEdBQUcsQ0FBYjtBQUNEOztBQUVEeEMsTUFBQUEsT0FBTyxDQUFDSyxZQUFSLENBQXFCbDRCLFVBQXJCLENBQWdDLEdBQWhDLEVBQXFDL0csU0FBckMsQ0FBK0MsaUJBQWlCbWhDLFVBQWpCLEdBQThCLE1BQTlCLEdBQXVDQyxVQUF2QyxHQUFvRCxPQUFuRztBQUNBeEMsTUFBQUEsT0FBTyxDQUFDSSxRQUFSLENBQWlCajRCLFVBQWpCLENBQTRCLEdBQTVCLEVBQWlDL0csU0FBakMsQ0FBMkMsOEJBQThCMitCLElBQUksQ0FBQ3JFLEtBQW5DLEdBQTJDLEdBQXRGO0FBQ0QsS0F6WFE7QUEwWFRzRyxJQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFVBQUkxekIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJeXhCLElBQUksR0FBR3p4QixNQUFNLENBQUN5eEIsSUFBbEI7QUFDQSxVQUFJaDFCLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUEzQjtBQUNBLFVBQUlDLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFuQjs7QUFFQSxVQUFJLENBQUNBLE9BQU8sQ0FBQ3ROLFFBQWIsRUFBdUI7QUFDckIsWUFBSXBrQixNQUFNLENBQUN2RCxNQUFQLENBQWN3SSxPQUFkLElBQXlCakYsTUFBTSxDQUFDdkQsTUFBUCxDQUFjd0ksT0FBZCxDQUFzQkMsT0FBL0MsSUFBMERsRixNQUFNLENBQUNpRixPQUFyRSxFQUE4RTtBQUM1RXlzQixVQUFBQSxPQUFPLENBQUN0TixRQUFSLEdBQW1CcGtCLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0J0WSxRQUFsQixDQUEyQixNQUFNaVcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMlAsZ0JBQS9DLENBQW5CO0FBQ0QsU0FGRCxNQUVPO0FBQ0xzbEIsVUFBQUEsT0FBTyxDQUFDdE4sUUFBUixHQUFtQnBrQixNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCa0ksTUFBTSxDQUFDMEssV0FBeEIsQ0FBbkI7QUFDRDs7QUFFRGduQixRQUFBQSxPQUFPLENBQUNJLFFBQVIsR0FBbUJKLE9BQU8sQ0FBQ3ROLFFBQVIsQ0FBaUIvcUIsSUFBakIsQ0FBc0IsZ0RBQXRCLENBQW5CO0FBQ0FxNEIsUUFBQUEsT0FBTyxDQUFDSyxZQUFSLEdBQXVCTCxPQUFPLENBQUNJLFFBQVIsQ0FBaUI3NEIsTUFBakIsQ0FBd0IsTUFBTXdELE1BQU0sQ0FBQ3UxQixjQUFyQyxDQUF2QjtBQUNEOztBQUVELFVBQUksQ0FBQ04sT0FBTyxDQUFDSSxRQUFULElBQXFCSixPQUFPLENBQUNJLFFBQVIsQ0FBaUJ2cUMsTUFBakIsS0FBNEIsQ0FBakQsSUFBc0QsQ0FBQ21xQyxPQUFPLENBQUNLLFlBQS9ELElBQStFTCxPQUFPLENBQUNLLFlBQVIsQ0FBcUJ4cUMsTUFBckIsS0FBZ0MsQ0FBbkgsRUFBc0g7QUFDdEhrcUMsTUFBQUEsSUFBSSxDQUFDckUsS0FBTCxHQUFhLENBQWI7QUFDQXFFLE1BQUFBLElBQUksQ0FBQ2IsWUFBTCxHQUFvQixDQUFwQjtBQUNBYyxNQUFBQSxPQUFPLENBQUNLLFlBQVIsQ0FBcUJsNEIsVUFBckIsQ0FBZ0MsR0FBaEMsRUFBcUMvRyxTQUFyQyxDQUErQyxvQkFBL0M7QUFDQTQrQixNQUFBQSxPQUFPLENBQUNJLFFBQVIsQ0FBaUJqNEIsVUFBakIsQ0FBNEIsR0FBNUIsRUFBaUMvRyxTQUFqQyxDQUEyQyw2QkFBM0M7QUFDQTQrQixNQUFBQSxPQUFPLENBQUN0TixRQUFSLENBQWlCMXlCLFdBQWpCLENBQTZCLEtBQUsrSyxNQUFNLENBQUNtM0IsZ0JBQXpDO0FBQ0FsQyxNQUFBQSxPQUFPLENBQUN0TixRQUFSLEdBQW1CejFCLFNBQW5CO0FBQ0QsS0FsWlE7QUFtWlQ4bEMsSUFBQUEsY0FBYyxFQUFFLFNBQVNBLGNBQVQsQ0FBd0J0eEIsTUFBeEIsRUFBZ0M7QUFDOUMsVUFBSW5ELE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXl4QixJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSW5oQyxRQUFRLEdBQUdtaEMsSUFBSSxDQUFDaUQsYUFBcEI7QUFBQSxVQUNJM1ksT0FBTyxHQUFHMFYsSUFBSSxDQUFDbDBCLGVBRG5CO0FBRUF5QyxNQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCYyxNQUFsQixFQUEwQixjQUExQixFQUEwQzdTLFFBQTFDLEVBQW9EbWhDLElBQUksQ0FBQ0QsY0FBekQsRUFBeUV6VixPQUF6RTtBQUNBL2IsTUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQmMsTUFBbEIsRUFBMEIsZUFBMUIsRUFBMkM3UyxRQUEzQyxFQUFxRG1oQyxJQUFJLENBQUNVLGVBQTFELEVBQTJFcFcsT0FBM0U7QUFDQS9iLE1BQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JjLE1BQWxCLEVBQTBCLFlBQTFCLEVBQXdDN1MsUUFBeEMsRUFBa0RtaEMsSUFBSSxDQUFDWSxZQUF2RCxFQUFxRXRXLE9BQXJFO0FBQ0QsS0EzWlE7QUE0WlQ0WSxJQUFBQSxjQUFjLEVBQUUsU0FBU0EsY0FBVCxHQUEwQjtBQUN4QyxVQUFJLEtBQUtsRCxJQUFMLENBQVVtRCxlQUFkLEVBQStCO0FBQy9CLFdBQUtuRCxJQUFMLENBQVVtRCxlQUFWLEdBQTRCLElBQTVCO0FBQ0EsV0FBS25ELElBQUwsQ0FBVWdELGNBQVYsQ0FBeUIsSUFBekI7QUFDRCxLQWhhUTtBQWlhVEksSUFBQUEsZUFBZSxFQUFFLFNBQVNBLGVBQVQsR0FBMkI7QUFDMUMsVUFBSSxDQUFDLEtBQUtwRCxJQUFMLENBQVVtRCxlQUFmLEVBQWdDO0FBQ2hDLFdBQUtuRCxJQUFMLENBQVVtRCxlQUFWLEdBQTRCLEtBQTVCO0FBQ0EsV0FBS25ELElBQUwsQ0FBVWdELGNBQVYsQ0FBeUIsS0FBekI7QUFDRCxLQXJhUTtBQXNhVDtBQUNBbFgsSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsR0FBa0I7QUFDeEIsVUFBSXZkLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSWxELE9BQU8sR0FBR2tELE1BQU0sQ0FBQ2xELE9BQXJCO0FBQ0EsVUFBSTIwQixJQUFJLEdBQUd6eEIsTUFBTSxDQUFDeXhCLElBQWxCO0FBQ0EsVUFBSUEsSUFBSSxDQUFDdnNCLE9BQVQsRUFBa0I7QUFDbEJ1c0IsTUFBQUEsSUFBSSxDQUFDdnNCLE9BQUwsR0FBZSxJQUFmO0FBQ0EsVUFBSTNILGVBQWUsR0FBR3lDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJDLEtBQW5CLEtBQTZCLFlBQTdCLElBQTZDN2UsT0FBTyxDQUFDUyxlQUFyRCxJQUF3RXlDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FmLGdCQUF0RixHQUF5RztBQUM3SEMsUUFBQUEsT0FBTyxFQUFFLElBRG9IO0FBRTdIdm9CLFFBQUFBLE9BQU8sRUFBRTtBQUZvSCxPQUF6RyxHQUdsQixLQUhKO0FBSUEsVUFBSXNoQyx5QkFBeUIsR0FBR2g0QixPQUFPLENBQUNTLGVBQVIsR0FBMEI7QUFDeER3ZSxRQUFBQSxPQUFPLEVBQUUsS0FEK0M7QUFFeER2b0IsUUFBQUEsT0FBTyxFQUFFO0FBRitDLE9BQTFCLEdBRzVCLElBSEo7QUFJQSxVQUFJa2hDLGFBQWEsR0FBRyxNQUFNMTBCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRJLFVBQXhDO0FBQ0FyRixNQUFBQSxNQUFNLENBQUN5eEIsSUFBUCxDQUFZbDBCLGVBQVosR0FBOEJBLGVBQTlCO0FBQ0F5QyxNQUFBQSxNQUFNLENBQUN5eEIsSUFBUCxDQUFZaUQsYUFBWixHQUE0QkEsYUFBNUIsQ0FoQndCLENBZ0JtQjs7QUFFM0MsVUFBSTUzQixPQUFPLENBQUNhLFFBQVosRUFBc0I7QUFDcEJxQyxRQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCblAsRUFBbEIsQ0FBcUI4TSxNQUFNLENBQUMwYixXQUFQLENBQW1CQyxLQUF4QyxFQUErQzNiLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVlrRCxjQUEzRCxFQUEyRXAzQixlQUEzRTtBQUNBeUMsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQm5QLEVBQWxCLENBQXFCOE0sTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkcsR0FBeEMsRUFBNkM3YixNQUFNLENBQUN5eEIsSUFBUCxDQUFZb0QsZUFBekQsRUFBMEV0M0IsZUFBMUU7QUFDRCxPQUhELE1BR08sSUFBSXlDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJDLEtBQW5CLEtBQTZCLFlBQWpDLEVBQStDO0FBQ3BEM2IsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQm5QLEVBQWxCLENBQXFCOE0sTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkMsS0FBeEMsRUFBK0MrWSxhQUEvQyxFQUE4RGpELElBQUksQ0FBQ0QsY0FBbkUsRUFBbUZqMEIsZUFBbkY7QUFDQXlDLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0JuUCxFQUFsQixDQUFxQjhNLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJFLElBQXhDLEVBQThDOFksYUFBOUMsRUFBNkRqRCxJQUFJLENBQUNVLGVBQWxFLEVBQW1GMkMseUJBQW5GO0FBQ0E5MEIsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQm5QLEVBQWxCLENBQXFCOE0sTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkcsR0FBeEMsRUFBNkM2WSxhQUE3QyxFQUE0RGpELElBQUksQ0FBQ1ksWUFBakUsRUFBK0U5MEIsZUFBL0U7O0FBRUEsWUFBSXlDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJNLE1BQXZCLEVBQStCO0FBQzdCaGMsVUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQm5QLEVBQWxCLENBQXFCOE0sTUFBTSxDQUFDMGIsV0FBUCxDQUFtQk0sTUFBeEMsRUFBZ0QwWSxhQUFoRCxFQUErRGpELElBQUksQ0FBQ1ksWUFBcEUsRUFBa0Y5MEIsZUFBbEY7QUFDRDtBQUNGLE9BN0J1QixDQTZCdEI7OztBQUdGeUMsTUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQm5QLEVBQWxCLENBQXFCOE0sTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkUsSUFBeEMsRUFBOEMsTUFBTTViLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUFkLENBQW1CTyxjQUF2RSxFQUF1RlAsSUFBSSxDQUFDOWEsV0FBNUYsRUFBeUdtZSx5QkFBekc7QUFDRCxLQXhjUTtBQXljVHhYLElBQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFVBQUl0ZCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl5eEIsSUFBSSxHQUFHenhCLE1BQU0sQ0FBQ3l4QixJQUFsQjtBQUNBLFVBQUksQ0FBQ0EsSUFBSSxDQUFDdnNCLE9BQVYsRUFBbUI7QUFDbkIsVUFBSXBJLE9BQU8sR0FBR2tELE1BQU0sQ0FBQ2xELE9BQXJCO0FBQ0FrRCxNQUFBQSxNQUFNLENBQUN5eEIsSUFBUCxDQUFZdnNCLE9BQVosR0FBc0IsS0FBdEI7QUFDQSxVQUFJM0gsZUFBZSxHQUFHeUMsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkMsS0FBbkIsS0FBNkIsWUFBN0IsSUFBNkM3ZSxPQUFPLENBQUNTLGVBQXJELElBQXdFeUMsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcWYsZ0JBQXRGLEdBQXlHO0FBQzdIQyxRQUFBQSxPQUFPLEVBQUUsSUFEb0g7QUFFN0h2b0IsUUFBQUEsT0FBTyxFQUFFO0FBRm9ILE9BQXpHLEdBR2xCLEtBSEo7QUFJQSxVQUFJc2hDLHlCQUF5QixHQUFHaDRCLE9BQU8sQ0FBQ1MsZUFBUixHQUEwQjtBQUN4RHdlLFFBQUFBLE9BQU8sRUFBRSxLQUQrQztBQUV4RHZvQixRQUFBQSxPQUFPLEVBQUU7QUFGK0MsT0FBMUIsR0FHNUIsSUFISjtBQUlBLFVBQUlraEMsYUFBYSxHQUFHLE1BQU0xMEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBeEMsQ0FkMEIsQ0FjMEI7O0FBRXBELFVBQUl2SSxPQUFPLENBQUNhLFFBQVosRUFBc0I7QUFDcEJxQyxRQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCNU4sR0FBbEIsQ0FBc0J1TCxNQUFNLENBQUMwYixXQUFQLENBQW1CQyxLQUF6QyxFQUFnRDNiLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVlrRCxjQUE1RCxFQUE0RXAzQixlQUE1RTtBQUNBeUMsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQjVOLEdBQWxCLENBQXNCdUwsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkcsR0FBekMsRUFBOEM3YixNQUFNLENBQUN5eEIsSUFBUCxDQUFZb0QsZUFBMUQsRUFBMkV0M0IsZUFBM0U7QUFDRCxPQUhELE1BR08sSUFBSXlDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJDLEtBQW5CLEtBQTZCLFlBQWpDLEVBQStDO0FBQ3BEM2IsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQjVOLEdBQWxCLENBQXNCdUwsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkMsS0FBekMsRUFBZ0QrWSxhQUFoRCxFQUErRGpELElBQUksQ0FBQ0QsY0FBcEUsRUFBb0ZqMEIsZUFBcEY7QUFDQXlDLFFBQUFBLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0I1TixHQUFsQixDQUFzQnVMLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJFLElBQXpDLEVBQStDOFksYUFBL0MsRUFBOERqRCxJQUFJLENBQUNVLGVBQW5FLEVBQW9GMkMseUJBQXBGO0FBQ0E5MEIsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQjVOLEdBQWxCLENBQXNCdUwsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkcsR0FBekMsRUFBOEM2WSxhQUE5QyxFQUE2RGpELElBQUksQ0FBQ1ksWUFBbEUsRUFBZ0Y5MEIsZUFBaEY7O0FBRUEsWUFBSXlDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJNLE1BQXZCLEVBQStCO0FBQzdCaGMsVUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQjVOLEdBQWxCLENBQXNCdUwsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQk0sTUFBekMsRUFBaUQwWSxhQUFqRCxFQUFnRWpELElBQUksQ0FBQ1ksWUFBckUsRUFBbUY5MEIsZUFBbkY7QUFDRDtBQUNGLE9BM0J5QixDQTJCeEI7OztBQUdGeUMsTUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQjVOLEdBQWxCLENBQXNCdUwsTUFBTSxDQUFDMGIsV0FBUCxDQUFtQkUsSUFBekMsRUFBK0MsTUFBTTViLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUFkLENBQW1CTyxjQUF4RSxFQUF3RlAsSUFBSSxDQUFDOWEsV0FBN0YsRUFBMEdtZSx5QkFBMUc7QUFDRDtBQXhlUSxHQUFYO0FBMGVBLE1BQUlDLE1BQU0sR0FBRztBQUNYaDFCLElBQUFBLElBQUksRUFBRSxNQURLO0FBRVh0RCxJQUFBQSxNQUFNLEVBQUU7QUFDTmcxQixNQUFBQSxJQUFJLEVBQUU7QUFDSnZzQixRQUFBQSxPQUFPLEVBQUUsS0FETDtBQUVKK3NCLFFBQUFBLFFBQVEsRUFBRSxDQUZOO0FBR0psVSxRQUFBQSxRQUFRLEVBQUUsQ0FITjtBQUlKNXJCLFFBQUFBLE1BQU0sRUFBRSxJQUpKO0FBS0o2L0IsUUFBQUEsY0FBYyxFQUFFLHVCQUxaO0FBTUo0QixRQUFBQSxnQkFBZ0IsRUFBRTtBQU5kO0FBREEsS0FGRztBQVlYL21DLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEJ5eEIsUUFBQUEsSUFBSSxFQUFFcnBDLFFBQVEsQ0FBQztBQUNiOGMsVUFBQUEsT0FBTyxFQUFFLEtBREk7QUFFYmtvQixVQUFBQSxLQUFLLEVBQUUsQ0FGTTtBQUdid0QsVUFBQUEsWUFBWSxFQUFFLENBSEQ7QUFJYnNCLFVBQUFBLFNBQVMsRUFBRSxLQUpFO0FBS2JSLFVBQUFBLE9BQU8sRUFBRTtBQUNQdE4sWUFBQUEsUUFBUSxFQUFFejFCLFNBREg7QUFFUDRqQyxZQUFBQSxVQUFVLEVBQUU1akMsU0FGTDtBQUdQNmpDLFlBQUFBLFdBQVcsRUFBRTdqQyxTQUhOO0FBSVBtakMsWUFBQUEsUUFBUSxFQUFFbmpDLFNBSkg7QUFLUG9qQyxZQUFBQSxZQUFZLEVBQUVwakMsU0FMUDtBQU1Qc2pDLFlBQUFBLFFBQVEsRUFBRTtBQU5ILFdBTEk7QUFhYmpULFVBQUFBLEtBQUssRUFBRTtBQUNMeEssWUFBQUEsU0FBUyxFQUFFN2xCLFNBRE47QUFFTDhsQixZQUFBQSxPQUFPLEVBQUU5bEIsU0FGSjtBQUdMdW1CLFlBQUFBLFFBQVEsRUFBRXZtQixTQUhMO0FBSUwwbUIsWUFBQUEsUUFBUSxFQUFFMW1CLFNBSkw7QUFLTGdrQyxZQUFBQSxJQUFJLEVBQUVoa0MsU0FMRDtBQU1Ma2tDLFlBQUFBLElBQUksRUFBRWxrQyxTQU5EO0FBT0xpa0MsWUFBQUEsSUFBSSxFQUFFamtDLFNBUEQ7QUFRTG1rQyxZQUFBQSxJQUFJLEVBQUVua0MsU0FSRDtBQVNMNFAsWUFBQUEsS0FBSyxFQUFFNVAsU0FURjtBQVVMOFAsWUFBQUEsTUFBTSxFQUFFOVAsU0FWSDtBQVdMNG1CLFlBQUFBLE1BQU0sRUFBRTVtQixTQVhIO0FBWUw2bUIsWUFBQUEsTUFBTSxFQUFFN21CLFNBWkg7QUFhTDJqQyxZQUFBQSxZQUFZLEVBQUUsRUFiVDtBQWNMUyxZQUFBQSxjQUFjLEVBQUU7QUFkWCxXQWJNO0FBNkJiaGEsVUFBQUEsUUFBUSxFQUFFO0FBQ1IzSyxZQUFBQSxDQUFDLEVBQUV6ZixTQURLO0FBRVIwZixZQUFBQSxDQUFDLEVBQUUxZixTQUZLO0FBR1Jxa0MsWUFBQUEsYUFBYSxFQUFFcmtDLFNBSFA7QUFJUnNrQyxZQUFBQSxhQUFhLEVBQUV0a0MsU0FKUDtBQUtSdWtDLFlBQUFBLFFBQVEsRUFBRXZrQztBQUxGO0FBN0JHLFNBQUQsRUFvQ1h1aUMsSUFwQ1c7QUFEVSxPQUFULENBQWpCO0FBdUNBLFVBQUk5RCxLQUFLLEdBQUcsQ0FBWjtBQUNBeGxDLE1BQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQm1ZLE1BQU0sQ0FBQ3l4QixJQUE3QixFQUFtQyxPQUFuQyxFQUE0QztBQUMxQzNpQyxRQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLGlCQUFPcytCLEtBQVA7QUFDRCxTQUh5QztBQUkxQ3IrQixRQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxDQUFhRSxLQUFiLEVBQW9CO0FBQ3ZCLGNBQUltK0IsS0FBSyxLQUFLbitCLEtBQWQsRUFBcUI7QUFDbkIsZ0JBQUkydkIsT0FBTyxHQUFHNWUsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWUMsT0FBWixDQUFvQkksUUFBcEIsR0FBK0I5eEIsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWUMsT0FBWixDQUFvQkksUUFBcEIsQ0FBNkIsQ0FBN0IsQ0FBL0IsR0FBaUVuakMsU0FBL0U7QUFDQSxnQkFBSXl5QixPQUFPLEdBQUdwaEIsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWUMsT0FBWixDQUFvQnROLFFBQXBCLEdBQStCcGtCLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVlDLE9BQVosQ0FBb0J0TixRQUFwQixDQUE2QixDQUE3QixDQUEvQixHQUFpRXoxQixTQUEvRTtBQUNBcVIsWUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFlBQVosRUFBMEIvUixLQUExQixFQUFpQzJ2QixPQUFqQyxFQUEwQ3dDLE9BQTFDO0FBQ0Q7O0FBRURnTSxVQUFBQSxLQUFLLEdBQUduK0IsS0FBUjtBQUNEO0FBWnlDLE9BQTVDO0FBY0QsS0FwRVU7QUFxRVhpRSxJQUFBQSxFQUFFLEVBQUU7QUFDRmdPLE1BQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULENBQWNsQixNQUFkLEVBQXNCO0FBQzFCLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2cxQixJQUFkLENBQW1CdnNCLE9BQXZCLEVBQWdDO0FBQzlCbEYsVUFBQUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWWxVLE1BQVo7QUFDRDtBQUNGLE9BTEM7QUFNRm5jLE1BQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCcEIsTUFBakIsRUFBeUI7QUFDaENBLFFBQUFBLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVluVSxPQUFaO0FBQ0QsT0FSQztBQVNGMFgsTUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsQ0FBb0JoMUIsTUFBcEIsRUFBNEJyUyxDQUE1QixFQUErQjtBQUN6QyxZQUFJLENBQUNxUyxNQUFNLENBQUN5eEIsSUFBUCxDQUFZdnNCLE9BQWpCLEVBQTBCO0FBQzFCbEYsUUFBQUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWTNkLFlBQVosQ0FBeUJubUIsQ0FBekI7QUFDRCxPQVpDO0FBYUZzbkMsTUFBQUEsUUFBUSxFQUFFLFNBQVNBLFFBQVQsQ0FBa0JqMUIsTUFBbEIsRUFBMEJyUyxDQUExQixFQUE2QjtBQUNyQyxZQUFJLENBQUNxUyxNQUFNLENBQUN5eEIsSUFBUCxDQUFZdnNCLE9BQWpCLEVBQTBCO0FBQzFCbEYsUUFBQUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWXBaLFVBQVosQ0FBdUIxcUIsQ0FBdkI7QUFDRCxPQWhCQztBQWlCRnVuQyxNQUFBQSxTQUFTLEVBQUUsU0FBU0EsU0FBVCxDQUFtQmwxQixNQUFuQixFQUEyQnJTLENBQTNCLEVBQThCO0FBQ3ZDLFlBQUksQ0FBQ3FTLE1BQU0sQ0FBQzZPLFNBQVIsSUFBcUI3TyxNQUFNLENBQUN2RCxNQUFQLENBQWNnMUIsSUFBZCxDQUFtQnZzQixPQUF4QyxJQUFtRGxGLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVl2c0IsT0FBL0QsSUFBMEVsRixNQUFNLENBQUN2RCxNQUFQLENBQWNnMUIsSUFBZCxDQUFtQnQvQixNQUFqRyxFQUF5RztBQUN2RzZOLFVBQUFBLE1BQU0sQ0FBQ3l4QixJQUFQLENBQVl0L0IsTUFBWixDQUFtQnhFLENBQW5CO0FBQ0Q7QUFDRixPQXJCQztBQXNCRm1NLE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCa0csTUFBdkIsRUFBK0I7QUFDNUMsWUFBSUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWXZzQixPQUFaLElBQXVCbEYsTUFBTSxDQUFDdkQsTUFBUCxDQUFjZzFCLElBQWQsQ0FBbUJ2c0IsT0FBOUMsRUFBdUQ7QUFDckRsRixVQUFBQSxNQUFNLENBQUN5eEIsSUFBUCxDQUFZZ0MsZUFBWjtBQUNEO0FBQ0YsT0ExQkM7QUEyQkYwQixNQUFBQSxXQUFXLEVBQUUsU0FBU0EsV0FBVCxDQUFxQm4xQixNQUFyQixFQUE2QjtBQUN4QyxZQUFJQSxNQUFNLENBQUN5eEIsSUFBUCxDQUFZdnNCLE9BQVosSUFBdUJsRixNQUFNLENBQUN2RCxNQUFQLENBQWNnMUIsSUFBZCxDQUFtQnZzQixPQUExQyxJQUFxRGxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQXZFLEVBQWdGO0FBQzlFckosVUFBQUEsTUFBTSxDQUFDeXhCLElBQVAsQ0FBWWdDLGVBQVo7QUFDRDtBQUNGO0FBL0JDO0FBckVPLEdBQWI7QUF3R0EsTUFBSTJCLElBQUksR0FBRztBQUNUQyxJQUFBQSxXQUFXLEVBQUUsU0FBU0EsV0FBVCxDQUFxQmorQixLQUFyQixFQUE0QmsrQixlQUE1QixFQUE2QztBQUN4RCxVQUFJQSxlQUFlLEtBQUssS0FBSyxDQUE3QixFQUFnQztBQUM5QkEsUUFBQUEsZUFBZSxHQUFHLElBQWxCO0FBQ0Q7O0FBRUQsVUFBSXQxQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBM0I7QUFDQSxVQUFJLE9BQU92c0IsS0FBUCxLQUFpQixXQUFyQixFQUFrQztBQUNsQyxVQUFJNEksTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUNoQyxVQUFJeWQsU0FBUyxHQUFHaEYsTUFBTSxDQUFDaUYsT0FBUCxJQUFrQmpGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3dJLE9BQWQsQ0FBc0JDLE9BQXhEO0FBQ0EsVUFBSWtmLFFBQVEsR0FBR3BmLFNBQVMsR0FBR2hGLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0J0WSxRQUFsQixDQUEyQixNQUFNaVcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNEksVUFBcEIsR0FBaUMsNkJBQWpDLEdBQWlFak8sS0FBakUsR0FBeUUsS0FBcEcsQ0FBSCxHQUFnSDRJLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY3ROLEVBQWQsQ0FBaUJWLEtBQWpCLENBQXhJO0FBQ0EsVUFBSW0rQixPQUFPLEdBQUduUixRQUFRLENBQUMvcUIsSUFBVCxDQUFjLE1BQU1vRCxNQUFNLENBQUMrNEIsWUFBYixHQUE0QixRQUE1QixHQUF1Qy80QixNQUFNLENBQUNnNUIsV0FBOUMsR0FBNEQsU0FBNUQsR0FBd0VoNUIsTUFBTSxDQUFDaTVCLFlBQS9FLEdBQThGLEdBQTVHLENBQWQ7O0FBRUEsVUFBSXRSLFFBQVEsQ0FBQ2h5QixRQUFULENBQWtCcUssTUFBTSxDQUFDKzRCLFlBQXpCLEtBQTBDLENBQUNwUixRQUFRLENBQUNoeUIsUUFBVCxDQUFrQnFLLE1BQU0sQ0FBQ2c1QixXQUF6QixDQUEzQyxJQUFvRixDQUFDclIsUUFBUSxDQUFDaHlCLFFBQVQsQ0FBa0JxSyxNQUFNLENBQUNpNUIsWUFBekIsQ0FBekYsRUFBaUk7QUFDL0hILFFBQUFBLE9BQU8sQ0FBQ3RuQyxJQUFSLENBQWFtMkIsUUFBUSxDQUFDLENBQUQsQ0FBckI7QUFDRDs7QUFFRCxVQUFJbVIsT0FBTyxDQUFDaHVDLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDMUJndUMsTUFBQUEsT0FBTyxDQUFDcCtCLElBQVIsQ0FBYSxVQUFVeW5CLE9BQVYsRUFBbUI7QUFDOUIsWUFBSWtULFFBQVEsR0FBR3RoQyxDQUFDLENBQUNvdUIsT0FBRCxDQUFoQjtBQUNBa1QsUUFBQUEsUUFBUSxDQUFDL2dDLFFBQVQsQ0FBa0IwTCxNQUFNLENBQUNpNUIsWUFBekI7QUFDQSxZQUFJQyxVQUFVLEdBQUc3RCxRQUFRLENBQUN0L0IsSUFBVCxDQUFjLGlCQUFkLENBQWpCO0FBQ0EsWUFBSXpKLEdBQUcsR0FBRytvQyxRQUFRLENBQUN0L0IsSUFBVCxDQUFjLFVBQWQsQ0FBVjtBQUNBLFlBQUlxc0IsTUFBTSxHQUFHaVQsUUFBUSxDQUFDdC9CLElBQVQsQ0FBYyxhQUFkLENBQWI7QUFDQSxZQUFJc3NCLEtBQUssR0FBR2dULFFBQVEsQ0FBQ3QvQixJQUFULENBQWMsWUFBZCxDQUFaO0FBQ0EsWUFBSW9qQyxVQUFVLEdBQUc5RCxRQUFRLENBQUM3NEIsTUFBVCxDQUFnQixTQUFoQixDQUFqQjtBQUNBK0csUUFBQUEsTUFBTSxDQUFDMmUsU0FBUCxDQUFpQm1ULFFBQVEsQ0FBQyxDQUFELENBQXpCLEVBQThCL29DLEdBQUcsSUFBSTRzQyxVQUFyQyxFQUFpRDlXLE1BQWpELEVBQXlEQyxLQUF6RCxFQUFnRSxLQUFoRSxFQUF1RSxZQUFZO0FBQ2pGLGNBQUksT0FBTzllLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sS0FBSyxJQUE1QyxJQUFvRCxDQUFDQSxNQUFyRCxJQUErREEsTUFBTSxJQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQWpGLElBQTJGdUQsTUFBTSxDQUFDRyxTQUF0RyxFQUFpSDs7QUFFakgsY0FBSXcxQixVQUFKLEVBQWdCO0FBQ2Q3RCxZQUFBQSxRQUFRLENBQUM3NkIsR0FBVCxDQUFhLGtCQUFiLEVBQWlDLFdBQVcwK0IsVUFBWCxHQUF3QixLQUF6RDtBQUNBN0QsWUFBQUEsUUFBUSxDQUFDbC9CLFVBQVQsQ0FBb0IsaUJBQXBCO0FBQ0QsV0FIRCxNQUdPO0FBQ0wsZ0JBQUlpc0IsTUFBSixFQUFZO0FBQ1ZpVCxjQUFBQSxRQUFRLENBQUN0L0IsSUFBVCxDQUFjLFFBQWQsRUFBd0Jxc0IsTUFBeEI7QUFDQWlULGNBQUFBLFFBQVEsQ0FBQ2wvQixVQUFULENBQW9CLGFBQXBCO0FBQ0Q7O0FBRUQsZ0JBQUlrc0IsS0FBSixFQUFXO0FBQ1RnVCxjQUFBQSxRQUFRLENBQUN0L0IsSUFBVCxDQUFjLE9BQWQsRUFBdUJzc0IsS0FBdkI7QUFDQWdULGNBQUFBLFFBQVEsQ0FBQ2wvQixVQUFULENBQW9CLFlBQXBCO0FBQ0Q7O0FBRUQsZ0JBQUlnakMsVUFBVSxDQUFDcnVDLE1BQWYsRUFBdUI7QUFDckJxdUMsY0FBQUEsVUFBVSxDQUFDN3JDLFFBQVgsQ0FBb0IsUUFBcEIsRUFBOEJvTixJQUE5QixDQUFtQyxVQUFVMCtCLFFBQVYsRUFBb0I7QUFDckQsb0JBQUlDLE9BQU8sR0FBR3RsQyxDQUFDLENBQUNxbEMsUUFBRCxDQUFmOztBQUVBLG9CQUFJQyxPQUFPLENBQUN0akMsSUFBUixDQUFhLGFBQWIsQ0FBSixFQUFpQztBQUMvQnNqQyxrQkFBQUEsT0FBTyxDQUFDdGpDLElBQVIsQ0FBYSxRQUFiLEVBQXVCc2pDLE9BQU8sQ0FBQ3RqQyxJQUFSLENBQWEsYUFBYixDQUF2QjtBQUNBc2pDLGtCQUFBQSxPQUFPLENBQUNsakMsVUFBUixDQUFtQixhQUFuQjtBQUNEO0FBQ0YsZUFQRDtBQVFEOztBQUVELGdCQUFJN0osR0FBSixFQUFTO0FBQ1Arb0MsY0FBQUEsUUFBUSxDQUFDdC9CLElBQVQsQ0FBYyxLQUFkLEVBQXFCekosR0FBckI7QUFDQStvQyxjQUFBQSxRQUFRLENBQUNsL0IsVUFBVCxDQUFvQixVQUFwQjtBQUNEO0FBQ0Y7O0FBRURrL0IsVUFBQUEsUUFBUSxDQUFDL2dDLFFBQVQsQ0FBa0IwTCxNQUFNLENBQUNnNUIsV0FBekIsRUFBc0MvakMsV0FBdEMsQ0FBa0QrSyxNQUFNLENBQUNpNUIsWUFBekQ7QUFDQXRSLFVBQUFBLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsTUFBTW9ELE1BQU0sQ0FBQ3M1QixjQUEzQixFQUEyQ2prQyxNQUEzQzs7QUFFQSxjQUFJa08sTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBZCxJQUFzQjJvQixlQUExQixFQUEyQztBQUN6QyxnQkFBSVUsa0JBQWtCLEdBQUc1UixRQUFRLENBQUM1eEIsSUFBVCxDQUFjLHlCQUFkLENBQXpCOztBQUVBLGdCQUFJNHhCLFFBQVEsQ0FBQ2h5QixRQUFULENBQWtCNE4sTUFBTSxDQUFDdkQsTUFBUCxDQUFjbVEsbUJBQWhDLENBQUosRUFBMEQ7QUFDeEQsa0JBQUlxcEIsYUFBYSxHQUFHajJCLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0J0WSxRQUFsQixDQUEyQixnQ0FBZ0Npc0Msa0JBQWhDLEdBQXFELFdBQXJELEdBQW1FaDJCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY21RLG1CQUFqRixHQUF1RyxHQUFsSSxDQUFwQjtBQUNBNU0sY0FBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWTBSLFdBQVosQ0FBd0JZLGFBQWEsQ0FBQzcrQixLQUFkLEVBQXhCLEVBQStDLEtBQS9DO0FBQ0QsYUFIRCxNQUdPO0FBQ0wsa0JBQUk4K0IsZUFBZSxHQUFHbDJCLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0J0WSxRQUFsQixDQUEyQixNQUFNaVcsTUFBTSxDQUFDdkQsTUFBUCxDQUFjbVEsbUJBQXBCLEdBQTBDLDZCQUExQyxHQUEwRW9wQixrQkFBMUUsR0FBK0YsS0FBMUgsQ0FBdEI7QUFDQWgyQixjQUFBQSxNQUFNLENBQUMyakIsSUFBUCxDQUFZMFIsV0FBWixDQUF3QmEsZUFBZSxDQUFDOStCLEtBQWhCLEVBQXhCLEVBQWlELEtBQWpEO0FBQ0Q7QUFDRjs7QUFFRDRJLFVBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxnQkFBWixFQUE4Qm9qQixRQUFRLENBQUMsQ0FBRCxDQUF0QyxFQUEyQzBOLFFBQVEsQ0FBQyxDQUFELENBQW5EOztBQUVBLGNBQUk5eEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE8sVUFBbEIsRUFBOEI7QUFDNUJyTCxZQUFBQSxNQUFNLENBQUNvSyxnQkFBUDtBQUNEO0FBQ0YsU0F0REQ7QUF1REFwSyxRQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZUFBWixFQUE2Qm9qQixRQUFRLENBQUMsQ0FBRCxDQUFyQyxFQUEwQzBOLFFBQVEsQ0FBQyxDQUFELENBQWxEO0FBQ0QsT0FoRUQ7QUFpRUQsS0FwRlE7QUFxRlRsTyxJQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQjtBQUNwQixVQUFJNWpCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXFDLFVBQVUsR0FBR3JDLE1BQU0sQ0FBQ3FDLFVBQXhCO0FBQUEsVUFDSW9lLFlBQVksR0FBR3pnQixNQUFNLENBQUN2RCxNQUQxQjtBQUFBLFVBRUkySSxNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQUZwQjtBQUFBLFVBR0lzRixXQUFXLEdBQUcxSyxNQUFNLENBQUMwSyxXQUh6QjtBQUlBLFVBQUkxRixTQUFTLEdBQUdoRixNQUFNLENBQUNpRixPQUFQLElBQWtCd2IsWUFBWSxDQUFDeGIsT0FBYixDQUFxQkMsT0FBdkQ7QUFDQSxVQUFJekksTUFBTSxHQUFHZ2tCLFlBQVksQ0FBQ2tELElBQTFCO0FBQ0EsVUFBSTljLGFBQWEsR0FBRzRaLFlBQVksQ0FBQzVaLGFBQWpDOztBQUVBLFVBQUlBLGFBQWEsS0FBSyxNQUF0QixFQUE4QjtBQUM1QkEsUUFBQUEsYUFBYSxHQUFHLENBQWhCO0FBQ0Q7O0FBRUQsZUFBU3N2QixVQUFULENBQW9CLytCLEtBQXBCLEVBQTJCO0FBQ3pCLFlBQUk0TixTQUFKLEVBQWU7QUFDYixjQUFJM0MsVUFBVSxDQUFDdFksUUFBWCxDQUFvQixNQUFNMDJCLFlBQVksQ0FBQ3BiLFVBQW5CLEdBQWdDLDZCQUFoQyxHQUFnRWpPLEtBQWhFLEdBQXdFLEtBQTVGLEVBQW1HN1AsTUFBdkcsRUFBK0c7QUFDN0csbUJBQU8sSUFBUDtBQUNEO0FBQ0YsU0FKRCxNQUlPLElBQUk2ZCxNQUFNLENBQUNoTyxLQUFELENBQVYsRUFBbUIsT0FBTyxJQUFQOztBQUUxQixlQUFPLEtBQVA7QUFDRDs7QUFFRCxlQUFTZ1MsVUFBVCxDQUFvQmdZLE9BQXBCLEVBQTZCO0FBQzNCLFlBQUlwYyxTQUFKLEVBQWU7QUFDYixpQkFBT3hVLENBQUMsQ0FBQzR3QixPQUFELENBQUQsQ0FBVzV1QixJQUFYLENBQWdCLHlCQUFoQixDQUFQO0FBQ0Q7O0FBRUQsZUFBT2hDLENBQUMsQ0FBQzR3QixPQUFELENBQUQsQ0FBV2hxQixLQUFYLEVBQVA7QUFDRDs7QUFFRCxVQUFJLENBQUM0SSxNQUFNLENBQUMyakIsSUFBUCxDQUFZeVMsa0JBQWpCLEVBQXFDcDJCLE1BQU0sQ0FBQzJqQixJQUFQLENBQVl5UyxrQkFBWixHQUFpQyxJQUFqQzs7QUFFckMsVUFBSXAyQixNQUFNLENBQUN2RCxNQUFQLENBQWN5TixxQkFBbEIsRUFBeUM7QUFDdkM3SCxRQUFBQSxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wMkIsWUFBWSxDQUFDeFYsaUJBQXZDLEVBQTBEOVQsSUFBMUQsQ0FBK0QsVUFBVWlxQixPQUFWLEVBQW1CO0FBQ2hGLGNBQUlocUIsS0FBSyxHQUFHNE4sU0FBUyxHQUFHeFUsQ0FBQyxDQUFDNHdCLE9BQUQsQ0FBRCxDQUFXNXVCLElBQVgsQ0FBZ0IseUJBQWhCLENBQUgsR0FBZ0RoQyxDQUFDLENBQUM0d0IsT0FBRCxDQUFELENBQVdocUIsS0FBWCxFQUFyRTtBQUNBNEksVUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWTBSLFdBQVosQ0FBd0JqK0IsS0FBeEI7QUFDRCxTQUhEO0FBSUQsT0FMRCxNQUtPLElBQUl5UCxhQUFhLEdBQUcsQ0FBcEIsRUFBdUI7QUFDNUIsYUFBSyxJQUFJdmYsQ0FBQyxHQUFHb2pCLFdBQWIsRUFBMEJwakIsQ0FBQyxHQUFHb2pCLFdBQVcsR0FBRzdELGFBQTVDLEVBQTJEdmYsQ0FBQyxJQUFJLENBQWhFLEVBQW1FO0FBQ2pFLGNBQUk2dUMsVUFBVSxDQUFDN3VDLENBQUQsQ0FBZCxFQUFtQjBZLE1BQU0sQ0FBQzJqQixJQUFQLENBQVkwUixXQUFaLENBQXdCL3RDLENBQXhCO0FBQ3BCO0FBQ0YsT0FKTSxNQUlBO0FBQ0wwWSxRQUFBQSxNQUFNLENBQUMyakIsSUFBUCxDQUFZMFIsV0FBWixDQUF3QjNxQixXQUF4QjtBQUNEOztBQUVELFVBQUlqTyxNQUFNLENBQUM0NUIsWUFBWCxFQUF5QjtBQUN2QixZQUFJeHZCLGFBQWEsR0FBRyxDQUFoQixJQUFxQnBLLE1BQU0sQ0FBQzY1QixrQkFBUCxJQUE2Qjc1QixNQUFNLENBQUM2NUIsa0JBQVAsR0FBNEIsQ0FBbEYsRUFBcUY7QUFDbkYsY0FBSUMsTUFBTSxHQUFHOTVCLE1BQU0sQ0FBQzY1QixrQkFBcEI7QUFDQSxjQUFJaFYsR0FBRyxHQUFHemEsYUFBVjtBQUNBLGNBQUkydkIsUUFBUSxHQUFHOXZCLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUytDLFdBQVcsR0FBRzRXLEdBQWQsR0FBb0I1YSxJQUFJLENBQUNLLEdBQUwsQ0FBU3d2QixNQUFULEVBQWlCalYsR0FBakIsQ0FBN0IsRUFBb0RsYyxNQUFNLENBQUM3ZCxNQUEzRCxDQUFmO0FBQ0EsY0FBSWt2QyxRQUFRLEdBQUcvdkIsSUFBSSxDQUFDSyxHQUFMLENBQVMyRCxXQUFXLEdBQUdoRSxJQUFJLENBQUNLLEdBQUwsQ0FBU3VhLEdBQVQsRUFBY2lWLE1BQWQsQ0FBdkIsRUFBOEMsQ0FBOUMsQ0FBZixDQUptRixDQUlsQjs7QUFFakUsZUFBSyxJQUFJenRCLEVBQUUsR0FBRzRCLFdBQVcsR0FBRzdELGFBQTVCLEVBQTJDaUMsRUFBRSxHQUFHMHRCLFFBQWhELEVBQTBEMXRCLEVBQUUsSUFBSSxDQUFoRSxFQUFtRTtBQUNqRSxnQkFBSXF0QixVQUFVLENBQUNydEIsRUFBRCxDQUFkLEVBQW9COUksTUFBTSxDQUFDMmpCLElBQVAsQ0FBWTBSLFdBQVosQ0FBd0J2c0IsRUFBeEI7QUFDckIsV0FSa0YsQ0FRakY7OztBQUdGLGVBQUssSUFBSUUsR0FBRyxHQUFHeXRCLFFBQWYsRUFBeUJ6dEIsR0FBRyxHQUFHMEIsV0FBL0IsRUFBNEMxQixHQUFHLElBQUksQ0FBbkQsRUFBc0Q7QUFDcEQsZ0JBQUltdEIsVUFBVSxDQUFDbnRCLEdBQUQsQ0FBZCxFQUFxQmhKLE1BQU0sQ0FBQzJqQixJQUFQLENBQVkwUixXQUFaLENBQXdCcnNCLEdBQXhCO0FBQ3RCO0FBQ0YsU0FkRCxNQWNPO0FBQ0wsY0FBSTZELFNBQVMsR0FBR3hLLFVBQVUsQ0FBQ3RZLFFBQVgsQ0FBb0IsTUFBTTAyQixZQUFZLENBQUNwVSxjQUF2QyxDQUFoQjtBQUNBLGNBQUlRLFNBQVMsQ0FBQ3RsQixNQUFWLEdBQW1CLENBQXZCLEVBQTBCeVksTUFBTSxDQUFDMmpCLElBQVAsQ0FBWTBSLFdBQVosQ0FBd0Jqc0IsVUFBVSxDQUFDeUQsU0FBRCxDQUFsQztBQUMxQixjQUFJQyxTQUFTLEdBQUd6SyxVQUFVLENBQUN0WSxRQUFYLENBQW9CLE1BQU0wMkIsWUFBWSxDQUFDblUsY0FBdkMsQ0FBaEI7QUFDQSxjQUFJUSxTQUFTLENBQUN2bEIsTUFBVixHQUFtQixDQUF2QixFQUEwQnlZLE1BQU0sQ0FBQzJqQixJQUFQLENBQVkwUixXQUFaLENBQXdCanNCLFVBQVUsQ0FBQzBELFNBQUQsQ0FBbEM7QUFDM0I7QUFDRjtBQUNGLEtBMUpRO0FBMkpUNHBCLElBQUFBLGlCQUFpQixFQUFFLFNBQVNBLGlCQUFULEdBQTZCO0FBQzlDLFVBQUlqcUMsTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsVUFBSXlULE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSSxDQUFDQSxNQUFELElBQVdBLE1BQU0sQ0FBQ0csU0FBdEIsRUFBaUM7QUFDakMsVUFBSXcyQixjQUFjLEdBQUczMkIsTUFBTSxDQUFDdkQsTUFBUCxDQUFja25CLElBQWQsQ0FBbUJpVCxnQkFBbkIsR0FBc0NwbUMsQ0FBQyxDQUFDd1AsTUFBTSxDQUFDdkQsTUFBUCxDQUFja25CLElBQWQsQ0FBbUJpVCxnQkFBcEIsQ0FBdkMsR0FBK0VwbUMsQ0FBQyxDQUFDL0QsTUFBRCxDQUFyRztBQUNBLFVBQUlvcUMsUUFBUSxHQUFHRixjQUFjLENBQUMsQ0FBRCxDQUFkLEtBQXNCbHFDLE1BQXJDO0FBQ0EsVUFBSXFxQyxrQkFBa0IsR0FBR0QsUUFBUSxHQUFHcHFDLE1BQU0sQ0FBQ29wQixVQUFWLEdBQXVCOGdCLGNBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0IxZ0MsV0FBMUU7QUFDQSxVQUFJOGdDLG1CQUFtQixHQUFHRixRQUFRLEdBQUdwcUMsTUFBTSxDQUFDbXhCLFdBQVYsR0FBd0IrWSxjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCdGdDLFlBQTVFO0FBQ0EsVUFBSSt2QixZQUFZLEdBQUdwbUIsTUFBTSxDQUFDbUMsR0FBUCxDQUFXN0wsTUFBWCxFQUFuQjtBQUNBLFVBQUl1TyxHQUFHLEdBQUc3RSxNQUFNLENBQUM4RSxZQUFqQjtBQUNBLFVBQUlpaEIsTUFBTSxHQUFHLEtBQWI7QUFDQSxVQUFJbGhCLEdBQUosRUFBU3VoQixZQUFZLENBQUNwdkIsSUFBYixJQUFxQmdKLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVyxDQUFYLEVBQWN0TCxVQUFuQztBQUNULFVBQUl3dkIsV0FBVyxHQUFHLENBQUMsQ0FBQ0QsWUFBWSxDQUFDcHZCLElBQWQsRUFBb0JvdkIsWUFBWSxDQUFDcnZCLEdBQWpDLENBQUQsRUFBd0MsQ0FBQ3F2QixZQUFZLENBQUNwdkIsSUFBYixHQUFvQmdKLE1BQU0sQ0FBQ3pCLEtBQTVCLEVBQW1DNm5CLFlBQVksQ0FBQ3J2QixHQUFoRCxDQUF4QyxFQUE4RixDQUFDcXZCLFlBQVksQ0FBQ3B2QixJQUFkLEVBQW9Cb3ZCLFlBQVksQ0FBQ3J2QixHQUFiLEdBQW1CaUosTUFBTSxDQUFDdkIsTUFBOUMsQ0FBOUYsRUFBcUosQ0FBQzJuQixZQUFZLENBQUNwdkIsSUFBYixHQUFvQmdKLE1BQU0sQ0FBQ3pCLEtBQTVCLEVBQW1DNm5CLFlBQVksQ0FBQ3J2QixHQUFiLEdBQW1CaUosTUFBTSxDQUFDdkIsTUFBN0QsQ0FBckosQ0FBbEI7O0FBRUEsV0FBSyxJQUFJblgsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRysrQixXQUFXLENBQUM5K0IsTUFBaEMsRUFBd0NELENBQUMsSUFBSSxDQUE3QyxFQUFnRDtBQUM5QyxZQUFJdzJCLEtBQUssR0FBR3VJLFdBQVcsQ0FBQy8rQixDQUFELENBQXZCOztBQUVBLFlBQUl3MkIsS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFZLENBQVosSUFBaUJBLEtBQUssQ0FBQyxDQUFELENBQUwsSUFBWWdaLGtCQUE3QixJQUFtRGhaLEtBQUssQ0FBQyxDQUFELENBQUwsSUFBWSxDQUEvRCxJQUFvRUEsS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFZaVosbUJBQXBGLEVBQXlHO0FBQ3ZHLGNBQUlqWixLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQWEsQ0FBYixJQUFrQkEsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhLENBQW5DLEVBQXNDLFNBRGlFLENBQ3ZEOztBQUVoRGlJLFVBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJeG9CLGVBQWUsR0FBR3lDLE1BQU0sQ0FBQzBiLFdBQVAsQ0FBbUJDLEtBQW5CLEtBQTZCLFlBQTdCLElBQTZDM2IsTUFBTSxDQUFDbEQsT0FBUCxDQUFlUyxlQUE1RCxJQUErRXlDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FmLGdCQUE3RixHQUFnSDtBQUNwSUMsUUFBQUEsT0FBTyxFQUFFLElBRDJIO0FBRXBJdm9CLFFBQUFBLE9BQU8sRUFBRTtBQUYySCxPQUFoSCxHQUdsQixLQUhKOztBQUtBLFVBQUl1eUIsTUFBSixFQUFZO0FBQ1YvbEIsUUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWUMsSUFBWjtBQUNBK1MsUUFBQUEsY0FBYyxDQUFDbGlDLEdBQWYsQ0FBbUIsUUFBbkIsRUFBNkJ1TCxNQUFNLENBQUMyakIsSUFBUCxDQUFZK1MsaUJBQXpDLEVBQTREbjVCLGVBQTVEO0FBQ0QsT0FIRCxNQUdPLElBQUksQ0FBQ3lDLE1BQU0sQ0FBQzJqQixJQUFQLENBQVlxVCxxQkFBakIsRUFBd0M7QUFDN0NoM0IsUUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWXFULHFCQUFaLEdBQW9DLElBQXBDO0FBQ0FMLFFBQUFBLGNBQWMsQ0FBQ3pqQyxFQUFmLENBQWtCLFFBQWxCLEVBQTRCOE0sTUFBTSxDQUFDMmpCLElBQVAsQ0FBWStTLGlCQUF4QyxFQUEyRG41QixlQUEzRDtBQUNEO0FBQ0Y7QUEvTFEsR0FBWDtBQWlNQSxNQUFJMDVCLE1BQU0sR0FBRztBQUNYbDNCLElBQUFBLElBQUksRUFBRSxNQURLO0FBRVh0RCxJQUFBQSxNQUFNLEVBQUU7QUFDTmtuQixNQUFBQSxJQUFJLEVBQUU7QUFDSnVULFFBQUFBLFdBQVcsRUFBRSxLQURUO0FBRUpoeUIsUUFBQUEsT0FBTyxFQUFFLEtBRkw7QUFHSm14QixRQUFBQSxZQUFZLEVBQUUsS0FIVjtBQUlKQyxRQUFBQSxrQkFBa0IsRUFBRSxDQUpoQjtBQUtKYSxRQUFBQSxxQkFBcUIsRUFBRSxLQUxuQjtBQU1KUCxRQUFBQSxnQkFBZ0IsRUFBRSxFQU5kO0FBT0pwQixRQUFBQSxZQUFZLEVBQUUsYUFQVjtBQVFKRSxRQUFBQSxZQUFZLEVBQUUscUJBUlY7QUFTSkQsUUFBQUEsV0FBVyxFQUFFLG9CQVRUO0FBVUpNLFFBQUFBLGNBQWMsRUFBRTtBQVZaO0FBREEsS0FGRztBQWdCWGxwQyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCMmpCLFFBQUFBLElBQUksRUFBRXY3QixRQUFRLENBQUM7QUFDYmd1QyxVQUFBQSxrQkFBa0IsRUFBRTtBQURQLFNBQUQsRUFFWGhCLElBRlc7QUFEVSxPQUFULENBQWpCO0FBS0QsS0F2QlU7QUF3QlhsaUMsSUFBQUEsRUFBRSxFQUFFO0FBQ0Z5eEIsTUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsQ0FBb0Iza0IsTUFBcEIsRUFBNEI7QUFDdEMsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFja25CLElBQWQsQ0FBbUJ6ZSxPQUFuQixJQUE4QmxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzZpQixhQUFoRCxFQUErRDtBQUM3RHRmLFVBQUFBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzZpQixhQUFkLEdBQThCLEtBQTlCO0FBQ0Q7QUFDRixPQUxDO0FBTUZwZSxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQixZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBZCxDQUFtQnplLE9BQW5CLElBQThCLENBQUNsRixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUE3QyxJQUFxRDNNLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FULFlBQWQsS0FBK0IsQ0FBeEYsRUFBMkY7QUFDekYsY0FBSTlQLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tuQixJQUFkLENBQW1CdVQsV0FBdkIsRUFBb0M7QUFDbENsM0IsWUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWStTLGlCQUFaO0FBQ0QsV0FGRCxNQUVPO0FBQ0wxMkIsWUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWUMsSUFBWjtBQUNEO0FBQ0Y7QUFDRixPQWRDO0FBZUZ3VCxNQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQnAzQixNQUFoQixFQUF3QjtBQUM5QixZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWN3YixRQUFkLElBQTBCLENBQUNqWSxNQUFNLENBQUN2RCxNQUFQLENBQWNtZCxjQUE3QyxFQUE2RDtBQUMzRDVaLFVBQUFBLE1BQU0sQ0FBQzJqQixJQUFQLENBQVlDLElBQVo7QUFDRDtBQUNGLE9BbkJDO0FBb0JGLDZEQUF1RCxTQUFTeVQsUUFBVCxDQUFrQnIzQixNQUFsQixFQUEwQjtBQUMvRSxZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBZCxDQUFtQnplLE9BQXZCLEVBQWdDO0FBQzlCbEYsVUFBQUEsTUFBTSxDQUFDMmpCLElBQVAsQ0FBWUMsSUFBWjtBQUNEO0FBQ0YsT0F4QkM7QUF5QkZ2VSxNQUFBQSxlQUFlLEVBQUUsU0FBU0EsZUFBVCxDQUF5QnJQLE1BQXpCLEVBQWlDO0FBQ2hELFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tuQixJQUFkLENBQW1CemUsT0FBdkIsRUFBZ0M7QUFDOUIsY0FBSWxGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tuQixJQUFkLENBQW1Cd1QscUJBQW5CLElBQTRDLENBQUNuM0IsTUFBTSxDQUFDdkQsTUFBUCxDQUFja25CLElBQWQsQ0FBbUJ3VCxxQkFBcEIsSUFBNkMsQ0FBQ24zQixNQUFNLENBQUMyakIsSUFBUCxDQUFZeVMsa0JBQTFHLEVBQThIO0FBQzVIcDJCLFlBQUFBLE1BQU0sQ0FBQzJqQixJQUFQLENBQVlDLElBQVo7QUFDRDtBQUNGO0FBQ0YsT0EvQkM7QUFnQ0Y5cEIsTUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJrRyxNQUF2QixFQUErQjtBQUM1QyxZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBZCxDQUFtQnplLE9BQW5CLElBQThCLENBQUNsRixNQUFNLENBQUN2RCxNQUFQLENBQWNrbkIsSUFBZCxDQUFtQndULHFCQUF0RCxFQUE2RTtBQUMzRW4zQixVQUFBQSxNQUFNLENBQUMyakIsSUFBUCxDQUFZQyxJQUFaO0FBQ0Q7QUFDRixPQXBDQztBQXFDRnVSLE1BQUFBLFdBQVcsRUFBRSxTQUFTQSxXQUFULENBQXFCbjFCLE1BQXJCLEVBQTZCO0FBQ3hDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tuQixJQUFkLENBQW1CemUsT0FBbkIsSUFBOEJsRixNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFoRCxFQUF5RDtBQUN2RHJKLFVBQUFBLE1BQU0sQ0FBQzJqQixJQUFQLENBQVlDLElBQVo7QUFDRDtBQUNGO0FBekNDO0FBeEJPLEdBQWI7QUFxRUEsTUFBSTBULFVBQVUsR0FBRztBQUNmQyxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQm5wQixDQUF0QixFQUF5QkMsQ0FBekIsRUFBNEI7QUFDeEMsVUFBSW1wQixZQUFZLEdBQUcsU0FBUzFzQyxNQUFULEdBQWtCO0FBQ25DLFlBQUkwckMsUUFBSjtBQUNBLFlBQUlDLFFBQUo7QUFDQSxZQUFJZ0IsS0FBSjtBQUNBLGVBQU8sVUFBVUMsS0FBVixFQUFpQnptQixHQUFqQixFQUFzQjtBQUMzQndsQixVQUFBQSxRQUFRLEdBQUcsQ0FBQyxDQUFaO0FBQ0FELFVBQUFBLFFBQVEsR0FBR2tCLEtBQUssQ0FBQ253QyxNQUFqQjs7QUFFQSxpQkFBT2l2QyxRQUFRLEdBQUdDLFFBQVgsR0FBc0IsQ0FBN0IsRUFBZ0M7QUFDOUJnQixZQUFBQSxLQUFLLEdBQUdqQixRQUFRLEdBQUdDLFFBQVgsSUFBdUIsQ0FBL0I7O0FBRUEsZ0JBQUlpQixLQUFLLENBQUNELEtBQUQsQ0FBTCxJQUFnQnhtQixHQUFwQixFQUF5QjtBQUN2QndsQixjQUFBQSxRQUFRLEdBQUdnQixLQUFYO0FBQ0QsYUFGRCxNQUVPO0FBQ0xqQixjQUFBQSxRQUFRLEdBQUdpQixLQUFYO0FBQ0Q7QUFDRjs7QUFFRCxpQkFBT2pCLFFBQVA7QUFDRCxTQWZEO0FBZ0JELE9BcEJrQixFQUFuQjs7QUFzQkEsV0FBS3BvQixDQUFMLEdBQVNBLENBQVQ7QUFDQSxXQUFLQyxDQUFMLEdBQVNBLENBQVQ7QUFDQSxXQUFLMmQsU0FBTCxHQUFpQjVkLENBQUMsQ0FBQzdtQixNQUFGLEdBQVcsQ0FBNUIsQ0F6QndDLENBeUJUO0FBQy9CO0FBQ0E7O0FBRUEsVUFBSW93QyxFQUFKO0FBQ0EsVUFBSUMsRUFBSjs7QUFFQSxXQUFLQyxXQUFMLEdBQW1CLFNBQVNBLFdBQVQsQ0FBcUJ2RyxFQUFyQixFQUF5QjtBQUMxQyxZQUFJLENBQUNBLEVBQUwsRUFBUyxPQUFPLENBQVAsQ0FEaUMsQ0FDdkI7O0FBRW5Cc0csUUFBQUEsRUFBRSxHQUFHSixZQUFZLENBQUMsS0FBS3BwQixDQUFOLEVBQVNrakIsRUFBVCxDQUFqQjtBQUNBcUcsUUFBQUEsRUFBRSxHQUFHQyxFQUFFLEdBQUcsQ0FBVixDQUowQyxDQUk3QjtBQUNiOztBQUVBLGVBQU8sQ0FBQ3RHLEVBQUUsR0FBRyxLQUFLbGpCLENBQUwsQ0FBT3VwQixFQUFQLENBQU4sS0FBcUIsS0FBS3RwQixDQUFMLENBQU91cEIsRUFBUCxJQUFhLEtBQUt2cEIsQ0FBTCxDQUFPc3BCLEVBQVAsQ0FBbEMsS0FBaUQsS0FBS3ZwQixDQUFMLENBQU93cEIsRUFBUCxJQUFhLEtBQUt4cEIsQ0FBTCxDQUFPdXBCLEVBQVAsQ0FBOUQsSUFBNEUsS0FBS3RwQixDQUFMLENBQU9zcEIsRUFBUCxDQUFuRjtBQUNELE9BUkQ7O0FBVUEsYUFBTyxJQUFQO0FBQ0QsS0E1Q2M7QUE2Q2Y7QUFDQUcsSUFBQUEsc0JBQXNCLEVBQUUsU0FBU0Esc0JBQVQsQ0FBZ0N6bUMsQ0FBaEMsRUFBbUM7QUFDekQsVUFBSTJPLE1BQU0sR0FBRyxJQUFiOztBQUVBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JDLE1BQXZCLEVBQStCO0FBQzdCaDRCLFFBQUFBLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCQyxNQUFsQixHQUEyQmg0QixNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFkLEdBQXFCLElBQUkycUIsVUFBVSxDQUFDQyxZQUFmLENBQTRCdjNCLE1BQU0sQ0FBQ3dGLFVBQW5DLEVBQStDblUsQ0FBQyxDQUFDbVUsVUFBakQsQ0FBckIsR0FBb0YsSUFBSTh4QixVQUFVLENBQUNDLFlBQWYsQ0FBNEJ2M0IsTUFBTSxDQUFDdUYsUUFBbkMsRUFBNkNsVSxDQUFDLENBQUNrVSxRQUEvQyxDQUEvRztBQUNEO0FBQ0YsS0FwRGM7QUFxRGYwSSxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQmdxQixhQUF0QixFQUFxQy9wQixZQUFyQyxFQUFtRDtBQUMvRCxVQUFJbE8sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJazRCLFVBQVUsR0FBR2w0QixNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkksT0FBbkM7QUFDQSxVQUFJeHNCLFVBQUo7QUFDQSxVQUFJeXNCLG1CQUFKO0FBQ0EsVUFBSWx4QyxNQUFNLEdBQUc4WSxNQUFNLENBQUNuWCxXQUFwQjs7QUFFQSxlQUFTd3ZDLHNCQUFULENBQWdDaG5DLENBQWhDLEVBQW1DO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBSTBaLFNBQVMsR0FBRy9LLE1BQU0sQ0FBQzhFLFlBQVAsR0FBc0IsQ0FBQzlFLE1BQU0sQ0FBQytLLFNBQTlCLEdBQTBDL0ssTUFBTSxDQUFDK0ssU0FBakU7O0FBRUEsWUFBSS9LLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3M3QixVQUFkLENBQXlCTyxFQUF6QixLQUFnQyxPQUFwQyxFQUE2QztBQUMzQ3Q0QixVQUFBQSxNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkQsc0JBQWxCLENBQXlDem1DLENBQXpDLEVBRDJDLENBQ0U7QUFDN0M7O0FBRUErbUMsVUFBQUEsbUJBQW1CLEdBQUcsQ0FBQ3A0QixNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJILFdBQXpCLENBQXFDLENBQUM5c0IsU0FBdEMsQ0FBdkI7QUFDRDs7QUFFRCxZQUFJLENBQUNxdEIsbUJBQUQsSUFBd0JwNEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjczdCLFVBQWQsQ0FBeUJPLEVBQXpCLEtBQWdDLFdBQTVELEVBQXlFO0FBQ3ZFM3NCLFVBQUFBLFVBQVUsR0FBRyxDQUFDdGEsQ0FBQyxDQUFDd2EsWUFBRixLQUFtQnhhLENBQUMsQ0FBQytaLFlBQUYsRUFBcEIsS0FBeUNwTCxNQUFNLENBQUM2TCxZQUFQLEtBQXdCN0wsTUFBTSxDQUFDb0wsWUFBUCxFQUFqRSxDQUFiO0FBQ0FndEIsVUFBQUEsbUJBQW1CLEdBQUcsQ0FBQ3J0QixTQUFTLEdBQUcvSyxNQUFNLENBQUNvTCxZQUFQLEVBQWIsSUFBc0NPLFVBQXRDLEdBQW1EdGEsQ0FBQyxDQUFDK1osWUFBRixFQUF6RTtBQUNEOztBQUVELFlBQUlwTCxNQUFNLENBQUN2RCxNQUFQLENBQWNzN0IsVUFBZCxDQUF5QlEsT0FBN0IsRUFBc0M7QUFDcENILFVBQUFBLG1CQUFtQixHQUFHL21DLENBQUMsQ0FBQ3dhLFlBQUYsS0FBbUJ1c0IsbUJBQXpDO0FBQ0Q7O0FBRUQvbUMsUUFBQUEsQ0FBQyxDQUFDcWEsY0FBRixDQUFpQjBzQixtQkFBakI7QUFDQS9tQyxRQUFBQSxDQUFDLENBQUM0YyxZQUFGLENBQWVtcUIsbUJBQWYsRUFBb0NwNEIsTUFBcEM7QUFDQTNPLFFBQUFBLENBQUMsQ0FBQzJiLGlCQUFGO0FBQ0EzYixRQUFBQSxDQUFDLENBQUM2YSxtQkFBRjtBQUNEOztBQUVELFVBQUl2YyxLQUFLLENBQUNLLE9BQU4sQ0FBY2tvQyxVQUFkLENBQUosRUFBK0I7QUFDN0IsYUFBSyxJQUFJNXdDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc0d0MsVUFBVSxDQUFDM3dDLE1BQS9CLEVBQXVDRCxDQUFDLElBQUksQ0FBNUMsRUFBK0M7QUFDN0MsY0FBSTR3QyxVQUFVLENBQUM1d0MsQ0FBRCxDQUFWLEtBQWtCNG1CLFlBQWxCLElBQWtDZ3FCLFVBQVUsQ0FBQzV3QyxDQUFELENBQVYsWUFBeUJKLE1BQS9ELEVBQXVFO0FBQ3JFbXhDLFlBQUFBLHNCQUFzQixDQUFDSCxVQUFVLENBQUM1d0MsQ0FBRCxDQUFYLENBQXRCO0FBQ0Q7QUFDRjtBQUNGLE9BTkQsTUFNTyxJQUFJNHdDLFVBQVUsWUFBWWh4QyxNQUF0QixJQUFnQ2duQixZQUFZLEtBQUtncUIsVUFBckQsRUFBaUU7QUFDdEVHLFFBQUFBLHNCQUFzQixDQUFDSCxVQUFELENBQXRCO0FBQ0Q7QUFDRixLQWxHYztBQW1HZjN0QixJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QnZYLFFBQXZCLEVBQWlDa2IsWUFBakMsRUFBK0M7QUFDNUQsVUFBSWxPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSTlZLE1BQU0sR0FBRzhZLE1BQU0sQ0FBQ25YLFdBQXBCO0FBQ0EsVUFBSXF2QyxVQUFVLEdBQUdsNEIsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JJLE9BQW5DO0FBQ0EsVUFBSTd3QyxDQUFKOztBQUVBLGVBQVNreEMsdUJBQVQsQ0FBaUNubkMsQ0FBakMsRUFBb0M7QUFDbENBLFFBQUFBLENBQUMsQ0FBQ2taLGFBQUYsQ0FBZ0J2WCxRQUFoQixFQUEwQmdOLE1BQTFCOztBQUVBLFlBQUloTixRQUFRLEtBQUssQ0FBakIsRUFBb0I7QUFDbEIzQixVQUFBQSxDQUFDLENBQUNnZSxlQUFGOztBQUVBLGNBQUloZSxDQUFDLENBQUNvTCxNQUFGLENBQVM0TyxVQUFiLEVBQXlCO0FBQ3ZCblIsWUFBQUEsUUFBUSxDQUFDLFlBQVk7QUFDbkI3SSxjQUFBQSxDQUFDLENBQUMrWSxnQkFBRjtBQUNELGFBRk8sQ0FBUjtBQUdEOztBQUVEL1ksVUFBQUEsQ0FBQyxDQUFDZ1IsVUFBRixDQUFhdkksYUFBYixDQUEyQixZQUFZO0FBQ3JDLGdCQUFJLENBQUNvK0IsVUFBTCxFQUFpQjs7QUFFakIsZ0JBQUk3bUMsQ0FBQyxDQUFDb0wsTUFBRixDQUFTa1EsSUFBVCxJQUFpQjNNLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3M3QixVQUFkLENBQXlCTyxFQUF6QixLQUFnQyxPQUFyRCxFQUE4RDtBQUM1RGpuQyxjQUFBQSxDQUFDLENBQUN3ZixPQUFGO0FBQ0Q7O0FBRUR4ZixZQUFBQSxDQUFDLENBQUN5SSxhQUFGO0FBQ0QsV0FSRDtBQVNEO0FBQ0Y7O0FBRUQsVUFBSW5LLEtBQUssQ0FBQ0ssT0FBTixDQUFja29DLFVBQWQsQ0FBSixFQUErQjtBQUM3QixhQUFLNXdDLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRzR3QyxVQUFVLENBQUMzd0MsTUFBM0IsRUFBbUNELENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxjQUFJNHdDLFVBQVUsQ0FBQzV3QyxDQUFELENBQVYsS0FBa0I0bUIsWUFBbEIsSUFBa0NncUIsVUFBVSxDQUFDNXdDLENBQUQsQ0FBVixZQUF5QkosTUFBL0QsRUFBdUU7QUFDckVzeEMsWUFBQUEsdUJBQXVCLENBQUNOLFVBQVUsQ0FBQzV3QyxDQUFELENBQVgsQ0FBdkI7QUFDRDtBQUNGO0FBQ0YsT0FORCxNQU1PLElBQUk0d0MsVUFBVSxZQUFZaHhDLE1BQXRCLElBQWdDZ25CLFlBQVksS0FBS2dxQixVQUFyRCxFQUFpRTtBQUN0RU0sUUFBQUEsdUJBQXVCLENBQUNOLFVBQUQsQ0FBdkI7QUFDRDtBQUNGO0FBMUljLEdBQWpCO0FBNElBLE1BQUlPLFlBQVksR0FBRztBQUNqQjE0QixJQUFBQSxJQUFJLEVBQUUsWUFEVztBQUVqQnRELElBQUFBLE1BQU0sRUFBRTtBQUNOczdCLE1BQUFBLFVBQVUsRUFBRTtBQUNWSSxRQUFBQSxPQUFPLEVBQUV4cEMsU0FEQztBQUVWNHBDLFFBQUFBLE9BQU8sRUFBRSxLQUZDO0FBR1ZELFFBQUFBLEVBQUUsRUFBRSxPQUhNLENBR0U7O0FBSEY7QUFETixLQUZTO0FBVWpCenJDLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEIrM0IsUUFBQUEsVUFBVSxFQUFFM3ZDLFFBQVEsQ0FBQztBQUNuQit2QyxVQUFBQSxPQUFPLEVBQUVuNEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjczdCLFVBQWQsQ0FBeUJJO0FBRGYsU0FBRCxFQUVqQmIsVUFGaUI7QUFESSxPQUFULENBQWpCO0FBS0QsS0FqQmdCO0FBa0JqQnBrQyxJQUFBQSxFQUFFLEVBQUU7QUFDRjJhLE1BQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCN04sTUFBaEIsRUFBd0I7QUFDOUIsWUFBSSxDQUFDQSxNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkksT0FBdkIsRUFBZ0M7O0FBRWhDLFlBQUluNEIsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JDLE1BQXRCLEVBQThCO0FBQzVCaDRCLFVBQUFBLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCQyxNQUFsQixHQUEyQnJwQyxTQUEzQjtBQUNBLGlCQUFPcVIsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JDLE1BQXpCO0FBQ0Q7QUFDRixPQVJDO0FBU0YvM0IsTUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JELE1BQWhCLEVBQXdCO0FBQzlCLFlBQUksQ0FBQ0EsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JJLE9BQXZCLEVBQWdDOztBQUVoQyxZQUFJbjRCLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCQyxNQUF0QixFQUE4QjtBQUM1Qmg0QixVQUFBQSxNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkMsTUFBbEIsR0FBMkJycEMsU0FBM0I7QUFDQSxpQkFBT3FSLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCQyxNQUF6QjtBQUNEO0FBQ0YsT0FoQkM7QUFpQkZwMkIsTUFBQUEsY0FBYyxFQUFFLFNBQVNBLGNBQVQsQ0FBd0I1QixNQUF4QixFQUFnQztBQUM5QyxZQUFJLENBQUNBLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCSSxPQUF2QixFQUFnQzs7QUFFaEMsWUFBSW40QixNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkMsTUFBdEIsRUFBOEI7QUFDNUJoNEIsVUFBQUEsTUFBTSxDQUFDKzNCLFVBQVAsQ0FBa0JDLE1BQWxCLEdBQTJCcnBDLFNBQTNCO0FBQ0EsaUJBQU9xUixNQUFNLENBQUMrM0IsVUFBUCxDQUFrQkMsTUFBekI7QUFDRDtBQUNGLE9BeEJDO0FBeUJGL3BCLE1BQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULENBQXNCak8sTUFBdEIsRUFBOEIrSyxTQUE5QixFQUF5Q21ELFlBQXpDLEVBQXVEO0FBQ25FLFlBQUksQ0FBQ2xPLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCSSxPQUF2QixFQUFnQztBQUNoQ240QixRQUFBQSxNQUFNLENBQUMrM0IsVUFBUCxDQUFrQjlwQixZQUFsQixDQUErQmxELFNBQS9CLEVBQTBDbUQsWUFBMUM7QUFDRCxPQTVCQztBQTZCRjNELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5Q2tiLFlBQXpDLEVBQXVEO0FBQ3BFLFlBQUksQ0FBQ2xPLE1BQU0sQ0FBQyszQixVQUFQLENBQWtCSSxPQUF2QixFQUFnQztBQUNoQ240QixRQUFBQSxNQUFNLENBQUMrM0IsVUFBUCxDQUFrQnh0QixhQUFsQixDQUFnQ3ZYLFFBQWhDLEVBQTBDa2IsWUFBMUM7QUFDRDtBQWhDQztBQWxCYSxHQUFuQjtBQXNEQSxNQUFJd3FCLElBQUksR0FBRztBQUNUQyxJQUFBQSxlQUFlLEVBQUUsU0FBU0EsZUFBVCxDQUF5QnQwQixJQUF6QixFQUErQjtBQUM5QyxVQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFsQixFQUFxQjtBQUNuQkEsUUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFDRDs7QUFFRCxVQUFJdTBCLFVBQVUsR0FBRyxTQUFTQSxVQUFULEdBQXNCO0FBQ3JDLGVBQU9seUIsSUFBSSxDQUFDbXlCLEtBQUwsQ0FBVyxLQUFLbnlCLElBQUksQ0FBQ295QixNQUFMLEVBQWhCLEVBQStCcHJDLFFBQS9CLENBQXdDLEVBQXhDLENBQVA7QUFDRCxPQUZEOztBQUlBLGFBQU8sSUFBSXFyQyxNQUFKLENBQVcxMEIsSUFBWCxFQUFpQnRKLE9BQWpCLENBQXlCLElBQXpCLEVBQStCNjlCLFVBQS9CLENBQVA7QUFDRCxLQVhRO0FBWVRJLElBQUFBLGVBQWUsRUFBRSxTQUFTQSxlQUFULENBQXlCNzJCLEdBQXpCLEVBQThCO0FBQzdDQSxNQUFBQSxHQUFHLENBQUMzUCxJQUFKLENBQVMsVUFBVCxFQUFxQixHQUFyQjtBQUNBLGFBQU8yUCxHQUFQO0FBQ0QsS0FmUTtBQWdCVDgyQixJQUFBQSxrQkFBa0IsRUFBRSxTQUFTQSxrQkFBVCxDQUE0QjkyQixHQUE1QixFQUFpQztBQUNuREEsTUFBQUEsR0FBRyxDQUFDM1AsSUFBSixDQUFTLFVBQVQsRUFBcUIsSUFBckI7QUFDQSxhQUFPMlAsR0FBUDtBQUNELEtBbkJRO0FBb0JUKzJCLElBQUFBLFNBQVMsRUFBRSxTQUFTQSxTQUFULENBQW1CLzJCLEdBQW5CLEVBQXdCZzNCLElBQXhCLEVBQThCO0FBQ3ZDaDNCLE1BQUFBLEdBQUcsQ0FBQzNQLElBQUosQ0FBUyxNQUFULEVBQWlCMm1DLElBQWpCO0FBQ0EsYUFBT2gzQixHQUFQO0FBQ0QsS0F2QlE7QUF3QlRpM0IsSUFBQUEsb0JBQW9CLEVBQUUsU0FBU0Esb0JBQVQsQ0FBOEJqM0IsR0FBOUIsRUFBbUNrM0IsV0FBbkMsRUFBZ0Q7QUFDcEVsM0IsTUFBQUEsR0FBRyxDQUFDM1AsSUFBSixDQUFTLHNCQUFULEVBQWlDNm1DLFdBQWpDO0FBQ0EsYUFBT2wzQixHQUFQO0FBQ0QsS0EzQlE7QUE0QlRtM0IsSUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJuM0IsR0FBdkIsRUFBNEJvM0IsUUFBNUIsRUFBc0M7QUFDbkRwM0IsTUFBQUEsR0FBRyxDQUFDM1AsSUFBSixDQUFTLGVBQVQsRUFBMEIrbUMsUUFBMUI7QUFDQSxhQUFPcDNCLEdBQVA7QUFDRCxLQS9CUTtBQWdDVHEzQixJQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxDQUFvQnIzQixHQUFwQixFQUF5QndDLEtBQXpCLEVBQWdDO0FBQzFDeEMsTUFBQUEsR0FBRyxDQUFDM1AsSUFBSixDQUFTLFlBQVQsRUFBdUJtUyxLQUF2QjtBQUNBLGFBQU94QyxHQUFQO0FBQ0QsS0FuQ1E7QUFvQ1RzM0IsSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBaUJ0M0IsR0FBakIsRUFBc0I3VixFQUF0QixFQUEwQjtBQUNqQzZWLE1BQUFBLEdBQUcsQ0FBQzNQLElBQUosQ0FBUyxJQUFULEVBQWVsRyxFQUFmO0FBQ0EsYUFBTzZWLEdBQVA7QUFDRCxLQXZDUTtBQXdDVHUzQixJQUFBQSxTQUFTLEVBQUUsU0FBU0EsU0FBVCxDQUFtQnYzQixHQUFuQixFQUF3QnczQixJQUF4QixFQUE4QjtBQUN2Q3gzQixNQUFBQSxHQUFHLENBQUMzUCxJQUFKLENBQVMsV0FBVCxFQUFzQm1uQyxJQUF0QjtBQUNBLGFBQU94M0IsR0FBUDtBQUNELEtBM0NRO0FBNENUeTNCLElBQUFBLFNBQVMsRUFBRSxTQUFTQSxTQUFULENBQW1CejNCLEdBQW5CLEVBQXdCO0FBQ2pDQSxNQUFBQSxHQUFHLENBQUMzUCxJQUFKLENBQVMsZUFBVCxFQUEwQixJQUExQjtBQUNBLGFBQU8yUCxHQUFQO0FBQ0QsS0EvQ1E7QUFnRFQwM0IsSUFBQUEsUUFBUSxFQUFFLFNBQVNBLFFBQVQsQ0FBa0IxM0IsR0FBbEIsRUFBdUI7QUFDL0JBLE1BQUFBLEdBQUcsQ0FBQzNQLElBQUosQ0FBUyxlQUFULEVBQTBCLEtBQTFCO0FBQ0EsYUFBTzJQLEdBQVA7QUFDRCxLQW5EUTtBQW9EVDIzQixJQUFBQSxpQkFBaUIsRUFBRSxTQUFTQSxpQkFBVCxDQUEyQm5zQyxDQUEzQixFQUE4QjtBQUMvQyxVQUFJQSxDQUFDLENBQUNxM0IsT0FBRixLQUFjLEVBQWQsSUFBb0JyM0IsQ0FBQyxDQUFDcTNCLE9BQUYsS0FBYyxFQUF0QyxFQUEwQztBQUMxQyxVQUFJaGxCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZELE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3M5QixJQUEzQjtBQUNBLFVBQUk3bEIsU0FBUyxHQUFHMWpCLENBQUMsQ0FBQzdDLENBQUMsQ0FBQ3ZHLE1BQUgsQ0FBakI7O0FBRUEsVUFBSTRZLE1BQU0sQ0FBQ3dhLFVBQVAsSUFBcUJ4YSxNQUFNLENBQUN3YSxVQUFQLENBQWtCZ1EsT0FBdkMsSUFBa0R0VyxTQUFTLENBQUNyZ0IsRUFBVixDQUFhbU0sTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmdRLE9BQS9CLENBQXRELEVBQStGO0FBQzdGLFlBQUksRUFBRXhxQixNQUFNLENBQUMrTCxLQUFQLElBQWdCLENBQUMvTCxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUFqQyxDQUFKLEVBQTRDO0FBQzFDM00sVUFBQUEsTUFBTSxDQUFDMFEsU0FBUDtBQUNEOztBQUVELFlBQUkxUSxNQUFNLENBQUMrTCxLQUFYLEVBQWtCO0FBQ2hCL0wsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUMsTUFBWixDQUFtQnY5QixNQUFNLENBQUN3OUIsZ0JBQTFCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xqNkIsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUMsTUFBWixDQUFtQnY5QixNQUFNLENBQUN5OUIsZ0JBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJbDZCLE1BQU0sQ0FBQ3dhLFVBQVAsSUFBcUJ4YSxNQUFNLENBQUN3YSxVQUFQLENBQWtCaVEsT0FBdkMsSUFBa0R2VyxTQUFTLENBQUNyZ0IsRUFBVixDQUFhbU0sTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmlRLE9BQS9CLENBQXRELEVBQStGO0FBQzdGLFlBQUksRUFBRXpxQixNQUFNLENBQUM4TCxXQUFQLElBQXNCLENBQUM5TCxNQUFNLENBQUN2RCxNQUFQLENBQWNrUSxJQUF2QyxDQUFKLEVBQWtEO0FBQ2hEM00sVUFBQUEsTUFBTSxDQUFDK1EsU0FBUDtBQUNEOztBQUVELFlBQUkvUSxNQUFNLENBQUM4TCxXQUFYLEVBQXdCO0FBQ3RCOUwsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUMsTUFBWixDQUFtQnY5QixNQUFNLENBQUMwOUIsaUJBQTFCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xuNkIsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUMsTUFBWixDQUFtQnY5QixNQUFNLENBQUMyOUIsZ0JBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJcDZCLE1BQU0sQ0FBQ3dyQixVQUFQLElBQXFCdFgsU0FBUyxDQUFDcmdCLEVBQVYsQ0FBYXlJLGlCQUFpQixDQUFDMEQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJxQyxXQUExQixDQUE5QixDQUF6QixFQUFnRztBQUM5RjNaLFFBQUFBLFNBQVMsQ0FBQyxDQUFELENBQVQsQ0FBYW1YLEtBQWI7QUFDRDtBQUNGLEtBckZRO0FBc0ZUMk8sSUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JLLE9BQWhCLEVBQXlCO0FBQy9CLFVBQUlyNkIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJczZCLFlBQVksR0FBR3Q2QixNQUFNLENBQUMrNUIsSUFBUCxDQUFZUSxVQUEvQjtBQUNBLFVBQUlELFlBQVksQ0FBQy95QyxNQUFiLEtBQXdCLENBQTVCLEVBQStCO0FBQy9CK3lDLE1BQUFBLFlBQVksQ0FBQzdwQyxJQUFiLENBQWtCLEVBQWxCO0FBQ0E2cEMsTUFBQUEsWUFBWSxDQUFDN3BDLElBQWIsQ0FBa0I0cEMsT0FBbEI7QUFDRCxLQTVGUTtBQTZGVEcsSUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEI7QUFDNUMsVUFBSXg2QixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWQsSUFBc0IsQ0FBQzNNLE1BQU0sQ0FBQ3dhLFVBQWxDLEVBQThDO0FBQzlDLFVBQUkrUCxrQkFBa0IsR0FBR3ZxQixNQUFNLENBQUN3YSxVQUFoQztBQUFBLFVBQ0lnUSxPQUFPLEdBQUdELGtCQUFrQixDQUFDQyxPQURqQztBQUFBLFVBRUlDLE9BQU8sR0FBR0Ysa0JBQWtCLENBQUNFLE9BRmpDOztBQUlBLFVBQUlBLE9BQU8sSUFBSUEsT0FBTyxDQUFDbGpDLE1BQVIsR0FBaUIsQ0FBaEMsRUFBbUM7QUFDakMsWUFBSXlZLE1BQU0sQ0FBQzhMLFdBQVgsRUFBd0I7QUFDdEI5TCxVQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZSCxTQUFaLENBQXNCblAsT0FBdEI7QUFDQXpxQixVQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZZCxrQkFBWixDQUErQnhPLE9BQS9CO0FBQ0QsU0FIRCxNQUdPO0FBQ0x6cUIsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUYsUUFBWixDQUFxQnBQLE9BQXJCO0FBQ0F6cUIsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWWYsZUFBWixDQUE0QnZPLE9BQTVCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ2pqQyxNQUFSLEdBQWlCLENBQWhDLEVBQW1DO0FBQ2pDLFlBQUl5WSxNQUFNLENBQUMrTCxLQUFYLEVBQWtCO0FBQ2hCL0wsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUgsU0FBWixDQUFzQnBQLE9BQXRCO0FBQ0F4cUIsVUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWWQsa0JBQVosQ0FBK0J6TyxPQUEvQjtBQUNELFNBSEQsTUFHTztBQUNMeHFCLFVBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlGLFFBQVosQ0FBcUJyUCxPQUFyQjtBQUNBeHFCLFVBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlmLGVBQVosQ0FBNEJ4TyxPQUE1QjtBQUNEO0FBQ0Y7QUFDRixLQXZIUTtBQXdIVGlRLElBQUFBLGdCQUFnQixFQUFFLFNBQVNBLGdCQUFULEdBQTRCO0FBQzVDLFVBQUl6NkIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJdkQsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjczlCLElBQTNCOztBQUVBLFVBQUkvNUIsTUFBTSxDQUFDd3JCLFVBQVAsSUFBcUJ4ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJDLFNBQTlDLElBQTJEenJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCTSxPQUE3RSxJQUF3RjlyQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBbEIsQ0FBMEJ2a0MsTUFBdEgsRUFBOEg7QUFDNUh5WSxRQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBbEIsQ0FBMEIzMEIsSUFBMUIsQ0FBK0IsVUFBVXVqQyxRQUFWLEVBQW9CO0FBQ2pELGNBQUlDLFNBQVMsR0FBR25xQyxDQUFDLENBQUNrcUMsUUFBRCxDQUFqQjtBQUNBMTZCLFVBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlmLGVBQVosQ0FBNEIyQixTQUE1Qjs7QUFFQSxjQUFJLENBQUMzNkIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJvQyxZQUE5QixFQUE0QztBQUMxQzV0QixZQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZYixTQUFaLENBQXNCeUIsU0FBdEIsRUFBaUMsUUFBakM7QUFDQTM2QixZQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZUCxVQUFaLENBQXVCbUIsU0FBdkIsRUFBa0NsK0IsTUFBTSxDQUFDbStCLHVCQUFQLENBQStCNy9CLE9BQS9CLENBQXVDLGVBQXZDLEVBQXdENC9CLFNBQVMsQ0FBQ3ZqQyxLQUFWLEtBQW9CLENBQTVFLENBQWxDO0FBQ0Q7QUFDRixTQVJEO0FBU0Q7QUFDRixLQXZJUTtBQXdJVDhKLElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2RCxNQUFNLEdBQUd1RCxNQUFNLENBQUN2RCxNQUFQLENBQWNzOUIsSUFBM0I7QUFDQS81QixNQUFBQSxNQUFNLENBQUNtQyxHQUFQLENBQVduSyxNQUFYLENBQWtCZ0ksTUFBTSxDQUFDKzVCLElBQVAsQ0FBWVEsVUFBOUIsRUFIb0IsQ0FHdUI7O0FBRTNDLFVBQUlNLFlBQVksR0FBRzc2QixNQUFNLENBQUNtQyxHQUExQjs7QUFFQSxVQUFJMUYsTUFBTSxDQUFDcStCLCtCQUFYLEVBQTRDO0FBQzFDOTZCLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlYLG9CQUFaLENBQWlDeUIsWUFBakMsRUFBK0NwK0IsTUFBTSxDQUFDcStCLCtCQUF0RDtBQUNEOztBQUVELFVBQUlyK0IsTUFBTSxDQUFDcytCLGdCQUFYLEVBQTZCO0FBQzNCLzZCLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlQLFVBQVosQ0FBdUJxQixZQUF2QixFQUFxQ3ArQixNQUFNLENBQUNzK0IsZ0JBQTVDO0FBQ0QsT0FibUIsQ0FhbEI7OztBQUdGLFVBQUkxNEIsVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFBeEI7QUFDQSxVQUFJMjRCLFNBQVMsR0FBRzM0QixVQUFVLENBQUM3UCxJQUFYLENBQWdCLElBQWhCLEtBQXlCLG9CQUFvQndOLE1BQU0sQ0FBQys1QixJQUFQLENBQVlwQixlQUFaLENBQTRCLEVBQTVCLENBQTdEO0FBQ0EsVUFBSWdCLElBQUksR0FBRzM1QixNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLElBQTBCOWEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcWUsUUFBZCxDQUF1QjVWLE9BQWpELEdBQTJELEtBQTNELEdBQW1FLFFBQTlFO0FBQ0FsRixNQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZTixPQUFaLENBQW9CcDNCLFVBQXBCLEVBQWdDMjRCLFNBQWhDO0FBQ0FoN0IsTUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUwsU0FBWixDQUFzQnIzQixVQUF0QixFQUFrQ3MzQixJQUFsQyxFQXBCb0IsQ0FvQnFCOztBQUV6QyxVQUFJbDlCLE1BQU0sQ0FBQ3crQiwwQkFBWCxFQUF1QztBQUNyQ2o3QixRQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZWCxvQkFBWixDQUFpQzVvQyxDQUFDLENBQUN3UCxNQUFNLENBQUNvRixNQUFSLENBQWxDLEVBQW1EM0ksTUFBTSxDQUFDdytCLDBCQUExRDtBQUNEOztBQUVEajdCLE1BQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVliLFNBQVosQ0FBc0Ixb0MsQ0FBQyxDQUFDd1AsTUFBTSxDQUFDb0YsTUFBUixDQUF2QixFQUF3QzNJLE1BQU0sQ0FBQ3krQixTQUEvQztBQUNBbDdCLE1BQUFBLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY2pPLElBQWQsQ0FBbUIsVUFBVWlxQixPQUFWLEVBQW1CO0FBQ3BDLFlBQUlnRCxRQUFRLEdBQUc1ekIsQ0FBQyxDQUFDNHdCLE9BQUQsQ0FBaEI7QUFDQSxZQUFJK1osZ0JBQWdCLEdBQUcxK0IsTUFBTSxDQUFDMitCLGlCQUFQLENBQXlCcmdDLE9BQXpCLENBQWlDLGVBQWpDLEVBQWtEcXBCLFFBQVEsQ0FBQ2h0QixLQUFULEtBQW1CLENBQXJFLEVBQXdFMkQsT0FBeEUsQ0FBZ0Ysc0JBQWhGLEVBQXdHaUYsTUFBTSxDQUFDb0YsTUFBUCxDQUFjN2QsTUFBdEgsQ0FBdkI7QUFDQXlZLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlQLFVBQVosQ0FBdUJwVixRQUF2QixFQUFpQytXLGdCQUFqQztBQUNELE9BSkQsRUEzQm9CLENBK0JoQjs7QUFFSixVQUFJM1EsT0FBSjtBQUNBLFVBQUlDLE9BQUo7O0FBRUEsVUFBSXpxQixNQUFNLENBQUN3YSxVQUFQLElBQXFCeGEsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmdRLE9BQTNDLEVBQW9EO0FBQ2xEQSxRQUFBQSxPQUFPLEdBQUd4cUIsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmdRLE9BQTVCO0FBQ0Q7O0FBRUQsVUFBSXhxQixNQUFNLENBQUN3YSxVQUFQLElBQXFCeGEsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmlRLE9BQTNDLEVBQW9EO0FBQ2xEQSxRQUFBQSxPQUFPLEdBQUd6cUIsTUFBTSxDQUFDd2EsVUFBUCxDQUFrQmlRLE9BQTVCO0FBQ0Q7O0FBRUQsVUFBSUQsT0FBTyxJQUFJQSxPQUFPLENBQUNqakMsTUFBdkIsRUFBK0I7QUFDN0J5WSxRQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZZixlQUFaLENBQTRCeE8sT0FBNUI7O0FBRUEsWUFBSUEsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXRixPQUFYLEtBQXVCLFFBQTNCLEVBQXFDO0FBQ25DdHFCLFVBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVliLFNBQVosQ0FBc0IxTyxPQUF0QixFQUErQixRQUEvQjtBQUNBQSxVQUFBQSxPQUFPLENBQUN0M0IsRUFBUixDQUFXLFNBQVgsRUFBc0I4TSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZRCxpQkFBbEM7QUFDRDs7QUFFRDk1QixRQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZUCxVQUFaLENBQXVCaFAsT0FBdkIsRUFBZ0MvdEIsTUFBTSxDQUFDeTlCLGdCQUF2QztBQUNBbDZCLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlULGFBQVosQ0FBMEI5TyxPQUExQixFQUFtQ3dRLFNBQW5DO0FBQ0Q7O0FBRUQsVUFBSXZRLE9BQU8sSUFBSUEsT0FBTyxDQUFDbGpDLE1BQXZCLEVBQStCO0FBQzdCeVksUUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWWYsZUFBWixDQUE0QnZPLE9BQTVCOztBQUVBLFlBQUlBLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV0gsT0FBWCxLQUF1QixRQUEzQixFQUFxQztBQUNuQ3RxQixVQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZYixTQUFaLENBQXNCek8sT0FBdEIsRUFBK0IsUUFBL0I7QUFDQUEsVUFBQUEsT0FBTyxDQUFDdjNCLEVBQVIsQ0FBVyxTQUFYLEVBQXNCOE0sTUFBTSxDQUFDKzVCLElBQVAsQ0FBWUQsaUJBQWxDO0FBQ0Q7O0FBRUQ5NUIsUUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWVAsVUFBWixDQUF1Qi9PLE9BQXZCLEVBQWdDaHVCLE1BQU0sQ0FBQzI5QixnQkFBdkM7QUFDQXA2QixRQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZVCxhQUFaLENBQTBCN08sT0FBMUIsRUFBbUN1USxTQUFuQztBQUNELE9BbEVtQixDQWtFbEI7OztBQUdGLFVBQUloN0IsTUFBTSxDQUFDd3JCLFVBQVAsSUFBcUJ4ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJDLFNBQTlDLElBQTJEenJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCTSxPQUE3RSxJQUF3RjlyQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBbEIsQ0FBMEJ2a0MsTUFBdEgsRUFBOEg7QUFDNUh5WSxRQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnJwQixHQUFsQixDQUFzQmpQLEVBQXRCLENBQXlCLFNBQXpCLEVBQW9Db0osaUJBQWlCLENBQUMwRCxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QnFDLFdBQTFCLENBQXJELEVBQTZGN3RCLE1BQU0sQ0FBQys1QixJQUFQLENBQVlELGlCQUF6RztBQUNEO0FBQ0YsS0FoTlE7QUFpTlQxNEIsSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSXBCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWVEsVUFBWixJQUEwQnY2QixNQUFNLENBQUMrNUIsSUFBUCxDQUFZUSxVQUFaLENBQXVCaHpDLE1BQXZCLEdBQWdDLENBQTlELEVBQWlFeVksTUFBTSxDQUFDKzVCLElBQVAsQ0FBWVEsVUFBWixDQUF1QnpvQyxNQUF2QjtBQUNqRSxVQUFJMDRCLE9BQUo7QUFDQSxVQUFJQyxPQUFKOztBQUVBLFVBQUl6cUIsTUFBTSxDQUFDd2EsVUFBUCxJQUFxQnhhLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JnUSxPQUEzQyxFQUFvRDtBQUNsREEsUUFBQUEsT0FBTyxHQUFHeHFCLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JnUSxPQUE1QjtBQUNEOztBQUVELFVBQUl4cUIsTUFBTSxDQUFDd2EsVUFBUCxJQUFxQnhhLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JpUSxPQUEzQyxFQUFvRDtBQUNsREEsUUFBQUEsT0FBTyxHQUFHenFCLE1BQU0sQ0FBQ3dhLFVBQVAsQ0FBa0JpUSxPQUE1QjtBQUNEOztBQUVELFVBQUlELE9BQUosRUFBYTtBQUNYQSxRQUFBQSxPQUFPLENBQUMvMUIsR0FBUixDQUFZLFNBQVosRUFBdUJ1TCxNQUFNLENBQUMrNUIsSUFBUCxDQUFZRCxpQkFBbkM7QUFDRDs7QUFFRCxVQUFJclAsT0FBSixFQUFhO0FBQ1hBLFFBQUFBLE9BQU8sQ0FBQ2gyQixHQUFSLENBQVksU0FBWixFQUF1QnVMLE1BQU0sQ0FBQys1QixJQUFQLENBQVlELGlCQUFuQztBQUNELE9BcEJ5QixDQW9CeEI7OztBQUdGLFVBQUk5NUIsTUFBTSxDQUFDd3JCLFVBQVAsSUFBcUJ4ckIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjK3VCLFVBQWQsQ0FBeUJDLFNBQTlDLElBQTJEenJCLE1BQU0sQ0FBQ3dyQixVQUFQLENBQWtCTSxPQUE3RSxJQUF3RjlyQixNQUFNLENBQUN3ckIsVUFBUCxDQUFrQk0sT0FBbEIsQ0FBMEJ2a0MsTUFBdEgsRUFBOEg7QUFDNUh5WSxRQUFBQSxNQUFNLENBQUN3ckIsVUFBUCxDQUFrQnJwQixHQUFsQixDQUFzQjFOLEdBQXRCLENBQTBCLFNBQTFCLEVBQXFDNkgsaUJBQWlCLENBQUMwRCxNQUFNLENBQUN2RCxNQUFQLENBQWMrdUIsVUFBZCxDQUF5QnFDLFdBQTFCLENBQXRELEVBQThGN3RCLE1BQU0sQ0FBQys1QixJQUFQLENBQVlELGlCQUExRztBQUNEO0FBQ0Y7QUEzT1EsR0FBWDtBQTZPQSxNQUFJdUIsTUFBTSxHQUFHO0FBQ1h0N0IsSUFBQUEsSUFBSSxFQUFFLE1BREs7QUFFWHRELElBQUFBLE1BQU0sRUFBRTtBQUNOczlCLE1BQUFBLElBQUksRUFBRTtBQUNKNzBCLFFBQUFBLE9BQU8sRUFBRSxJQURMO0FBRUpvMkIsUUFBQUEsaUJBQWlCLEVBQUUscUJBRmY7QUFHSmxCLFFBQUFBLGdCQUFnQixFQUFFLGdCQUhkO0FBSUpGLFFBQUFBLGdCQUFnQixFQUFFLFlBSmQ7QUFLSkMsUUFBQUEsaUJBQWlCLEVBQUUseUJBTGY7QUFNSkYsUUFBQUEsZ0JBQWdCLEVBQUUsd0JBTmQ7QUFPSlcsUUFBQUEsdUJBQXVCLEVBQUUsdUJBUHJCO0FBUUpRLFFBQUFBLGlCQUFpQixFQUFFLDhCQVJmO0FBU0pMLFFBQUFBLGdCQUFnQixFQUFFLElBVGQ7QUFVSkQsUUFBQUEsK0JBQStCLEVBQUUsSUFWN0I7QUFXSkcsUUFBQUEsMEJBQTBCLEVBQUUsSUFYeEI7QUFZSkMsUUFBQUEsU0FBUyxFQUFFO0FBWlA7QUFEQSxLQUZHO0FBa0JYcnVDLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEIrNUIsUUFBQUEsSUFBSSxFQUFFM3hDLFFBQVEsQ0FBQyxFQUFELEVBQUtzd0MsSUFBTCxFQUFXO0FBQ3ZCNkIsVUFBQUEsVUFBVSxFQUFFL3BDLENBQUMsQ0FBQyxtQkFBbUJ3UCxNQUFNLENBQUN2RCxNQUFQLENBQWNzOUIsSUFBZCxDQUFtQnVCLGlCQUF0QyxHQUEwRCx5REFBM0Q7QUFEVSxTQUFYO0FBRFUsT0FBVCxDQUFqQjtBQUtELEtBekJVO0FBMEJYcG9DLElBQUFBLEVBQUUsRUFBRTtBQUNGcW9DLE1BQUFBLFNBQVMsRUFBRSxTQUFTQSxTQUFULENBQW1CdjdCLE1BQW5CLEVBQTJCO0FBQ3BDLFlBQUksQ0FBQ0EsTUFBTSxDQUFDdkQsTUFBUCxDQUFjczlCLElBQWQsQ0FBbUI3MEIsT0FBeEIsRUFBaUM7QUFDakNsRixRQUFBQSxNQUFNLENBQUMrNUIsSUFBUCxDQUFZNzRCLElBQVo7QUFDQWxCLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlTLGdCQUFaO0FBQ0QsT0FMQztBQU1GdlAsTUFBQUEsTUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JqckIsTUFBaEIsRUFBd0I7QUFDOUIsWUFBSSxDQUFDQSxNQUFNLENBQUN2RCxNQUFQLENBQWNzOUIsSUFBZCxDQUFtQjcwQixPQUF4QixFQUFpQztBQUNqQ2xGLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlTLGdCQUFaO0FBQ0QsT0FUQztBQVVGdFAsTUFBQUEsUUFBUSxFQUFFLFNBQVNBLFFBQVQsQ0FBa0JsckIsTUFBbEIsRUFBMEI7QUFDbEMsWUFBSSxDQUFDQSxNQUFNLENBQUN2RCxNQUFQLENBQWNzOUIsSUFBZCxDQUFtQjcwQixPQUF4QixFQUFpQztBQUNqQ2xGLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlTLGdCQUFaO0FBQ0QsT0FiQztBQWNGZ0IsTUFBQUEsZ0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsQ0FBMEJ4N0IsTUFBMUIsRUFBa0M7QUFDbEQsWUFBSSxDQUFDQSxNQUFNLENBQUN2RCxNQUFQLENBQWNzOUIsSUFBZCxDQUFtQjcwQixPQUF4QixFQUFpQztBQUNqQ2xGLFFBQUFBLE1BQU0sQ0FBQys1QixJQUFQLENBQVlVLGdCQUFaO0FBQ0QsT0FqQkM7QUFrQkZyNUIsTUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBaUJwQixNQUFqQixFQUF5QjtBQUNoQyxZQUFJLENBQUNBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3M5QixJQUFkLENBQW1CNzBCLE9BQXhCLEVBQWlDO0FBQ2pDbEYsUUFBQUEsTUFBTSxDQUFDKzVCLElBQVAsQ0FBWTM0QixPQUFaO0FBQ0Q7QUFyQkM7QUExQk8sR0FBYjtBQW1EQSxNQUFJcTZCLE9BQU8sR0FBRztBQUNadjZCLElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2VCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJLENBQUN5VCxNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFuQixFQUE0Qjs7QUFFNUIsVUFBSSxDQUFDb0IsTUFBTSxDQUFDcEIsT0FBUixJQUFtQixDQUFDb0IsTUFBTSxDQUFDcEIsT0FBUCxDQUFlRSxTQUF2QyxFQUFrRDtBQUNoRHlVLFFBQUFBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3BSLE9BQWQsQ0FBc0I2WixPQUF0QixHQUFnQyxLQUFoQztBQUNBbEYsUUFBQUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjaS9CLGNBQWQsQ0FBNkJ4MkIsT0FBN0IsR0FBdUMsSUFBdkM7QUFDQTtBQUNEOztBQUVELFVBQUk3WixPQUFPLEdBQUcyVSxNQUFNLENBQUMzVSxPQUFyQjtBQUNBQSxNQUFBQSxPQUFPLENBQUMrVSxXQUFSLEdBQXNCLElBQXRCO0FBQ0EvVSxNQUFBQSxPQUFPLENBQUNzd0MsS0FBUixHQUFnQkYsT0FBTyxDQUFDRyxhQUFSLENBQXNCNTdCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VqQixHQUFwQyxDQUFoQjtBQUNBLFVBQUksQ0FBQzMwQixPQUFPLENBQUNzd0MsS0FBUixDQUFjN3pDLEdBQWYsSUFBc0IsQ0FBQ3VELE9BQU8sQ0FBQ3N3QyxLQUFSLENBQWMxc0MsS0FBekMsRUFBZ0Q7QUFDaEQ1RCxNQUFBQSxPQUFPLENBQUN3d0MsYUFBUixDQUFzQixDQUF0QixFQUF5Qnh3QyxPQUFPLENBQUNzd0MsS0FBUixDQUFjMXNDLEtBQXZDLEVBQThDK1EsTUFBTSxDQUFDdkQsTUFBUCxDQUFjOFEsa0JBQTVEOztBQUVBLFVBQUksQ0FBQ3ZOLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3BSLE9BQWQsQ0FBc0JDLFlBQTNCLEVBQXlDO0FBQ3ZDbUIsUUFBQUEsTUFBTSxDQUFDckQsZ0JBQVAsQ0FBd0IsVUFBeEIsRUFBb0M0VyxNQUFNLENBQUMzVSxPQUFQLENBQWV5d0Msa0JBQW5EO0FBQ0Q7QUFDRixLQXJCVztBQXNCWjE2QixJQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixVQUFJcEIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJdlQsTUFBTSxHQUFHRixTQUFTLEVBQXRCOztBQUVBLFVBQUksQ0FBQ3lULE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3BSLE9BQWQsQ0FBc0JDLFlBQTNCLEVBQXlDO0FBQ3ZDbUIsUUFBQUEsTUFBTSxDQUFDcEQsbUJBQVAsQ0FBMkIsVUFBM0IsRUFBdUMyVyxNQUFNLENBQUMzVSxPQUFQLENBQWV5d0Msa0JBQXREO0FBQ0Q7QUFDRixLQTdCVztBQThCWkEsSUFBQUEsa0JBQWtCLEVBQUUsU0FBU0Esa0JBQVQsR0FBOEI7QUFDaEQsVUFBSTk3QixNQUFNLEdBQUcsSUFBYjtBQUNBQSxNQUFBQSxNQUFNLENBQUMzVSxPQUFQLENBQWVzd0MsS0FBZixHQUF1QkYsT0FBTyxDQUFDRyxhQUFSLENBQXNCNTdCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VqQixHQUFwQyxDQUF2QjtBQUNBaGdCLE1BQUFBLE1BQU0sQ0FBQzNVLE9BQVAsQ0FBZXd3QyxhQUFmLENBQTZCNzdCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzROLEtBQTNDLEVBQWtEckssTUFBTSxDQUFDM1UsT0FBUCxDQUFlc3dDLEtBQWYsQ0FBcUIxc0MsS0FBdkUsRUFBOEUsS0FBOUU7QUFDRCxLQWxDVztBQW1DWjJzQyxJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QkcsV0FBdkIsRUFBb0M7QUFDakQsVUFBSXR2QyxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJakMsUUFBSjs7QUFFQSxVQUFJeXhDLFdBQUosRUFBaUI7QUFDZnp4QyxRQUFBQSxRQUFRLEdBQUcsSUFBSTB4QyxHQUFKLENBQVFELFdBQVIsQ0FBWDtBQUNELE9BRkQsTUFFTztBQUNMenhDLFFBQUFBLFFBQVEsR0FBR21DLE1BQU0sQ0FBQ25DLFFBQWxCO0FBQ0Q7O0FBRUQsVUFBSTJ4QyxTQUFTLEdBQUczeEMsUUFBUSxDQUFDTSxRQUFULENBQWtCNFEsS0FBbEIsQ0FBd0IsQ0FBeEIsRUFBMkJsSyxLQUEzQixDQUFpQyxHQUFqQyxFQUFzQ3BCLE1BQXRDLENBQTZDLFVBQVVnc0MsSUFBVixFQUFnQjtBQUMzRSxlQUFPQSxJQUFJLEtBQUssRUFBaEI7QUFDRCxPQUZlLENBQWhCO0FBR0EsVUFBSXRRLEtBQUssR0FBR3FRLFNBQVMsQ0FBQzEwQyxNQUF0QjtBQUNBLFVBQUlPLEdBQUcsR0FBR20wQyxTQUFTLENBQUNyUSxLQUFLLEdBQUcsQ0FBVCxDQUFuQjtBQUNBLFVBQUkzOEIsS0FBSyxHQUFHZ3RDLFNBQVMsQ0FBQ3JRLEtBQUssR0FBRyxDQUFULENBQXJCO0FBQ0EsYUFBTztBQUNMOWpDLFFBQUFBLEdBQUcsRUFBRUEsR0FEQTtBQUVMbUgsUUFBQUEsS0FBSyxFQUFFQTtBQUZGLE9BQVA7QUFJRCxLQXZEVztBQXdEWmt0QyxJQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxDQUFvQnIwQyxHQUFwQixFQUF5QnNQLEtBQXpCLEVBQWdDO0FBQzFDLFVBQUk0SSxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2VCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJLENBQUN5VCxNQUFNLENBQUMzVSxPQUFQLENBQWUrVSxXQUFoQixJQUErQixDQUFDSixNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLENBQXNCNlosT0FBMUQsRUFBbUU7QUFDbkUsVUFBSTVhLFFBQUo7O0FBRUEsVUFBSTBWLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VqQixHQUFsQixFQUF1QjtBQUNyQjExQixRQUFBQSxRQUFRLEdBQUcsSUFBSTB4QyxHQUFKLENBQVFoOEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjdWpCLEdBQXRCLENBQVg7QUFDRCxPQUZELE1BRU87QUFDTDExQixRQUFBQSxRQUFRLEdBQUdtQyxNQUFNLENBQUNuQyxRQUFsQjtBQUNEOztBQUVELFVBQUk2YyxLQUFLLEdBQUduSCxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCVixLQUFqQixDQUFaO0FBQ0EsVUFBSW5JLEtBQUssR0FBR3dzQyxPQUFPLENBQUNXLE9BQVIsQ0FBZ0JqMUIsS0FBSyxDQUFDM1UsSUFBTixDQUFXLGNBQVgsQ0FBaEIsQ0FBWjs7QUFFQSxVQUFJd04sTUFBTSxDQUFDdkQsTUFBUCxDQUFjcFIsT0FBZCxDQUFzQmd4QyxJQUF0QixDQUEyQjkwQyxNQUEzQixHQUFvQyxDQUF4QyxFQUEyQztBQUN6QyxZQUFJODBDLElBQUksR0FBR3I4QixNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLENBQXNCZ3hDLElBQWpDO0FBQ0EsWUFBSUEsSUFBSSxDQUFDQSxJQUFJLENBQUM5MEMsTUFBTCxHQUFjLENBQWYsQ0FBSixLQUEwQixHQUE5QixFQUFtQzgwQyxJQUFJLEdBQUdBLElBQUksQ0FBQzdnQyxLQUFMLENBQVcsQ0FBWCxFQUFjNmdDLElBQUksQ0FBQzkwQyxNQUFMLEdBQWMsQ0FBNUIsQ0FBUDtBQUNuQzBILFFBQUFBLEtBQUssR0FBR290QyxJQUFJLEdBQUcsR0FBUCxHQUFhdjBDLEdBQWIsR0FBbUIsR0FBbkIsR0FBeUJtSCxLQUFqQztBQUNELE9BSkQsTUFJTyxJQUFJLENBQUMzRSxRQUFRLENBQUNNLFFBQVQsQ0FBa0IweEMsUUFBbEIsQ0FBMkJ4MEMsR0FBM0IsQ0FBTCxFQUFzQztBQUMzQ21ILFFBQUFBLEtBQUssR0FBR25ILEdBQUcsR0FBRyxHQUFOLEdBQVltSCxLQUFwQjtBQUNEOztBQUVELFVBQUlzdEMsWUFBWSxHQUFHOXZDLE1BQU0sQ0FBQ3BCLE9BQVAsQ0FBZW14QyxLQUFsQzs7QUFFQSxVQUFJRCxZQUFZLElBQUlBLFlBQVksQ0FBQ3R0QyxLQUFiLEtBQXVCQSxLQUEzQyxFQUFrRDtBQUNoRDtBQUNEOztBQUVELFVBQUkrUSxNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLENBQXNCQyxZQUExQixFQUF3QztBQUN0Q21CLFFBQUFBLE1BQU0sQ0FBQ3BCLE9BQVAsQ0FBZUMsWUFBZixDQUE0QjtBQUMxQjJELFVBQUFBLEtBQUssRUFBRUE7QUFEbUIsU0FBNUIsRUFFRyxJQUZILEVBRVNBLEtBRlQ7QUFHRCxPQUpELE1BSU87QUFDTHhDLFFBQUFBLE1BQU0sQ0FBQ3BCLE9BQVAsQ0FBZUUsU0FBZixDQUF5QjtBQUN2QjBELFVBQUFBLEtBQUssRUFBRUE7QUFEZ0IsU0FBekIsRUFFRyxJQUZILEVBRVNBLEtBRlQ7QUFHRDtBQUNGLEtBOUZXO0FBK0ZabXRDLElBQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCOWtDLElBQWpCLEVBQXVCO0FBQzlCLGFBQU9BLElBQUksQ0FBQzVKLFFBQUwsR0FBZ0JxTixPQUFoQixDQUF3QixNQUF4QixFQUFnQyxHQUFoQyxFQUFxQ0EsT0FBckMsQ0FBNkMsVUFBN0MsRUFBeUQsRUFBekQsRUFBNkRBLE9BQTdELENBQXFFLE1BQXJFLEVBQTZFLEdBQTdFLEVBQWtGQSxPQUFsRixDQUEwRixLQUExRixFQUFpRyxFQUFqRyxFQUFxR0EsT0FBckcsQ0FBNkcsS0FBN0csRUFBb0gsRUFBcEgsQ0FBUDtBQUNELEtBakdXO0FBa0daOGdDLElBQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCeHhCLEtBQXZCLEVBQThCcGIsS0FBOUIsRUFBcUN5ZixZQUFyQyxFQUFtRDtBQUNoRSxVQUFJMU8sTUFBTSxHQUFHLElBQWI7O0FBRUEsVUFBSS9RLEtBQUosRUFBVztBQUNULGFBQUssSUFBSTNILENBQUMsR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR3lZLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQXZDLEVBQStDRCxDQUFDLEdBQUdDLE1BQW5ELEVBQTJERCxDQUFDLElBQUksQ0FBaEUsRUFBbUU7QUFDakUsY0FBSTZmLEtBQUssR0FBR25ILE1BQU0sQ0FBQ29GLE1BQVAsQ0FBY3ROLEVBQWQsQ0FBaUJ4USxDQUFqQixDQUFaO0FBQ0EsY0FBSW0xQyxZQUFZLEdBQUdoQixPQUFPLENBQUNXLE9BQVIsQ0FBZ0JqMUIsS0FBSyxDQUFDM1UsSUFBTixDQUFXLGNBQVgsQ0FBaEIsQ0FBbkI7O0FBRUEsY0FBSWlxQyxZQUFZLEtBQUt4dEMsS0FBakIsSUFBMEIsQ0FBQ2tZLEtBQUssQ0FBQy9VLFFBQU4sQ0FBZTROLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY21RLG1CQUE3QixDQUEvQixFQUFrRjtBQUNoRixnQkFBSXhWLEtBQUssR0FBRytQLEtBQUssQ0FBQy9QLEtBQU4sRUFBWjtBQUNBNEksWUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlcFksS0FBZixFQUFzQmlULEtBQXRCLEVBQTZCcUUsWUFBN0I7QUFDRDtBQUNGO0FBQ0YsT0FWRCxNQVVPO0FBQ0wxTyxRQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWUsQ0FBZixFQUFrQm5GLEtBQWxCLEVBQXlCcUUsWUFBekI7QUFDRDtBQUNGO0FBbEhXLEdBQWQ7QUFvSEEsTUFBSWd1QixTQUFTLEdBQUc7QUFDZDM4QixJQUFBQSxJQUFJLEVBQUUsU0FEUTtBQUVkdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ05wUixNQUFBQSxPQUFPLEVBQUU7QUFDUDZaLFFBQUFBLE9BQU8sRUFBRSxLQURGO0FBRVBtM0IsUUFBQUEsSUFBSSxFQUFFLEVBRkM7QUFHUC93QyxRQUFBQSxZQUFZLEVBQUUsS0FIUDtBQUlQeEQsUUFBQUEsR0FBRyxFQUFFO0FBSkU7QUFESCxLQUZNO0FBVWQrRSxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCM1UsUUFBQUEsT0FBTyxFQUFFakQsUUFBUSxDQUFDLEVBQUQsRUFBS3F6QyxPQUFMO0FBRE8sT0FBVCxDQUFqQjtBQUdELEtBZmE7QUFnQmR2b0MsSUFBQUEsRUFBRSxFQUFFO0FBQ0ZnTyxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQixZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLENBQXNCNlosT0FBMUIsRUFBbUM7QUFDakNsRixVQUFBQSxNQUFNLENBQUMzVSxPQUFQLENBQWU2VixJQUFmO0FBQ0Q7QUFDRixPQUxDO0FBTUZFLE1BQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCcEIsTUFBakIsRUFBeUI7QUFDaEMsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcFIsT0FBZCxDQUFzQjZaLE9BQTFCLEVBQW1DO0FBQ2pDbEYsVUFBQUEsTUFBTSxDQUFDM1UsT0FBUCxDQUFlK1YsT0FBZjtBQUNEO0FBQ0YsT0FWQztBQVdGLGtEQUE0QyxTQUFTdTdCLHVDQUFULENBQWlEMzhCLE1BQWpELEVBQXlEO0FBQ25HLFlBQUlBLE1BQU0sQ0FBQzNVLE9BQVAsQ0FBZStVLFdBQW5CLEVBQWdDO0FBQzlCSixVQUFBQSxNQUFNLENBQUMzVSxPQUFQLENBQWU4d0MsVUFBZixDQUEwQm44QixNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLENBQXNCdkQsR0FBaEQsRUFBcURrWSxNQUFNLENBQUMwSyxXQUE1RDtBQUNEO0FBQ0YsT0FmQztBQWdCRnlxQixNQUFBQSxXQUFXLEVBQUUsU0FBU0EsV0FBVCxDQUFxQm4xQixNQUFyQixFQUE2QjtBQUN4QyxZQUFJQSxNQUFNLENBQUMzVSxPQUFQLENBQWUrVSxXQUFmLElBQThCSixNQUFNLENBQUN2RCxNQUFQLENBQWM0TSxPQUFoRCxFQUF5RDtBQUN2RHJKLFVBQUFBLE1BQU0sQ0FBQzNVLE9BQVAsQ0FBZTh3QyxVQUFmLENBQTBCbjhCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3BSLE9BQWQsQ0FBc0J2RCxHQUFoRCxFQUFxRGtZLE1BQU0sQ0FBQzBLLFdBQTVEO0FBQ0Q7QUFDRjtBQXBCQztBQWhCVSxHQUFoQjtBQXdDQSxNQUFJa3lCLGNBQWMsR0FBRztBQUNuQkMsSUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsR0FBdUI7QUFDbEMsVUFBSTc4QixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUkvVSxRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQWlWLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxZQUFaO0FBQ0EsVUFBSTg3QixPQUFPLEdBQUc3eEMsUUFBUSxDQUFDWCxRQUFULENBQWtCQyxJQUFsQixDQUF1QndRLE9BQXZCLENBQStCLEdBQS9CLEVBQW9DLEVBQXBDLENBQWQ7QUFDQSxVQUFJZ2lDLGVBQWUsR0FBRy84QixNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCa0ksTUFBTSxDQUFDMEssV0FBeEIsRUFBcUNsWSxJQUFyQyxDQUEwQyxXQUExQyxDQUF0Qjs7QUFFQSxVQUFJc3FDLE9BQU8sS0FBS0MsZUFBaEIsRUFBaUM7QUFDL0IsWUFBSXZzQixRQUFRLEdBQUd4USxNQUFNLENBQUNxQyxVQUFQLENBQWtCdFksUUFBbEIsQ0FBMkIsTUFBTWlXLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRJLFVBQXBCLEdBQWlDLGVBQWpDLEdBQW1EeTNCLE9BQW5ELEdBQTZELEtBQXhGLEVBQStGMWxDLEtBQS9GLEVBQWY7QUFDQSxZQUFJLE9BQU9vWixRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ3JDeFEsUUFBQUEsTUFBTSxDQUFDd1AsT0FBUCxDQUFlZ0IsUUFBZjtBQUNEO0FBQ0YsS0Fia0I7QUFjbkJ3c0IsSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSWg5QixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl2VCxNQUFNLEdBQUdGLFNBQVMsRUFBdEI7QUFDQSxVQUFJdEIsUUFBUSxHQUFHRixXQUFXLEVBQTFCO0FBQ0EsVUFBSSxDQUFDaVYsTUFBTSxDQUFDMDdCLGNBQVAsQ0FBc0J0N0IsV0FBdkIsSUFBc0MsQ0FBQ0osTUFBTSxDQUFDdkQsTUFBUCxDQUFjaS9CLGNBQWQsQ0FBNkJ4MkIsT0FBeEUsRUFBaUY7O0FBRWpGLFVBQUlsRixNQUFNLENBQUN2RCxNQUFQLENBQWNpL0IsY0FBZCxDQUE2QnB3QyxZQUE3QixJQUE2Q21CLE1BQU0sQ0FBQ3BCLE9BQXBELElBQStEb0IsTUFBTSxDQUFDcEIsT0FBUCxDQUFlQyxZQUFsRixFQUFnRztBQUM5Rm1CLFFBQUFBLE1BQU0sQ0FBQ3BCLE9BQVAsQ0FBZUMsWUFBZixDQUE0QixJQUE1QixFQUFrQyxJQUFsQyxFQUF3QyxNQUFNMFUsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQmtJLE1BQU0sQ0FBQzBLLFdBQXhCLEVBQXFDbFksSUFBckMsQ0FBMEMsV0FBMUMsQ0FBTixJQUFnRSxFQUF4RztBQUNBd04sUUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFNBQVo7QUFDRCxPQUhELE1BR087QUFDTCxZQUFJbUcsS0FBSyxHQUFHbkgsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQmtJLE1BQU0sQ0FBQzBLLFdBQXhCLENBQVo7QUFDQSxZQUFJbmdCLElBQUksR0FBRzRjLEtBQUssQ0FBQzNVLElBQU4sQ0FBVyxXQUFYLEtBQTJCMlUsS0FBSyxDQUFDM1UsSUFBTixDQUFXLGNBQVgsQ0FBdEM7QUFDQXZILFFBQUFBLFFBQVEsQ0FBQ1gsUUFBVCxDQUFrQkMsSUFBbEIsR0FBeUJBLElBQUksSUFBSSxFQUFqQztBQUNBeVYsUUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFNBQVo7QUFDRDtBQUNGLEtBN0JrQjtBQThCbkJFLElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUkvVSxRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQSxVQUFJMEIsTUFBTSxHQUFHRixTQUFTLEVBQXRCO0FBQ0EsVUFBSSxDQUFDeVQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjaS9CLGNBQWQsQ0FBNkJ4MkIsT0FBOUIsSUFBeUNsRixNQUFNLENBQUN2RCxNQUFQLENBQWNwUixPQUFkLElBQXlCMlUsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcFIsT0FBZCxDQUFzQjZaLE9BQTVGLEVBQXFHO0FBQ3JHbEYsTUFBQUEsTUFBTSxDQUFDMDdCLGNBQVAsQ0FBc0J0N0IsV0FBdEIsR0FBb0MsSUFBcEM7QUFDQSxVQUFJN1YsSUFBSSxHQUFHVSxRQUFRLENBQUNYLFFBQVQsQ0FBa0JDLElBQWxCLENBQXVCd1EsT0FBdkIsQ0FBK0IsR0FBL0IsRUFBb0MsRUFBcEMsQ0FBWDs7QUFFQSxVQUFJeFEsSUFBSixFQUFVO0FBQ1IsWUFBSThmLEtBQUssR0FBRyxDQUFaOztBQUVBLGFBQUssSUFBSS9pQixDQUFDLEdBQUcsQ0FBUixFQUFXQyxNQUFNLEdBQUd5WSxNQUFNLENBQUNvRixNQUFQLENBQWM3ZCxNQUF2QyxFQUErQ0QsQ0FBQyxHQUFHQyxNQUFuRCxFQUEyREQsQ0FBQyxJQUFJLENBQWhFLEVBQW1FO0FBQ2pFLGNBQUk2ZixLQUFLLEdBQUduSCxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCeFEsQ0FBakIsQ0FBWjtBQUNBLGNBQUkyMUMsU0FBUyxHQUFHOTFCLEtBQUssQ0FBQzNVLElBQU4sQ0FBVyxXQUFYLEtBQTJCMlUsS0FBSyxDQUFDM1UsSUFBTixDQUFXLGNBQVgsQ0FBM0M7O0FBRUEsY0FBSXlxQyxTQUFTLEtBQUsxeUMsSUFBZCxJQUFzQixDQUFDNGMsS0FBSyxDQUFDL1UsUUFBTixDQUFlNE4sTUFBTSxDQUFDdkQsTUFBUCxDQUFjbVEsbUJBQTdCLENBQTNCLEVBQThFO0FBQzVFLGdCQUFJeFYsS0FBSyxHQUFHK1AsS0FBSyxDQUFDL1AsS0FBTixFQUFaO0FBQ0E0SSxZQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWVwWSxLQUFmLEVBQXNCaVQsS0FBdEIsRUFBNkJySyxNQUFNLENBQUN2RCxNQUFQLENBQWM4USxrQkFBM0MsRUFBK0QsSUFBL0Q7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsVUFBSXZOLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2kvQixjQUFkLENBQTZCd0IsVUFBakMsRUFBNkM7QUFDM0Mxc0MsUUFBQUEsQ0FBQyxDQUFDL0QsTUFBRCxDQUFELENBQVV5RyxFQUFWLENBQWEsWUFBYixFQUEyQjhNLE1BQU0sQ0FBQzA3QixjQUFQLENBQXNCbUIsV0FBakQ7QUFDRDtBQUNGLEtBdkRrQjtBQXdEbkJ6N0IsSUFBQUEsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsVUFBSXBCLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXZULE1BQU0sR0FBR0YsU0FBUyxFQUF0Qjs7QUFFQSxVQUFJeVQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjaS9CLGNBQWQsQ0FBNkJ3QixVQUFqQyxFQUE2QztBQUMzQzFzQyxRQUFBQSxDQUFDLENBQUMvRCxNQUFELENBQUQsQ0FBVWdJLEdBQVYsQ0FBYyxZQUFkLEVBQTRCdUwsTUFBTSxDQUFDMDdCLGNBQVAsQ0FBc0JtQixXQUFsRDtBQUNEO0FBQ0Y7QUEvRGtCLEdBQXJCO0FBaUVBLE1BQUlNLGdCQUFnQixHQUFHO0FBQ3JCcDlCLElBQUFBLElBQUksRUFBRSxpQkFEZTtBQUVyQnRELElBQUFBLE1BQU0sRUFBRTtBQUNOaS9CLE1BQUFBLGNBQWMsRUFBRTtBQUNkeDJCLFFBQUFBLE9BQU8sRUFBRSxLQURLO0FBRWQ1WixRQUFBQSxZQUFZLEVBQUUsS0FGQTtBQUdkNHhDLFFBQUFBLFVBQVUsRUFBRTtBQUhFO0FBRFYsS0FGYTtBQVNyQnJ3QyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCMDdCLFFBQUFBLGNBQWMsRUFBRXR6QyxRQUFRLENBQUM7QUFDdkJnWSxVQUFBQSxXQUFXLEVBQUU7QUFEVSxTQUFELEVBRXJCdzhCLGNBRnFCO0FBREEsT0FBVCxDQUFqQjtBQUtELEtBaEJvQjtBQWlCckIxcEMsSUFBQUEsRUFBRSxFQUFFO0FBQ0ZnTyxNQUFBQSxJQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjbEIsTUFBZCxFQUFzQjtBQUMxQixZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNpL0IsY0FBZCxDQUE2QngyQixPQUFqQyxFQUEwQztBQUN4Q2xGLFVBQUFBLE1BQU0sQ0FBQzA3QixjQUFQLENBQXNCeDZCLElBQXRCO0FBQ0Q7QUFDRixPQUxDO0FBTUZFLE1BQUFBLE9BQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCcEIsTUFBakIsRUFBeUI7QUFDaEMsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjaS9CLGNBQWQsQ0FBNkJ4MkIsT0FBakMsRUFBMEM7QUFDeENsRixVQUFBQSxNQUFNLENBQUMwN0IsY0FBUCxDQUFzQnQ2QixPQUF0QjtBQUNEO0FBQ0YsT0FWQztBQVdGLGtEQUE0QyxTQUFTdTdCLHVDQUFULENBQWlEMzhCLE1BQWpELEVBQXlEO0FBQ25HLFlBQUlBLE1BQU0sQ0FBQzA3QixjQUFQLENBQXNCdDdCLFdBQTFCLEVBQXVDO0FBQ3JDSixVQUFBQSxNQUFNLENBQUMwN0IsY0FBUCxDQUFzQnNCLE9BQXRCO0FBQ0Q7QUFDRixPQWZDO0FBZ0JGN0gsTUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJuMUIsTUFBckIsRUFBNkI7QUFDeEMsWUFBSUEsTUFBTSxDQUFDMDdCLGNBQVAsQ0FBc0J0N0IsV0FBdEIsSUFBcUNKLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzRNLE9BQXZELEVBQWdFO0FBQzlEckosVUFBQUEsTUFBTSxDQUFDMDdCLGNBQVAsQ0FBc0JzQixPQUF0QjtBQUNEO0FBQ0Y7QUFwQkM7QUFqQmlCLEdBQXZCO0FBeUNBLE1BQUlJLFFBQVEsR0FBRztBQUNibmlCLElBQUFBLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7QUFDbEIsVUFBSWpiLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSXE5QixjQUFjLEdBQUdyOUIsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQmtJLE1BQU0sQ0FBQzBLLFdBQXhCLENBQXJCO0FBQ0EsVUFBSXZRLEtBQUssR0FBRzZGLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FlLFFBQWQsQ0FBdUIzZ0IsS0FBbkM7O0FBRUEsVUFBSWtqQyxjQUFjLENBQUM3cUMsSUFBZixDQUFvQixzQkFBcEIsQ0FBSixFQUFpRDtBQUMvQzJILFFBQUFBLEtBQUssR0FBR2tqQyxjQUFjLENBQUM3cUMsSUFBZixDQUFvQixzQkFBcEIsS0FBK0N3TixNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCM2dCLEtBQTlFO0FBQ0Q7O0FBRURsTyxNQUFBQSxZQUFZLENBQUMrVCxNQUFNLENBQUM4YSxRQUFQLENBQWdCeU8sT0FBakIsQ0FBWjtBQUNBdnBCLE1BQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0J5TyxPQUFoQixHQUEwQnJ2QixRQUFRLENBQUMsWUFBWTtBQUM3QyxZQUFJb2pDLGNBQUo7O0FBRUEsWUFBSXQ5QixNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCeWlCLGdCQUEzQixFQUE2QztBQUMzQyxjQUFJdjlCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCM00sWUFBQUEsTUFBTSxDQUFDNlEsT0FBUDtBQUNBeXNCLFlBQUFBLGNBQWMsR0FBR3Q5QixNQUFNLENBQUMrUSxTQUFQLENBQWlCL1EsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE4sS0FBL0IsRUFBc0MsSUFBdEMsRUFBNEMsSUFBNUMsQ0FBakI7QUFDQXJLLFlBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxVQUFaO0FBQ0QsV0FKRCxNQUlPLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQzhMLFdBQVosRUFBeUI7QUFDOUJ3eEIsWUFBQUEsY0FBYyxHQUFHdDlCLE1BQU0sQ0FBQytRLFNBQVAsQ0FBaUIvUSxNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUEvQixFQUFzQyxJQUF0QyxFQUE0QyxJQUE1QyxDQUFqQjtBQUNBckssWUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFVBQVo7QUFDRCxXQUhNLE1BR0EsSUFBSSxDQUFDaEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcWUsUUFBZCxDQUF1QjBpQixlQUE1QixFQUE2QztBQUNsREYsWUFBQUEsY0FBYyxHQUFHdDlCLE1BQU0sQ0FBQ3dQLE9BQVAsQ0FBZXhQLE1BQU0sQ0FBQ29GLE1BQVAsQ0FBYzdkLE1BQWQsR0FBdUIsQ0FBdEMsRUFBeUN5WSxNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUF2RCxFQUE4RCxJQUE5RCxFQUFvRSxJQUFwRSxDQUFqQjtBQUNBckssWUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFVBQVo7QUFDRCxXQUhNLE1BR0E7QUFDTGhCLFlBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0IrTyxJQUFoQjtBQUNEO0FBQ0YsU0FkRCxNQWNPLElBQUk3cEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFja1EsSUFBbEIsRUFBd0I7QUFDN0IzTSxVQUFBQSxNQUFNLENBQUM2USxPQUFQO0FBQ0F5c0IsVUFBQUEsY0FBYyxHQUFHdDlCLE1BQU0sQ0FBQzBRLFNBQVAsQ0FBaUIxUSxNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUEvQixFQUFzQyxJQUF0QyxFQUE0QyxJQUE1QyxDQUFqQjtBQUNBckssVUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFVBQVo7QUFDRCxTQUpNLE1BSUEsSUFBSSxDQUFDaEIsTUFBTSxDQUFDK0wsS0FBWixFQUFtQjtBQUN4QnV4QixVQUFBQSxjQUFjLEdBQUd0OUIsTUFBTSxDQUFDMFEsU0FBUCxDQUFpQjFRLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzROLEtBQS9CLEVBQXNDLElBQXRDLEVBQTRDLElBQTVDLENBQWpCO0FBQ0FySyxVQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksVUFBWjtBQUNELFNBSE0sTUFHQSxJQUFJLENBQUNoQixNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCMGlCLGVBQTVCLEVBQTZDO0FBQ2xERixVQUFBQSxjQUFjLEdBQUd0OUIsTUFBTSxDQUFDd1AsT0FBUCxDQUFlLENBQWYsRUFBa0J4UCxNQUFNLENBQUN2RCxNQUFQLENBQWM0TixLQUFoQyxFQUF1QyxJQUF2QyxFQUE2QyxJQUE3QyxDQUFqQjtBQUNBckssVUFBQUEsTUFBTSxDQUFDZ0IsSUFBUCxDQUFZLFVBQVo7QUFDRCxTQUhNLE1BR0E7QUFDTGhCLFVBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0IrTyxJQUFoQjtBQUNEOztBQUVELFlBQUk3cEIsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE0sT0FBZCxJQUF5QnJKLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQTdDLEVBQXNEL2EsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkcsR0FBaEIsR0FBdEQsS0FBaUYsSUFBSXFpQixjQUFjLEtBQUssS0FBdkIsRUFBOEI7QUFDN0d0OUIsVUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkcsR0FBaEI7QUFDRDtBQUNGLE9BbENpQyxFQWtDL0I5Z0IsS0FsQytCLENBQWxDO0FBbUNELEtBOUNZO0FBK0Nid2hCLElBQUFBLEtBQUssRUFBRSxTQUFTQSxLQUFULEdBQWlCO0FBQ3RCLFVBQUkzYixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksT0FBT0EsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQnlPLE9BQXZCLEtBQW1DLFdBQXZDLEVBQW9ELE9BQU8sS0FBUDtBQUNwRCxVQUFJdnBCLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXBCLEVBQTZCLE9BQU8sS0FBUDtBQUM3Qi9hLE1BQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQWhCLEdBQTBCLElBQTFCO0FBQ0EvYSxNQUFBQSxNQUFNLENBQUNnQixJQUFQLENBQVksZUFBWjtBQUNBaEIsTUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkcsR0FBaEI7QUFDQSxhQUFPLElBQVA7QUFDRCxLQXZEWTtBQXdEYjRPLElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUk3cEIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJLENBQUNBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXJCLEVBQThCLE9BQU8sS0FBUDtBQUM5QixVQUFJLE9BQU8vYSxNQUFNLENBQUM4YSxRQUFQLENBQWdCeU8sT0FBdkIsS0FBbUMsV0FBdkMsRUFBb0QsT0FBTyxLQUFQOztBQUVwRCxVQUFJdnBCLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0J5TyxPQUFwQixFQUE2QjtBQUMzQnQ5QixRQUFBQSxZQUFZLENBQUMrVCxNQUFNLENBQUM4YSxRQUFQLENBQWdCeU8sT0FBakIsQ0FBWjtBQUNBdnBCLFFBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0J5TyxPQUFoQixHQUEwQjU2QixTQUExQjtBQUNEOztBQUVEcVIsTUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkMsT0FBaEIsR0FBMEIsS0FBMUI7QUFDQS9hLE1BQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWSxjQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0FyRVk7QUFzRWJ5OEIsSUFBQUEsS0FBSyxFQUFFLFNBQVNBLEtBQVQsQ0FBZXB6QixLQUFmLEVBQXNCO0FBQzNCLFVBQUlySyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUksQ0FBQ0EsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkMsT0FBckIsRUFBOEI7QUFDOUIsVUFBSS9hLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JFLE1BQXBCLEVBQTRCO0FBQzVCLFVBQUloYixNQUFNLENBQUM4YSxRQUFQLENBQWdCeU8sT0FBcEIsRUFBNkJ0OUIsWUFBWSxDQUFDK1QsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQnlPLE9BQWpCLENBQVo7QUFDN0J2cEIsTUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkUsTUFBaEIsR0FBeUIsSUFBekI7O0FBRUEsVUFBSTNRLEtBQUssS0FBSyxDQUFWLElBQWUsQ0FBQ3JLLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FlLFFBQWQsQ0FBdUI0aUIsaUJBQTNDLEVBQThEO0FBQzVEMTlCLFFBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JFLE1BQWhCLEdBQXlCLEtBQXpCO0FBQ0FoYixRQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCRyxHQUFoQjtBQUNELE9BSEQsTUFHTztBQUNMLFNBQUMsZUFBRCxFQUFrQixxQkFBbEIsRUFBeUNoeUIsT0FBekMsQ0FBaUQsVUFBVW1MLEtBQVYsRUFBaUI7QUFDaEU0TCxVQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCalosZ0JBQXJCLENBQXNDZ0wsS0FBdEMsRUFBNkM0TCxNQUFNLENBQUM4YSxRQUFQLENBQWdCMlksZUFBN0Q7QUFDRCxTQUZEO0FBR0Q7QUFDRixLQXJGWTtBQXNGYmtLLElBQUFBLGtCQUFrQixFQUFFLFNBQVNBLGtCQUFULEdBQThCO0FBQ2hELFVBQUkzOUIsTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJL1UsUUFBUSxHQUFHRixXQUFXLEVBQTFCOztBQUVBLFVBQUlFLFFBQVEsQ0FBQzJ5QyxlQUFULEtBQTZCLFFBQTdCLElBQXlDNTlCLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQTdELEVBQXNFO0FBQ3BFL2EsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQjJpQixLQUFoQjtBQUNEOztBQUVELFVBQUl4eUMsUUFBUSxDQUFDMnlDLGVBQVQsS0FBNkIsU0FBN0IsSUFBMEM1OUIsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkUsTUFBOUQsRUFBc0U7QUFDcEVoYixRQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCRyxHQUFoQjtBQUNBamIsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkUsTUFBaEIsR0FBeUIsS0FBekI7QUFDRDtBQUNGLEtBbEdZO0FBbUdieVksSUFBQUEsZUFBZSxFQUFFLFNBQVNBLGVBQVQsQ0FBeUI5bEMsQ0FBekIsRUFBNEI7QUFDM0MsVUFBSXFTLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSSxDQUFDQSxNQUFELElBQVdBLE1BQU0sQ0FBQ0csU0FBbEIsSUFBK0IsQ0FBQ0gsTUFBTSxDQUFDcUMsVUFBM0MsRUFBdUQ7QUFDdkQsVUFBSTFVLENBQUMsQ0FBQ3ZHLE1BQUYsS0FBYTRZLE1BQU0sQ0FBQ3FDLFVBQVAsQ0FBa0IsQ0FBbEIsQ0FBakIsRUFBdUM7QUFDdkMsT0FBQyxlQUFELEVBQWtCLHFCQUFsQixFQUF5Q3BaLE9BQXpDLENBQWlELFVBQVVtTCxLQUFWLEVBQWlCO0FBQ2hFNEwsUUFBQUEsTUFBTSxDQUFDcUMsVUFBUCxDQUFrQixDQUFsQixFQUFxQmhaLG1CQUFyQixDQUF5QytLLEtBQXpDLEVBQWdENEwsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQjJZLGVBQWhFO0FBQ0QsT0FGRDtBQUdBenpCLE1BQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JFLE1BQWhCLEdBQXlCLEtBQXpCOztBQUVBLFVBQUksQ0FBQ2hiLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXJCLEVBQThCO0FBQzVCL2EsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQitPLElBQWhCO0FBQ0QsT0FGRCxNQUVPO0FBQ0w3cEIsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkcsR0FBaEI7QUFDRDtBQUNGLEtBakhZO0FBa0hiNGlCLElBQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULEdBQXdCO0FBQ3BDLFVBQUk3OUIsTUFBTSxHQUFHLElBQWI7O0FBRUEsVUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjcWUsUUFBZCxDQUF1QmdqQixvQkFBM0IsRUFBaUQ7QUFDL0M5OUIsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQitPLElBQWhCO0FBQ0QsT0FGRCxNQUVPO0FBQ0w3cEIsUUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQjJpQixLQUFoQjtBQUNEOztBQUVELE9BQUMsZUFBRCxFQUFrQixxQkFBbEIsRUFBeUN4MEMsT0FBekMsQ0FBaUQsVUFBVW1MLEtBQVYsRUFBaUI7QUFDaEU0TCxRQUFBQSxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCaFosbUJBQXJCLENBQXlDK0ssS0FBekMsRUFBZ0Q0TCxNQUFNLENBQUM4YSxRQUFQLENBQWdCMlksZUFBaEU7QUFDRCxPQUZEO0FBR0QsS0E5SFk7QUErSGJzSyxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQyxVQUFJLzlCLE1BQU0sR0FBRyxJQUFiOztBQUVBLFVBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FlLFFBQWQsQ0FBdUJnakIsb0JBQTNCLEVBQWlEO0FBQy9DO0FBQ0Q7O0FBRUQ5OUIsTUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQkUsTUFBaEIsR0FBeUIsS0FBekI7QUFDQWhiLE1BQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JHLEdBQWhCO0FBQ0QsS0F4SVk7QUF5SWIraUIsSUFBQUEsaUJBQWlCLEVBQUUsU0FBU0EsaUJBQVQsR0FBNkI7QUFDOUMsVUFBSWgrQixNQUFNLEdBQUcsSUFBYjs7QUFFQSxVQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCbWpCLGlCQUEzQixFQUE4QztBQUM1Q2orQixRQUFBQSxNQUFNLENBQUNtQyxHQUFQLENBQVdqUCxFQUFYLENBQWMsWUFBZCxFQUE0QjhNLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0IraUIsWUFBNUM7QUFDQTc5QixRQUFBQSxNQUFNLENBQUNtQyxHQUFQLENBQVdqUCxFQUFYLENBQWMsWUFBZCxFQUE0QjhNLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JpakIsWUFBNUM7QUFDRDtBQUNGLEtBaEpZO0FBaUpiRyxJQUFBQSxpQkFBaUIsRUFBRSxTQUFTQSxpQkFBVCxHQUE2QjtBQUM5QyxVQUFJbCtCLE1BQU0sR0FBRyxJQUFiO0FBQ0FBLE1BQUFBLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVzFOLEdBQVgsQ0FBZSxZQUFmLEVBQTZCdUwsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQitpQixZQUE3QztBQUNBNzlCLE1BQUFBLE1BQU0sQ0FBQ21DLEdBQVAsQ0FBVzFOLEdBQVgsQ0FBZSxZQUFmLEVBQTZCdUwsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQmlqQixZQUE3QztBQUNEO0FBckpZLEdBQWY7QUF1SkEsTUFBSUksVUFBVSxHQUFHO0FBQ2ZwK0IsSUFBQUEsSUFBSSxFQUFFLFVBRFM7QUFFZnRELElBQUFBLE1BQU0sRUFBRTtBQUNOcWUsTUFBQUEsUUFBUSxFQUFFO0FBQ1I1VixRQUFBQSxPQUFPLEVBQUUsS0FERDtBQUVSL0ssUUFBQUEsS0FBSyxFQUFFLElBRkM7QUFHUnVqQyxRQUFBQSxpQkFBaUIsRUFBRSxJQUhYO0FBSVJJLFFBQUFBLG9CQUFvQixFQUFFLElBSmQ7QUFLUk4sUUFBQUEsZUFBZSxFQUFFLEtBTFQ7QUFNUkQsUUFBQUEsZ0JBQWdCLEVBQUUsS0FOVjtBQU9SVSxRQUFBQSxpQkFBaUIsRUFBRTtBQVBYO0FBREosS0FGTztBQWFmcHhDLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEI4YSxRQUFBQSxRQUFRLEVBQUUxeUIsUUFBUSxDQUFDLEVBQUQsRUFBS2cxQyxRQUFMLEVBQWU7QUFDL0JyaUIsVUFBQUEsT0FBTyxFQUFFLEtBRHNCO0FBRS9CQyxVQUFBQSxNQUFNLEVBQUU7QUFGdUIsU0FBZjtBQURNLE9BQVQsQ0FBakI7QUFNRCxLQXJCYztBQXNCZjluQixJQUFBQSxFQUFFLEVBQUU7QUFDRmdPLE1BQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULENBQWNsQixNQUFkLEVBQXNCO0FBQzFCLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FlLFFBQWQsQ0FBdUI1VixPQUEzQixFQUFvQztBQUNsQ2xGLFVBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JhLEtBQWhCO0FBQ0EsY0FBSTF3QixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQUUsVUFBQUEsUUFBUSxDQUFDN0IsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDNFcsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQjZpQixrQkFBOUQ7QUFDQTM5QixVQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCa2pCLGlCQUFoQjtBQUNEO0FBQ0YsT0FSQztBQVNGSSxNQUFBQSxxQkFBcUIsRUFBRSxTQUFTQSxxQkFBVCxDQUErQnArQixNQUEvQixFQUF1Q3FLLEtBQXZDLEVBQThDdUUsUUFBOUMsRUFBd0Q7QUFDN0UsWUFBSTVPLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXBCLEVBQTZCO0FBQzNCLGNBQUluTSxRQUFRLElBQUksQ0FBQzVPLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3FlLFFBQWQsQ0FBdUJnakIsb0JBQXhDLEVBQThEO0FBQzVEOTlCLFlBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0IyaUIsS0FBaEIsQ0FBc0JwekIsS0FBdEI7QUFDRCxXQUZELE1BRU87QUFDTHJLLFlBQUFBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0IrTyxJQUFoQjtBQUNEO0FBQ0Y7QUFDRixPQWpCQztBQWtCRndVLE1BQUFBLGVBQWUsRUFBRSxTQUFTQSxlQUFULENBQXlCcitCLE1BQXpCLEVBQWlDO0FBQ2hELFlBQUlBLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXBCLEVBQTZCO0FBQzNCLGNBQUkvYSxNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCZ2pCLG9CQUEzQixFQUFpRDtBQUMvQzk5QixZQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCK08sSUFBaEI7QUFDRCxXQUZELE1BRU87QUFDTDdwQixZQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCMmlCLEtBQWhCO0FBQ0Q7QUFDRjtBQUNGLE9BMUJDO0FBMkJGeEksTUFBQUEsUUFBUSxFQUFFLFNBQVNBLFFBQVQsQ0FBa0JqMUIsTUFBbEIsRUFBMEI7QUFDbEMsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjNE0sT0FBZCxJQUF5QnJKLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JFLE1BQXpDLElBQW1ELENBQUNoYixNQUFNLENBQUN2RCxNQUFQLENBQWNxZSxRQUFkLENBQXVCZ2pCLG9CQUEvRSxFQUFxRztBQUNuRzk5QixVQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCRyxHQUFoQjtBQUNEO0FBQ0YsT0EvQkM7QUFnQ0Y3WixNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQnBCLE1BQWpCLEVBQXlCO0FBQ2hDQSxRQUFBQSxNQUFNLENBQUM4YSxRQUFQLENBQWdCb2pCLGlCQUFoQjs7QUFFQSxZQUFJbCtCLE1BQU0sQ0FBQzhhLFFBQVAsQ0FBZ0JDLE9BQXBCLEVBQTZCO0FBQzNCL2EsVUFBQUEsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQitPLElBQWhCO0FBQ0Q7O0FBRUQsWUFBSTUrQixRQUFRLEdBQUdGLFdBQVcsRUFBMUI7QUFDQUUsUUFBQUEsUUFBUSxDQUFDNUIsbUJBQVQsQ0FBNkIsa0JBQTdCLEVBQWlEMlcsTUFBTSxDQUFDOGEsUUFBUCxDQUFnQjZpQixrQkFBakU7QUFDRDtBQXpDQztBQXRCVyxHQUFqQjtBQW1FQSxNQUFJVyxJQUFJLEdBQUc7QUFDVHJ3QixJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQyxVQUFJak8sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJb0YsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFBcEI7O0FBRUEsV0FBSyxJQUFJOWQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhkLE1BQU0sQ0FBQzdkLE1BQTNCLEVBQW1DRCxDQUFDLElBQUksQ0FBeEMsRUFBMkM7QUFDekMsWUFBSTg4QixRQUFRLEdBQUdwa0IsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQnhRLENBQWpCLENBQWY7QUFDQSxZQUFJZ1AsTUFBTSxHQUFHOHRCLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWXpaLGlCQUF6QjtBQUNBLFlBQUk0ekIsRUFBRSxHQUFHLENBQUNqb0MsTUFBVjtBQUNBLFlBQUksQ0FBQzBKLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3NSLGdCQUFuQixFQUFxQ3d3QixFQUFFLElBQUl2K0IsTUFBTSxDQUFDK0ssU0FBYjtBQUNyQyxZQUFJeXpCLEVBQUUsR0FBRyxDQUFUOztBQUVBLFlBQUksQ0FBQ3grQixNQUFNLENBQUNnRSxZQUFQLEVBQUwsRUFBNEI7QUFDMUJ3NkIsVUFBQUEsRUFBRSxHQUFHRCxFQUFMO0FBQ0FBLFVBQUFBLEVBQUUsR0FBRyxDQUFMO0FBQ0Q7O0FBRUQsWUFBSUUsWUFBWSxHQUFHeitCLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2lpQyxVQUFkLENBQXlCQyxTQUF6QixHQUFxQ2o0QixJQUFJLENBQUNLLEdBQUwsQ0FBUyxJQUFJTCxJQUFJLENBQUM2QixHQUFMLENBQVM2YixRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVkzWSxRQUFyQixDQUFiLEVBQTZDLENBQTdDLENBQXJDLEdBQXVGLElBQUkvRSxJQUFJLENBQUNpQixHQUFMLENBQVNqQixJQUFJLENBQUNLLEdBQUwsQ0FBU3FkLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWTNZLFFBQXJCLEVBQStCLENBQUMsQ0FBaEMsQ0FBVCxFQUE2QyxDQUE3QyxDQUE5RztBQUNBMlksUUFBQUEsUUFBUSxDQUFDbnRCLEdBQVQsQ0FBYTtBQUNYaTRCLFVBQUFBLE9BQU8sRUFBRXVQO0FBREUsU0FBYixFQUVHM3JDLFNBRkgsQ0FFYSxpQkFBaUJ5ckMsRUFBakIsR0FBc0IsTUFBdEIsR0FBK0JDLEVBQS9CLEdBQW9DLFVBRmpEO0FBR0Q7QUFDRixLQXRCUTtBQXVCVGowQixJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QnZYLFFBQXZCLEVBQWlDO0FBQzlDLFVBQUlnTixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUlvRixNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQUFwQjtBQUFBLFVBQ0kvQyxVQUFVLEdBQUdyQyxNQUFNLENBQUNxQyxVQUR4QjtBQUVBK0MsTUFBQUEsTUFBTSxDQUFDdkwsVUFBUCxDQUFrQjdHLFFBQWxCOztBQUVBLFVBQUlnTixNQUFNLENBQUN2RCxNQUFQLENBQWNzUixnQkFBZCxJQUFrQy9hLFFBQVEsS0FBSyxDQUFuRCxFQUFzRDtBQUNwRCxZQUFJNHJDLGNBQWMsR0FBRyxLQUFyQjtBQUNBeDVCLFFBQUFBLE1BQU0sQ0FBQ3RMLGFBQVAsQ0FBcUIsWUFBWTtBQUMvQixjQUFJOGtDLGNBQUosRUFBb0I7QUFDcEIsY0FBSSxDQUFDNStCLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUF0QixFQUFpQztBQUNqQ3krQixVQUFBQSxjQUFjLEdBQUcsSUFBakI7QUFDQTUrQixVQUFBQSxNQUFNLENBQUM2TyxTQUFQLEdBQW1CLEtBQW5CO0FBQ0EsY0FBSWd3QixhQUFhLEdBQUcsQ0FBQyxxQkFBRCxFQUF3QixlQUF4QixDQUFwQjs7QUFFQSxlQUFLLElBQUl2M0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3UzQyxhQUFhLENBQUN0M0MsTUFBbEMsRUFBMENELENBQUMsSUFBSSxDQUEvQyxFQUFrRDtBQUNoRCthLFlBQUFBLFVBQVUsQ0FBQ3JOLE9BQVgsQ0FBbUI2cEMsYUFBYSxDQUFDdjNDLENBQUQsQ0FBaEM7QUFDRDtBQUNGLFNBVkQ7QUFXRDtBQUNGO0FBM0NRLEdBQVg7QUE2Q0EsTUFBSXczQyxVQUFVLEdBQUc7QUFDZi8rQixJQUFBQSxJQUFJLEVBQUUsYUFEUztBQUVmdEQsSUFBQUEsTUFBTSxFQUFFO0FBQ05paUMsTUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLFFBQUFBLFNBQVMsRUFBRTtBQUREO0FBRE4sS0FGTztBQU9mOXhDLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEIwK0IsUUFBQUEsVUFBVSxFQUFFdDJDLFFBQVEsQ0FBQyxFQUFELEVBQUtrMkMsSUFBTDtBQURJLE9BQVQsQ0FBakI7QUFHRCxLQVpjO0FBYWZwckMsSUFBQUEsRUFBRSxFQUFFO0FBQ0Z5eEIsTUFBQUEsVUFBVSxFQUFFLFNBQVNBLFVBQVQsQ0FBb0Iza0IsTUFBcEIsRUFBNEI7QUFDdEMsWUFBSUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjaU0sTUFBZCxLQUF5QixNQUE3QixFQUFxQztBQUNyQzFJLFFBQUFBLE1BQU0sQ0FBQzdPLFVBQVAsQ0FBa0JsRCxJQUFsQixDQUF1QitSLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VnQixzQkFBZCxHQUF1QyxNQUE5RDtBQUNBLFlBQUk0SCxlQUFlLEdBQUc7QUFDcEIvZCxVQUFBQSxhQUFhLEVBQUUsQ0FESztBQUVwQkosVUFBQUEsZUFBZSxFQUFFLENBRkc7QUFHcEJjLFVBQUFBLGNBQWMsRUFBRSxDQUhJO0FBSXBCMEMsVUFBQUEsbUJBQW1CLEVBQUUsSUFKRDtBQUtwQmpFLFVBQUFBLFlBQVksRUFBRSxDQUxNO0FBTXBCK0gsVUFBQUEsZ0JBQWdCLEVBQUU7QUFORSxTQUF0QjtBQVFBdFMsUUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDdkQsTUFBUixFQUFnQm1vQixlQUFoQixDQUFOO0FBQ0FucEIsUUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDNGMsY0FBUixFQUF3QmdJLGVBQXhCLENBQU47QUFDRCxPQWRDO0FBZUYzVyxNQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQmpPLE1BQXRCLEVBQThCO0FBQzFDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2lNLE1BQWQsS0FBeUIsTUFBN0IsRUFBcUM7QUFDckMxSSxRQUFBQSxNQUFNLENBQUMwK0IsVUFBUCxDQUFrQnp3QixZQUFsQjtBQUNELE9BbEJDO0FBbUJGMUQsTUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJ2SyxNQUF2QixFQUErQmhOLFFBQS9CLEVBQXlDO0FBQ3RELFlBQUlnTixNQUFNLENBQUN2RCxNQUFQLENBQWNpTSxNQUFkLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ3JDMUksUUFBQUEsTUFBTSxDQUFDMCtCLFVBQVAsQ0FBa0JuMEIsYUFBbEIsQ0FBZ0N2WCxRQUFoQztBQUNEO0FBdEJDO0FBYlcsR0FBakI7QUF1Q0EsTUFBSStyQyxJQUFJLEdBQUc7QUFDVDl3QixJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQyxVQUFJak8sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJbUMsR0FBRyxHQUFHbkMsTUFBTSxDQUFDbUMsR0FBakI7QUFBQSxVQUNJRSxVQUFVLEdBQUdyQyxNQUFNLENBQUNxQyxVQUR4QjtBQUFBLFVBRUkrQyxNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQUZwQjtBQUFBLFVBR0k0Z0IsV0FBVyxHQUFHaG1CLE1BQU0sQ0FBQ3pCLEtBSHpCO0FBQUEsVUFJSTBuQixZQUFZLEdBQUdqbUIsTUFBTSxDQUFDdkIsTUFKMUI7QUFBQSxVQUtJb0csR0FBRyxHQUFHN0UsTUFBTSxDQUFDOEUsWUFMakI7QUFBQSxVQU1JRixVQUFVLEdBQUc1RSxNQUFNLENBQUNxRSxJQU54QjtBQUFBLFVBT0lqRixPQUFPLEdBQUdZLE1BQU0sQ0FBQ1osT0FQckI7QUFRQSxVQUFJM0MsTUFBTSxHQUFHdUQsTUFBTSxDQUFDdkQsTUFBUCxDQUFjdWlDLFVBQTNCO0FBQ0EsVUFBSWg3QixZQUFZLEdBQUdoRSxNQUFNLENBQUNnRSxZQUFQLEVBQW5CO0FBQ0EsVUFBSWdCLFNBQVMsR0FBR2hGLE1BQU0sQ0FBQ2lGLE9BQVAsSUFBa0JqRixNQUFNLENBQUN2RCxNQUFQLENBQWN3SSxPQUFkLENBQXNCQyxPQUF4RDtBQUNBLFVBQUkrNUIsYUFBYSxHQUFHLENBQXBCO0FBQ0EsVUFBSUMsYUFBSjs7QUFFQSxVQUFJemlDLE1BQU0sQ0FBQzBpQyxNQUFYLEVBQW1CO0FBQ2pCLFlBQUluN0IsWUFBSixFQUFrQjtBQUNoQms3QixVQUFBQSxhQUFhLEdBQUc3OEIsVUFBVSxDQUFDaEosSUFBWCxDQUFnQixxQkFBaEIsQ0FBaEI7O0FBRUEsY0FBSTZsQyxhQUFhLENBQUMzM0MsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUM5QjIzQyxZQUFBQSxhQUFhLEdBQUcxdUMsQ0FBQyxDQUFDLHdDQUFELENBQWpCO0FBQ0E2UixZQUFBQSxVQUFVLENBQUNySyxNQUFYLENBQWtCa25DLGFBQWxCO0FBQ0Q7O0FBRURBLFVBQUFBLGFBQWEsQ0FBQ2pvQyxHQUFkLENBQWtCO0FBQ2hCd0gsWUFBQUEsTUFBTSxFQUFFdW5CLFdBQVcsR0FBRztBQUROLFdBQWxCO0FBR0QsU0FYRCxNQVdPO0FBQ0xrWixVQUFBQSxhQUFhLEdBQUcvOEIsR0FBRyxDQUFDOUksSUFBSixDQUFTLHFCQUFULENBQWhCOztBQUVBLGNBQUk2bEMsYUFBYSxDQUFDMzNDLE1BQWQsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIyM0MsWUFBQUEsYUFBYSxHQUFHMXVDLENBQUMsQ0FBQyx3Q0FBRCxDQUFqQjtBQUNBMlIsWUFBQUEsR0FBRyxDQUFDbkssTUFBSixDQUFXa25DLGFBQVg7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBSyxJQUFJNTNDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc4ZCxNQUFNLENBQUM3ZCxNQUEzQixFQUFtQ0QsQ0FBQyxJQUFJLENBQXhDLEVBQTJDO0FBQ3pDLFlBQUk4OEIsUUFBUSxHQUFHaGYsTUFBTSxDQUFDdE4sRUFBUCxDQUFVeFEsQ0FBVixDQUFmO0FBQ0EsWUFBSThoQixVQUFVLEdBQUc5aEIsQ0FBakI7O0FBRUEsWUFBSTBkLFNBQUosRUFBZTtBQUNib0UsVUFBQUEsVUFBVSxHQUFHbEYsUUFBUSxDQUFDa2dCLFFBQVEsQ0FBQzV4QixJQUFULENBQWMseUJBQWQsQ0FBRCxFQUEyQyxFQUEzQyxDQUFyQjtBQUNEOztBQUVELFlBQUk0c0MsVUFBVSxHQUFHaDJCLFVBQVUsR0FBRyxFQUE5QjtBQUNBLFlBQUl5dkIsS0FBSyxHQUFHbnlCLElBQUksQ0FBQ0MsS0FBTCxDQUFXeTRCLFVBQVUsR0FBRyxHQUF4QixDQUFaOztBQUVBLFlBQUl2NkIsR0FBSixFQUFTO0FBQ1B1NkIsVUFBQUEsVUFBVSxHQUFHLENBQUNBLFVBQWQ7QUFDQXZHLFVBQUFBLEtBQUssR0FBR255QixJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDeTRCLFVBQUQsR0FBYyxHQUF6QixDQUFSO0FBQ0Q7O0FBRUQsWUFBSTN6QixRQUFRLEdBQUcvRSxJQUFJLENBQUNLLEdBQUwsQ0FBU0wsSUFBSSxDQUFDaUIsR0FBTCxDQUFTeWMsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZM1ksUUFBckIsRUFBK0IsQ0FBL0IsQ0FBVCxFQUE0QyxDQUFDLENBQTdDLENBQWY7QUFDQSxZQUFJOHlCLEVBQUUsR0FBRyxDQUFUO0FBQ0EsWUFBSUMsRUFBRSxHQUFHLENBQVQ7QUFDQSxZQUFJYSxFQUFFLEdBQUcsQ0FBVDs7QUFFQSxZQUFJajJCLFVBQVUsR0FBRyxDQUFiLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCbTFCLFVBQUFBLEVBQUUsR0FBRyxDQUFDMUYsS0FBRCxHQUFTLENBQVQsR0FBYWowQixVQUFsQjtBQUNBeTZCLFVBQUFBLEVBQUUsR0FBRyxDQUFMO0FBQ0QsU0FIRCxNQUdPLElBQUksQ0FBQ2oyQixVQUFVLEdBQUcsQ0FBZCxJQUFtQixDQUFuQixLQUF5QixDQUE3QixFQUFnQztBQUNyQ20xQixVQUFBQSxFQUFFLEdBQUcsQ0FBTDtBQUNBYyxVQUFBQSxFQUFFLEdBQUcsQ0FBQ3hHLEtBQUQsR0FBUyxDQUFULEdBQWFqMEIsVUFBbEI7QUFDRCxTQUhNLE1BR0EsSUFBSSxDQUFDd0UsVUFBVSxHQUFHLENBQWQsSUFBbUIsQ0FBbkIsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDckNtMUIsVUFBQUEsRUFBRSxHQUFHMzVCLFVBQVUsR0FBR2kwQixLQUFLLEdBQUcsQ0FBUixHQUFZajBCLFVBQTlCO0FBQ0F5NkIsVUFBQUEsRUFBRSxHQUFHejZCLFVBQUw7QUFDRCxTQUhNLE1BR0EsSUFBSSxDQUFDd0UsVUFBVSxHQUFHLENBQWQsSUFBbUIsQ0FBbkIsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDckNtMUIsVUFBQUEsRUFBRSxHQUFHLENBQUMzNUIsVUFBTjtBQUNBeTZCLFVBQUFBLEVBQUUsR0FBRyxJQUFJejZCLFVBQUosR0FBaUJBLFVBQVUsR0FBRyxDQUFiLEdBQWlCaTBCLEtBQXZDO0FBQ0Q7O0FBRUQsWUFBSWgwQixHQUFKLEVBQVM7QUFDUDA1QixVQUFBQSxFQUFFLEdBQUcsQ0FBQ0EsRUFBTjtBQUNEOztBQUVELFlBQUksQ0FBQ3Y2QixZQUFMLEVBQW1CO0FBQ2pCdzZCLFVBQUFBLEVBQUUsR0FBR0QsRUFBTDtBQUNBQSxVQUFBQSxFQUFFLEdBQUcsQ0FBTDtBQUNEOztBQUVELFlBQUl6ckMsU0FBUyxHQUFHLGNBQWNrUixZQUFZLEdBQUcsQ0FBSCxHQUFPLENBQUNvN0IsVUFBbEMsSUFBZ0QsZUFBaEQsSUFBbUVwN0IsWUFBWSxHQUFHbzdCLFVBQUgsR0FBZ0IsQ0FBL0YsSUFBb0csbUJBQXBHLEdBQTBIYixFQUExSCxHQUErSCxNQUEvSCxHQUF3SUMsRUFBeEksR0FBNkksTUFBN0ksR0FBc0phLEVBQXRKLEdBQTJKLEtBQTNLOztBQUVBLFlBQUk1ekIsUUFBUSxJQUFJLENBQVosSUFBaUJBLFFBQVEsR0FBRyxDQUFDLENBQWpDLEVBQW9DO0FBQ2xDd3pCLFVBQUFBLGFBQWEsR0FBRzcxQixVQUFVLEdBQUcsRUFBYixHQUFrQnFDLFFBQVEsR0FBRyxFQUE3QztBQUNBLGNBQUk1RyxHQUFKLEVBQVNvNkIsYUFBYSxHQUFHLENBQUM3MUIsVUFBRCxHQUFjLEVBQWQsR0FBbUJxQyxRQUFRLEdBQUcsRUFBOUM7QUFDVjs7QUFFRDJZLFFBQUFBLFFBQVEsQ0FBQ3R4QixTQUFULENBQW1CQSxTQUFuQjs7QUFFQSxZQUFJMkosTUFBTSxDQUFDNmlDLFlBQVgsRUFBeUI7QUFDdkI7QUFDQSxjQUFJQyxZQUFZLEdBQUd2N0IsWUFBWSxHQUFHb2dCLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsMkJBQWQsQ0FBSCxHQUFnRCtxQixRQUFRLENBQUMvcUIsSUFBVCxDQUFjLDBCQUFkLENBQS9FO0FBQ0EsY0FBSW1tQyxXQUFXLEdBQUd4N0IsWUFBWSxHQUFHb2dCLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsNEJBQWQsQ0FBSCxHQUFpRCtxQixRQUFRLENBQUMvcUIsSUFBVCxDQUFjLDZCQUFkLENBQS9FOztBQUVBLGNBQUlrbUMsWUFBWSxDQUFDaDRDLE1BQWIsS0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0JnNEMsWUFBQUEsWUFBWSxHQUFHL3VDLENBQUMsQ0FBQyx1Q0FBdUN3VCxZQUFZLEdBQUcsTUFBSCxHQUFZLEtBQS9ELElBQXdFLFdBQXpFLENBQWhCO0FBQ0FvZ0IsWUFBQUEsUUFBUSxDQUFDcHNCLE1BQVQsQ0FBZ0J1bkMsWUFBaEI7QUFDRDs7QUFFRCxjQUFJQyxXQUFXLENBQUNqNEMsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUM1Qmk0QyxZQUFBQSxXQUFXLEdBQUdodkMsQ0FBQyxDQUFDLHVDQUF1Q3dULFlBQVksR0FBRyxPQUFILEdBQWEsUUFBaEUsSUFBNEUsV0FBN0UsQ0FBZjtBQUNBb2dCLFlBQUFBLFFBQVEsQ0FBQ3BzQixNQUFULENBQWdCd25DLFdBQWhCO0FBQ0Q7O0FBRUQsY0FBSUQsWUFBWSxDQUFDaDRDLE1BQWpCLEVBQXlCZzRDLFlBQVksQ0FBQyxDQUFELENBQVosQ0FBZ0J0MUMsS0FBaEIsQ0FBc0JpbEMsT0FBdEIsR0FBZ0N4b0IsSUFBSSxDQUFDSyxHQUFMLENBQVMsQ0FBQzBFLFFBQVYsRUFBb0IsQ0FBcEIsQ0FBaEM7QUFDekIsY0FBSSt6QixXQUFXLENBQUNqNEMsTUFBaEIsRUFBd0JpNEMsV0FBVyxDQUFDLENBQUQsQ0FBWCxDQUFldjFDLEtBQWYsQ0FBcUJpbEMsT0FBckIsR0FBK0J4b0IsSUFBSSxDQUFDSyxHQUFMLENBQVMwRSxRQUFULEVBQW1CLENBQW5CLENBQS9CO0FBQ3pCO0FBQ0Y7O0FBRURwSixNQUFBQSxVQUFVLENBQUNwTCxHQUFYLENBQWU7QUFDYixvQ0FBNEIsY0FBYzJOLFVBQVUsR0FBRyxDQUEzQixHQUErQixJQUQ5QztBQUViLGlDQUF5QixjQUFjQSxVQUFVLEdBQUcsQ0FBM0IsR0FBK0IsSUFGM0M7QUFHYixnQ0FBd0IsY0FBY0EsVUFBVSxHQUFHLENBQTNCLEdBQStCLElBSDFDO0FBSWIsNEJBQW9CLGNBQWNBLFVBQVUsR0FBRyxDQUEzQixHQUErQjtBQUp0QyxPQUFmOztBQU9BLFVBQUluSSxNQUFNLENBQUMwaUMsTUFBWCxFQUFtQjtBQUNqQixZQUFJbjdCLFlBQUosRUFBa0I7QUFDaEJrN0IsVUFBQUEsYUFBYSxDQUFDcHNDLFNBQWQsQ0FBd0IsdUJBQXVCa3pCLFdBQVcsR0FBRyxDQUFkLEdBQWtCdnBCLE1BQU0sQ0FBQ2dqQyxZQUFoRCxJQUFnRSxNQUFoRSxHQUF5RSxDQUFDelosV0FBRCxHQUFlLENBQXhGLEdBQTRGLHlDQUE1RixHQUF3SXZwQixNQUFNLENBQUNpakMsV0FBL0ksR0FBNkosR0FBckw7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJQyxXQUFXLEdBQUdqNUIsSUFBSSxDQUFDNkIsR0FBTCxDQUFTMDJCLGFBQVQsSUFBMEJ2NEIsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQzZCLEdBQUwsQ0FBUzAyQixhQUFULElBQTBCLEVBQXJDLElBQTJDLEVBQXZGO0FBQ0EsY0FBSXR6QixVQUFVLEdBQUcsT0FBT2pGLElBQUksQ0FBQ2s1QixHQUFMLENBQVNELFdBQVcsR0FBRyxDQUFkLEdBQWtCajVCLElBQUksQ0FBQzRRLEVBQXZCLEdBQTRCLEdBQXJDLElBQTRDLENBQTVDLEdBQWdENVEsSUFBSSxDQUFDbTVCLEdBQUwsQ0FBU0YsV0FBVyxHQUFHLENBQWQsR0FBa0JqNUIsSUFBSSxDQUFDNFEsRUFBdkIsR0FBNEIsR0FBckMsSUFBNEMsQ0FBbkcsQ0FBakI7QUFDQSxjQUFJd29CLE1BQU0sR0FBR3JqQyxNQUFNLENBQUNpakMsV0FBcEI7QUFDQSxjQUFJSyxNQUFNLEdBQUd0akMsTUFBTSxDQUFDaWpDLFdBQVAsR0FBcUIvekIsVUFBbEM7QUFDQSxjQUFJclYsTUFBTSxHQUFHbUcsTUFBTSxDQUFDZ2pDLFlBQXBCO0FBQ0FQLFVBQUFBLGFBQWEsQ0FBQ3BzQyxTQUFkLENBQXdCLGFBQWFndEMsTUFBYixHQUFzQixPQUF0QixHQUFnQ0MsTUFBaEMsR0FBeUMscUJBQXpDLElBQWtFOVosWUFBWSxHQUFHLENBQWYsR0FBbUIzdkIsTUFBckYsSUFBK0YsTUFBL0YsR0FBd0csQ0FBQzJ2QixZQUFELEdBQWdCLENBQWhCLEdBQW9COFosTUFBNUgsR0FBcUkscUJBQTdKO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJQyxPQUFPLEdBQUc1Z0MsT0FBTyxDQUFDRSxRQUFSLElBQW9CRixPQUFPLENBQUNLLFNBQTVCLEdBQXdDLENBQUNtRixVQUFELEdBQWMsQ0FBdEQsR0FBMEQsQ0FBeEU7QUFDQXZDLE1BQUFBLFVBQVUsQ0FBQ3ZQLFNBQVgsQ0FBcUIsdUJBQXVCa3RDLE9BQXZCLEdBQWlDLGNBQWpDLElBQW1EaGdDLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0IsQ0FBeEIsR0FBNEJpN0IsYUFBL0UsSUFBZ0csZUFBaEcsSUFBbUhqL0IsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixDQUFDaTdCLGFBQXpCLEdBQXlDLENBQTVKLElBQWlLLE1BQXRMO0FBQ0QsS0F0SVE7QUF1SVQxMEIsSUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJ2WCxRQUF2QixFQUFpQztBQUM5QyxVQUFJZ04sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJbUMsR0FBRyxHQUFHbkMsTUFBTSxDQUFDbUMsR0FBakI7QUFBQSxVQUNJaUQsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFEcEI7QUFFQUEsTUFBQUEsTUFBTSxDQUFDdkwsVUFBUCxDQUFrQjdHLFFBQWxCLEVBQTRCcUcsSUFBNUIsQ0FBaUMsOEdBQWpDLEVBQWlKUSxVQUFqSixDQUE0SjdHLFFBQTVKOztBQUVBLFVBQUlnTixNQUFNLENBQUN2RCxNQUFQLENBQWN1aUMsVUFBZCxDQUF5QkcsTUFBekIsSUFBbUMsQ0FBQ24vQixNQUFNLENBQUNnRSxZQUFQLEVBQXhDLEVBQStEO0FBQzdEN0IsUUFBQUEsR0FBRyxDQUFDOUksSUFBSixDQUFTLHFCQUFULEVBQWdDUSxVQUFoQyxDQUEyQzdHLFFBQTNDO0FBQ0Q7QUFDRjtBQWhKUSxHQUFYO0FBa0pBLE1BQUlpdEMsVUFBVSxHQUFHO0FBQ2ZsZ0MsSUFBQUEsSUFBSSxFQUFFLGFBRFM7QUFFZnRELElBQUFBLE1BQU0sRUFBRTtBQUNOdWlDLE1BQUFBLFVBQVUsRUFBRTtBQUNWTSxRQUFBQSxZQUFZLEVBQUUsSUFESjtBQUVWSCxRQUFBQSxNQUFNLEVBQUUsSUFGRTtBQUdWTSxRQUFBQSxZQUFZLEVBQUUsRUFISjtBQUlWQyxRQUFBQSxXQUFXLEVBQUU7QUFKSDtBQUROLEtBRk87QUFVZjd5QyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCZy9CLFFBQUFBLFVBQVUsRUFBRTUyQyxRQUFRLENBQUMsRUFBRCxFQUFLMjJDLElBQUw7QUFESSxPQUFULENBQWpCO0FBR0QsS0FmYztBQWdCZjdyQyxJQUFBQSxFQUFFLEVBQUU7QUFDRnl4QixNQUFBQSxVQUFVLEVBQUUsU0FBU0EsVUFBVCxDQUFvQjNrQixNQUFwQixFQUE0QjtBQUN0QyxZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNpTSxNQUFkLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ3JDMUksUUFBQUEsTUFBTSxDQUFDN08sVUFBUCxDQUFrQmxELElBQWxCLENBQXVCK1IsTUFBTSxDQUFDdkQsTUFBUCxDQUFjdWdCLHNCQUFkLEdBQXVDLE1BQTlEO0FBQ0FoZCxRQUFBQSxNQUFNLENBQUM3TyxVQUFQLENBQWtCbEQsSUFBbEIsQ0FBdUIrUixNQUFNLENBQUN2RCxNQUFQLENBQWN1Z0Isc0JBQWQsR0FBdUMsSUFBOUQ7QUFDQSxZQUFJNEgsZUFBZSxHQUFHO0FBQ3BCL2QsVUFBQUEsYUFBYSxFQUFFLENBREs7QUFFcEJKLFVBQUFBLGVBQWUsRUFBRSxDQUZHO0FBR3BCYyxVQUFBQSxjQUFjLEVBQUUsQ0FISTtBQUlwQjBDLFVBQUFBLG1CQUFtQixFQUFFLElBSkQ7QUFLcEI2TixVQUFBQSxlQUFlLEVBQUUsQ0FMRztBQU1wQjlSLFVBQUFBLFlBQVksRUFBRSxDQU5NO0FBT3BCc0MsVUFBQUEsY0FBYyxFQUFFLEtBUEk7QUFRcEJ5RixVQUFBQSxnQkFBZ0IsRUFBRTtBQVJFLFNBQXRCO0FBVUF0UyxRQUFBQSxNQUFNLENBQUN1RSxNQUFNLENBQUN2RCxNQUFSLEVBQWdCbW9CLGVBQWhCLENBQU47QUFDQW5wQixRQUFBQSxNQUFNLENBQUN1RSxNQUFNLENBQUM0YyxjQUFSLEVBQXdCZ0ksZUFBeEIsQ0FBTjtBQUNELE9BakJDO0FBa0JGM1csTUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsQ0FBc0JqTyxNQUF0QixFQUE4QjtBQUMxQyxZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNpTSxNQUFkLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ3JDMUksUUFBQUEsTUFBTSxDQUFDZy9CLFVBQVAsQ0FBa0Ivd0IsWUFBbEI7QUFDRCxPQXJCQztBQXNCRjFELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5QztBQUN0RCxZQUFJZ04sTUFBTSxDQUFDdkQsTUFBUCxDQUFjaU0sTUFBZCxLQUF5QixNQUE3QixFQUFxQztBQUNyQzFJLFFBQUFBLE1BQU0sQ0FBQ2cvQixVQUFQLENBQWtCejBCLGFBQWxCLENBQWdDdlgsUUFBaEM7QUFDRDtBQXpCQztBQWhCVyxHQUFqQjtBQTZDQSxNQUFJa3RDLElBQUksR0FBRztBQUNUanlCLElBQUFBLFlBQVksRUFBRSxTQUFTQSxZQUFULEdBQXdCO0FBQ3BDLFVBQUlqTyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUlvRixNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQUFwQjtBQUFBLFVBQ0lQLEdBQUcsR0FBRzdFLE1BQU0sQ0FBQzhFLFlBRGpCOztBQUdBLFdBQUssSUFBSXhkLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc4ZCxNQUFNLENBQUM3ZCxNQUEzQixFQUFtQ0QsQ0FBQyxJQUFJLENBQXhDLEVBQTJDO0FBQ3pDLFlBQUk4OEIsUUFBUSxHQUFHaGYsTUFBTSxDQUFDdE4sRUFBUCxDQUFVeFEsQ0FBVixDQUFmO0FBQ0EsWUFBSW1rQixRQUFRLEdBQUcyWSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVkzWSxRQUEzQjs7QUFFQSxZQUFJekwsTUFBTSxDQUFDdkQsTUFBUCxDQUFjMGpDLFVBQWQsQ0FBeUJDLGFBQTdCLEVBQTRDO0FBQzFDMzBCLFVBQUFBLFFBQVEsR0FBRy9FLElBQUksQ0FBQ0ssR0FBTCxDQUFTTCxJQUFJLENBQUNpQixHQUFMLENBQVN5YyxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVkzWSxRQUFyQixFQUErQixDQUEvQixDQUFULEVBQTRDLENBQUMsQ0FBN0MsQ0FBWDtBQUNEOztBQUVELFlBQUluVixNQUFNLEdBQUc4dEIsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZelosaUJBQXpCO0FBQ0EsWUFBSTAxQixNQUFNLEdBQUcsQ0FBQyxHQUFELEdBQU81MEIsUUFBcEI7QUFDQSxZQUFJNjBCLE9BQU8sR0FBR0QsTUFBZDtBQUNBLFlBQUlFLE9BQU8sR0FBRyxDQUFkO0FBQ0EsWUFBSWhDLEVBQUUsR0FBRyxDQUFDam9DLE1BQVY7QUFDQSxZQUFJa29DLEVBQUUsR0FBRyxDQUFUOztBQUVBLFlBQUksQ0FBQ3grQixNQUFNLENBQUNnRSxZQUFQLEVBQUwsRUFBNEI7QUFDMUJ3NkIsVUFBQUEsRUFBRSxHQUFHRCxFQUFMO0FBQ0FBLFVBQUFBLEVBQUUsR0FBRyxDQUFMO0FBQ0FnQyxVQUFBQSxPQUFPLEdBQUcsQ0FBQ0QsT0FBWDtBQUNBQSxVQUFBQSxPQUFPLEdBQUcsQ0FBVjtBQUNELFNBTEQsTUFLTyxJQUFJejdCLEdBQUosRUFBUztBQUNkeTdCLFVBQUFBLE9BQU8sR0FBRyxDQUFDQSxPQUFYO0FBQ0Q7O0FBRURsYyxRQUFBQSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVluNkIsS0FBWixDQUFrQnUyQyxNQUFsQixHQUEyQixDQUFDOTVCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUzdCLElBQUksQ0FBQ215QixLQUFMLENBQVdwdEIsUUFBWCxDQUFULENBQUQsR0FBa0NyRyxNQUFNLENBQUM3ZCxNQUFwRTs7QUFFQSxZQUFJeVksTUFBTSxDQUFDdkQsTUFBUCxDQUFjMGpDLFVBQWQsQ0FBeUJiLFlBQTdCLEVBQTJDO0FBQ3pDO0FBQ0EsY0FBSUMsWUFBWSxHQUFHdi9CLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0JvZ0IsUUFBUSxDQUFDL3FCLElBQVQsQ0FBYywyQkFBZCxDQUF4QixHQUFxRStxQixRQUFRLENBQUMvcUIsSUFBVCxDQUFjLDBCQUFkLENBQXhGO0FBQ0EsY0FBSW1tQyxXQUFXLEdBQUd4L0IsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3Qm9nQixRQUFRLENBQUMvcUIsSUFBVCxDQUFjLDRCQUFkLENBQXhCLEdBQXNFK3FCLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsNkJBQWQsQ0FBeEY7O0FBRUEsY0FBSWttQyxZQUFZLENBQUNoNEMsTUFBYixLQUF3QixDQUE1QixFQUErQjtBQUM3Qmc0QyxZQUFBQSxZQUFZLEdBQUcvdUMsQ0FBQyxDQUFDLHVDQUF1Q3dQLE1BQU0sQ0FBQ2dFLFlBQVAsS0FBd0IsTUFBeEIsR0FBaUMsS0FBeEUsSUFBaUYsV0FBbEYsQ0FBaEI7QUFDQW9nQixZQUFBQSxRQUFRLENBQUNwc0IsTUFBVCxDQUFnQnVuQyxZQUFoQjtBQUNEOztBQUVELGNBQUlDLFdBQVcsQ0FBQ2o0QyxNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCaTRDLFlBQUFBLFdBQVcsR0FBR2h2QyxDQUFDLENBQUMsdUNBQXVDd1AsTUFBTSxDQUFDZ0UsWUFBUCxLQUF3QixPQUF4QixHQUFrQyxRQUF6RSxJQUFxRixXQUF0RixDQUFmO0FBQ0FvZ0IsWUFBQUEsUUFBUSxDQUFDcHNCLE1BQVQsQ0FBZ0J3bkMsV0FBaEI7QUFDRDs7QUFFRCxjQUFJRCxZQUFZLENBQUNoNEMsTUFBakIsRUFBeUJnNEMsWUFBWSxDQUFDLENBQUQsQ0FBWixDQUFnQnQxQyxLQUFoQixDQUFzQmlsQyxPQUF0QixHQUFnQ3hvQixJQUFJLENBQUNLLEdBQUwsQ0FBUyxDQUFDMEUsUUFBVixFQUFvQixDQUFwQixDQUFoQztBQUN6QixjQUFJK3pCLFdBQVcsQ0FBQ2o0QyxNQUFoQixFQUF3Qmk0QyxXQUFXLENBQUMsQ0FBRCxDQUFYLENBQWV2MUMsS0FBZixDQUFxQmlsQyxPQUFyQixHQUErQnhvQixJQUFJLENBQUNLLEdBQUwsQ0FBUzBFLFFBQVQsRUFBbUIsQ0FBbkIsQ0FBL0I7QUFDekI7O0FBRUQyWSxRQUFBQSxRQUFRLENBQUN0eEIsU0FBVCxDQUFtQixpQkFBaUJ5ckMsRUFBakIsR0FBc0IsTUFBdEIsR0FBK0JDLEVBQS9CLEdBQW9DLG1CQUFwQyxHQUEwRCtCLE9BQTFELEdBQW9FLGVBQXBFLEdBQXNGRCxPQUF0RixHQUFnRyxNQUFuSDtBQUNEO0FBQ0YsS0FyRFE7QUFzRFQvMUIsSUFBQUEsYUFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBdUJ2WCxRQUF2QixFQUFpQztBQUM5QyxVQUFJZ04sTUFBTSxHQUFHLElBQWI7QUFDQSxVQUFJb0YsTUFBTSxHQUFHcEYsTUFBTSxDQUFDb0YsTUFBcEI7QUFBQSxVQUNJc0YsV0FBVyxHQUFHMUssTUFBTSxDQUFDMEssV0FEekI7QUFBQSxVQUVJckksVUFBVSxHQUFHckMsTUFBTSxDQUFDcUMsVUFGeEI7QUFHQStDLE1BQUFBLE1BQU0sQ0FBQ3ZMLFVBQVAsQ0FBa0I3RyxRQUFsQixFQUE0QnFHLElBQTVCLENBQWlDLDhHQUFqQyxFQUFpSlEsVUFBakosQ0FBNEo3RyxRQUE1Sjs7QUFFQSxVQUFJZ04sTUFBTSxDQUFDdkQsTUFBUCxDQUFjc1IsZ0JBQWQsSUFBa0MvYSxRQUFRLEtBQUssQ0FBbkQsRUFBc0Q7QUFDcEQsWUFBSTRyQyxjQUFjLEdBQUcsS0FBckIsQ0FEb0QsQ0FDeEI7O0FBRTVCeDVCLFFBQUFBLE1BQU0sQ0FBQ3ROLEVBQVAsQ0FBVTRTLFdBQVYsRUFBdUI1USxhQUF2QixDQUFxQyxTQUFTMjVCLGVBQVQsR0FBMkI7QUFDOUQsY0FBSW1MLGNBQUosRUFBb0I7QUFDcEIsY0FBSSxDQUFDNStCLE1BQUQsSUFBV0EsTUFBTSxDQUFDRyxTQUF0QixFQUFpQyxPQUY2QixDQUVyQjs7QUFFekN5K0IsVUFBQUEsY0FBYyxHQUFHLElBQWpCO0FBQ0E1K0IsVUFBQUEsTUFBTSxDQUFDNk8sU0FBUCxHQUFtQixLQUFuQjtBQUNBLGNBQUlnd0IsYUFBYSxHQUFHLENBQUMscUJBQUQsRUFBd0IsZUFBeEIsQ0FBcEI7O0FBRUEsZUFBSyxJQUFJdjNDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd1M0MsYUFBYSxDQUFDdDNDLE1BQWxDLEVBQTBDRCxDQUFDLElBQUksQ0FBL0MsRUFBa0Q7QUFDaEQrYSxZQUFBQSxVQUFVLENBQUNyTixPQUFYLENBQW1CNnBDLGFBQWEsQ0FBQ3YzQyxDQUFELENBQWhDO0FBQ0Q7QUFDRixTQVhEO0FBWUQ7QUFDRjtBQTdFUSxHQUFYO0FBK0VBLE1BQUltNUMsVUFBVSxHQUFHO0FBQ2YxZ0MsSUFBQUEsSUFBSSxFQUFFLGFBRFM7QUFFZnRELElBQUFBLE1BQU0sRUFBRTtBQUNOMGpDLE1BQUFBLFVBQVUsRUFBRTtBQUNWYixRQUFBQSxZQUFZLEVBQUUsSUFESjtBQUVWYyxRQUFBQSxhQUFhLEVBQUU7QUFGTDtBQUROLEtBRk87QUFRZnZ6QyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCbWdDLFFBQUFBLFVBQVUsRUFBRS8zQyxRQUFRLENBQUMsRUFBRCxFQUFLODNDLElBQUw7QUFESSxPQUFULENBQWpCO0FBR0QsS0FiYztBQWNmaHRDLElBQUFBLEVBQUUsRUFBRTtBQUNGeXhCLE1BQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULENBQW9CM2tCLE1BQXBCLEVBQTRCO0FBQ3RDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2lNLE1BQWQsS0FBeUIsTUFBN0IsRUFBcUM7QUFDckMxSSxRQUFBQSxNQUFNLENBQUM3TyxVQUFQLENBQWtCbEQsSUFBbEIsQ0FBdUIrUixNQUFNLENBQUN2RCxNQUFQLENBQWN1Z0Isc0JBQWQsR0FBdUMsTUFBOUQ7QUFDQWhkLFFBQUFBLE1BQU0sQ0FBQzdPLFVBQVAsQ0FBa0JsRCxJQUFsQixDQUF1QitSLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VnQixzQkFBZCxHQUF1QyxJQUE5RDtBQUNBLFlBQUk0SCxlQUFlLEdBQUc7QUFDcEIvZCxVQUFBQSxhQUFhLEVBQUUsQ0FESztBQUVwQkosVUFBQUEsZUFBZSxFQUFFLENBRkc7QUFHcEJjLFVBQUFBLGNBQWMsRUFBRSxDQUhJO0FBSXBCMEMsVUFBQUEsbUJBQW1CLEVBQUUsSUFKRDtBQUtwQmpFLFVBQUFBLFlBQVksRUFBRSxDQUxNO0FBTXBCK0gsVUFBQUEsZ0JBQWdCLEVBQUU7QUFORSxTQUF0QjtBQVFBdFMsUUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDdkQsTUFBUixFQUFnQm1vQixlQUFoQixDQUFOO0FBQ0FucEIsUUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDNGMsY0FBUixFQUF3QmdJLGVBQXhCLENBQU47QUFDRCxPQWZDO0FBZ0JGM1csTUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsQ0FBc0JqTyxNQUF0QixFQUE4QjtBQUMxQyxZQUFJQSxNQUFNLENBQUN2RCxNQUFQLENBQWNpTSxNQUFkLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ3JDMUksUUFBQUEsTUFBTSxDQUFDbWdDLFVBQVAsQ0FBa0JseUIsWUFBbEI7QUFDRCxPQW5CQztBQW9CRjFELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5QztBQUN0RCxZQUFJZ04sTUFBTSxDQUFDdkQsTUFBUCxDQUFjaU0sTUFBZCxLQUF5QixNQUE3QixFQUFxQztBQUNyQzFJLFFBQUFBLE1BQU0sQ0FBQ21nQyxVQUFQLENBQWtCNTFCLGFBQWxCLENBQWdDdlgsUUFBaEM7QUFDRDtBQXZCQztBQWRXLEdBQWpCO0FBeUNBLE1BQUkwdEMsU0FBUyxHQUFHO0FBQ2R6eUIsSUFBQUEsWUFBWSxFQUFFLFNBQVNBLFlBQVQsR0FBd0I7QUFDcEMsVUFBSWpPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSWdtQixXQUFXLEdBQUdobUIsTUFBTSxDQUFDekIsS0FBekI7QUFBQSxVQUNJMG5CLFlBQVksR0FBR2ptQixNQUFNLENBQUN2QixNQUQxQjtBQUFBLFVBRUkyRyxNQUFNLEdBQUdwRixNQUFNLENBQUNvRixNQUZwQjtBQUFBLFVBR0lLLGVBQWUsR0FBR3pGLE1BQU0sQ0FBQ3lGLGVBSDdCO0FBSUEsVUFBSWhKLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2trQyxlQUEzQjtBQUNBLFVBQUkzOEIsWUFBWSxHQUFHaEUsTUFBTSxDQUFDZ0UsWUFBUCxFQUFuQjtBQUNBLFVBQUlsUixTQUFTLEdBQUdrTixNQUFNLENBQUMrSyxTQUF2QjtBQUNBLFVBQUk2MUIsTUFBTSxHQUFHNThCLFlBQVksR0FBRyxDQUFDbFIsU0FBRCxHQUFha3pCLFdBQVcsR0FBRyxDQUE5QixHQUFrQyxDQUFDbHpCLFNBQUQsR0FBYW16QixZQUFZLEdBQUcsQ0FBdkY7QUFDQSxVQUFJb2EsTUFBTSxHQUFHcjhCLFlBQVksR0FBR3ZILE1BQU0sQ0FBQzRqQyxNQUFWLEdBQW1CLENBQUM1akMsTUFBTSxDQUFDNGpDLE1BQXBEO0FBQ0EsVUFBSXQxQixTQUFTLEdBQUd0TyxNQUFNLENBQUNva0MsS0FBdkIsQ0FYb0MsQ0FXTjs7QUFFOUIsV0FBSyxJQUFJdjVDLENBQUMsR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBRzZkLE1BQU0sQ0FBQzdkLE1BQWhDLEVBQXdDRCxDQUFDLEdBQUdDLE1BQTVDLEVBQW9ERCxDQUFDLElBQUksQ0FBekQsRUFBNEQ7QUFDMUQsWUFBSTg4QixRQUFRLEdBQUdoZixNQUFNLENBQUN0TixFQUFQLENBQVV4USxDQUFWLENBQWY7QUFDQSxZQUFJMGYsU0FBUyxHQUFHdkIsZUFBZSxDQUFDbmUsQ0FBRCxDQUEvQjtBQUNBLFlBQUl3NUMsV0FBVyxHQUFHMWMsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZelosaUJBQTlCO0FBQ0EsWUFBSW8yQixnQkFBZ0IsR0FBRyxDQUFDSCxNQUFNLEdBQUdFLFdBQVQsR0FBdUI5NUIsU0FBUyxHQUFHLENBQXBDLElBQXlDQSxTQUF6QyxHQUFxRHZLLE1BQU0sQ0FBQ3VrQyxRQUFuRjtBQUNBLFlBQUlWLE9BQU8sR0FBR3Q4QixZQUFZLEdBQUdxOEIsTUFBTSxHQUFHVSxnQkFBWixHQUErQixDQUF6RDtBQUNBLFlBQUlSLE9BQU8sR0FBR3Y4QixZQUFZLEdBQUcsQ0FBSCxHQUFPcThCLE1BQU0sR0FBR1UsZ0JBQTFDLENBTjBELENBTUU7O0FBRTVELFlBQUlFLFVBQVUsR0FBRyxDQUFDbDJCLFNBQUQsR0FBYXJFLElBQUksQ0FBQzZCLEdBQUwsQ0FBU3c0QixnQkFBVCxDQUE5QjtBQUNBLFlBQUlHLE9BQU8sR0FBR3prQyxNQUFNLENBQUN5a0MsT0FBckIsQ0FUMEQsQ0FTNUI7O0FBRTlCLFlBQUksT0FBT0EsT0FBUCxLQUFtQixRQUFuQixJQUErQkEsT0FBTyxDQUFDM3lDLE9BQVIsQ0FBZ0IsR0FBaEIsTUFBeUIsQ0FBQyxDQUE3RCxFQUFnRTtBQUM5RDJ5QyxVQUFBQSxPQUFPLEdBQUdockMsVUFBVSxDQUFDdUcsTUFBTSxDQUFDeWtDLE9BQVIsQ0FBVixHQUE2QixHQUE3QixHQUFtQ2w2QixTQUE3QztBQUNEOztBQUVELFlBQUlrdEIsVUFBVSxHQUFHbHdCLFlBQVksR0FBRyxDQUFILEdBQU9rOUIsT0FBTyxHQUFHSCxnQkFBOUM7QUFDQSxZQUFJOU0sVUFBVSxHQUFHandCLFlBQVksR0FBR2s5QixPQUFPLEdBQUdILGdCQUFiLEdBQWdDLENBQTdEO0FBQ0EsWUFBSTNULEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSTN3QixNQUFNLENBQUMyd0IsS0FBWixJQUFxQjFtQixJQUFJLENBQUM2QixHQUFMLENBQVN3NEIsZ0JBQVQsQ0FBckMsQ0FqQjBELENBaUJPOztBQUVqRSxZQUFJcjZCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUzByQixVQUFULElBQXVCLEtBQTNCLEVBQWtDQSxVQUFVLEdBQUcsQ0FBYjtBQUNsQyxZQUFJdnRCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUzJyQixVQUFULElBQXVCLEtBQTNCLEVBQWtDQSxVQUFVLEdBQUcsQ0FBYjtBQUNsQyxZQUFJeHRCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUzA0QixVQUFULElBQXVCLEtBQTNCLEVBQWtDQSxVQUFVLEdBQUcsQ0FBYjtBQUNsQyxZQUFJdjZCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUyszQixPQUFULElBQW9CLEtBQXhCLEVBQStCQSxPQUFPLEdBQUcsQ0FBVjtBQUMvQixZQUFJNTVCLElBQUksQ0FBQzZCLEdBQUwsQ0FBU2c0QixPQUFULElBQW9CLEtBQXhCLEVBQStCQSxPQUFPLEdBQUcsQ0FBVjtBQUMvQixZQUFJNzVCLElBQUksQ0FBQzZCLEdBQUwsQ0FBUzZrQixLQUFULElBQWtCLEtBQXRCLEVBQTZCQSxLQUFLLEdBQUcsQ0FBUjtBQUM3QixZQUFJK1QsY0FBYyxHQUFHLGlCQUFpQmxOLFVBQWpCLEdBQThCLEtBQTlCLEdBQXNDQyxVQUF0QyxHQUFtRCxLQUFuRCxHQUEyRCtNLFVBQTNELEdBQXdFLGVBQXhFLEdBQTBGVixPQUExRixHQUFvRyxlQUFwRyxHQUFzSEQsT0FBdEgsR0FBZ0ksYUFBaEksR0FBZ0psVCxLQUFoSixHQUF3SixHQUE3SztBQUNBaEosUUFBQUEsUUFBUSxDQUFDdHhCLFNBQVQsQ0FBbUJxdUMsY0FBbkI7QUFDQS9jLFFBQUFBLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWW42QixLQUFaLENBQWtCdTJDLE1BQWxCLEdBQTJCLENBQUM5NUIsSUFBSSxDQUFDNkIsR0FBTCxDQUFTN0IsSUFBSSxDQUFDbXlCLEtBQUwsQ0FBV2tJLGdCQUFYLENBQVQsQ0FBRCxHQUEwQyxDQUFyRTs7QUFFQSxZQUFJdGtDLE1BQU0sQ0FBQzZpQyxZQUFYLEVBQXlCO0FBQ3ZCO0FBQ0EsY0FBSThCLGVBQWUsR0FBR3A5QixZQUFZLEdBQUdvZ0IsUUFBUSxDQUFDL3FCLElBQVQsQ0FBYywyQkFBZCxDQUFILEdBQWdEK3FCLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsMEJBQWQsQ0FBbEY7QUFDQSxjQUFJZ29DLGNBQWMsR0FBR3I5QixZQUFZLEdBQUdvZ0IsUUFBUSxDQUFDL3FCLElBQVQsQ0FBYyw0QkFBZCxDQUFILEdBQWlEK3FCLFFBQVEsQ0FBQy9xQixJQUFULENBQWMsNkJBQWQsQ0FBbEY7O0FBRUEsY0FBSStuQyxlQUFlLENBQUM3NUMsTUFBaEIsS0FBMkIsQ0FBL0IsRUFBa0M7QUFDaEM2NUMsWUFBQUEsZUFBZSxHQUFHNXdDLENBQUMsQ0FBQyx1Q0FBdUN3VCxZQUFZLEdBQUcsTUFBSCxHQUFZLEtBQS9ELElBQXdFLFdBQXpFLENBQW5CO0FBQ0FvZ0IsWUFBQUEsUUFBUSxDQUFDcHNCLE1BQVQsQ0FBZ0JvcEMsZUFBaEI7QUFDRDs7QUFFRCxjQUFJQyxjQUFjLENBQUM5NUMsTUFBZixLQUEwQixDQUE5QixFQUFpQztBQUMvQjg1QyxZQUFBQSxjQUFjLEdBQUc3d0MsQ0FBQyxDQUFDLHVDQUF1Q3dULFlBQVksR0FBRyxPQUFILEdBQWEsUUFBaEUsSUFBNEUsV0FBN0UsQ0FBbEI7QUFDQW9nQixZQUFBQSxRQUFRLENBQUNwc0IsTUFBVCxDQUFnQnFwQyxjQUFoQjtBQUNEOztBQUVELGNBQUlELGVBQWUsQ0FBQzc1QyxNQUFwQixFQUE0QjY1QyxlQUFlLENBQUMsQ0FBRCxDQUFmLENBQW1CbjNDLEtBQW5CLENBQXlCaWxDLE9BQXpCLEdBQW1DNlIsZ0JBQWdCLEdBQUcsQ0FBbkIsR0FBdUJBLGdCQUF2QixHQUEwQyxDQUE3RTtBQUM1QixjQUFJTSxjQUFjLENBQUM5NUMsTUFBbkIsRUFBMkI4NUMsY0FBYyxDQUFDLENBQUQsQ0FBZCxDQUFrQnAzQyxLQUFsQixDQUF3QmlsQyxPQUF4QixHQUFrQyxDQUFDNlIsZ0JBQUQsR0FBb0IsQ0FBcEIsR0FBd0IsQ0FBQ0EsZ0JBQXpCLEdBQTRDLENBQTlFO0FBQzVCO0FBQ0Y7QUFDRixLQTlEYTtBQStEZHgyQixJQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QnZYLFFBQXZCLEVBQWlDO0FBQzlDLFVBQUlnTixNQUFNLEdBQUcsSUFBYjtBQUNBQSxNQUFBQSxNQUFNLENBQUNvRixNQUFQLENBQWN2TCxVQUFkLENBQXlCN0csUUFBekIsRUFBbUNxRyxJQUFuQyxDQUF3Qyw4R0FBeEMsRUFBd0pRLFVBQXhKLENBQW1LN0csUUFBbks7QUFDRDtBQWxFYSxHQUFoQjtBQW9FQSxNQUFJc3VDLGVBQWUsR0FBRztBQUNwQnZoQyxJQUFBQSxJQUFJLEVBQUUsa0JBRGM7QUFFcEJ0RCxJQUFBQSxNQUFNLEVBQUU7QUFDTmtrQyxNQUFBQSxlQUFlLEVBQUU7QUFDZk4sUUFBQUEsTUFBTSxFQUFFLEVBRE87QUFFZmEsUUFBQUEsT0FBTyxFQUFFLENBRk07QUFHZkwsUUFBQUEsS0FBSyxFQUFFLEdBSFE7QUFJZnpULFFBQUFBLEtBQUssRUFBRSxDQUpRO0FBS2Y0VCxRQUFBQSxRQUFRLEVBQUUsQ0FMSztBQU1mMUIsUUFBQUEsWUFBWSxFQUFFO0FBTkM7QUFEWCxLQUZZO0FBWXBCenlDLElBQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCO0FBQ3hCLFVBQUltVCxNQUFNLEdBQUcsSUFBYjtBQUNBNUQsTUFBQUEsaUJBQWlCLENBQUM0RCxNQUFELEVBQVM7QUFDeEIyZ0MsUUFBQUEsZUFBZSxFQUFFdjRDLFFBQVEsQ0FBQyxFQUFELEVBQUtzNEMsU0FBTDtBQURELE9BQVQsQ0FBakI7QUFHRCxLQWpCbUI7QUFrQnBCeHRDLElBQUFBLEVBQUUsRUFBRTtBQUNGeXhCLE1BQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULENBQW9CM2tCLE1BQXBCLEVBQTRCO0FBQ3RDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2lNLE1BQWQsS0FBeUIsV0FBN0IsRUFBMEM7QUFDMUMxSSxRQUFBQSxNQUFNLENBQUM3TyxVQUFQLENBQWtCbEQsSUFBbEIsQ0FBdUIrUixNQUFNLENBQUN2RCxNQUFQLENBQWN1Z0Isc0JBQWQsR0FBdUMsV0FBOUQ7QUFDQWhkLFFBQUFBLE1BQU0sQ0FBQzdPLFVBQVAsQ0FBa0JsRCxJQUFsQixDQUF1QitSLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY3VnQixzQkFBZCxHQUF1QyxJQUE5RDtBQUNBaGQsUUFBQUEsTUFBTSxDQUFDdkQsTUFBUCxDQUFjd04sbUJBQWQsR0FBb0MsSUFBcEM7QUFDQWpLLFFBQUFBLE1BQU0sQ0FBQzRjLGNBQVAsQ0FBc0IzUyxtQkFBdEIsR0FBNEMsSUFBNUM7QUFDRCxPQVBDO0FBUUZnRSxNQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxDQUFzQmpPLE1BQXRCLEVBQThCO0FBQzFDLFlBQUlBLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2lNLE1BQWQsS0FBeUIsV0FBN0IsRUFBMEM7QUFDMUMxSSxRQUFBQSxNQUFNLENBQUMyZ0MsZUFBUCxDQUF1QjF5QixZQUF2QjtBQUNELE9BWEM7QUFZRjFELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5QztBQUN0RCxZQUFJZ04sTUFBTSxDQUFDdkQsTUFBUCxDQUFjaU0sTUFBZCxLQUF5QixXQUE3QixFQUEwQztBQUMxQzFJLFFBQUFBLE1BQU0sQ0FBQzJnQyxlQUFQLENBQXVCcDJCLGFBQXZCLENBQXFDdlgsUUFBckM7QUFDRDtBQWZDO0FBbEJnQixHQUF0QjtBQXFDQSxNQUFJdXVDLE1BQU0sR0FBRztBQUNYcmdDLElBQUFBLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFVBQUlsQixNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUl3aEMsWUFBWSxHQUFHeGhDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2dsQyxNQUFqQztBQUNBLFVBQUl6aEMsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3JoQyxXQUFsQixFQUErQixPQUFPLEtBQVA7QUFDL0JKLE1BQUFBLE1BQU0sQ0FBQ3loQyxNQUFQLENBQWNyaEMsV0FBZCxHQUE0QixJQUE1QjtBQUNBLFVBQUlzaEMsV0FBVyxHQUFHMWhDLE1BQU0sQ0FBQ25YLFdBQXpCOztBQUVBLFVBQUkyNEMsWUFBWSxDQUFDeGhDLE1BQWIsWUFBK0IwaEMsV0FBbkMsRUFBZ0Q7QUFDOUMxaEMsUUFBQUEsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3poQyxNQUFkLEdBQXVCd2hDLFlBQVksQ0FBQ3hoQyxNQUFwQztBQUNBdkUsUUFBQUEsTUFBTSxDQUFDdUUsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3poQyxNQUFkLENBQXFCNGMsY0FBdEIsRUFBc0M7QUFDMUMzUyxVQUFBQSxtQkFBbUIsRUFBRSxJQURxQjtBQUUxQzJELFVBQUFBLG1CQUFtQixFQUFFO0FBRnFCLFNBQXRDLENBQU47QUFJQW5TLFFBQUFBLE1BQU0sQ0FBQ3VFLE1BQU0sQ0FBQ3loQyxNQUFQLENBQWN6aEMsTUFBZCxDQUFxQnZELE1BQXRCLEVBQThCO0FBQ2xDd04sVUFBQUEsbUJBQW1CLEVBQUUsSUFEYTtBQUVsQzJELFVBQUFBLG1CQUFtQixFQUFFO0FBRmEsU0FBOUIsQ0FBTjtBQUlELE9BVkQsTUFVTyxJQUFJclMsUUFBUSxDQUFDaW1DLFlBQVksQ0FBQ3hoQyxNQUFkLENBQVosRUFBbUM7QUFDeENBLFFBQUFBLE1BQU0sQ0FBQ3loQyxNQUFQLENBQWN6aEMsTUFBZCxHQUF1QixJQUFJMGhDLFdBQUosQ0FBZ0JqbUMsTUFBTSxDQUFDLEVBQUQsRUFBSytsQyxZQUFZLENBQUN4aEMsTUFBbEIsRUFBMEI7QUFDckVrSyxVQUFBQSxxQkFBcUIsRUFBRSxJQUQ4QztBQUVyRUQsVUFBQUEsbUJBQW1CLEVBQUUsSUFGZ0Q7QUFHckUyRCxVQUFBQSxtQkFBbUIsRUFBRTtBQUhnRCxTQUExQixDQUF0QixDQUF2QjtBQUtBNU4sUUFBQUEsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY0UsYUFBZCxHQUE4QixJQUE5QjtBQUNEOztBQUVEM2hDLE1BQUFBLE1BQU0sQ0FBQ3loQyxNQUFQLENBQWN6aEMsTUFBZCxDQUFxQm1DLEdBQXJCLENBQXlCcFIsUUFBekIsQ0FBa0NpUCxNQUFNLENBQUN2RCxNQUFQLENBQWNnbEMsTUFBZCxDQUFxQkcsb0JBQXZEO0FBQ0E1aEMsTUFBQUEsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3poQyxNQUFkLENBQXFCOU0sRUFBckIsQ0FBd0IsS0FBeEIsRUFBK0I4TSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjSSxZQUE3QztBQUNBLGFBQU8sSUFBUDtBQUNELEtBOUJVO0FBK0JYQSxJQUFBQSxZQUFZLEVBQUUsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQyxVQUFJN2hDLE1BQU0sR0FBRyxJQUFiO0FBQ0EsVUFBSThoQyxZQUFZLEdBQUc5aEMsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3poQyxNQUFqQztBQUNBLFVBQUksQ0FBQzhoQyxZQUFMLEVBQW1CO0FBQ25CLFVBQUluMEIsWUFBWSxHQUFHbTBCLFlBQVksQ0FBQ24wQixZQUFoQztBQUNBLFVBQUlELFlBQVksR0FBR28wQixZQUFZLENBQUNwMEIsWUFBaEM7QUFDQSxVQUFJQSxZQUFZLElBQUlsZCxDQUFDLENBQUNrZCxZQUFELENBQUQsQ0FBZ0J0YixRQUFoQixDQUF5QjROLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2dsQyxNQUFkLENBQXFCTSxxQkFBOUMsQ0FBcEIsRUFBMEY7QUFDMUYsVUFBSSxPQUFPcDBCLFlBQVAsS0FBd0IsV0FBeEIsSUFBdUNBLFlBQVksS0FBSyxJQUE1RCxFQUFrRTtBQUNsRSxVQUFJaUUsWUFBSjs7QUFFQSxVQUFJa3dCLFlBQVksQ0FBQ3JsQyxNQUFiLENBQW9Ca1EsSUFBeEIsRUFBOEI7QUFDNUJpRixRQUFBQSxZQUFZLEdBQUcxTixRQUFRLENBQUMxVCxDQUFDLENBQUNzeEMsWUFBWSxDQUFDcDBCLFlBQWQsQ0FBRCxDQUE2QmxiLElBQTdCLENBQWtDLHlCQUFsQyxDQUFELEVBQStELEVBQS9ELENBQXZCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xvZixRQUFBQSxZQUFZLEdBQUdqRSxZQUFmO0FBQ0Q7O0FBRUQsVUFBSTNOLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2tRLElBQWxCLEVBQXdCO0FBQ3RCLFlBQUlxMUIsWUFBWSxHQUFHaGlDLE1BQU0sQ0FBQzBLLFdBQTFCOztBQUVBLFlBQUkxSyxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCa3FDLFlBQWpCLEVBQStCNXZDLFFBQS9CLENBQXdDNE4sTUFBTSxDQUFDdkQsTUFBUCxDQUFjbVEsbUJBQXRELENBQUosRUFBZ0Y7QUFDOUU1TSxVQUFBQSxNQUFNLENBQUM2USxPQUFQLEdBRDhFLENBQzVEOztBQUVsQjdRLFVBQUFBLE1BQU0sQ0FBQzhRLFdBQVAsR0FBcUI5USxNQUFNLENBQUNxQyxVQUFQLENBQWtCLENBQWxCLEVBQXFCM0wsVUFBMUM7QUFDQXNyQyxVQUFBQSxZQUFZLEdBQUdoaUMsTUFBTSxDQUFDMEssV0FBdEI7QUFDRDs7QUFFRCxZQUFJMEcsU0FBUyxHQUFHcFIsTUFBTSxDQUFDb0YsTUFBUCxDQUFjdE4sRUFBZCxDQUFpQmtxQyxZQUFqQixFQUErQmxwQyxPQUEvQixDQUF1QyxnQ0FBZ0M4WSxZQUFoQyxHQUErQyxLQUF0RixFQUE2RjlaLEVBQTdGLENBQWdHLENBQWhHLEVBQW1HVixLQUFuRyxFQUFoQjtBQUNBLFlBQUkwRSxTQUFTLEdBQUdrRSxNQUFNLENBQUNvRixNQUFQLENBQWN0TixFQUFkLENBQWlCa3FDLFlBQWpCLEVBQStCdnBDLE9BQS9CLENBQXVDLGdDQUFnQ21aLFlBQWhDLEdBQStDLEtBQXRGLEVBQTZGOVosRUFBN0YsQ0FBZ0csQ0FBaEcsRUFBbUdWLEtBQW5HLEVBQWhCO0FBQ0EsWUFBSSxPQUFPZ2EsU0FBUCxLQUFxQixXQUF6QixFQUFzQ1EsWUFBWSxHQUFHOVYsU0FBZixDQUF0QyxLQUFvRSxJQUFJLE9BQU9BLFNBQVAsS0FBcUIsV0FBekIsRUFBc0M4VixZQUFZLEdBQUdSLFNBQWYsQ0FBdEMsS0FBb0UsSUFBSXRWLFNBQVMsR0FBR2ttQyxZQUFaLEdBQTJCQSxZQUFZLEdBQUc1d0IsU0FBOUMsRUFBeURRLFlBQVksR0FBRzlWLFNBQWYsQ0FBekQsS0FBdUY4VixZQUFZLEdBQUdSLFNBQWY7QUFDaE87O0FBRURwUixNQUFBQSxNQUFNLENBQUN3UCxPQUFQLENBQWVvQyxZQUFmO0FBQ0QsS0EvRFU7QUFnRVgvRCxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjRCLE9BQWhCLEVBQXlCO0FBQy9CLFVBQUl6UCxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUk4aEMsWUFBWSxHQUFHOWhDLE1BQU0sQ0FBQ3loQyxNQUFQLENBQWN6aEMsTUFBakM7QUFDQSxVQUFJLENBQUM4aEMsWUFBTCxFQUFtQjtBQUNuQixVQUFJajdCLGFBQWEsR0FBR2k3QixZQUFZLENBQUNybEMsTUFBYixDQUFvQm9LLGFBQXBCLEtBQXNDLE1BQXRDLEdBQStDaTdCLFlBQVksQ0FBQ253QixvQkFBYixFQUEvQyxHQUFxRm13QixZQUFZLENBQUNybEMsTUFBYixDQUFvQm9LLGFBQTdIO0FBQ0EsVUFBSW83QixnQkFBZ0IsR0FBR2ppQyxNQUFNLENBQUN2RCxNQUFQLENBQWNnbEMsTUFBZCxDQUFxQlEsZ0JBQTVDO0FBQ0EsVUFBSUMsU0FBUyxHQUFHRCxnQkFBZ0IsSUFBSSxDQUFDSCxZQUFZLENBQUNybEMsTUFBYixDQUFvQmtRLElBQXpEOztBQUVBLFVBQUkzTSxNQUFNLENBQUNtTSxTQUFQLEtBQXFCMjFCLFlBQVksQ0FBQzMxQixTQUFsQyxJQUErQysxQixTQUFuRCxFQUE4RDtBQUM1RCxZQUFJQyxrQkFBa0IsR0FBR0wsWUFBWSxDQUFDcDNCLFdBQXRDO0FBQ0EsWUFBSTAzQixjQUFKO0FBQ0EsWUFBSTl5QixTQUFKOztBQUVBLFlBQUl3eUIsWUFBWSxDQUFDcmxDLE1BQWIsQ0FBb0JrUSxJQUF4QixFQUE4QjtBQUM1QixjQUFJbTFCLFlBQVksQ0FBQzE4QixNQUFiLENBQW9CdE4sRUFBcEIsQ0FBdUJxcUMsa0JBQXZCLEVBQTJDL3ZDLFFBQTNDLENBQW9EMHZDLFlBQVksQ0FBQ3JsQyxNQUFiLENBQW9CbVEsbUJBQXhFLENBQUosRUFBa0c7QUFDaEdrMUIsWUFBQUEsWUFBWSxDQUFDanhCLE9BQWIsR0FEZ0csQ0FDeEU7O0FBRXhCaXhCLFlBQUFBLFlBQVksQ0FBQ2h4QixXQUFiLEdBQTJCZ3hCLFlBQVksQ0FBQ3ovQixVQUFiLENBQXdCLENBQXhCLEVBQTJCM0wsVUFBdEQ7QUFDQXlyQyxZQUFBQSxrQkFBa0IsR0FBR0wsWUFBWSxDQUFDcDNCLFdBQWxDO0FBQ0QsV0FOMkIsQ0FNMUI7OztBQUdGLGNBQUkyM0IsZUFBZSxHQUFHUCxZQUFZLENBQUMxOEIsTUFBYixDQUFvQnROLEVBQXBCLENBQXVCcXFDLGtCQUF2QixFQUEyQ3JwQyxPQUEzQyxDQUFtRCxnQ0FBZ0NrSCxNQUFNLENBQUNtTSxTQUF2QyxHQUFtRCxLQUF0RyxFQUE2R3JVLEVBQTdHLENBQWdILENBQWhILEVBQW1IVixLQUFuSCxFQUF0QjtBQUNBLGNBQUlrckMsZUFBZSxHQUFHUixZQUFZLENBQUMxOEIsTUFBYixDQUFvQnROLEVBQXBCLENBQXVCcXFDLGtCQUF2QixFQUEyQzFwQyxPQUEzQyxDQUFtRCxnQ0FBZ0N1SCxNQUFNLENBQUNtTSxTQUF2QyxHQUFtRCxLQUF0RyxFQUE2R3JVLEVBQTdHLENBQWdILENBQWhILEVBQW1IVixLQUFuSCxFQUF0Qjs7QUFFQSxjQUFJLE9BQU9pckMsZUFBUCxLQUEyQixXQUEvQixFQUE0QztBQUMxQ0QsWUFBQUEsY0FBYyxHQUFHRSxlQUFqQjtBQUNELFdBRkQsTUFFTyxJQUFJLE9BQU9BLGVBQVAsS0FBMkIsV0FBL0IsRUFBNEM7QUFDakRGLFlBQUFBLGNBQWMsR0FBR0MsZUFBakI7QUFDRCxXQUZNLE1BRUEsSUFBSUMsZUFBZSxHQUFHSCxrQkFBbEIsS0FBeUNBLGtCQUFrQixHQUFHRSxlQUFsRSxFQUFtRjtBQUN4RkQsWUFBQUEsY0FBYyxHQUFHTixZQUFZLENBQUNybEMsTUFBYixDQUFvQjhLLGNBQXBCLEdBQXFDLENBQXJDLEdBQXlDKzZCLGVBQXpDLEdBQTJESCxrQkFBNUU7QUFDRCxXQUZNLE1BRUEsSUFBSUcsZUFBZSxHQUFHSCxrQkFBbEIsR0FBdUNBLGtCQUFrQixHQUFHRSxlQUFoRSxFQUFpRjtBQUN0RkQsWUFBQUEsY0FBYyxHQUFHRSxlQUFqQjtBQUNELFdBRk0sTUFFQTtBQUNMRixZQUFBQSxjQUFjLEdBQUdDLGVBQWpCO0FBQ0Q7O0FBRUQveUIsVUFBQUEsU0FBUyxHQUFHdFAsTUFBTSxDQUFDMEssV0FBUCxHQUFxQjFLLE1BQU0sQ0FBQ2tOLGFBQTVCLEdBQTRDLE1BQTVDLEdBQXFELE1BQWpFO0FBQ0QsU0F6QkQsTUF5Qk87QUFDTGsxQixVQUFBQSxjQUFjLEdBQUdwaUMsTUFBTSxDQUFDbU0sU0FBeEI7QUFDQW1ELFVBQUFBLFNBQVMsR0FBRzh5QixjQUFjLEdBQUdwaUMsTUFBTSxDQUFDa04sYUFBeEIsR0FBd0MsTUFBeEMsR0FBaUQsTUFBN0Q7QUFDRDs7QUFFRCxZQUFJZzFCLFNBQUosRUFBZTtBQUNiRSxVQUFBQSxjQUFjLElBQUk5eUIsU0FBUyxLQUFLLE1BQWQsR0FBdUIyeUIsZ0JBQXZCLEdBQTBDLENBQUMsQ0FBRCxHQUFLQSxnQkFBakU7QUFDRDs7QUFFRCxZQUFJSCxZQUFZLENBQUM1MkIsb0JBQWIsSUFBcUM0MkIsWUFBWSxDQUFDNTJCLG9CQUFiLENBQWtDM2MsT0FBbEMsQ0FBMEM2ekMsY0FBMUMsSUFBNEQsQ0FBckcsRUFBd0c7QUFDdEcsY0FBSU4sWUFBWSxDQUFDcmxDLE1BQWIsQ0FBb0I2TCxjQUF4QixFQUF3QztBQUN0QyxnQkFBSTg1QixjQUFjLEdBQUdELGtCQUFyQixFQUF5QztBQUN2Q0MsY0FBQUEsY0FBYyxHQUFHQSxjQUFjLEdBQUcxN0IsSUFBSSxDQUFDQyxLQUFMLENBQVdFLGFBQWEsR0FBRyxDQUEzQixDQUFqQixHQUFpRCxDQUFsRTtBQUNELGFBRkQsTUFFTztBQUNMdTdCLGNBQUFBLGNBQWMsR0FBR0EsY0FBYyxHQUFHMTdCLElBQUksQ0FBQ0MsS0FBTCxDQUFXRSxhQUFhLEdBQUcsQ0FBM0IsQ0FBakIsR0FBaUQsQ0FBbEU7QUFDRDtBQUNGLFdBTkQsTUFNTyxJQUFJdTdCLGNBQWMsR0FBR0Qsa0JBQWpCLElBQXVDTCxZQUFZLENBQUNybEMsTUFBYixDQUFvQjhLLGNBQXBCLEtBQXVDLENBQWxGLEVBQXFGOztBQUU1RnU2QixVQUFBQSxZQUFZLENBQUN0eUIsT0FBYixDQUFxQjR5QixjQUFyQixFQUFxQzN5QixPQUFPLEdBQUcsQ0FBSCxHQUFPOWdCLFNBQW5EO0FBQ0Q7QUFDRixPQTFEOEIsQ0EwRDdCOzs7QUFHRixVQUFJNHpDLGdCQUFnQixHQUFHLENBQXZCO0FBQ0EsVUFBSUMsZ0JBQWdCLEdBQUd4aUMsTUFBTSxDQUFDdkQsTUFBUCxDQUFjZ2xDLE1BQWQsQ0FBcUJNLHFCQUE1Qzs7QUFFQSxVQUFJL2hDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY29LLGFBQWQsR0FBOEIsQ0FBOUIsSUFBbUMsQ0FBQzdHLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBYzZMLGNBQXRELEVBQXNFO0FBQ3BFaTZCLFFBQUFBLGdCQUFnQixHQUFHdmlDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY29LLGFBQWpDO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDN0csTUFBTSxDQUFDdkQsTUFBUCxDQUFjZ2xDLE1BQWQsQ0FBcUJnQixvQkFBMUIsRUFBZ0Q7QUFDOUNGLFFBQUFBLGdCQUFnQixHQUFHLENBQW5CO0FBQ0Q7O0FBRURBLE1BQUFBLGdCQUFnQixHQUFHNzdCLElBQUksQ0FBQ0MsS0FBTCxDQUFXNDdCLGdCQUFYLENBQW5CO0FBQ0FULE1BQUFBLFlBQVksQ0FBQzE4QixNQUFiLENBQW9CMVQsV0FBcEIsQ0FBZ0M4d0MsZ0JBQWhDOztBQUVBLFVBQUlWLFlBQVksQ0FBQ3JsQyxNQUFiLENBQW9Ca1EsSUFBcEIsSUFBNEJtMUIsWUFBWSxDQUFDcmxDLE1BQWIsQ0FBb0J3SSxPQUFwQixJQUErQjY4QixZQUFZLENBQUNybEMsTUFBYixDQUFvQndJLE9BQXBCLENBQTRCQyxPQUEzRixFQUFvRztBQUNsRyxhQUFLLElBQUk1ZCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaTdDLGdCQUFwQixFQUFzQ2o3QyxDQUFDLElBQUksQ0FBM0MsRUFBOEM7QUFDNUN3NkMsVUFBQUEsWUFBWSxDQUFDei9CLFVBQWIsQ0FBd0J0WSxRQUF4QixDQUFpQyxpQ0FBaUNpVyxNQUFNLENBQUNtTSxTQUFQLEdBQW1CN2tCLENBQXBELElBQXlELEtBQTFGLEVBQWlHeUosUUFBakcsQ0FBMEd5eEMsZ0JBQTFHO0FBQ0Q7QUFDRixPQUpELE1BSU87QUFDTCxhQUFLLElBQUkxNUIsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR3k1QixnQkFBdEIsRUFBd0N6NUIsRUFBRSxJQUFJLENBQTlDLEVBQWlEO0FBQy9DZzVCLFVBQUFBLFlBQVksQ0FBQzE4QixNQUFiLENBQW9CdE4sRUFBcEIsQ0FBdUJrSSxNQUFNLENBQUNtTSxTQUFQLEdBQW1CckQsRUFBMUMsRUFBOEMvWCxRQUE5QyxDQUF1RHl4QyxnQkFBdkQ7QUFDRDtBQUNGO0FBQ0Y7QUFwSlUsR0FBYjtBQXNKQSxNQUFJRSxRQUFRLEdBQUc7QUFDYjNpQyxJQUFBQSxJQUFJLEVBQUUsUUFETztBQUVidEQsSUFBQUEsTUFBTSxFQUFFO0FBQ05nbEMsTUFBQUEsTUFBTSxFQUFFO0FBQ056aEMsUUFBQUEsTUFBTSxFQUFFLElBREY7QUFFTnlpQyxRQUFBQSxvQkFBb0IsRUFBRSxJQUZoQjtBQUdOUixRQUFBQSxnQkFBZ0IsRUFBRSxDQUhaO0FBSU5GLFFBQUFBLHFCQUFxQixFQUFFLDJCQUpqQjtBQUtOSCxRQUFBQSxvQkFBb0IsRUFBRTtBQUxoQjtBQURGLEtBRks7QUFXYi8wQyxJQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtBQUN4QixVQUFJbVQsTUFBTSxHQUFHLElBQWI7QUFDQTVELE1BQUFBLGlCQUFpQixDQUFDNEQsTUFBRCxFQUFTO0FBQ3hCeWhDLFFBQUFBLE1BQU0sRUFBRXI1QyxRQUFRLENBQUM7QUFDZjRYLFVBQUFBLE1BQU0sRUFBRSxJQURPO0FBRWZJLFVBQUFBLFdBQVcsRUFBRTtBQUZFLFNBQUQsRUFHYm1oQyxNQUhhO0FBRFEsT0FBVCxDQUFqQjtBQU1ELEtBbkJZO0FBb0JicnVDLElBQUFBLEVBQUUsRUFBRTtBQUNGeXhCLE1BQUFBLFVBQVUsRUFBRSxTQUFTQSxVQUFULENBQW9CM2tCLE1BQXBCLEVBQTRCO0FBQ3RDLFlBQUl5aEMsTUFBTSxHQUFHemhDLE1BQU0sQ0FBQ3ZELE1BQVAsQ0FBY2dsQyxNQUEzQjtBQUNBLFlBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE1BQU0sQ0FBQ3poQyxNQUF2QixFQUErQjtBQUMvQkEsUUFBQUEsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY3ZnQyxJQUFkO0FBQ0FsQixRQUFBQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjNXpCLE1BQWQsQ0FBcUIsSUFBckI7QUFDRCxPQU5DO0FBT0ZzbkIsTUFBQUEsV0FBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJuMUIsTUFBckIsRUFBNkI7QUFDeEMsWUFBSSxDQUFDQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQW5CLEVBQTJCO0FBQzNCQSxRQUFBQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjNXpCLE1BQWQ7QUFDRCxPQVZDO0FBV0ZBLE1BQUFBLE1BQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCN04sTUFBaEIsRUFBd0I7QUFDOUIsWUFBSSxDQUFDQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQW5CLEVBQTJCO0FBQzNCQSxRQUFBQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjNXpCLE1BQWQ7QUFDRCxPQWRDO0FBZUY1TixNQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQkQsTUFBaEIsRUFBd0I7QUFDOUIsWUFBSSxDQUFDQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQW5CLEVBQTJCO0FBQzNCQSxRQUFBQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjNXpCLE1BQWQ7QUFDRCxPQWxCQztBQW1CRmpNLE1BQUFBLGNBQWMsRUFBRSxTQUFTQSxjQUFULENBQXdCNUIsTUFBeEIsRUFBZ0M7QUFDOUMsWUFBSSxDQUFDQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQW5CLEVBQTJCO0FBQzNCQSxRQUFBQSxNQUFNLENBQUN5aEMsTUFBUCxDQUFjNXpCLE1BQWQ7QUFDRCxPQXRCQztBQXVCRnRELE1BQUFBLGFBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdkssTUFBdkIsRUFBK0JoTixRQUEvQixFQUF5QztBQUN0RCxZQUFJOHVDLFlBQVksR0FBRzloQyxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQWpDO0FBQ0EsWUFBSSxDQUFDOGhDLFlBQUwsRUFBbUI7QUFDbkJBLFFBQUFBLFlBQVksQ0FBQ3YzQixhQUFiLENBQTJCdlgsUUFBM0I7QUFDRCxPQTNCQztBQTRCRjJ2QyxNQUFBQSxhQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QjNpQyxNQUF2QixFQUErQjtBQUM1QyxZQUFJOGhDLFlBQVksR0FBRzloQyxNQUFNLENBQUN5aEMsTUFBUCxDQUFjemhDLE1BQWpDO0FBQ0EsWUFBSSxDQUFDOGhDLFlBQUwsRUFBbUI7O0FBRW5CLFlBQUk5aEMsTUFBTSxDQUFDeWhDLE1BQVAsQ0FBY0UsYUFBZCxJQUErQkcsWUFBbkMsRUFBaUQ7QUFDL0NBLFVBQUFBLFlBQVksQ0FBQzFnQyxPQUFiO0FBQ0Q7QUFDRjtBQW5DQztBQXBCUyxHQUFmLENBM2lUbUIsQ0FzbVRuQjs7QUFDQSxNQUFJd2hDLFVBQVUsR0FBRyxDQUFDbGUsU0FBRCxFQUFZNkIsVUFBWixFQUF3QjBELFlBQXhCLEVBQXNDYSxZQUF0QyxFQUFvRHNELFlBQXBELEVBQWtFb0MsV0FBbEUsRUFBK0VTLFVBQS9FLEVBQTJGOEQsTUFBM0YsRUFBbUdrQyxNQUFuRyxFQUEyR3dCLFlBQTNHLEVBQXlINEMsTUFBekgsRUFBaUlxQixTQUFqSSxFQUE0SVMsZ0JBQTVJLEVBQThKZ0IsVUFBOUosRUFBMEtXLFVBQTFLLEVBQXNMbUIsVUFBdEwsRUFBa01RLFVBQWxNLEVBQThNYSxlQUE5TSxFQUErTm9CLFFBQS9OLENBQWpCO0FBQ0F4N0MsRUFBQUEsTUFBTSxDQUFDbzdCLEdBQVAsQ0FBV3NnQixVQUFYO0FBRUEsU0FBTzE3QyxNQUFQO0FBRUQsQ0FoblRBLENBQUQ7O0FBbW5UQSxJQUFNOFksTUFBTSxHQUFHLElBQUk5WSxNQUFKLENBQVcsbUJBQVgsRUFBZ0M7QUFDM0N5bEIsRUFBQUEsSUFBSSxFQUFFLElBRHFDO0FBRTNDNmUsRUFBQUEsVUFBVSxFQUFFO0FBQ1J6N0IsSUFBQUEsRUFBRSxFQUFFLG9CQURJO0FBRVIwN0IsSUFBQUEsU0FBUyxFQUFFO0FBRkgsR0FGK0I7QUFNM0NqUixFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsTUFBTSxFQUFFLHFCQURBO0FBRVJDLElBQUFBLE1BQU0sRUFBRTtBQUZBO0FBTitCLENBQWhDLENBQWY7O0FBWUEsSUFBTW1vQixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUM5eUMsRUFBRCxFQUFRO0FBRTdCLE1BQU0reUMsYUFBYSxHQUFHL3lDLEVBQUUsQ0FBQ3RHLGFBQUgsQ0FBaUIsZ0JBQWpCLENBQXRCO0FBQ0EsTUFBTXM1QyxhQUFhLEdBQUdoekMsRUFBRSxDQUFDdEcsYUFBSCxDQUFpQixnQkFBakIsQ0FBdEI7QUFDQSxNQUFNdTVDLG9CQUFvQixHQUFHRCxhQUFhLENBQUN0NUMsYUFBZCxDQUE0Qix5QkFBNUIsQ0FBN0I7QUFDQSxNQUFNdzVDLG9CQUFvQixHQUFHRixhQUFhLENBQUN0NUMsYUFBZCxDQUE0Qix5QkFBNUIsQ0FBN0I7QUFDQSxNQUFNeTVDLFlBQVksR0FBR0Qsb0JBQW9CLENBQUNsNUMsUUFBckIsQ0FBOEJ4QyxNQUFuRDtBQUVBLE1BQUk0N0MsY0FBYyxHQUFHLEVBQXJCOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ3oxQyxDQUFELEVBQU87QUFDN0IsUUFBTTAxQyxpQkFBaUIsR0FBRyxDQUFDTixhQUFhLENBQUN4d0MsUUFBZCxDQUF1QjZCLEtBQUssQ0FBQ2hOLE1BQTdCLENBQTNCOztBQUNBLFFBQUlpOEMsaUJBQUosRUFBdUI7QUFDbkJDLE1BQUFBLGlCQUFpQjtBQUNwQjtBQUNKLEdBTEQ7O0FBT0EsTUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixHQUFNO0FBQzNCUixJQUFBQSxhQUFhLENBQUN2eEMsU0FBZCxDQUF3QkMsR0FBeEIsQ0FBNEIsdUJBQTVCO0FBQ0FzeEMsSUFBQUEsYUFBYSxDQUFDNzRDLFlBQWQsQ0FBMkIsYUFBM0IsRUFBMEMsS0FBMUM7O0FBRUEsUUFBSWk1QyxjQUFKLEVBQW9CLENBRW5COztBQUVEbDRDLElBQUFBLFFBQVEsQ0FBQzdCLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DZzZDLGlCQUFuQztBQUNILEdBVEQ7O0FBV0EsTUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixHQUFNO0FBQzVCUCxJQUFBQSxhQUFhLENBQUN2eEMsU0FBZCxDQUF3Qk0sTUFBeEIsQ0FBK0IsdUJBQS9CO0FBQ0FpeEMsSUFBQUEsYUFBYSxDQUFDNzRDLFlBQWQsQ0FBMkIsYUFBM0IsRUFBMEMsSUFBMUM7QUFFQWUsSUFBQUEsUUFBUSxDQUFDNUIsbUJBQVQsQ0FBNkIsT0FBN0IsRUFBc0MrNUMsaUJBQXRDO0FBQ0gsR0FMRDs7QUFPQSxNQUFNSSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUN2MEMsS0FBRCxFQUFXO0FBQ2xDLFFBQU13MEMsU0FBUyxHQUFHTixjQUFsQjtBQUNBLFFBQU1PLFdBQVcsR0FBR1Qsb0JBQW9CLENBQUN4NUMsYUFBckIseUJBQ0FnNkMsU0FEQSxRQUFwQjtBQUdBLFFBQU1FLE9BQU8sR0FBR1Ysb0JBQW9CLENBQUN4NUMsYUFBckIseUJBQW1Ed0YsS0FBbkQsUUFBaEI7O0FBRUEsUUFBSXkwQyxXQUFKLEVBQWlCO0FBQ2JBLE1BQUFBLFdBQVcsQ0FBQ2x5QyxTQUFaLENBQXNCTSxNQUF0QixDQUE2QiwrQkFBN0I7QUFDSDs7QUFFRCxRQUFJNnhDLE9BQUosRUFBYTtBQUNUQSxNQUFBQSxPQUFPLENBQUNueUMsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsK0JBQXRCO0FBQ0g7O0FBRURxeEMsSUFBQUEsYUFBYSxDQUFDN3pDLEtBQWQsR0FBc0JBLEtBQXRCO0FBQ0ErekMsSUFBQUEsb0JBQW9CLENBQUN6ckMsV0FBckIsR0FBbUNvc0MsT0FBTyxDQUFDcHNDLFdBQTNDO0FBQ0E0ckMsSUFBQUEsY0FBYyxHQUFHbDBDLEtBQWpCO0FBQ0gsR0FsQkQ7O0FBb0JBK3pDLEVBQUFBLG9CQUFvQixDQUFDNTVDLGdCQUFyQixDQUFzQyxPQUF0QyxFQUErQyxVQUFDdUUsQ0FBRCxFQUFPO0FBQ2xELFFBQU1pMkMsY0FBYyxHQUFHLENBQUNiLGFBQWEsQ0FBQ3Z4QyxTQUFkLENBQXdCZSxRQUF4QixDQUFpQyx1QkFBakMsQ0FBeEI7QUFDQXF4QyxJQUFBQSxjQUFjLEdBQUdMLGdCQUFnQixFQUFuQixHQUF3QkQsaUJBQWlCLEVBQXZEO0FBQ0gsR0FIRDtBQUtBUixFQUFBQSxhQUFhLENBQUMxNUMsZ0JBQWQsQ0FBK0IsUUFBL0IsRUFBeUMsVUFBQ3VFLENBQUQsRUFBTztBQUM1Q2syQyxJQUFBQSx5QkFBeUIsQ0FBQ2wyQyxDQUFDLENBQUN2RyxNQUFGLENBQVM2SCxLQUFWLENBQXpCO0FBQ0gsR0FGRDtBQUlBZzBDLEVBQUFBLG9CQUFvQixDQUFDNzVDLGdCQUFyQixDQUFzQyxPQUF0QyxFQUErQyxVQUFDdUUsQ0FBRCxFQUFPO0FBQ2xELFFBQUlBLENBQUMsQ0FBQ3ZHLE1BQUYsQ0FBUzA4QyxPQUFULENBQWlCNzBDLEtBQXJCLEVBQTRCO0FBQ3hCdTBDLE1BQUFBLGtCQUFrQixDQUFDNzFDLENBQUMsQ0FBQ3ZHLE1BQUYsQ0FBUzA4QyxPQUFULENBQWlCNzBDLEtBQWxCLENBQWxCO0FBQ0g7O0FBRURxMEMsSUFBQUEsaUJBQWlCO0FBQ3BCLEdBTkQ7QUFPSCxDQXZFRDs7QUF5RUEsSUFBTVMsVUFBVSxHQUFHOTRDLFFBQVEsQ0FBQ3RCLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBbkI7QUFDQSxJQUFNcTZDLGNBQWMsR0FBRy80QyxRQUFRLENBQUN0QixjQUFULENBQXdCLGdCQUF4QixDQUF2QjtBQUVBazVDLGdCQUFnQixDQUFDa0IsVUFBRCxDQUFoQjtBQUNBbEIsZ0JBQWdCLENBQUNtQixjQUFELENBQWhCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBTd2lwZXIgNi43LjBcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwczovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjEgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogTWF5IDMxLCAyMDIxXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU3dpcGVyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICAgIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogU1NSIFdpbmRvdyAzLjAuMFxuICAgKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICAgKlxuICAgKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAgICpcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUXG4gICAqXG4gICAqIFJlbGVhc2VkIG9uOiBOb3ZlbWJlciA5LCAyMDIwXG4gICAqL1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0JDEob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZCQxKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YXJnZXQgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICAgIHNyYyA9IHt9O1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdCQxKHNyY1trZXldKSAmJiBpc09iamVjdCQxKHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICBleHRlbmQkMSh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNzckRvY3VtZW50ID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHt9LFxuICAgICAgbm9kZU5hbWU6ICcnXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG4gICAgZ2V0RWxlbWVudEJ5SWQ6IGZ1bmN0aW9uIGdldEVsZW1lbnRCeUlkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudDogZnVuY3Rpb24gY3JlYXRlRXZlbnQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uIGluaXRFdmVudCgpIHt9XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZTogZnVuY3Rpb24gaW1wb3J0Tm9kZSgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgaG9zdDogJycsXG4gICAgICBob3N0bmFtZTogJycsXG4gICAgICBocmVmOiAnJyxcbiAgICAgIG9yaWdpbjogJycsXG4gICAgICBwYXRobmFtZTogJycsXG4gICAgICBwcm90b2NvbDogJycsXG4gICAgICBzZWFyY2g6ICcnXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgICBleHRlbmQkMShkb2MsIHNzckRvY3VtZW50KTtcbiAgICByZXR1cm4gZG9jO1xuICB9XG5cbiAgdmFyIHNzcldpbmRvdyA9IHtcbiAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICB1c2VyQWdlbnQ6ICcnXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgaGFzaDogJycsXG4gICAgICBob3N0OiAnJyxcbiAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgIGhyZWY6ICcnLFxuICAgICAgb3JpZ2luOiAnJyxcbiAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gcmVwbGFjZVN0YXRlKCkge30sXG4gICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uIHB1c2hTdGF0ZSgpIHt9LFxuICAgICAgZ286IGZ1bmN0aW9uIGdvKCkge30sXG4gICAgICBiYWNrOiBmdW5jdGlvbiBiYWNrKCkge31cbiAgICB9LFxuICAgIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBJbWFnZTogZnVuY3Rpb24gSW1hZ2UoKSB7fSxcbiAgICBEYXRlOiBmdW5jdGlvbiBEYXRlKCkge30sXG4gICAgc2NyZWVuOiB7fSxcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiBzZXRUaW1lb3V0KCkge30sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiBjbGVhclRpbWVvdXQoKSB7fSxcbiAgICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICB9LFxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICB2YXIgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQkMSh3aW4sIHNzcldpbmRvdyk7XG4gICAgcmV0dXJuIHdpbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb203IDMuMC4wXG4gICAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAgICogaHR0cHM6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tNy5odG1sXG4gICAqXG4gICAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICAgKlxuICAgKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAgICpcbiAgICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDksIDIwMjBcbiAgICovXG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgICB9O1xuICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gICAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgICAgfVxuXG4gICAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVJlYWN0aXZlKG9iaikge1xuICAgIHZhciBwcm90byA9IG9iai5fX3Byb3RvX187XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcHJvdG9fXycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgRG9tNyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoRG9tNywgX0FycmF5KTtcblxuICAgIGZ1bmN0aW9uIERvbTcoaXRlbXMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQXJyYXkuY2FsbC5hcHBseShfQXJyYXksIFt0aGlzXS5jb25jYXQoaXRlbXMpKSB8fCB0aGlzO1xuICAgICAgbWFrZVJlYWN0aXZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gRG9tNztcbiAgfSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuICBmdW5jdGlvbiBhcnJheUZsYXQoYXJyKSB7XG4gICAgaWYgKGFyciA9PT0gdm9pZCAwKSB7XG4gICAgICBhcnIgPSBbXTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gW107XG4gICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBhcnJheUZsYXQoZWwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5wdXNoKGVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgICB2YXIgdW5pcXVlQXJyYXkgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiB1bmlxdWVBcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW3NlbGVjdG9yXTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdO1xuICAgIHZhciByZXMgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGEucHVzaChyZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG5cbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgICAgdmFyIHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgICB2YXIgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTtcbiAgICAgIH0gLy8gYXJyID0gcXNhKHNlbGVjdG9yLCBkb2N1bWVudCk7XG5cbiAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yID09PSB3aW5kb3cgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgYXJyID0gc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpO1xuICB9XG5cbiAgJC5mbiA9IERvbTcucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGFkZENsYXNzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgY2xhc3Nlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgICB9KSk7XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgdmFyIF9lbCRjbGFzc0xpc3Q7XG5cbiAgICAgIChfZWwkY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2VsJGNsYXNzTGlzdCwgY2xhc3NOYW1lcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGNsYXNzZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgICB9KSk7XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgdmFyIF9lbCRjbGFzc0xpc3QyO1xuXG4gICAgICAoX2VsJGNsYXNzTGlzdDIgPSBlbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfZWwkY2xhc3NMaXN0MiwgY2xhc3NOYW1lcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVDbGFzcygpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGNsYXNzZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgICB9KSk7XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNDbGFzcygpIHtcbiAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgIGNsYXNzZXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgICAgfSkubGVuZ3RoID4gMDtcbiAgICB9KS5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBHZXQgYXR0clxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gLy8gU2V0IGF0dHJzXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbiQxKGR1cmF0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycgPyBkdXJhdGlvbiArIFwibXNcIiA6IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gb24oKSB7XG4gICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICAgIHZhciBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdO1xuXG4gICAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO2Vsc2Uge1xuICAgICAgICB2YXIgX3BhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IF9wYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgICAgaWYgKCQoX3BhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkoX3BhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgICB2YXIgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcblxuICAgICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gICAgdmFyIGo7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB2YXIgX2V2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdKSBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdID0gW107XG5cbiAgICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdLnB1c2goe1xuICAgICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKF9ldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gb2ZmKCkge1xuICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgYXJnc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICAgIH1cblxuICAgIHZhciBldmVudFR5cGUgPSBhcmdzWzBdLFxuICAgICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuICAgIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcblxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgICB9XG5cbiAgICB2YXIgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICAgIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbal07XG5cbiAgICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgICAgIHZhciBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhSW5kZXggPiAwO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQkMShjYWxsYmFjaykge1xuICAgIHZhciBkb20gPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICAgIGRvbS5vZmYoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgZG9tLm9uKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgICAgdmFyIF9zdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChfc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgICB2YXIgX3N0eWxlczIgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgdmFyIGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICAgICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlcygpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBmdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIC5jc3MoJ3dpZHRoJylcbiAgICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIC5jc3MoeyB3aWR0aDogJzEwMHB4JyB9KVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGZvciAodmFyIF9wcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzW2ldLnN0eWxlW19wcm9wXSA9IHByb3BzW19wcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgY2FsbGJhY2suYXBwbHkoZWwsIFtlbCwgaW5kZXhdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQgPSBhcnJheUZpbHRlcih0aGlzLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuICQocmVzdWx0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICB2YXIgY29tcGFyZVdpdGg7XG4gICAgdmFyIGk7XG4gICAgaWYgKCFlbCB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgICAgcmV0dXJuIGVsID09PSB3aW5kb3c7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpc1swXTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaSA9IDA7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICB2YXIgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICAgIGlmIChyZXR1cm5JbmRleCA8IDApIHJldHVybiAkKFtdKTtcbiAgICAgIHJldHVybiAkKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICAgIH1cblxuICAgIHJldHVybiAkKFt0aGlzW2luZGV4XV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kKCkge1xuICAgIHZhciBuZXdDaGlsZDtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBhcmd1bWVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgIG5ld0NoaWxkID0gayA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBrID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2tdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICQoW10pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgICB2YXIgbmV4dEVscyA9IFtdO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gICAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgdmFyIF9uZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChfbmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2goX25leHQpO1xuICAgICAgfSBlbHNlIG5leHRFbHMucHVzaChfbmV4dCk7XG5cbiAgICAgIGVsID0gX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICQobmV4dEVscyk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGVsID0gdGhpc1swXTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkKFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICAgIHZhciBwcmV2RWxzID0gW107XG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgICAgdmFyIF9wcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQoX3ByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKF9wcmV2KTtcbiAgICAgIH0gZWxzZSBwcmV2RWxzLnB1c2goX3ByZXYpO1xuXG4gICAgICBlbCA9IF9wcmV2O1xuICAgIH1cblxuICAgIHJldHVybiAkKHByZXZFbHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gICAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAkKHBhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICAgIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIF9wYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgd2hpbGUgKF9wYXJlbnQpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKCQoX3BhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50cy5wdXNoKF9wYXJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3BhcmVudCA9IF9wYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJChwYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICB2YXIgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb3Nlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgdmFyIGZvdW5kRWxlbWVudHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJChmb3VuZEVsZW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkcmVuO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJChjaGlsZHJlbik7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgTWV0aG9kcyA9IHtcbiAgICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gICAgYXR0cjogYXR0cixcbiAgICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24kMSxcbiAgICBvbjogb24sXG4gICAgb2ZmOiBvZmYsXG4gICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kJDEsXG4gICAgb3V0ZXJXaWR0aDogb3V0ZXJXaWR0aCxcbiAgICBvdXRlckhlaWdodDogb3V0ZXJIZWlnaHQsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgY3NzOiBjc3MsXG4gICAgZWFjaDogZWFjaCxcbiAgICBodG1sOiBodG1sLFxuICAgIHRleHQ6IHRleHQsXG4gICAgaXM6IGlzLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlcTogZXEsXG4gICAgYXBwZW5kOiBhcHBlbmQsXG4gICAgcHJlcGVuZDogcHJlcGVuZCxcbiAgICBuZXh0OiBuZXh0LFxuICAgIG5leHRBbGw6IG5leHRBbGwsXG4gICAgcHJldjogcHJldixcbiAgICBwcmV2QWxsOiBwcmV2QWxsLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIHBhcmVudHM6IHBhcmVudHMsXG4gICAgY2xvc2VzdDogY2xvc2VzdCxcbiAgICBmaW5kOiBmaW5kLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICByZW1vdmU6IHJlbW92ZVxuICB9O1xuICBPYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KCQuZm4sIG1ldGhvZE5hbWUsIHtcbiAgICAgIHZhbHVlOiBNZXRob2RzW21ldGhvZE5hbWVdLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gICAgdmFyIG9iamVjdCA9IG9iajtcbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgZGVsYXkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlJDEoZWwpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHN0eWxlO1xuXG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gICAgfVxuXG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgICBheGlzID0gJ3gnO1xuICAgIH1cblxuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgbWF0cml4O1xuICAgIHZhciBjdXJUcmFuc2Zvcm07XG4gICAgdmFyIHRyYW5zZm9ybU1hdHJpeDtcbiAgICB2YXIgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlJDEoZWwpO1xuXG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgIH0gLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG5cblxuICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgICB9XG5cbiAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICAgIH1cblxuICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICAgIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0byA9IE9iamVjdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICAgIHZhciBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuXG4gICAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuXG4gICAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcblxuICAgICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH1cblxuICBmdW5jdGlvbiBiaW5kTW9kdWxlTWV0aG9kcyhpbnN0YW5jZSwgb2JqKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpba2V5XSkpIHtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKHN1YktleSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV1bc3ViS2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2JqW2tleV1bc3ViS2V5XSA9IG9ialtrZXldW3N1YktleV0uYmluZChpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2Vba2V5XSA9IG9ialtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICAgIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICAgIGNsYXNzZXMgPSAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gXCIuXCIgKyBjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjpcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIC5yZXBsYWNlKC8gL2csICcuJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKCRjb250YWluZXIsIHBhcmFtcywgY3JlYXRlRWxlbWVudHMsIGNoZWNrUHJvcHMpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gICAgaWYgKGNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgJGNvbnRhaW5lci5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgdmFyIHN1cHBvcnQ7XG5cbiAgZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCksXG4gICAgICBwb2ludGVyRXZlbnRzOiAhIXdpbmRvdy5Qb2ludGVyRXZlbnQgJiYgJ21heFRvdWNoUG9pbnRzJyBpbiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPj0gMCxcbiAgICAgIG9ic2VydmVyOiBmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgICByZXR1cm4gJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93O1xuICAgICAgfSgpLFxuICAgICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7Ly8gTm8gc3VwcG9ydFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICAgIH0oKSxcbiAgICAgIGdlc3R1cmVzOiBmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgICB9KClcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgICBpZiAoIXN1cHBvcnQpIHtcbiAgICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBwb3J0O1xuICB9XG5cbiAgdmFyIGRldmljZTtcblxuICBmdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQ7XG5cbiAgICB2YXIgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgICB2YXIgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgdmFyIGRldmljZSA9IHtcbiAgICAgIGlvczogZmFsc2UsXG4gICAgICBhbmRyb2lkOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgICB2YXIgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gICAgdmFyIGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHZhciBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gICAgdmFyIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICAgIHZhciB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gICAgdmFyIG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7IC8vIGlQYWRPcyAxMyBmaXhcblxuICAgIHZhciBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuXG4gICAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihzY3JlZW5XaWR0aCArIFwieFwiICsgc2NyZWVuSGVpZ2h0KSA+PSAwKSB7XG4gICAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICAgIG1hY29zID0gZmFsc2U7XG4gICAgfSAvLyBBbmRyb2lkXG5cblxuICAgIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gICAgfSAvLyBFeHBvcnQgb2JqZWN0XG5cblxuICAgIHJldHVybiBkZXZpY2U7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzKSB7XG4gICAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBvdmVycmlkZXMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIWRldmljZSkge1xuICAgICAgZGV2aWNlID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZXZpY2U7XG4gIH1cblxuICB2YXIgYnJvd3NlcjtcblxuICBmdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNFZGdlOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgICBpZiAoIWJyb3dzZXIpIHtcbiAgICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBicm93c2VyO1xuICB9XG5cbiAgdmFyIHN1cHBvcnRzUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbiBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyKCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG4gIH07XG5cbiAgdmFyIFJlc2l6ZSA9IHtcbiAgICBuYW1lOiAncmVzaXplJyxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICByZXNpemU6IHtcbiAgICAgICAgICBvYnNlcnZlcjogbnVsbCxcbiAgICAgICAgICBjcmVhdGVPYnNlcnZlcjogZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3dpcGVyLndpZHRoLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50Qm94U2l6ZSA9IF9yZWYuY29udGVudEJveFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRSZWN0ID0gX3JlZi5jb250ZW50UmVjdCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmVPYnNlcnZlcjogZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIoKSB7XG4gICAgICAgICAgICBpZiAoc3dpcGVyLnJlc2l6ZS5vYnNlcnZlciAmJiBzd2lwZXIucmVzaXplLm9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNpemVIYW5kbGVyOiBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgncmVzaXplJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcigpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgc3VwcG9ydHNSZXNpemVPYnNlcnZlcigpKSB7XG4gICAgICAgICAgc3dpcGVyLnJlc2l6ZS5jcmVhdGVPYnNlcnZlcigpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBFbWl0IHJlc2l6ZVxuXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7IC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgICBzd2lwZXIucmVzaXplLnJlbW92ZU9ic2VydmVyKCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBPYnNlcnZlciA9IHtcbiAgICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJGVsWzBdLCB7XG4gICAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gICAgfVxuICB9O1xuICB2YXIgT2JzZXJ2ZXIkMSA9IHtcbiAgICBuYW1lOiAnb2JzZXJ2ZXInLFxuICAgIHBhcmFtczoge1xuICAgICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIG9ic2VydmVyOiBfZXh0ZW5kcyh7fSwgT2JzZXJ2ZXIsIHtcbiAgICAgICAgICBvYnNlcnZlcnM6IFtdXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5vYnNlcnZlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBtb2R1bGFyID0ge1xuICAgIHVzZVBhcmFtczogZnVuY3Rpb24gdXNlUGFyYW1zKGluc3RhbmNlUGFyYW1zKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdOyAvLyBFeHRlbmQgcGFyYW1zXG5cbiAgICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgICBleHRlbmQoaW5zdGFuY2VQYXJhbXMsIG1vZHVsZS5wYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVzZU1vZHVsZXM6IGZ1bmN0aW9uIHVzZU1vZHVsZXMobW9kdWxlc1BhcmFtcykge1xuICAgICAgaWYgKG1vZHVsZXNQYXJhbXMgPT09IHZvaWQgMCkge1xuICAgICAgICBtb2R1bGVzUGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9OyAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICAgICAgaWYgKG1vZHVsZS5vbiAmJiBpbnN0YW5jZS5vbikge1xuICAgICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlRXZlbnROYW1lKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG5cblxuICAgICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4gIHZhciBldmVudHNFbWl0dGVyID0ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcbiAgICBvbmNlOiBmdW5jdGlvbiBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG5cbiAgICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcblxuICAgICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICAgIH0sXG4gICAgb25Bbnk6IGZ1bmN0aW9uIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuXG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcbiAgICBvZmZBbnk6IGZ1bmN0aW9uIG9mZkFueShoYW5kbGVyKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICAgIHZhciBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24gZW1pdCgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIHZhciBkYXRhO1xuICAgICAgdmFyIGNvbnRleHQ7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICAgIH1cblxuICAgICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgICAgdmFyIGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgICBldmVudHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50XS5jb25jYXQoZGF0YSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2lkdGg7XG4gICAgdmFyIGhlaWdodDtcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3VidHJhY3QgcGFkZGluZ3NcblxuXG4gICAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgICB9IC8vIHByZXR0aWVyLWlnbm9yZVxuXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgICB9W3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzd2lwZXJTaXplID0gc3dpcGVyLnNpemUsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgIHdyb25nUlRMID0gc3dpcGVyLndyb25nUlRMO1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIHZhciBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICAgIHZhciBzbmFwR3JpZCA9IFtdO1xuICAgIHZhciBzbGlkZXNHcmlkID0gW107XG4gICAgdmFyIHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICAgIHZhciBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgdmFyIHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgICB2YXIgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICB2YXIgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gICAgdmFyIHByZXZTbGlkZVNpemUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47IC8vIHJlc2V0IG1hcmdpbnNcblxuICAgIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgICAgbWFyZ2luTGVmdDogJycsXG4gICAgICBtYXJnaW5Ub3A6ICcnXG4gICAgfSk7ZWxzZSBzbGlkZXMuY3NzKHtcbiAgICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogJydcbiAgICB9KTtcbiAgICB2YXIgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnKSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgfVxuICAgIH0gLy8gQ2FsYyBzbGlkZXNcblxuXG4gICAgdmFyIHNsaWRlU2l6ZTtcbiAgICB2YXIgc2xpZGVzUGVyQ29sdW1uID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB2YXIgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgICB2YXIgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2xpZGVTaXplID0gMDtcbiAgICAgIHZhciBzbGlkZSA9IHNsaWRlcy5lcShpKTtcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICAgICAgdmFyIG5ld1NsaWRlT3JkZXJJbmRleCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHJvdyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgICB2YXIgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSk7XG4gICAgICAgICAgdmFyIHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgICAgIHZhciBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDAgPyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIC8gc2xpZGVzUGVyQ29sdW1uKSwgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgICAgIGNvbHVtbiA9IHNsaWRlSW5kZXhJbkdyb3VwIC0gcm93ICogY29sdW1uc0luR3JvdXAgKyBncm91cEluZGV4ICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgICAgc2xpZGUuY3NzKHtcbiAgICAgICAgICAgICctd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAnLW1zLWZsZXgtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAnLXdlYmtpdC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW47XG5cbiAgICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgY29sdW1uID09PSBudW1GdWxsQ29sdW1ucyAmJiByb3cgPT09IHNsaWRlc1BlckNvbHVtbiAtIDEpIHtcbiAgICAgICAgICAgIHJvdyArPSAxO1xuXG4gICAgICAgICAgICBpZiAocm93ID49IHNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgICBjb2x1bW4gPSBpIC0gcm93ICogc2xpZGVzUGVyUm93O1xuICAgICAgICB9XG5cbiAgICAgICAgc2xpZGUuY3NzKGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyksIHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGUuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgdmFyIHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSk7XG4gICAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICB2YXIgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcblxuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgdmFyIHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgIHZhciBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgICAgdmFyIG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9zbGlkZSQgPSBzbGlkZVswXSxcbiAgICAgICAgICAgICAgICBjbGllbnRXaWR0aCA9IF9zbGlkZSQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0V2lkdGggPSBfc2xpZGUkLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHNsaWRlU2l6ZSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gICAgdmFyIG5ld1NsaWRlc0dyaWQ7XG5cbiAgICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgICB3aWR0aDogc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgICAgdmFyIF8kd3JhcHBlckVsJGNzcztcblxuICAgICAgJHdyYXBwZXJFbC5jc3MoKF8kd3JhcHBlckVsJGNzcyA9IHt9LCBfJHdyYXBwZXJFbCRjc3NbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIiwgXyR3cmFwcGVyRWwkY3NzKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICB2YXIgXyR3cmFwcGVyRWwkY3NzMjtcblxuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgICAkd3JhcHBlckVsLmNzcygoXyR3cmFwcGVyRWwkY3NzMiA9IHt9LCBfJHdyYXBwZXJFbCRjc3MyW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIsIF8kd3JhcHBlckVsJGNzczIpKTtcblxuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNuYXBHcmlkLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICAgIHZhciBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW19pXTtcbiAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbX2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgICB9XG4gICAgfSAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuXG5cbiAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzbmFwR3JpZC5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICAgIHZhciBfc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaTJdO1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgX3NsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihfc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICAgIGlmIChzbmFwR3JpZFtfaTJdIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goX3NsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG5cbiAgICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG5cbiAgICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgICAgdmFyIF9zbGlkZXMkZmlsdGVyJGNzcztcblxuICAgICAgdmFyIGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBnZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luUmlnaHQnKTtcbiAgICAgIHNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKF8sIHNsaWRlSW5kZXgpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KS5jc3MoKF9zbGlkZXMkZmlsdGVyJGNzcyA9IHt9LCBfc2xpZGVzJGZpbHRlciRjc3Nba2V5XSA9IHNwYWNlQmV0d2VlbiArIFwicHhcIiwgX3NsaWRlcyRmaWx0ZXIkY3NzKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICAgIHZhciBhbGxTbGlkZXNTaXplID0gMDtcbiAgICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgICB9KTtcbiAgICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgIHZhciBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAoc25hcCkge1xuICAgICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICAgIHJldHVybiBzbmFwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICAgIHZhciBfYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgICAgX2FsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICAgIH0pO1xuICAgICAgX2FsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcblxuICAgICAgaWYgKF9hbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICB2YXIgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBfYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgc2xpZGVzOiBzbGlkZXMsXG4gICAgICBzbmFwR3JpZDogc25hcEdyaWQsXG4gICAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBzbGlkZXNTaXplc0dyaWRcbiAgICB9KTtcblxuICAgIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gICAgfVxuXG4gICAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICAgIH1cblxuICAgIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgdmFyIG5ld0hlaWdodCA9IDA7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cblxuICAgIHZhciBnZXRTbGlkZUJ5SW5kZXggPSBmdW5jdGlvbiBnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA9PT0gaW5kZXg7XG4gICAgICAgIH0pWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5lcShpbmRleClbMF07XG4gICAgfTsgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gICAgfSAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcblxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgICB9XG4gICAgfSAvLyBVcGRhdGUgSGVpZ2h0XG5cblxuICAgIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgbmV3SGVpZ2h0ICsgXCJweFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVPZmZzZXQgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDA7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7IC8vIFZpc2libGUgU2xpZGVzXG5cbiAgICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcblxuICAgICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICB2YXIgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgIHNsaWRlcy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIH1cblxuICAgIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzLFxuICAgICAgICBpc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZyxcbiAgICAgICAgaXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gICAgdmFyIHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICAgIHZhciB3YXNFbmQgPSBpc0VuZDtcblxuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgICAgaXNFbmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgICBpc0VuZCA9IHByb2dyZXNzID49IDE7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgaXNCZWdpbm5pbmc6IGlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQ6IGlzRW5kXG4gICAgfSk7XG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICAgIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgICB9XG5cbiAgICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgICByZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgdmFyIGFjdGl2ZVNsaWRlO1xuXG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBhY3RpdmVJbmRleCArIFwiXFxcIl1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgICB9IC8vIEFjdGl2ZSBjbGFzc2VzXG5cblxuICAgIGFjdGl2ZVNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgICBpZiAoYWN0aXZlU2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IC8vIE5leHQgU2xpZGVcblxuXG4gICAgdmFyIG5leHRTbGlkZSA9IGFjdGl2ZVNsaWRlLm5leHRBbGwoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcblxuICAgIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgICBuZXh0U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICB9IC8vIFByZXYgU2xpZGVcblxuXG4gICAgdmFyIHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXZBbGwoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcblxuICAgIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgICAgcHJldlNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgICAgcHJldmlvdXNSZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4LFxuICAgICAgICBwcmV2aW91c1NuYXBJbmRleCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gICAgdmFyIHNuYXBJbmRleDtcblxuICAgIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG5cbiAgICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgfVxuXG4gICAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHJlYWwgaW5kZXhcblxuXG4gICAgdmFyIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICBzbmFwSW5kZXg6IHNuYXBJbmRleCxcbiAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgcHJldmlvdXNJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcblxuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgc2xpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpWzBdO1xuICAgIHZhciBzbGlkZUZvdW5kID0gZmFsc2U7XG4gICAgdmFyIHNsaWRlSW5kZXg7XG5cbiAgICBpZiAoc2xpZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG5cbiAgICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoJChzbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1cGRhdGUgPSB7XG4gICAgdXBkYXRlU2l6ZTogdXBkYXRlU2l6ZSxcbiAgICB1cGRhdGVTbGlkZXM6IHVwZGF0ZVNsaWRlcyxcbiAgICB1cGRhdGVBdXRvSGVpZ2h0OiB1cGRhdGVBdXRvSGVpZ2h0LFxuICAgIHVwZGF0ZVNsaWRlc09mZnNldDogdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICAgIHVwZGF0ZVNsaWRlc1Byb2dyZXNzOiB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgICB1cGRhdGVQcm9ncmVzczogdXBkYXRlUHJvZ3Jlc3MsXG4gICAgdXBkYXRlU2xpZGVzQ2xhc3NlczogdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgICB1cGRhdGVBY3RpdmVJbmRleDogdXBkYXRlQWN0aXZlSW5kZXgsXG4gICAgdXBkYXRlQ2xpY2tlZFNsaWRlOiB1cGRhdGVDbGlja2VkU2xpZGVcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICAgIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgICB0cmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG5cbiAgICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICAgIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICAgIHZhciB4ID0gMDtcbiAgICB2YXIgeSA9IDA7XG4gICAgdmFyIHogPSAwO1xuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSB0cmFuc2xhdGU7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCBcIiArIHogKyBcInB4KVwiKTtcbiAgICB9XG5cbiAgICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTsgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcblxuICAgIHZhciBuZXdQcm9ncmVzcztcbiAgICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIH1cblxuICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICAgIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICAgIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgICAgdHJhbnNsYXRlID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICB9XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgdmFyIG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICB2YXIgbmV3VHJhbnNsYXRlO1xuICAgIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuXG4gICAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICAgIHZhciBfd3JhcHBlckVsJHNjcm9sbFRvO1xuXG4gICAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKChfd3JhcHBlckVsJHNjcm9sbFRvID0ge30sIF93cmFwcGVyRWwkc2Nyb2xsVG9baXNIID8gJ2xlZnQnIDogJ3RvcCddID0gLW5ld1RyYW5zbGF0ZSwgX3dyYXBwZXJFbCRzY3JvbGxUby5iZWhhdmlvciA9ICdzbW9vdGgnLCBfd3JhcHBlckVsJHNjcm9sbFRvKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcblxuICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG5cbiAgICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgdHJhbnNsYXRlID0ge1xuICAgIGdldFRyYW5zbGF0ZTogZ2V0U3dpcGVyVHJhbnNsYXRlLFxuICAgIHNldFRyYW5zbGF0ZTogc2V0VHJhbnNsYXRlLFxuICAgIG1pblRyYW5zbGF0ZTogbWluVHJhbnNsYXRlLFxuICAgIG1heFRyYW5zbGF0ZTogbWF4VHJhbnNsYXRlLFxuICAgIHRyYW5zbGF0ZVRvOiB0cmFuc2xhdGVUb1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgdmFyIGRpciA9IGRpcmVjdGlvbjtcblxuICAgIGlmICghZGlyKSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcblxuICAgICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uRW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuXG4gICAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uRW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyYW5zaXRpb24gPSB7XG4gICAgc2V0VHJhbnNpdGlvbjogc2V0VHJhbnNpdGlvbixcbiAgICB0cmFuc2l0aW9uU3RhcnQ6IHRyYW5zaXRpb25TdGFydCxcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kXG4gIH07XG5cbiAgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgaW5kZXggPSAwO1xuICAgIH1cblxuICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIH1cblxuICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFtcIiArIHR5cGVvZiBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGBpbmRleGAgYXJndW1lbnQgY29udmVydGVkIGZyb20gYHN0cmluZ2AgdG8gYG51bWJlcmAuXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB2YXIgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgICAvKipcbiAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgXG4gICAgICAgKiBhZnRlciBiZWluZyBjb252ZXJ0ZWQgZnJvbSB0aGUgYHN0cmluZ2AgdHlwZS5cbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG5cbiAgICAgIHZhciBpc1ZhbGlkTnVtYmVyID0gaXNGaW5pdGUoaW5kZXhBc051bWJlcik7XG5cbiAgICAgIGlmICghaXNWYWxpZE51bWJlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFzc2VkLWluICdpbmRleCcgKHN0cmluZykgY291bGRuJ3QgYmUgY29udmVydGVkIHRvICdudW1iZXInLiBbXCIgKyBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gICAgICB9IC8vIEtub3dpbmcgdGhhdCB0aGUgY29udmVydGVkIGBpbmRleGAgaXMgYSB2YWxpZCBudW1iZXIsXG4gICAgICAvLyB3ZSBjYW4gdXBkYXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudCdzIHZhbHVlLlxuXG5cbiAgICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVJbmRleCA9IGluZGV4O1xuICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcblxuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24gfHwgIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gICAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICAgIGlmICgoYWN0aXZlSW5kZXggfHwgcGFyYW1zLmluaXRpYWxTbGlkZSB8fCAwKSA9PT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTsgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRHaXJkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR2lyZCkgLyAyKSB7XG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHaXJkKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbjtcbiAgICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnOyAvLyBVcGRhdGUgSW5kZXhcblxuICAgIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpOyAvLyBVcGRhdGUgSGVpZ2h0XG5cbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICAgIHZhciB0ID0gLXRyYW5zbGF0ZTtcblxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0ID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoX3dyYXBwZXJFbCRzY3JvbGxUbyA9IHt9LCBfd3JhcHBlckVsJHNjcm9sbFRvW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXSA9IHQsIF93cmFwcGVyRWwkc2Nyb2xsVG8uYmVoYXZpb3IgPSAnc21vb3RoJywgX3dyYXBwZXJFbCRzY3JvbGxUbykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG5cbiAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbmRleCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBuZXdJbmRleCA9IGluZGV4O1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgbmV3SW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICB9XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmcsXG4gICAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gICAgdmFyIGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIH1cblxuICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZyxcbiAgICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICAgIHZhciBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZSh2YWwpO1xuICAgIH0pO1xuICAgIHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpXTtcbiAgICB2YXIgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuXG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgICAgaWYgKCFwcmV2U25hcCAmJiBub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHByZXZTbmFwID0gc25hcDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBwcmV2SW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICAgIH1cblxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMC41O1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gICAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7XG4gICAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICAgIHZhciBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICAgIHZhciBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICAgIHZhciBfY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcblxuICAgICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChfY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIHZhciBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIHZhciByZWFsSW5kZXg7XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcblxuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilcIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2xpZGUgPSB7XG4gICAgc2xpZGVUbzogc2xpZGVUbyxcbiAgICBzbGlkZVRvTG9vcDogc2xpZGVUb0xvb3AsXG4gICAgc2xpZGVOZXh0OiBzbGlkZU5leHQsXG4gICAgc2xpZGVQcmV2OiBzbGlkZVByZXYsXG4gICAgc2xpZGVSZXNldDogc2xpZGVSZXNldCxcbiAgICBzbGlkZVRvQ2xvc2VzdDogc2xpZGVUb0Nsb3Nlc3QsXG4gICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogc2xpZGVUb0NsaWNrZWRTbGlkZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxvb3BDcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsOyAvLyBSZW1vdmUgZHVwbGljYXRlZCBzbGlkZXNcblxuICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpLnJlbW92ZSgpO1xuICAgIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wRmlsbEdyb3VwV2l0aEJsYW5rKSB7XG4gICAgICB2YXIgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSBzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsYW5rU2xpZGVzTnVtOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpO1xuICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKGJsYW5rTm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcblxuICAgIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgICB2YXIgYXBwZW5kU2xpZGVzID0gW107XG4gICAgc2xpZGVzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgdmFyIHNsaWRlID0gJChlbCk7XG5cbiAgICAgIGlmIChpbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgICAgYXBwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCBzbGlkZXMubGVuZ3RoICYmIGluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICAgIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgICR3cmFwcGVyRWwuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW19pXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kyID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBfaTIgPj0gMDsgX2kyIC09IDEpIHtcbiAgICAgICR3cmFwcGVyRWwucHJlcGVuZCgkKHByZXBlbmRTbGlkZXNbX2kyXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcyxcbiAgICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICAgIGFsbG93U2xpZGVOZXh0ID0gc3dpcGVyLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgbmV3SW5kZXg7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICAgIHZhciBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICB2YXIgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7IC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcblxuICAgIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgICAgbmV3SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMyArIGFjdGl2ZUluZGV4O1xuICAgICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3RpdmVJbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG5cbiAgICAgIHZhciBfc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgICAgaWYgKF9zbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gICAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiLC5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVCbGFua0NsYXNzKS5yZW1vdmUoKTtcbiAgICBzbGlkZXMucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgfVxuXG4gIHZhciBsb29wID0ge1xuICAgIGxvb3BDcmVhdGU6IGxvb3BDcmVhdGUsXG4gICAgbG9vcEZpeDogbG9vcEZpeCxcbiAgICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3lcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICAgIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLXdlYmtpdC1ncmFiYmluZycgOiAnLXdlYmtpdC1ncmFiJztcbiAgICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG4gIH1cblxuICB2YXIgZ3JhYkN1cnNvciA9IHtcbiAgICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICAgIHVuc2V0R3JhYkN1cnNvcjogdW5zZXRHcmFiQ3Vyc29yXG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cblxuICAgIHZhciBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBpZiAoaW5kZXggPD0gMCkge1xuICAgICAgc3dpcGVyLnByZXBlbmRTbGlkZShzbGlkZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gICAgdmFyIHNsaWRlc0J1ZmZlciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICAgIHZhciBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc2xpZGVzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW19pXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW19pXSk7XG4gICAgICB9XG5cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNCdWZmZXJbX2kyXSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gICAgdmFyIGluZGV4VG9SZW1vdmU7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlc0luZGV4ZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgIH1cblxuICAgIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbiAgfVxuXG4gIHZhciBtYW5pcHVsYXRpb24gPSB7XG4gICAgYXBwZW5kU2xpZGU6IGFwcGVuZFNsaWRlLFxuICAgIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLFxuICAgIGFkZFNsaWRlOiBhZGRTbGlkZSxcbiAgICByZW1vdmVTbGlkZTogcmVtb3ZlU2xpZGUsXG4gICAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXNcbiAgfTtcblxuICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICAgIGlmICghJHRhcmdldEVsLmNsb3Nlc3Qoc3dpcGVyLndyYXBwZXJFbCkubGVuZ3RoKSByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gICAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICAgIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjsgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW5ldFxuXG4gICAgdmFyIHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcblxuICAgIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50LnBhdGggJiYgZXZlbnQucGF0aFswXSkge1xuICAgICAgJHRhcmdldEVsID0gJChldmVudC5wYXRoWzBdKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBcIi5cIiArIHBhcmFtcy5ub1N3aXBpbmdDbGFzcylbMF0pIHtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvdWNoZXMuY3VycmVudFggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB2YXIgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICB2YXIgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTsgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICAgIHZhciBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG5cbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4dGVuZChkYXRhLCB7XG4gICAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgICBpc01vdmVkOiBmYWxzZSxcbiAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICB2YXIgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09ICR0YXJnZXRFbFswXSkge1xuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG5cbiAgICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gICAgdmFyIGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gICAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSByZXR1cm47XG4gICAgdmFyIHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgICB2YXIgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVggOiBlLnBhZ2VYO1xuICAgIHZhciBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICAgICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICAgIGV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAgIC8vIFZlcnRpY2FsXG4gICAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gICAgfVxuXG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gICAgdmFyIGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICAgIHZhciBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KE1hdGgucG93KGRpZmZYLCAyKSArIE1hdGgucG93KGRpZmZZLCAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHRvdWNoQW5nbGU7XG5cbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZID49IDI1KSB7XG4gICAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuXG4gICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgdmFyIGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICAgIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gICAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgICBpZiAocnRsKSBkaWZmID0gLWRpZmY7XG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgdmFyIGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIHZhciByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gICAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICAgIH1cblxuICAgIGlmIChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArIE1hdGgucG93KC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gTWF0aC5wb3coc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYsIHJlc2lzdGFuY2VSYXRpbyk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICAgIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICB9IC8vIFRocmVzaG9sZFxuXG5cbiAgICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOyAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgLy8gVmVsb2NpdHlcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc3RhcnRYJyA6ICdzdGFydFknXSxcbiAgICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgICAgdGltZTogbm93KClcbiAgICAgIH0pO1xuICAgIH0gLy8gVXBkYXRlIHByb2dyZXNzXG5cblxuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpOyAvLyBVcGRhdGUgdHJhbnNsYXRlXG5cbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXMsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICAgIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICAgIH1cblxuICAgIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuXG4gICAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG5cblxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfSAvLyBUaW1lIGRpZmZcblxuXG4gICAgdmFyIHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICAgIHZhciB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7IC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuXG4gICAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKGUpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuXG4gICAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICB2YXIgY3VycmVudFBvcztcblxuICAgIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtKSB7XG4gICAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICAgIHZhciB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICAgIHZhciBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICAgIHZhciB0aW1lID0gbGFzdE1vdmVFdmVudC50aW1lIC0gdmVsb2NpdHlFdmVudC50aW1lO1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcblxuICAgICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICAgIH0gLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cblxuXG4gICAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgbm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHtcbiAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuICAgICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuICAgICAgICB2YXIgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgICAgaWYgKHJ0bCkgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICAgIHZhciBkb0JvdW5jZSA9IGZhbHNlO1xuICAgICAgICB2YXIgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgICAgdmFyIGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICAgIHZhciBuZWVkc0xvb3BGaXg7XG5cbiAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICB2YXIgbmV4dFNsaWRlO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgICBzd2lwZXIub25jZSgndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gRml4IGR1cmF0aW9uXG5cblxuICAgICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKCgtbmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgLy8gSWYgZnJlZU1vZGVTdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAgIC8vIGV2ZW50LCB0aGVuIGR1cmF0aW9ucyBjYW4gYmUgMjArIHNlY29uZHMgdG8gc2xpZGUgb25lIChvciB6ZXJvISkgc2xpZGVzLlxuICAgICAgICAgICAgLy8gSXQncyBlYXN5IHRvIHNlZSB0aGlzIHdoZW4gc2ltdWxhdGluZyB0b3VjaCB3aXRoIG1vdXNlIGV2ZW50cy4gVG8gZml4IHRoaXMsXG4gICAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgICAgLy8gbmljZSBzaWRlIGVmZmVjdCBvZiBtYXRjaGluZyBzbGlkZSBzcGVlZCBpZiB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBiZWZvcmVcbiAgICAgICAgICAgIC8vIGxpZnRpbmcgZmluZ2VyIG9yIG1vdXNlIHZzLiBtb3Zpbmcgc2xvd2x5IGJlZm9yZSBsaWZ0aW5nIHRoZSBmaW5nZXIvbW91c2UuXG4gICAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgICB2YXIgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdtb21lbnR1bUJvdW5jZScpO1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuXG4gICAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZVxuXG5cbiAgICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgICB2YXIgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICB2YXIgX2luY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdKSB7XG4gICAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBfaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICAgIH1cbiAgICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG5cblxuICAgIHZhciByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgICB2YXIgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpO1xuXG4gICAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIGVsID0gc3dpcGVyLmVsO1xuICAgIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuOyAvLyBCcmVha3BvaW50c1xuXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9IC8vIFNhdmUgbG9ja3NcblxuXG4gICAgdmFyIGFsbG93U2xpZGVOZXh0ID0gc3dpcGVyLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldixcbiAgICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7IC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG5cbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG5cblxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcblxuICAgIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAocnRsVHJhbnNsYXRlKSB7XG4gICAgICAgIHN3aXBlci50cmFuc2xhdGUgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB3cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgdmFyIG5ld1Byb2dyZXNzO1xuICAgIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIH1cblxuICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xuICB9XG5cbiAgdmFyIGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbiAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgICBlbCA9IHN3aXBlci5lbCxcbiAgICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICAgIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuXG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgICB9IDogZmFsc2U7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICAgIH0gOiBjYXB0dXJlKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWR1bW15RXZlbnRBdHRhY2hlZCkge1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkdW1teUV2ZW50TGlzdGVuZXIpO1xuICAgICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFkZXZpY2UuaW9zICYmICFkZXZpY2UuYW5kcm9pZCB8fCBwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhc3VwcG9ydC50b3VjaCAmJiBkZXZpY2UuaW9zKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICB3cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICAgIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICAgIHN3aXBlci5vbihkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIub24oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cyxcbiAgICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2UsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICAgIH0gOiBmYWxzZTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIWRldmljZS5pb3MgJiYgIWRldmljZS5hbmRyb2lkIHx8IHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzdXBwb3J0LnRvdWNoICYmIGRldmljZS5pb3MpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG5cblxuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICAgIH0gLy8gUmVzaXplIGhhbmRsZXJcblxuXG4gICAgc3dpcGVyLm9mZihkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUpO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IHtcbiAgICBhdHRhY2hFdmVudHM6IGF0dGFjaEV2ZW50cyxcbiAgICBkZXRhY2hFdmVudHM6IGRldGFjaEV2ZW50c1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgICBpbml0aWFsaXplZCA9IHN3aXBlci5pbml0aWFsaXplZCxcbiAgICAgICAgX3N3aXBlciRsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgICBsb29wZWRTbGlkZXMgPSBfc3dpcGVyJGxvb3BlZFNsaWRlcyA9PT0gdm9pZCAwID8gMCA6IF9zd2lwZXIkbG9vcGVkU2xpZGVzLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsO1xuICAgIHZhciBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcblxuICAgIHZhciBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICAgIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgICB2YXIgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoYnJlYWtwb2ludE9ubHlQYXJhbXMpIHtcbiAgICAgIFsnc2xpZGVzUGVyVmlldycsICdzcGFjZUJldHdlZW4nLCAnc2xpZGVzUGVyR3JvdXAnLCAnc2xpZGVzUGVyR3JvdXBTa2lwJywgJ3NsaWRlc1BlckNvbHVtbiddLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgIHZhciBwYXJhbVZhbHVlID0gYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtVmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycgJiYgKHBhcmFtVmFsdWUgPT09ICdBVVRPJyB8fCBwYXJhbVZhbHVlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gJ2F1dG8nO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlSW50KHBhcmFtVmFsdWUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gICAgdmFyIHdhc011bHRpUm93ID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgdmFyIGlzTXVsdGlSb3cgPSBicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgdmFyIHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcblxuICAgIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdyBcIiArIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIik7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93XCIpO1xuXG4gICAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93LWNvbHVtblwiKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgICB2YXIgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICAgIHZhciBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gICAgfSk7XG5cbiAgICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcbiAgICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcblxuICAgIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBsb29wZWRTbGlkZXMgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gICAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgICAgYmFzZSA9ICd3aW5kb3cnO1xuICAgIH1cblxuICAgIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBjdXJyZW50V2lkdGggPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lcldpZHRoIDogY29udGFpbmVyRWwuY2xpZW50V2lkdGg7XG4gICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgICB2YXIgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgICB2YXIgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcG9pbnQ6IHBvaW50XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgICAgcG9pbnQ6IHBvaW50XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBfcG9pbnRzJGkgPSBwb2ludHNbaV0sXG4gICAgICAgICAgcG9pbnQgPSBfcG9pbnRzJGkucG9pbnQsXG4gICAgICAgICAgdmFsdWUgPSBfcG9pbnRzJGkudmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSA8PSBjdXJyZW50V2lkdGgpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xuICB9XG5cbiAgdmFyIGJyZWFrcG9pbnRzID0ge1xuICAgIHNldEJyZWFrcG9pbnQ6IHNldEJyZWFrcG9pbnQsXG4gICAgZ2V0QnJlYWtwb2ludDogZ2V0QnJlYWtwb2ludFxuICB9O1xuXG4gIGZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICAgIHZhciByZXN1bHRDbGFzc2VzID0gW107XG4gICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGNsYXNzTmFtZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXMsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGwsXG4gICAgICAgICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2UsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgICB2YXIgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICAgJ3BvaW50ZXItZXZlbnRzJzogc3VwcG9ydC5wb2ludGVyRXZlbnRzICYmICFzdXBwb3J0LnRvdWNoXG4gICAgfSwge1xuICAgICAgJ2ZyZWUtbW9kZSc6IHBhcmFtcy5mcmVlTW9kZVxuICAgIH0sIHtcbiAgICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgICB9LCB7XG4gICAgICAncnRsJzogcnRsXG4gICAgfSwge1xuICAgICAgJ211bHRpcm93JzogcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDFcbiAgICB9LCB7XG4gICAgICAnbXVsdGlyb3ctY29sdW1uJzogcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nXG4gICAgfSwge1xuICAgICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICAgIH0sIHtcbiAgICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gICAgfSwge1xuICAgICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgICB9XSwgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpO1xuICAgIGNsYXNzTmFtZXMucHVzaC5hcHBseShjbGFzc05hbWVzLCBzdWZmaXhlcyk7XG4gICAgJGVsLmFkZENsYXNzKFtdLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykpO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzO1xuICAgICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cblxuICB2YXIgY2xhc3NlcyA9IHtcbiAgICBhZGRDbGFzc2VzOiBhZGRDbGFzc2VzLFxuICAgIHJlbW92ZUNsYXNzZXM6IHJlbW92ZUNsYXNzZXNcbiAgfTtcblxuICBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgaW1hZ2U7XG5cbiAgICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHZhciBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gICAgaWYgKCFpc1BpY3R1cmUgJiYgKCFpbWFnZUVsLmNvbXBsZXRlIHx8ICFjaGVja0ZvckNvbXBsZXRlKSkge1xuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gb25SZWFkeTtcbiAgICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgICAgaW1hZ2Uuc2l6ZXMgPSBzaXplcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgaW1hZ2Uuc3JjID0gc3JjO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblJlYWR5KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGltYWdlIGFscmVhZHkgbG9hZGVkLi4uXG4gICAgICBvblJlYWR5KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcblxuICAgIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgIT09IHVuZGVmaW5lZCkgc3dpcGVyLmltYWdlc0xvYWRlZCArPSAxO1xuXG4gICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBpbWFnZUVsID0gc3dpcGVyLmltYWdlc1RvTG9hZFtpXTtcbiAgICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW1hZ2VzID0ge1xuICAgIGxvYWRJbWFnZTogbG9hZEltYWdlLFxuICAgIHByZWxvYWRJbWFnZXM6IHByZWxvYWRJbWFnZXNcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gICAgdmFyIGxhc3RTbGlkZVBvc2l0aW9uID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggPiAwICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICogKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSkgKyBzd2lwZXIuc2xpZGVzWzBdLm9mZnNldFdpZHRoICogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgJiYgbGFzdFNsaWRlUG9zaXRpb24pIHtcbiAgICAgIHN3aXBlci5pc0xvY2tlZCA9IGxhc3RTbGlkZVBvc2l0aW9uIDw9IHN3aXBlci5zaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICAgIH1cblxuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDsgLy8gZXZlbnRzXG5cbiAgICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcblxuICAgIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uKSBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICAgIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3dcbiAgfTtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgaW5pdDogdHJ1ZSxcbiAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgICB0b3VjaEV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgIHNwZWVkOiAzMDAsXG4gICAgY3NzTW9kZTogZmFsc2UsXG4gICAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gICAgcmVzaXplT2JzZXJ2ZXI6IGZhbHNlLFxuICAgIG5lc3RlZDogZmFsc2UsXG4gICAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLy8gT3ZlcnJpZGVzXG4gICAgd2lkdGg6IG51bGwsXG4gICAgaGVpZ2h0OiBudWxsLFxuICAgIC8vXG4gICAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgICAvLyBzc3JcbiAgICB1c2VyQWdlbnQ6IG51bGwsXG4gICAgdXJsOiBudWxsLFxuICAgIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICAgIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gICAgLy8gRnJlZSBtb2RlXG4gICAgZnJlZU1vZGU6IGZhbHNlLFxuICAgIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gICAgZnJlZU1vZGVNb21lbnR1bVJhdGlvOiAxLFxuICAgIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gICAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICAgIGZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICAgIGZyZWVNb2RlU3RpY2t5OiBmYWxzZSxcbiAgICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcbiAgICAvLyBBdXRvaGVpZ2h0XG4gICAgYXV0b0hlaWdodDogZmFsc2UsXG4gICAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gICAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgICAvLyBFZmZlY3RzXG4gICAgZWZmZWN0OiAnc2xpZGUnLFxuICAgIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gICAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgICAvLyBTbGlkZXMgZ3JpZFxuICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gICAgLy8gaW4gcHhcbiAgICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgICAvLyBpbiBweFxuICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gICAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICAgIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuICAgIC8vIFJvdW5kIGxlbmd0aFxuICAgIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gICAgLy8gVG91Y2hlc1xuICAgIHRvdWNoUmF0aW86IDEsXG4gICAgdG91Y2hBbmdsZTogNDUsXG4gICAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgICBsb25nU3dpcGVzOiB0cnVlLFxuICAgIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICAgIGxvbmdTd2lwZXNNczogMzAwLFxuICAgIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgICB0aHJlc2hvbGQ6IDAsXG4gICAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICAgIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gICAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gICAgLy8gUmVzaXN0YW5jZVxuICAgIHJlc2lzdGFuY2U6IHRydWUsXG4gICAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAgIC8vIFByb2dyZXNzXG4gICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgICAvLyBDdXJzb3JcbiAgICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgICAvLyBDbGlja3NcbiAgICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICAgIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAvLyBJbWFnZXNcbiAgICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICAgIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6IHRydWUsXG4gICAgLy8gbG9vcFxuICAgIGxvb3A6IGZhbHNlLFxuICAgIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICAgIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcbiAgICBsb29wUHJldmVudHNTbGlkZTogdHJ1ZSxcbiAgICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gICAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgICBub1N3aXBpbmc6IHRydWUsXG4gICAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gICAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gICAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICAgIC8vIE5TXG4gICAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJyxcbiAgICAvLyBORVdcbiAgICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gICAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gICAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gICAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICAgIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICAgIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gICAgLy8gQ2FsbGJhY2tzXG4gICAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAgIC8vIEludGVybmFsc1xuICAgIF9lbWl0Q2xhc3NlczogZmFsc2VcbiAgfTtcblxuICB2YXIgcHJvdG90eXBlcyA9IHtcbiAgICBtb2R1bGFyOiBtb2R1bGFyLFxuICAgIGV2ZW50c0VtaXR0ZXI6IGV2ZW50c0VtaXR0ZXIsXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUsXG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICBzbGlkZTogc2xpZGUsXG4gICAgbG9vcDogbG9vcCxcbiAgICBncmFiQ3Vyc29yOiBncmFiQ3Vyc29yLFxuICAgIG1hbmlwdWxhdGlvbjogbWFuaXB1bGF0aW9uLFxuICAgIGV2ZW50czogZXZlbnRzLFxuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICBpbWFnZXM6IGltYWdlc1xuICB9O1xuICB2YXIgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG4gIHZhciBTd2lwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN3aXBlcigpIHtcbiAgICAgIHZhciBlbDtcbiAgICAgIHZhciBwYXJhbXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwgPSBhcmdzWzBdO1xuICAgICAgICBwYXJhbXMgPSBhcmdzWzFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG5cbiAgICAgIGlmIChwYXJhbXMuZWwgJiYgJChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIHN3aXBlcnMgPSBbXTtcbiAgICAgICAgJChwYXJhbXMuZWwpLmVhY2goZnVuY3Rpb24gKGNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgdmFyIG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgICAgfSAvLyBTd2lwZXIgSW5zdGFuY2VcblxuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgICAgc3dpcGVyLmRldmljZSA9IGdldERldmljZSh7XG4gICAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgICAgfSk7XG4gICAgICBzd2lwZXIuYnJvd3NlciA9IGdldEJyb3dzZXIoKTtcbiAgICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIubW9kdWxlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLm1vZHVsZXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IHN3aXBlci5tb2R1bGVzW21vZHVsZU5hbWVdO1xuXG4gICAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgICAgdmFyIG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGUucGFyYW1zW21vZHVsZVBhcmFtTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmluZGV4T2YobW9kdWxlUGFyYW1OYW1lKSA+PSAwICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuXG4gICAgICB2YXIgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgICBzd2lwZXIudXNlUGFyYW1zKHN3aXBlclBhcmFtcyk7IC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcblxuICAgICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7IC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgICB9IC8vIFNhdmUgRG9tIGxpYlxuXG5cbiAgICAgIHN3aXBlci4kID0gJDsgLy8gRXh0ZW5kIFN3aXBlclxuXG4gICAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgICAgZWw6IGVsLFxuICAgICAgICAvLyBDbGFzc2VzXG4gICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgICAvLyBTbGlkZXNcbiAgICAgICAgc2xpZGVzOiAkKCksXG4gICAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgICBzbmFwR3JpZDogW10sXG4gICAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICB9LFxuICAgICAgICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW5kZXhlc1xuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgICAvL1xuICAgICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgICAvLyBQcm9wc1xuICAgICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgIC8vIExvY2tzXG4gICAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICAgIHRvdWNoRXZlbnRzOiBmdW5jdGlvbiB0b3VjaEV2ZW50cygpIHtcbiAgICAgICAgICB2YXIgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XG4gICAgICAgICAgdmFyIGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuXG4gICAgICAgICAgaWYgKHN3aXBlci5zdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgICAgbW92ZTogdG91Y2hbMV0sXG4gICAgICAgICAgICBlbmQ6IHRvdWNoWzJdLFxuICAgICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICAgIH07XG4gICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcCA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICAgIGVuZDogZGVza3RvcFsyXVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICAgIH0oKSxcbiAgICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICAgIGZvcm1FbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgICBsYXN0Q2xpY2tUaW1lOiBub3coKSxcbiAgICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzVG91Y2hFdmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ2xpY2tzXG4gICAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAgIC8vIFRvdWNoZXNcbiAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICAgIGRpZmY6IDBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW1hZ2VzXG4gICAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgICAgfSk7IC8vIEluc3RhbGwgTW9kdWxlc1xuXG4gICAgICBzd2lwZXIudXNlTW9kdWxlcygpO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcblxuXG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBTd2lwZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbiBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgICAgdmFyIG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgIHZhciBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICB2YXIgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5lbWl0Q29udGFpbmVyQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgIHZhciBjbGFzc2VzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLWNvbnRhaW5lcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNsYXNzZXMuam9pbignICcpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uIGdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHJldHVybiBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICAgIH0pLmpvaW4oJyAnKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmVtaXRTbGlkZXNDbGFzc2VzID0gZnVuY3Rpb24gZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgdmFyIHVwZGF0ZXMgPSBbXTtcbiAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgICAgc2xpZGVFbDogc2xpZGVFbCxcbiAgICAgICAgICBjbGFzc05hbWVzOiBjbGFzc05hbWVzXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzZXMnLCB1cGRhdGVzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNsaWRlc1BlclZpZXdEeW5hbWljID0gZnVuY3Rpb24gc2xpZGVzUGVyVmlld0R5bmFtaWMoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBzcHYgPSAxO1xuXG4gICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHZhciBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgdmFyIGJyZWFrTG9vcDtcblxuICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSBhY3RpdmVJbmRleCAtIDE7IF9pID49IDA7IF9pIC09IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW19pXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW19pXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgX2kyID0gYWN0aXZlSW5kZXggKyAxOyBfaTIgPCBzbGlkZXMubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNHcmlkW19pMl0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3B2O1xuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsgLy8gQnJlYWtwb2ludHNcblxuICAgICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB2YXIgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2xhdGVkO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuXG4gICAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhcIlwiICsgc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgY3VycmVudERpcmVjdGlvbikuYWRkQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIG5ld0RpcmVjdGlvbik7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgICAgc3dpcGVyLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsKSB7XG4gICAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLm1vdW50ID0gZnVuY3Rpb24gbW91bnQoZWwpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTsgLy8gRmluZCBlbFxuXG4gICAgICB2YXIgJGVsID0gJChlbCB8fCBzd2lwZXIucGFyYW1zLmVsKTtcbiAgICAgIGVsID0gJGVsWzBdO1xuXG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuXG4gICAgICB2YXIgZ2V0V3JhcHBlciA9IGZ1bmN0aW9uIGdldFdyYXBwZXIoKSB7XG4gICAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICAgIHZhciByZXMgPSAkKGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi5cIiArIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKSk7IC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG5cbiAgICAgICAgICByZXMuY2hpbGRyZW4gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICB9OyAvLyBGaW5kIFdyYXBwZXJcblxuXG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcblxuICAgICAgaWYgKCR3cmFwcGVyRWwubGVuZ3RoID09PSAwICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgJHdyYXBwZXJFbCA9ICQod3JhcHBlcik7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3M7XG4gICAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAgICRlbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAkZWw6ICRlbCxcbiAgICAgICAgZWw6IGVsLFxuICAgICAgICAkd3JhcHBlckVsOiAkd3JhcHBlckVsLFxuICAgICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAgIC8vIFJUTFxuICAgICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQoZWwpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICAgIHZhciBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7IC8vIFNldCBicmVha3BvaW50XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICB9IC8vIEFkZCBDbGFzc2VzXG5cblxuICAgICAgc3dpcGVyLmFkZENsYXNzZXMoKTsgLy8gQ3JlYXRlIGxvb3BcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgfSAvLyBVcGRhdGUgc2l6ZVxuXG5cbiAgICAgIHN3aXBlci51cGRhdGVTaXplKCk7IC8vIFVwZGF0ZSBzbGlkZXNcblxuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgICB9IC8vIFNldCBHcmFiIEN1cnNvclxuXG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgICAgfSAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG5cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gLy8gQXR0YWNoIGV2ZW50c1xuXG5cbiAgICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTsgLy8gSW5pdCBGbGFnXG5cbiAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfTtcblxuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAgICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTsgLy8gSW5pdCBGbGFnXG5cbiAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlOyAvLyBEZXRhY2ggZXZlbnRzXG5cbiAgICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wXG5cbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIH0gLy8gQ2xlYW51cCBzdHlsZXNcblxuXG4gICAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcblxuICAgICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoW3BhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpOyAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcblxuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICAgIGV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gICAgfTtcblxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICAgIGlmICghU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzKSBTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICAgIHZhciBuYW1lID0gbW9kdWxlLm5hbWUgfHwgT2JqZWN0LmtleXMoU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGggKyBcIl9cIiArIG5vdygpO1xuICAgICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICAgIH07XG5cbiAgICBTd2lwZXIudXNlID0gZnVuY3Rpb24gdXNlKG1vZHVsZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICBtb2R1bGUuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgICB9XG5cbiAgICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3dpcGVyLCBudWxsLCBbe1xuICAgICAga2V5OiBcImV4dGVuZGVkRGVmYXVsdHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfSgpO1xuXG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3RvdHlwZUdyb3VwKSB7XG4gICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goZnVuY3Rpb24gKHByb3RvTWV0aG9kKSB7XG4gICAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgICB9KTtcbiAgfSk7XG4gIFN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXIkMV0pO1xuXG4gIHZhciBWaXJ0dWFsID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBfc3dpcGVyJHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IF9zd2lwZXIkcGFyYW1zLnNsaWRlc1BlclZpZXcsXG4gICAgICAgICAgc2xpZGVzUGVyR3JvdXAgPSBfc3dpcGVyJHBhcmFtcy5zbGlkZXNQZXJHcm91cCxcbiAgICAgICAgICBjZW50ZXJlZFNsaWRlcyA9IF9zd2lwZXIkcGFyYW1zLmNlbnRlcmVkU2xpZGVzO1xuICAgICAgdmFyIF9zd2lwZXIkcGFyYW1zJHZpcnR1YSA9IHN3aXBlci5wYXJhbXMudmlydHVhbCxcbiAgICAgICAgICBhZGRTbGlkZXNCZWZvcmUgPSBfc3dpcGVyJHBhcmFtcyR2aXJ0dWEuYWRkU2xpZGVzQmVmb3JlLFxuICAgICAgICAgIGFkZFNsaWRlc0FmdGVyID0gX3N3aXBlciRwYXJhbXMkdmlydHVhLmFkZFNsaWRlc0FmdGVyO1xuICAgICAgdmFyIF9zd2lwZXIkdmlydHVhbCA9IHN3aXBlci52aXJ0dWFsLFxuICAgICAgICAgIHByZXZpb3VzRnJvbSA9IF9zd2lwZXIkdmlydHVhbC5mcm9tLFxuICAgICAgICAgIHByZXZpb3VzVG8gPSBfc3dpcGVyJHZpcnR1YWwudG8sXG4gICAgICAgICAgc2xpZGVzID0gX3N3aXBlciR2aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgICBwcmV2aW91c1NsaWRlc0dyaWQgPSBfc3dpcGVyJHZpcnR1YWwuc2xpZGVzR3JpZCxcbiAgICAgICAgICByZW5kZXJTbGlkZSA9IF9zd2lwZXIkdmlydHVhbC5yZW5kZXJTbGlkZSxcbiAgICAgICAgICBwcmV2aW91c09mZnNldCA9IF9zd2lwZXIkdmlydHVhbC5vZmZzZXQ7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgICAgdmFyIG9mZnNldFByb3A7XG4gICAgICBpZiAoc3dpcGVyLnJ0bFRyYW5zbGF0ZSkgb2Zmc2V0UHJvcCA9ICdyaWdodCc7ZWxzZSBvZmZzZXRQcm9wID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgc2xpZGVzQWZ0ZXI7XG4gICAgICB2YXIgc2xpZGVzQmVmb3JlO1xuXG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNBZnRlciA9IHNsaWRlc1BlclZpZXcgKyAoc2xpZGVzUGVyR3JvdXAgLSAxKSArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZyb20gPSBNYXRoLm1heCgoYWN0aXZlSW5kZXggfHwgMCkgLSBzbGlkZXNCZWZvcmUsIDApO1xuICAgICAgdmFyIHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIHZhciBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG4gICAgICBleHRlbmQoc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgc2xpZGVzR3JpZDogc3dpcGVyLnNsaWRlc0dyaWRcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc0dyaWQgIT09IHByZXZpb3VzU2xpZGVzR3JpZCAmJiBvZmZzZXQgIT09IHByZXZpb3VzT2Zmc2V0KSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgb2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICB0bzogdG8sXG4gICAgICAgICAgc2xpZGVzOiBmdW5jdGlvbiBnZXRTbGlkZXMoKSB7XG4gICAgICAgICAgICB2YXIgc2xpZGVzVG9SZW5kZXIgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUb1JlbmRlcjtcbiAgICAgICAgICB9KClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkge1xuICAgICAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXBlbmRJbmRleGVzID0gW107XG4gICAgICB2YXIgYXBwZW5kSW5kZXhlcyA9IFtdO1xuXG4gICAgICBpZiAoZm9yY2UpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykucmVtb3ZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChpIDwgZnJvbSB8fCBpID4gdG8pIHtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpICsgXCJcXFwiXVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgICAgaWYgKF9pID49IGZyb20gJiYgX2kgPD0gdG8pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goX2kpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX2kgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goX2kpO1xuICAgICAgICAgICAgaWYgKF9pIDwgcHJldmlvdXNGcm9tKSBwcmVwZW5kSW5kZXhlcy5wdXNoKF9pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgICAgcHJlcGVuZEluZGV4ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYiAtIGE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIG9mZnNldCArIFwicHhcIik7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfSxcbiAgICByZW5kZXJTbGlkZTogZnVuY3Rpb24gcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG5cbiAgICAgIGlmIChwYXJhbXMuY2FjaGUgJiYgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHZhciAkc2xpZGVFbCA9IHBhcmFtcy5yZW5kZXJTbGlkZSA/ICQocGFyYW1zLnJlbmRlclNsaWRlLmNhbGwoc3dpcGVyLCBzbGlkZSwgaW5kZXgpKSA6ICQoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiXFxcIiBkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIj5cIiArIHNsaWRlICsgXCI8L2Rpdj5cIik7XG4gICAgICBpZiAoISRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7XG4gICAgICByZXR1cm4gJHNsaWRlRWw7XG4gICAgfSxcbiAgICBhcHBlbmRTbGlkZTogZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICB9LFxuICAgIHByZXBlbmRTbGlkZTogZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgICB2YXIgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIHZhciBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgICB2YXIgbmV3Q2FjaGUgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlZEluZGV4KSB7XG4gICAgICAgICAgdmFyICRjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgICB2YXIgY2FjaGVkRWxJbmRleCA9ICRjYWNoZWRFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuXG4gICAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICAgICRjYWNoZWRFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIHBhcnNlSW50KGNhY2hlZEVsSW5kZXgsIDEwKSArIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSAkY2FjaGVkRWw7XG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgfSxcbiAgICByZW1vdmVTbGlkZTogZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNsaWRlc0luZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuXG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCwgMCk7XG4gICAgfSxcbiAgICByZW1vdmVBbGxTbGlkZXM6IGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgMCk7XG4gICAgfVxuICB9O1xuICB2YXIgVmlydHVhbCQxID0ge1xuICAgIG5hbWU6ICd2aXJ0dWFsJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHZpcnR1YWw6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNsaWRlczogW10sXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiB0cnVlLFxuICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIHZpcnR1YWw6IF9leHRlbmRzKHt9LCBWaXJ0dWFsLCB7XG4gICAgICAgICAgc2xpZGVzOiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuc2xpZGVzLFxuICAgICAgICAgIGNhY2hlOiB7fVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwidmlydHVhbFwiKTtcbiAgICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgS2V5Ym9hcmQgPSB7XG4gICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgICAgdmFyIGtjID0gZS5rZXlDb2RlIHx8IGUuY2hhckNvZGU7XG4gICAgICB2YXIgcGFnZVVwRG93biA9IHN3aXBlci5wYXJhbXMua2V5Ym9hcmQucGFnZVVwRG93bjtcbiAgICAgIHZhciBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgICAgdmFyIGlzUGFnZURvd24gPSBwYWdlVXBEb3duICYmIGtjID09PSAzNDtcbiAgICAgIHZhciBpc0Fycm93TGVmdCA9IGtjID09PSAzNztcbiAgICAgIHZhciBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgICB2YXIgaXNBcnJvd1VwID0ga2MgPT09IDM4O1xuICAgICAgdmFyIGlzQXJyb3dEb3duID0ga2MgPT09IDQwOyAvLyBEaXJlY3Rpb25zIGxvY2tzXG5cbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dMZWZ0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwIHx8IGlzUGFnZVVwKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0IHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikpIHtcbiAgICAgICAgdmFyIGluVmlldyA9IGZhbHNlOyAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcblxuICAgICAgICBpZiAoc3dpcGVyLiRlbC5wYXJlbnRzKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKS5sZW5ndGggPiAwICYmIHN3aXBlci4kZWwucGFyZW50cyhcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICAgICB2YXIgc3dpcGVyV2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBzd2lwZXJIZWlnaHQgPSAkZWxbMF0uY2xpZW50SGVpZ2h0O1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgdmFyIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG5cbiAgICAgICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aCAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodCkge1xuICAgICAgICAgICAgaWYgKHBvaW50WzBdID09PSAwICYmIHBvaW50WzFdID09PSAwKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCkge1xuICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiAhcnRsIHx8IChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgcnRsKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikge1xuICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgICAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgS2V5Ym9hcmQkMSA9IHtcbiAgICBuYW1lOiAna2V5Ym9hcmQnLFxuICAgIHBhcmFtczoge1xuICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxuICAgICAgICBwYWdlVXBEb3duOiB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIGtleWJvYXJkOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSwgS2V5Ym9hcmQpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuXG4gIGZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICAgIHZhciBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZG9jdW1lbnQpO1xuXG4gICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICBpZiAoIWlzU3VwcG9ydGVkICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiYgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gIH1cblxuICB2YXIgTW91c2V3aGVlbCA9IHtcbiAgICBsYXN0U2Nyb2xsVGltZTogbm93KCksXG4gICAgbGFzdEV2ZW50QmVmb3JlU25hcDogdW5kZWZpbmVkLFxuICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICBldmVudDogZnVuY3Rpb24gZXZlbnQoKSB7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHJldHVybiAnRE9NTW91c2VTY3JvbGwnO1xuICAgICAgcmV0dXJuIGlzRXZlbnRTdXBwb3J0ZWQoKSA/ICd3aGVlbCcgOiAnbW91c2V3aGVlbCc7XG4gICAgfSxcbiAgICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgICAvLyBSZWFzb25hYmxlIGRlZmF1bHRzXG4gICAgICB2YXIgUElYRUxfU1RFUCA9IDEwO1xuICAgICAgdmFyIExJTkVfSEVJR0hUID0gNDA7XG4gICAgICB2YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG4gICAgICB2YXIgc1ggPSAwO1xuICAgICAgdmFyIHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG5cbiAgICAgIHZhciBwWCA9IDA7XG4gICAgICB2YXIgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuICAgICAgLy8gTGVnYWN5XG5cbiAgICAgIGlmICgnZGV0YWlsJyBpbiBlKSB7XG4gICAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgICB9XG5cbiAgICAgIGlmICgnd2hlZWxEZWx0YScgaW4gZSkge1xuICAgICAgICBzWSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgICB9XG5cbiAgICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICAgIH1cblxuICAgICAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZSkge1xuICAgICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG5cblxuICAgICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHtcbiAgICAgICAgc1ggPSBzWTtcbiAgICAgICAgc1kgPSAwO1xuICAgICAgfVxuXG4gICAgICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgICBpZiAoJ2RlbHRhWScgaW4gZSkge1xuICAgICAgICBwWSA9IGUuZGVsdGFZO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgICBwWCA9IGUuZGVsdGFYO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS5zaGlmdEtleSAmJiAhcFgpIHtcbiAgICAgICAgLy8gaWYgdXNlciBzY3JvbGxzIHdpdGggc2hpZnQgaGUgd2FudHMgaG9yaXpvbnRhbCBzY3JvbGxcbiAgICAgICAgcFggPSBwWTtcbiAgICAgICAgcFkgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgICBpZiAoZS5kZWx0YU1vZGUgPT09IDEpIHtcbiAgICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICB9XG4gICAgICB9IC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG5cblxuICAgICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBZICYmICFzWSkge1xuICAgICAgICBzWSA9IHBZIDwgMSA/IC0xIDogMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Bpblg6IHNYLFxuICAgICAgICBzcGluWTogc1ksXG4gICAgICAgIHBpeGVsWDogcFgsXG4gICAgICAgIHBpeGVsWTogcFlcbiAgICAgIH07XG4gICAgfSxcbiAgICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGhhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICB2YXIgZSA9IGV2ZW50O1xuICAgICAgdmFyIGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5tb3VzZUVudGVyZWQgJiYgIXRhcmdldFswXS5jb250YWlucyhlLnRhcmdldCkgJiYgIXBhcmFtcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG5cbiAgICAgIHZhciBkZWx0YSA9IDA7XG4gICAgICB2YXIgcnRsRmFjdG9yID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAgIHZhciBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWTtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAocGFyYW1zLmludmVydCkgZGVsdGEgPSAtZGVsdGE7IC8vIEdldCB0aGUgc2Nyb2xsIHBvc2l0aW9uc1xuXG4gICAgICB2YXIgcG9zaXRpb25zID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgICBpZiAocG9zaXRpb25zID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHBvc2l0aW9ucyA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTsgLy8gV2hlbiBsb29wIGlzIHRydWU6XG4gICAgICAvLyAgICAgdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgICAgLy8gV2hlbiBsb29wIGlzIGZhbHNlOlxuICAgICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgcG9zaXRpb25zIGlzIG5vdCBvbiBlZGdlLFxuICAgICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnMsXG4gICAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIGZhbHNlLlxuXG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gc3dpcGVyLnBhcmFtcy5sb29wID8gdHJ1ZSA6ICEocG9zaXRpb25zID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb25zID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpO1xuICAgICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIgJiYgc3dpcGVyLnBhcmFtcy5uZXN0ZWQpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICAgIHZhciBuZXdFdmVudCA9IHtcbiAgICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSxcbiAgICAgICAgICByYXc6IGV2ZW50XG4gICAgICAgIH07IC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuXG4gICAgICAgIHZhciByZWNlbnRXaGVlbEV2ZW50cyA9IHN3aXBlci5tb3VzZXdoZWVsLnJlY2VudFdoZWVsRXZlbnRzO1xuXG4gICAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7IC8vIElmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmV2aW91cyByZWNvcmRlZCBldmVudDpcbiAgICAgICAgLy8gICBJZiBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgb3JcbiAgICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLlxuICAgICAgICAvLyBFbHNlICh0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB3aGVlbCBpcyBtb3ZlZCk6XG4gICAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG5cbiAgICAgICAgaWYgKHByZXZFdmVudCkge1xuICAgICAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24gfHwgbmV3RXZlbnQuZGVsdGEgPiBwcmV2RXZlbnQuZGVsdGEgfHwgbmV3RXZlbnQudGltZSA+IHByZXZFdmVudC50aW1lICsgMTUwKSB7XG4gICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICAgIH0gLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgICAgLy8gICBSZXR1cm4gbm93IHNvIHlvdSBkb24ndCBoaXQgdGhlIHByZXZlbnREZWZhdWx0LlxuXG5cbiAgICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZyZWVtb2RlIG9yIHNjcm9sbENvbnRhaW5lcjpcbiAgICAgICAgLy8gSWYgd2UgcmVjZW50bHkgc25hcHBlZCBhZnRlciBhIG1vbWVudHVtIHNjcm9sbCwgdGhlbiBpZ25vcmUgd2hlZWwgZXZlbnRzXG4gICAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAgIC8vIG9yIGlmIGl0J3MgYSBuZXcgc2Nyb2xsIChsYXJnZXIgZGVsdGEgb3IgaW52ZXJzZSBzaWduIGFzIGxhc3QgZXZlbnQgYmVmb3JlXG4gICAgICAgIC8vIGFuIGVuZC1vZi1tb21lbnR1bSBzbmFwKS5cbiAgICAgICAgdmFyIF9uZXdFdmVudCA9IHtcbiAgICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbGFzdEV2ZW50QmVmb3JlU25hcCA9IHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXA7XG4gICAgICAgIHZhciBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgX25ld0V2ZW50LnRpbWUgPCBsYXN0RXZlbnRCZWZvcmVTbmFwLnRpbWUgKyA1MDAgJiYgX25ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgX25ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG5cbiAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykge1xuICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICAgIHZhciB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgICAgdmFyIHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICAgICAgaWYgKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdoZWVsIHNjcm9sbGluZyBzdGFydHMgd2l0aCBzdGlja3kgKGFrYSBzbmFwKSBlbmFibGVkLCB0aGVuIGRldGVjdFxuICAgICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy5cbiAgICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgICAgLy8gMi4gZGlkIGFsbCBOIGV2ZW50cyBhcnJpdmUgaW4gdGhlIGxhc3QgTSAoTT01MDA/KSBtc2Vjcz9cbiAgICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3NcbiAgICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgICAgLy8gNC4gZG9lcyB0aGUgbGF0ZXN0IGV2ZW50IGhhdmUgYSBkZWx0YSB0aGF0J3Mgc21hbGxlciB0aGFuIFEgKFE9Nj8pIHBpeGVscz9cbiAgICAgICAgICAgIC8vIElmIDEtNCBhcmUgXCJ5ZXNcIiB0aGVuIHdlJ3JlIG5lYXIgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBkZWNlbGVyYXRpb24uXG4gICAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlIGZvciBcInJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGxcIiBkZXRlcm1pbmF0aW9uLlxuICAgICAgICAgICAgLy8gSWYgMS00IGFyZW4ndCBzYXRpc2ZpZWQsIHRoZW4gd2FpdCB0byBzbmFwIHVudGlsIDUwMG1zIGFmdGVyIHRoZSBsYXN0IGV2ZW50LlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBfcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcblxuICAgICAgICAgICAgaWYgKF9yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUpIHtcbiAgICAgICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgX3ByZXZFdmVudCA9IF9yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyBfcmVjZW50V2hlZWxFdmVudHNbX3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB2YXIgZmlyc3RFdmVudCA9IF9yZWNlbnRXaGVlbEV2ZW50c1swXTtcblxuICAgICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnB1c2goX25ld0V2ZW50KTtcblxuICAgICAgICAgICAgaWYgKF9wcmV2RXZlbnQgJiYgKF9uZXdFdmVudC5kZWx0YSA+IF9wcmV2RXZlbnQuZGVsdGEgfHwgX25ld0V2ZW50LmRpcmVjdGlvbiAhPT0gX3ByZXZFdmVudC5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgIC8vIEluY3JlYXNpbmcgb3IgcmV2ZXJzZS1zaWduIGRlbHRhIG1lYW5zIHRoZSB1c2VyIHN0YXJ0ZWQgc2Nyb2xsaW5nIGFnYWluLiBDbGVhciB0aGUgd2hlZWwgZXZlbnQgbG9nLlxuICAgICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1ICYmIF9uZXdFdmVudC50aW1lIC0gZmlyc3RFdmVudC50aW1lIDwgNTAwICYmIGZpcnN0RXZlbnQuZGVsdGEgLSBfbmV3RXZlbnQuZGVsdGEgPj0gMSAmJiBfbmV3RXZlbnQuZGVsdGEgPD0gNikge1xuICAgICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAgIC8vIEFsc28sIGJlY2F1c2UgdGhlcmUncyBzb21lIHJlbWFpbmluZyBtb21lbnR1bSB3ZSdsbCBiaWFzIHRoZSBzbmFwIGluIHRoZVxuICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgICAvLyBpZiBpdCdzIGFscmVhZHkgc2Nyb2xsZWQgbW9yZSB0aGFuIDIwJSBpbiB0aGUgY3VycmVudCBkaXJlY3Rpb24sIGtlZXAgZ29pbmcuXG4gICAgICAgICAgICAgIHZhciBzbmFwVG9UaHJlc2hvbGQgPSBkZWx0YSA+IDAgPyAwLjggOiAwLjI7XG4gICAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBfbmV3RXZlbnQ7XG5cbiAgICAgICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcblxuICAgICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICAgIH0sIDApOyAvLyBubyBkZWxheTsgbW92ZSBvbiBuZXh0IHRpY2tcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KSB7XG4gICAgICAgICAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCB0aGVuIHdlIGhhdmVuJ3QgZGV0ZWN0ZWQgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc29cbiAgICAgICAgICAgICAgLy8gd2UnbGwgY29uc2lkZXIgYSBzY3JvbGwgXCJjb21wbGV0ZVwiIHdoZW4gdGhlcmUgaGF2ZW4ndCBiZWVuIGFueSB3aGVlbCBldmVudHNcbiAgICAgICAgICAgICAgLy8gZm9yIDUwMG1zLlxuICAgICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzbmFwVG9UaHJlc2hvbGQgPSAwLjU7XG4gICAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IF9uZXdFdmVudDtcblxuICAgICAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gRW1pdCBldmVudFxuXG5cbiAgICAgICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7IC8vIFN0b3AgYXV0b3BsYXlcblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTsgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zXG5cbiAgICAgICAgICBpZiAocG9zaXRpb24gPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbiA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgYW5pbWF0ZVNsaWRlcjogZnVuY3Rpb24gYW5pbWF0ZVNsaWRlcihuZXdFdmVudCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhICYmIG5ld0V2ZW50LmRlbHRhIDwgdGhpcy5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkge1xuICAgICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgICAvLyBQcmV2ZW50IGlmIHRpbWUgYmV0d2VlbiBzY3JvbGxzIGlzIGJlbG93IGNvbmZpZ3VyZWQgdGhyZXNob2xkXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgICAgLy8gaWYgdGhlIGxhc3QgdGltZSB0aGUgdXNlciBzY3JvbGxlZCB3YXMgdG9vIGNsb3NlIHRvIHRoZSBjdXJyZW50IG9uZSAoYXZvaWQgY29udGludW91c2x5IHRyaWdnZXJpbmcgdGhlIHNsaWRlcik6XG4gICAgICAvLyAgIERvbid0IGdvIGFueSBmdXJ0aGVyIChhdm9pZCBpbnNpZ25pZmljYW50IHNjcm9sbCBtb3ZlbWVudCkuXG5cblxuICAgICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDpcbiAgICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAgIC8vICAgaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgICAgLy8gICAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG4gICAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmRcbiAgICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAgIC8vIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgICAgLy8gICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuXG5cbiAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgIGlmICgoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTtcbiAgICAgIH0gLy8gSWYgeW91IGdvdCBoZXJlIGlzIGJlY2F1c2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHRyaWdnZXJlZCBzbyBzdG9yZSB0aGUgY3VycmVudCB0aW1lXG5cblxuICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuXG4gICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgZXZlbnQgPSBNb3VzZXdoZWVsLmV2ZW50KCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgICB0YXJnZXQub24oJ21vdXNlbGVhdmUnLCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlKTtcbiAgICAgIHRhcmdldC5vbihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgZXZlbnQgPSBNb3VzZXdoZWVsLmV2ZW50KCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldC5vZmYoZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHZhciBNb3VzZXdoZWVsJDEgPSB7XG4gICAgbmFtZTogJ21vdXNld2hlZWwnLFxuICAgIHBhcmFtczoge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgICAgICBpbnZlcnQ6IGZhbHNlLFxuICAgICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgICAgICBldmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICAgICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgICAgdGhyZXNob2xkVGltZTogbnVsbFxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50czogW10sXG4gICAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZSxcbiAgICAgICAgICBkaXNhYmxlOiBNb3VzZXdoZWVsLmRpc2FibGUsXG4gICAgICAgICAgaGFuZGxlOiBNb3VzZXdoZWVsLmhhbmRsZSxcbiAgICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgICAgaGFuZGxlTW91c2VMZWF2ZTogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgIGFuaW1hdGVTbGlkZXI6IE1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcixcbiAgICAgICAgICByZWxlYXNlU2Nyb2xsOiBNb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBOYXZpZ2F0aW9uID0ge1xuICAgIHRvZ2dsZUVsOiBmdW5jdGlvbiB0b2dnbGVFbCgkZWwsIGRpc2FibGVkKSB7XG4gICAgICAkZWxbZGlzYWJsZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10odGhpcy5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICAgIGlmICgkZWxbMF0gJiYgJGVsWzBdLnRhZ05hbWUgPT09ICdCVVRUT04nKSAkZWxbMF0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgICAgdmFyIHRvZ2dsZUVsID0gc3dpcGVyLm5hdmlnYXRpb24udG9nZ2xlRWw7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kbmV4dEVsLFxuICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJHByZXZFbDtcblxuICAgICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICB0b2dnbGVFbCgkcHJldkVsLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2dnbGVFbCgkcHJldkVsLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgJHByZXZFbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICB0b2dnbGVFbCgkbmV4dEVsLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2dnbGVFbCgkbmV4dEVsLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgJG5leHRFbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9uUHJldkNsaWNrOiBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0sXG4gICAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIuJGVsLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMsIHtcbiAgICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgICAgcHJldkVsOiAnc3dpcGVyLWJ1dHRvbi1wcmV2J1xuICAgICAgfSk7XG4gICAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgICB2YXIgJG5leHRFbDtcbiAgICAgIHZhciAkcHJldkVsO1xuXG4gICAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgICAkbmV4dEVsID0gJChwYXJhbXMubmV4dEVsKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZycgJiYgJG5leHRFbC5sZW5ndGggPiAxICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMucHJldkVsKSB7XG4gICAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJyAmJiAkcHJldkVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRwcmV2RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHByZXZFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgICB9XG5cbiAgICAgIGV4dGVuZChzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgICAkbmV4dEVsOiAkbmV4dEVsLFxuICAgICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICAgJHByZXZFbDogJHByZXZFbCxcbiAgICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIGlmICgkbmV4dEVsKSAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICBpZiAoJHByZXZFbCkgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24yID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJG5leHRFbCxcbiAgICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uMi4kcHJldkVsO1xuXG4gICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgICAkcHJldkVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIE5hdmlnYXRpb24kMSA9IHtcbiAgICBuYW1lOiAnbmF2aWdhdGlvbicsXG4gICAgcGFyYW1zOiB7XG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgICAgbmF2aWdhdGlvbjogX2V4dGVuZHMoe30sIE5hdmlnYXRpb24pXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi5pbml0KCk7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHRvRWRnZTogZnVuY3Rpb24gdG9FZGdlKHN3aXBlcikge1xuICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBmcm9tRWRnZTogZnVuY3Rpb24gZnJvbUVkZ2Uoc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgICAnZW5hYmxlIGRpc2FibGUnOiBmdW5jdGlvbiBlbmFibGVEaXNhYmxlKHN3aXBlcikge1xuICAgICAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uMyA9IHN3aXBlci5uYXZpZ2F0aW9uLFxuICAgICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjMuJG5leHRFbCxcbiAgICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24zLiRwcmV2RWw7XG5cbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICAkbmV4dEVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uNCA9IHN3aXBlci5uYXZpZ2F0aW9uLFxuICAgICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjQuJG5leHRFbCxcbiAgICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb240LiRwcmV2RWw7XG4gICAgICAgIHZhciB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgISQodGFyZ2V0RWwpLmlzKCRwcmV2RWwpICYmICEkKHRhcmdldEVsKS5pcygkbmV4dEVsKSkge1xuICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgICAgICB2YXIgaXNIaWRkZW47XG5cbiAgICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgICBpc0hpZGRlbiA9ICRwcmV2RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBQYWdpbmF0aW9uID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsgLy8gQ3VycmVudC9Ub3RhbFxuXG4gICAgICB2YXIgY3VycmVudDtcbiAgICAgIHZhciB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgICBjdXJyZW50IC09IHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIGN1cnJlbnQgPSB0b3RhbCArIGN1cnJlbnQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICAgIH0gLy8gVHlwZXNcblxuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICAgIHZhciBmaXJzdEluZGV4O1xuICAgICAgICB2YXIgbGFzdEluZGV4O1xuICAgICAgICB2YXIgbWlkSW5kZXg7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAgICRlbC5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KSArIFwicHhcIik7XG5cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSBzd2lwZXIucHJldmlvdXNJbmRleDtcblxuICAgICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlyc3RJbmRleCA9IGN1cnJlbnQgLSBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXg7XG4gICAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuXG4gICAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGJ1bGxldHMuZWFjaChmdW5jdGlvbiAoYnVsbGV0KSB7XG4gICAgICAgICAgICB2YXIgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAkYnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICRidWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgICB2YXIgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgdmFyICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgICB2YXIgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gX2kpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICB2YXIgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICAgIHZhciBidWxsZXRzT2Zmc2V0ID0gKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBidWxsZXRzT2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpO1xuICAgICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIHZhciBwcm9ncmVzc2JhckRpcmVjdGlvbjtcblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICB2YXIgc2NhbGVYID0gMTtcbiAgICAgICAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIgKyBzY2FsZVggKyBcIikgc2NhbGVZKFwiICsgc2NhbGVZICsgXCIpXCIpLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgJGVsWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgJGVsWzBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkZWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICAgdmFyIHBhZ2luYXRpb25IVE1MID0gJyc7XG5cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICAgIHZhciBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkge1xuICAgICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gXCI8XCIgKyBwYXJhbXMuYnVsbGV0RWxlbWVudCArIFwiIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5idWxsZXRDbGFzcyArIFwiXFxcIj48L1wiICsgcGFyYW1zLmJ1bGxldEVsZW1lbnQgKyBcIj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMuY3VycmVudENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIiArICcgLyAnICsgKFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnRvdGFsQ2xhc3MgKyBcIlxcXCI+PC9zcGFuPlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlci4kZWwsIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cywge1xuICAgICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgICAgfSk7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgJGVsLmFkZENsYXNzKFwiXCIgKyBwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlICsgXCItZHluYW1pY1wiKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAkZWwub24oJ2NsaWNrJywgY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBleHRlbmQoc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICAgJGVsOiAkZWwsXG4gICAgICAgIGVsOiAkZWxbMF1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5oaWRkZW5DbGFzcyk7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAkZWwub2ZmKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIFBhZ2luYXRpb24kMSA9IHtcbiAgICBuYW1lOiAncGFnaW5hdGlvbicsXG4gICAgcGFyYW1zOiB7XG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGVsOiBudWxsLFxuICAgICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvbkN1cnJlbnQobnVtYmVyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gZm9ybWF0RnJhY3Rpb25Ub3RhbChudW1iZXIpIHtcbiAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9LFxuICAgICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScsXG4gICAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLFxuICAgICAgICAvLyBORVdcbiAgICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICAgIHRvdGFsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi10b3RhbCcsXG4gICAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUnLFxuICAgICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsXG4gICAgICAgIC8vIE5FV1xuICAgICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1sb2NrJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBwYWdpbmF0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwXG4gICAgICAgIH0sIFBhZ2luYXRpb24pXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBhY3RpdmVJbmRleENoYW5nZTogZnVuY3Rpb24gYWN0aXZlSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNuYXBJbmRleENoYW5nZTogZnVuY3Rpb24gc25hcEluZGV4Q2hhbmdlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2xpZGVzTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZXNMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbmFwR3JpZExlbmd0aENoYW5nZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgICAnZW5hYmxlIGRpc2FibGUnOiBmdW5jdGlvbiBlbmFibGVEaXNhYmxlKHN3aXBlcikge1xuICAgICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuXG4gICAgICAgIGlmICgkZWwpIHtcbiAgICAgICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soc3dpcGVyLCBlKSB7XG4gICAgICAgIHZhciB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrICYmIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPiAwICYmICEkKHRhcmdldEVsKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgICAgICB2YXIgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcblxuICAgICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBTY3JvbGxiYXIgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICB2YXIgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemUsXG4gICAgICAgICAgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZSxcbiAgICAgICAgICAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWwsXG4gICAgICAgICAgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgIHZhciBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgICB2YXIgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuXG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG5cbiAgICAgICAgaWYgKG5ld1BvcyA+IDApIHtcbiAgICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICgtbmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld1BvcyA8IDApIHtcbiAgICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICRkcmFnRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyBuZXdQb3MgKyBcInB4LCAwLCAwKVwiKTtcbiAgICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBuZXdQb3MgKyBcInB4LCAwKVwiKTtcbiAgICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBuZXdTaXplICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLiRkcmFnRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICB1cGRhdGVTaXplOiBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWwsXG4gICAgICAgICAgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSAnJztcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB2YXIgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgICB2YXIgbW92ZURpdmlkZXIgPSBkaXZpZGVyICogKHRyYWNrU2l6ZSAvIHN3aXBlci5zaXplKTtcbiAgICAgIHZhciBkcmFnU2l6ZTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBkcmFnU2l6ZSArIFwicHhcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICAgdHJhY2tTaXplOiB0cmFja1NpemUsXG4gICAgICAgIGRpdmlkZXI6IGRpdmlkZXIsXG4gICAgICAgIG1vdmVEaXZpZGVyOiBtb3ZlRGl2aWRlcixcbiAgICAgICAgZHJhZ1NpemU6IGRyYWdTaXplXG4gICAgICB9KTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0UG9pbnRlclBvc2l0aW9uOiBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcbiAgICB9LFxuICAgIHNldERyYWdQb3NpdGlvbjogZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICAgIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplLFxuICAgICAgICAgIHRyYWNrU2l6ZSA9IHNjcm9sbGJhci50cmFja1NpemUsXG4gICAgICAgICAgZHJhZ1N0YXJ0UG9zID0gc2Nyb2xsYmFyLmRyYWdTdGFydFBvcztcbiAgICAgIHZhciBwb3NpdGlvblJhdGlvO1xuICAgICAgcG9zaXRpb25SYXRpbyA9IChzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gJGVsLm9mZnNldCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuXG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH0sXG4gICAgb25EcmFnU3RhcnQ6IGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgICAgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gJGRyYWdFbFswXSB8fCBlLnRhcmdldCA9PT0gJGRyYWdFbCA/IHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gOiBudWxsO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICAgJGRyYWdFbC50cmFuc2l0aW9uKDEwMCk7XG4gICAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgJGVsLnRyYW5zaXRpb24oMCk7XG5cbiAgICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICAgIH0sXG4gICAgb25EcmFnTW92ZTogZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDApO1xuICAgICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgICB9LFxuICAgIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICcnKTtcbiAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc25hcE9uUmVsZWFzZSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVuYWJsZURyYWdnYWJsZTogZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICAgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoLFxuICAgICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICAgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoLFxuICAgICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgICAkc3dpcGVyRWwgPSBzd2lwZXIuJGVsO1xuICAgICAgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIgPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKCRzd2lwZXJFbCwgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIsIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMsIHtcbiAgICAgICAgZWw6ICdzd2lwZXItc2Nyb2xsYmFyJ1xuICAgICAgfSk7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgICAgdmFyICRlbCA9ICQocGFyYW1zLmVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICAgIH1cblxuICAgICAgdmFyICRkcmFnRWwgPSAkZWwuZmluZChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyk7XG5cbiAgICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkZHJhZ0VsID0gJChcIjxkaXYgY2xhc3M9XFxcIlwiICsgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgJGVsLmFwcGVuZCgkZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgICAkZWw6ICRlbCxcbiAgICAgICAgZWw6ICRlbFswXSxcbiAgICAgICAgJGRyYWdFbDogJGRyYWdFbCxcbiAgICAgICAgZHJhZ0VsOiAkZHJhZ0VsWzBdXG4gICAgICB9KTtcblxuICAgICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgICAgc2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGVsKSB7XG4gICAgICAgICRlbFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICB9O1xuICB2YXIgU2Nyb2xsYmFyJDEgPSB7XG4gICAgbmFtZTogJ3Njcm9sbGJhcicsXG4gICAgcGFyYW1zOiB7XG4gICAgICBzY3JvbGxiYXI6IHtcbiAgICAgICAgZWw6IG51bGwsXG4gICAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICAgIGhpZGU6IGZhbHNlLFxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLFxuICAgICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWxvY2snLFxuICAgICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIHNjcm9sbGJhcjogX2V4dGVuZHMoe1xuICAgICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgICBkcmFnVGltZW91dDogbnVsbFxuICAgICAgICB9LCBTY3JvbGxiYXIpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmluaXQoKTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIH0sXG4gICAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICAgICdlbmFibGUgZGlzYWJsZSc6IGZ1bmN0aW9uIGVuYWJsZURpc2FibGUoc3dpcGVyKSB7XG4gICAgICAgIHZhciAkZWwgPSBzd2lwZXIuc2Nyb2xsYmFyLiRlbDtcblxuICAgICAgICBpZiAoJGVsKSB7XG4gICAgICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIFBhcmFsbGF4ID0ge1xuICAgIHNldFRyYW5zZm9ybTogZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICAgIHZhciBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG4gICAgICB2YXIgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICAgIHZhciB4ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICAgIHZhciB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICAgIHZhciBzY2FsZSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgICAgdmFyIG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgICBpZiAoeCB8fCB5KSB7XG4gICAgICAgIHggPSB4IHx8ICcwJztcbiAgICAgICAgeSA9IHkgfHwgJzAnO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgeCA9IHA7XG4gICAgICAgIHkgPSAnMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gcDtcbiAgICAgICAgeCA9ICcwJztcbiAgICAgIH1cblxuICAgICAgaWYgKHguaW5kZXhPZignJScpID49IDApIHtcbiAgICAgICAgeCA9IHBhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yICsgXCIlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0geCAqIHByb2dyZXNzICogcnRsRmFjdG9yICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICB5ID0gcGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3MgKyBcIiVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSB5ICogcHJvZ3Jlc3MgKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICAgJGVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgMHB4KVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjdXJyZW50U2NhbGUgPSBzY2FsZSAtIChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgICAkZWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpIHNjYWxlKFwiICsgY3VycmVudFNjYWxlICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3MsXG4gICAgICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgICAkZWwuY2hpbGRyZW4oJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsLCBzbGlkZUluZGV4KSB7XG4gICAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgICBzbGlkZVByb2dyZXNzICs9IE1hdGguY2VpbChzbGlkZUluZGV4IC8gMikgLSBwcm9ncmVzcyAqIChzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgICAkKHNsaWRlRWwpLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHNsaWRlUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgICRlbC5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAocGFyYWxsYXhFbCkge1xuICAgICAgICB2YXIgJHBhcmFsbGF4RWwgPSAkKHBhcmFsbGF4RWwpO1xuICAgICAgICB2YXIgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICAgJHBhcmFsbGF4RWwudHJhbnNpdGlvbihwYXJhbGxheER1cmF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIFBhcmFsbGF4JDEgPSB7XG4gICAgbmFtZTogJ3BhcmFsbGF4JyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHBhcmFsbGF4OiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIHBhcmFsbGF4OiBfZXh0ZW5kcyh7fSwgUGFyYWxsYXgpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIFpvb20gPSB7XG4gICAgLy8gQ2FsYyBTY2FsZSBGcm9tIE11bHRpLXRvdWNoZXNcbiAgICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzOiBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgICB2YXIgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgeTEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB2YXIgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgICB2YXIgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSk7XG4gICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfSxcbiAgICAvLyBFdmVudHNcbiAgICBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwgfHwgIWdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoID09PSAwKSBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoXCIuXCIgKyBwYXJhbXMuY29udGFpbmVyQ2xhc3MpO1xuICAgICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcblxuICAgICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICAgIH0sXG4gICAgb25HZXN0dXJlQ2hhbmdlOiBmdW5jdGlvbiBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSB0cnVlO1xuICAgICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdnZXN0dXJlY2hhbmdlJykgem9vbS5vbkdlc3R1cmVTdGFydChlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICB6b29tLnNjYWxlID0gZS5zY2FsZSAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0ICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyBNYXRoLnBvdyh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbyArIDEsIDAuNSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh6b29tLnNjYWxlIDwgcGFyYW1zLm1pblJhdGlvKSB7XG4gICAgICAgIHpvb20uc2NhbGUgPSBwYXJhbXMubWluUmF0aW8gKyAxIC0gTWF0aC5wb3cocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEsIDAuNSk7XG4gICAgICB9XG5cbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgICB9LFxuICAgIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIGlmICghem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgfHwgIXpvb20uZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICAgIHpvb20uaXNTY2FsaW5nID0gZmFsc2U7XG4gICAgICBpZiAoem9vbS5zY2FsZSA9PT0gMSkgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmUsXG4gICAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBpZiAoZGV2aWNlLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9LFxuICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgICAgdmVsb2NpdHkgPSB6b29tLnZlbG9jaXR5O1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHJldHVybjtcblxuICAgICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7XG4gICAgICAgIGltYWdlLndpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGltYWdlLnN0YXJ0WCA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3gnKSB8fCAwO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd5JykgfHwgMDtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUhlaWdodCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDApO1xuXG4gICAgICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICAgICAgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgICB9XG4gICAgICB9IC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcblxuXG4gICAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcbiAgICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47XG4gICAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICF6b29tLmlzU2NhbGluZykge1xuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54IHx8IE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpKSB7XG4gICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiBpbWFnZS50b3VjaGVzU3RhcnQueSkpIHtcbiAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGltYWdlLnRvdWNoZXNTdGFydC54ICsgaW1hZ2Uuc3RhcnRYO1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyBpbWFnZS5zdGFydFk7XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIE1hdGgucG93KGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCArIDEsIDAuOCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5tYXhYIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCArIDEsIDAuOCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5taW5ZICsgMSAtIE1hdGgucG93KGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEsIDAuOCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSArIDEsIDAuOCk7XG4gICAgICB9IC8vIFZlbG9jaXR5XG5cblxuICAgICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgICBpZiAoIXZlbG9jaXR5LnByZXZUaW1lKSB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG4gICAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSA8IDIpIHZlbG9jaXR5LnggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHZlbG9jaXR5LnkgPSAwO1xuICAgICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaW1hZ2UuY3VycmVudFggKyBcInB4LCBcIiArIGltYWdlLmN1cnJlbnRZICsgXCJweCwwKVwiKTtcbiAgICB9LFxuICAgIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgICAgdmVsb2NpdHkgPSB6b29tLnZlbG9jaXR5O1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgICB2YXIgbmV3UG9zaXRpb25YID0gaW1hZ2UuY3VycmVudFggKyBtb21lbnR1bURpc3RhbmNlWDtcbiAgICAgIHZhciBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICAgIHZhciBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZOyAvLyBGaXggZHVyYXRpb25cblxuICAgICAgaWYgKHZlbG9jaXR5LnggIT09IDApIG1vbWVudHVtRHVyYXRpb25YID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWCAtIGltYWdlLmN1cnJlbnRYKSAvIHZlbG9jaXR5LngpO1xuICAgICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBuZXdQb3NpdGlvblg7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTsgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuXG4gICAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcbiAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WSwgaW1hZ2UubWF4WSksIGltYWdlLm1pblkpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIGltYWdlLmN1cnJlbnRYICsgXCJweCwgXCIgKyBpbWFnZS5jdXJyZW50WSArIFwicHgsMClcIik7XG4gICAgfSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuXG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICAgIGlmIChnZXN0dXJlLiRpbWFnZUVsKSB7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gVG9nZ2xlIFpvb21cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG5cbiAgICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgem9vbS5vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgem9vbS5pbihlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluOiBmdW5jdGlvbiBfaW4oZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlLFxuICAgICAgICAgIGltYWdlID0gem9vbS5pbWFnZTtcblxuICAgICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoXCIuXCIgKyBwYXJhbXMuY29udGFpbmVyQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDAgfHwgIWdlc3R1cmUuJGltYWdlV3JhcEVsIHx8IGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbC5hZGRDbGFzcyhcIlwiICsgcGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpO1xuICAgICAgdmFyIHRvdWNoWDtcbiAgICAgIHZhciB0b3VjaFk7XG4gICAgICB2YXIgb2Zmc2V0WDtcbiAgICAgIHZhciBvZmZzZXRZO1xuICAgICAgdmFyIGRpZmZYO1xuICAgICAgdmFyIGRpZmZZO1xuICAgICAgdmFyIHRyYW5zbGF0ZVg7XG4gICAgICB2YXIgdHJhbnNsYXRlWTtcbiAgICAgIHZhciBpbWFnZVdpZHRoO1xuICAgICAgdmFyIGltYWdlSGVpZ2h0O1xuICAgICAgdmFyIHNjYWxlZFdpZHRoO1xuICAgICAgdmFyIHNjYWxlZEhlaWdodDtcbiAgICAgIHZhciB0cmFuc2xhdGVNaW5YO1xuICAgICAgdmFyIHRyYW5zbGF0ZU1pblk7XG4gICAgICB2YXIgdHJhbnNsYXRlTWF4WDtcbiAgICAgIHZhciB0cmFuc2xhdGVNYXhZO1xuICAgICAgdmFyIHNsaWRlV2lkdGg7XG4gICAgICB2YXIgc2xpZGVIZWlnaHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPT09ICd1bmRlZmluZWQnICYmIGUpIHtcbiAgICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgIHRvdWNoWSA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgICAgfVxuXG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgIHpvb20uY3VycmVudFNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcblxuICAgICAgaWYgKGUpIHtcbiAgICAgICAgc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICAgIGRpZmZYID0gb2Zmc2V0WCArIHNsaWRlV2lkdGggLyAyIC0gdG91Y2hYO1xuICAgICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG4gICAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgICBzY2FsZWRIZWlnaHQgPSBpbWFnZUhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgICAgIHRyYW5zbGF0ZU1pblggPSBNYXRoLm1pbihzbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgICB0cmFuc2xhdGVNYXhZID0gLXRyYW5zbGF0ZU1pblk7XG4gICAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSBkaWZmWSAqIHpvb20uc2NhbGU7XG5cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNsYXRlWCA+IHRyYW5zbGF0ZU1heFgpIHtcbiAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2xhdGVZIDwgdHJhbnNsYXRlTWluWSkge1xuICAgICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgICB0cmFuc2xhdGVZID0gMDtcbiAgICAgIH1cblxuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsIFwiICsgdHJhbnNsYXRlWSArIFwicHgsMClcIik7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICAgIH0sXG4gICAgb3V0OiBmdW5jdGlvbiBvdXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwIHx8ICFnZXN0dXJlLiRpbWFnZVdyYXBFbCB8fCBnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcyhcIlwiICsgcGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHRvZ2dsZUdlc3R1cmVzOiBmdW5jdGlvbiB0b2dnbGVHZXN0dXJlcyhtZXRob2QpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBzZWxlY3RvciA9IHpvb20uc2xpZGVTZWxlY3RvcixcbiAgICAgICAgICBwYXNzaXZlID0gem9vbS5wYXNzaXZlTGlzdGVuZXI7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlc3RhcnQnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZSk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlY2hhbmdlJywgc2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVlbmQnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmUpO1xuICAgIH0sXG4gICAgZW5hYmxlR2VzdHVyZXM6IGZ1bmN0aW9uIGVuYWJsZUdlc3R1cmVzKCkge1xuICAgICAgaWYgKHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQpIHJldHVybjtcbiAgICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKCdvbicpO1xuICAgIH0sXG4gICAgZGlzYWJsZUdlc3R1cmVzOiBmdW5jdGlvbiBkaXNhYmxlR2VzdHVyZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQpIHJldHVybjtcbiAgICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuem9vbS50b2dnbGVHZXN0dXJlcygnb2ZmJyk7XG4gICAgfSxcbiAgICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIGlmICh6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgdmFyIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgIH0gOiB0cnVlO1xuICAgICAgdmFyIHNsaWRlU2VsZWN0b3IgPSBcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcztcbiAgICAgIHN3aXBlci56b29tLnBhc3NpdmVMaXN0ZW5lciA9IHBhc3NpdmVMaXN0ZW5lcjtcbiAgICAgIHN3aXBlci56b29tLnNsaWRlU2VsZWN0b3IgPSBzbGlkZVNlbGVjdG9yOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci56b29tLmVuYWJsZUdlc3R1cmVzLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBzd2lwZXIuem9vbS5kaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgICAgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNb3ZlIGltYWdlXG5cblxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIFwiLlwiICsgc3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzLCB6b29tLm9uVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBpZiAoIXpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICB2YXIgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgfSA6IHRydWU7XG4gICAgICB2YXIgc2xpZGVTZWxlY3RvciA9IFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNb3ZlIGltYWdlXG5cblxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBcIi5cIiArIHN3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcywgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgfVxuICB9O1xuICB2YXIgWm9vbSQxID0ge1xuICAgIG5hbWU6ICd6b29tJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHpvb206IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgICBtaW5SYXRpbzogMSxcbiAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICB6b29tOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgICAgZ2VzdHVyZToge1xuICAgICAgICAgICAgJHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNsaWRlSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAkaW1hZ2VFbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhSYXRpbzogM1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW5YOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdGFydFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICAgICAgICAgIHRvdWNoZXNDdXJyZW50OiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFpvb20pXG4gICAgICB9KTtcbiAgICAgIHZhciBzY2FsZSA9IDE7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3dpcGVyLnpvb20sICdzY2FsZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIGlmIChzY2FsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpbWFnZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3pvb21DaGFuZ2UnLCB2YWx1ZSwgaW1hZ2VFbCwgc2xpZGVFbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLnpvb20uZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgICB9LFxuICAgICAgdG91Y2hTdGFydDogZnVuY3Rpb24gdG91Y2hTdGFydChzd2lwZXIsIGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICAgIH0sXG4gICAgICB0b3VjaEVuZDogZnVuY3Rpb24gdG91Y2hFbmQoc3dpcGVyLCBlKSB7XG4gICAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuem9vbS5vblRvdWNoRW5kKGUpO1xuICAgICAgfSxcbiAgICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gZG91YmxlVGFwKHN3aXBlciwgZSkge1xuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20udG9nZ2xlKSB7XG4gICAgICAgICAgc3dpcGVyLnpvb20udG9nZ2xlKGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIExhenkgPSB7XG4gICAgbG9hZEluU2xpZGU6IGZ1bmN0aW9uIGxvYWRJblNsaWRlKGluZGV4LCBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgIGlmIChsb2FkSW5EdXBsaWNhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBsb2FkSW5EdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmxhenk7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBpc1ZpcnR1YWwgPyBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiXVwiKSA6IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgICAgdmFyICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKFwiLlwiICsgcGFyYW1zLmVsZW1lbnRDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMubG9hZGVkQ2xhc3MgKyBcIik6bm90KC5cIiArIHBhcmFtcy5sb2FkaW5nQ2xhc3MgKyBcIilcIik7XG5cbiAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcykpIHtcbiAgICAgICAgJGltYWdlcy5wdXNoKCRzbGlkZUVsWzBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAkaW1hZ2VzLmVhY2goZnVuY3Rpb24gKGltYWdlRWwpIHtcbiAgICAgICAgdmFyICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIHZhciBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICB2YXIgc3Jjc2V0ID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgdmFyIHNpemVzID0gJGltYWdlRWwuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICB2YXIgJHBpY3R1cmVFbCA9ICRpbWFnZUVsLnBhcmVudCgncGljdHVyZScpO1xuICAgICAgICBzd2lwZXIubG9hZEltYWdlKCRpbWFnZUVsWzBdLCBzcmMgfHwgYmFja2dyb3VuZCwgc3Jjc2V0LCBzaXplcywgZmFsc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyICYmICFzd2lwZXIucGFyYW1zIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBcInVybChcXFwiXCIgKyBiYWNrZ3JvdW5kICsgXCJcXFwiKVwiKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyY3NldCcsIHNyY3NldCk7XG4gICAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHBpY3R1cmVFbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHBpY3R1cmVFbC5jaGlsZHJlbignc291cmNlJykuZWFjaChmdW5jdGlvbiAoc291cmNlRWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHNvdXJjZSA9ICQoc291cmNlRWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRzb3VyY2UuYXR0cignZGF0YS1zcmNzZXQnKSkge1xuICAgICAgICAgICAgICAgICAgJHNvdXJjZS5hdHRyKCdzcmNzZXQnLCAkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpO1xuICAgICAgICAgICAgICAgICAgJHNvdXJjZS5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAgICRzbGlkZUVsLmZpbmQoXCIuXCIgKyBwYXJhbXMucHJlbG9hZGVyQ2xhc3MpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgICAgIHZhciBzbGlkZU9yaWdpbmFsSW5kZXggPSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuXG4gICAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlT3JpZ2luYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKTtcbiAgICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUob3JpZ2luYWxTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdXCIpO1xuICAgICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShkdXBsaWNhdGVkU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgICBzd2lwZXJQYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyUGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTtcbiAgICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyUGFyYW1zLnNsaWRlc1BlclZpZXc7XG5cbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIGlmICgkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyUGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIl1cIikubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5pbmRleCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBpc1ZpcnR1YWwgPyAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgOiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IGFjdGl2ZUluZGV4OyBpIDwgYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHtcbiAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgJiYgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCA+IDEpIHtcbiAgICAgICAgICB2YXIgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgICB2YXIgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgICB2YXIgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApOyAvLyBOZXh0IFNsaWRlc1xuXG4gICAgICAgICAgZm9yICh2YXIgX2kgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IF9pIDwgbWF4SW5kZXg7IF9pICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUV4aXN0KF9pKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoX2kpO1xuICAgICAgICAgIH0gLy8gUHJldiBTbGlkZXNcblxuXG4gICAgICAgICAgZm9yICh2YXIgX2kyID0gbWluSW5kZXg7IF9pMiA8IGFjdGl2ZUluZGV4OyBfaTIgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoX2kyKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoX2kyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG5leHRTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcbiAgICAgICAgICB2YXIgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlclBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgaWYgKHByZXZTbGlkZS5sZW5ndGggPiAwKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KHByZXZTbGlkZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGVja0luVmlld09uTG9hZDogZnVuY3Rpb24gY2hlY2tJblZpZXdPbkxvYWQoKSB7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIHZhciAkc2Nyb2xsRWxlbWVudCA9IHN3aXBlci5wYXJhbXMubGF6eS5zY3JvbGxpbmdFbGVtZW50ID8gJChzd2lwZXIucGFyYW1zLmxhenkuc2Nyb2xsaW5nRWxlbWVudCkgOiAkKHdpbmRvdyk7XG4gICAgICB2YXIgaXNXaW5kb3cgPSAkc2Nyb2xsRWxlbWVudFswXSA9PT0gd2luZG93O1xuICAgICAgdmFyIHNjcm9sbEVsZW1lbnRXaWR0aCA9IGlzV2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiAkc2Nyb2xsRWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBzY3JvbGxFbGVtZW50SGVpZ2h0ID0gaXNXaW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiAkc2Nyb2xsRWxlbWVudFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICB2YXIgc3dpcGVyT2Zmc2V0ID0gc3dpcGVyLiRlbC5vZmZzZXQoKTtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIGluVmlldyA9IGZhbHNlO1xuICAgICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLCBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XV07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyQ29vcmQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG5cbiAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gc2Nyb2xsRWxlbWVudFdpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gc2Nyb2xsRWxlbWVudEhlaWdodCkge1xuICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN3aXBlci5zdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG5cbiAgICAgIGlmIChpblZpZXcpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICAkc2Nyb2xsRWxlbWVudC5vZmYoJ3Njcm9sbCcsIHN3aXBlci5sYXp5LmNoZWNrSW5WaWV3T25Mb2FkLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmxhenkuc2Nyb2xsSGFuZGxlckF0dGFjaGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LnNjcm9sbEhhbmRsZXJBdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwnLCBzd2lwZXIubGF6eS5jaGVja0luVmlld09uTG9hZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBMYXp5JDEgPSB7XG4gICAgbmFtZTogJ2xhenknLFxuICAgIHBhcmFtczoge1xuICAgICAgbGF6eToge1xuICAgICAgICBjaGVja0luVmlldzogZmFsc2UsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBsb2FkUHJldk5leHQ6IGZhbHNlLFxuICAgICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG4gICAgICAgIHNjcm9sbGluZ0VsZW1lbnQ6ICcnLFxuICAgICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICAgIGxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRpbmcnLFxuICAgICAgICBsb2FkZWRDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRlZCcsXG4gICAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBsYXp5OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZVxuICAgICAgICB9LCBMYXp5KVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICAgIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmNoZWNrSW5WaWV3KSB7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5jaGVja0luVmlld09uTG9hZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2Nyb2xsOiBmdW5jdGlvbiBzY3JvbGwoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmICFzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3Njcm9sbGJhckRyYWdNb3ZlIHJlc2l6ZSBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSc6IGZ1bmN0aW9uIGxhenlMb2FkKHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgfHwgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkge1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgQ29udHJvbGxlciA9IHtcbiAgICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgICB2YXIgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIHZhciBtaW5JbmRleDtcbiAgICAgICAgdmFyIGd1ZXNzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCB2YWwpIHtcbiAgICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKG1heEluZGV4IC0gbWluSW5kZXggPiAxKSB7XG4gICAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcblxuICAgICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgICB9O1xuICAgICAgfSgpO1xuXG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgdGhpcy55ID0geTtcbiAgICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxOyAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cblxuICAgICAgdmFyIGkxO1xuICAgICAgdmFyIGkzO1xuXG4gICAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgICAgaWYgKCF4MikgcmV0dXJuIDA7IC8vIEdldCB0aGUgaW5kZXhlcyBvZiB4MSBhbmQgeDMgKHRoZSBhcnJheSBpbmRleGVzIGJlZm9yZSBhbmQgYWZ0ZXIgZ2l2ZW4geDIpOlxuXG4gICAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgICBpMSA9IGkzIC0gMTsgLy8gV2UgaGF2ZSBvdXIgaW5kZXhlcyBpMSAmIGkzLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIGFscmVhZHk6XG4gICAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuXG4gICAgICAgIHJldHVybiAoeDIgLSB0aGlzLnhbaTFdKSAqICh0aGlzLnlbaTNdIC0gdGhpcy55W2kxXSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pICsgdGhpcy55W2kxXTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8geHh4OiBmb3Igbm93IGkgd2lsbCBqdXN0IHNhdmUgb25lIHNwbGluZSBmdW5jdGlvbiB0byB0b1xuICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcCA/IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoX3NldFRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICAgIHZhciBtdWx0aXBsaWVyO1xuICAgICAgdmFyIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB2YXIgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGMpIHtcbiAgICAgICAgLy8gdGhpcyB3aWxsIGNyZWF0ZSBhbiBJbnRlcnBvbGF0ZSBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgc25hcEdyaWRzXG4gICAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAgIC8vIHRoZSBmdW5jdGlvbiBkb2VzIGEgbG90IG9mIHZhbHVlIGNhY2hpbmcgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpOyAvLyBpIGFtIG5vdCBzdXJlIHdoeSB0aGUgdmFsdWVzIGhhdmUgdG8gYmUgbXVsdGlwbGljYXRlZCB0aGlzIHdheSwgdHJpZWQgdG8gaW52ZXJ0IHRoZSBzbmFwR3JpZFxuICAgICAgICAgIC8vIGJ1dCBpdCBkaWQgbm90IHdvcmsgb3V0XG5cbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gLXN3aXBlci5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdHJhbnNsYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSBjLm1heFRyYW5zbGF0ZSgpIC0gY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMudXBkYXRlUHJvZ3Jlc3MoY29udHJvbGxlZFRyYW5zbGF0ZSk7XG4gICAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgYy51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuXG4gICAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgIGMudHJhbnNpdGlvblN0YXJ0KCk7XG5cbiAgICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGMuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghY29udHJvbGxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgICAgYy5sb29wRml4KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgQ29udHJvbGxlciQxID0ge1xuICAgIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgICAgYnk6ICdzbGlkZScgLy8gb3IgJ2NvbnRhaW5lcidcblxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBjb250cm9sbGVyOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2xcbiAgICAgICAgfSwgQ29udHJvbGxlcilcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIsIHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgQTExeSA9IHtcbiAgICBnZXRSYW5kb21OdW1iZXI6IGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihzaXplKSB7XG4gICAgICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNpemUgPSAxNjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJhbmRvbUNoYXIgPSBmdW5jdGlvbiByYW5kb21DaGFyKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7XG4gICAgfSxcbiAgICBtYWtlRWxGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICcwJyk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgbWFrZUVsTm90Rm9jdXNhYmxlOiBmdW5jdGlvbiBtYWtlRWxOb3RGb2N1c2FibGUoJGVsKSB7XG4gICAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnLTEnKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBhZGRFbFJvbGU6IGZ1bmN0aW9uIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgYWRkRWxSb2xlRGVzY3JpcHRpb246IGZ1bmN0aW9uIGFkZEVsUm9sZURlc2NyaXB0aW9uKCRlbCwgZGVzY3JpcHRpb24pIHtcbiAgICAgICRlbC5hdHRyKCdhcmlhLXJvbGVkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBhZGRFbENvbnRyb2xzOiBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKCRlbCwgY29udHJvbHMpIHtcbiAgICAgICRlbC5hdHRyKCdhcmlhLWNvbnRyb2xzJywgY29udHJvbHMpO1xuICAgICAgcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIGFkZEVsTGFiZWw6IGZ1bmN0aW9uIGFkZEVsTGFiZWwoJGVsLCBsYWJlbCkge1xuICAgICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgYWRkRWxJZDogZnVuY3Rpb24gYWRkRWxJZCgkZWwsIGlkKSB7XG4gICAgICAkZWwuYXR0cignaWQnLCBpZCk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgYWRkRWxMaXZlOiBmdW5jdGlvbiBhZGRFbExpdmUoJGVsLCBsaXZlKSB7XG4gICAgICAkZWwuYXR0cignYXJpYS1saXZlJywgbGl2ZSk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgZGlzYWJsZUVsOiBmdW5jdGlvbiBkaXNhYmxlRWwoJGVsKSB7XG4gICAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgICAgcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIGVuYWJsZUVsOiBmdW5jdGlvbiBlbmFibGVFbCgkZWwpIHtcbiAgICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgICAgcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIG9uRW50ZXJPclNwYWNlS2V5OiBmdW5jdGlvbiBvbkVudGVyT3JTcGFjZUtleShlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlICE9PSAxMyAmJiBlLmtleUNvZGUgIT09IDMyKSByZXR1cm47XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSkge1xuICAgICAgICBpZiAoIShzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgJHRhcmdldEVsLmlzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSB7XG4gICAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7XG4gICAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgICB9LFxuICAgIHVwZGF0ZU5hdmlnYXRpb246IGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kbmV4dEVsLFxuICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJHByZXZFbDtcblxuICAgICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsTm90Rm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkbmV4dEVsKTtcbiAgICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxOb3RGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJG5leHRFbCk7XG4gICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVQYWdpbmF0aW9uOiBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuXG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaChmdW5jdGlvbiAoYnVsbGV0RWwpIHtcbiAgICAgICAgICB2YXIgJGJ1bGxldEVsID0gJChidWxsZXRFbCk7XG4gICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG5cbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJGJ1bGxldEVsLCBwYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCAkYnVsbGV0RWwuaW5kZXgoKSArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pOyAvLyBDb250YWluZXJcblxuICAgICAgdmFyICRjb250YWluZXJFbCA9IHN3aXBlci4kZWw7XG5cbiAgICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGVEZXNjcmlwdGlvbigkY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5jb250YWluZXJNZXNzYWdlKSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgICB9IC8vIFdyYXBwZXJcblxuXG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHdyYXBwZXJJZCA9ICR3cmFwcGVyRWwuYXR0cignaWQnKSB8fCBcInN3aXBlci13cmFwcGVyLVwiICsgc3dpcGVyLmExMXkuZ2V0UmFuZG9tTnVtYmVyKDE2KTtcbiAgICAgIHZhciBsaXZlID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQgPyAnb2ZmJyA6ICdwb2xpdGUnO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxJZCgkd3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxMaXZlKCR3cmFwcGVyRWwsIGxpdmUpOyAvLyBTbGlkZVxuXG4gICAgICBpZiAocGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZURlc2NyaXB0aW9uKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkKHN3aXBlci5zbGlkZXMpLCBwYXJhbXMuc2xpZGVSb2xlKTtcbiAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgICB2YXIgJHNsaWRlRWwgPSAkKHNsaWRlRWwpO1xuICAgICAgICB2YXIgYXJpYUxhYmVsTWVzc2FnZSA9IHBhcmFtcy5zbGlkZUxhYmVsTWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sICRzbGlkZUVsLmluZGV4KCkgKyAxKS5yZXBsYWNlKC9cXHtcXHtzbGlkZXNMZW5ndGhcXH1cXH0vLCBzd2lwZXIuc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgICAgfSk7IC8vIE5hdmlnYXRpb25cblxuICAgICAgdmFyICRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbDtcblxuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgICAgfVxuXG4gICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG5cbiAgICAgICAgaWYgKCRuZXh0RWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJG5leHRFbCwgJ2J1dHRvbicpO1xuICAgICAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRuZXh0RWwsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxDb250cm9scygkbmV4dEVsLCB3cmFwcGVySWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG5cbiAgICAgICAgaWYgKCRwcmV2RWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJHByZXZFbCwgJ2J1dHRvbicpO1xuICAgICAgICAgICRwcmV2RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRwcmV2RWwsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxDb250cm9scygkcHJldkVsLCB3cmFwcGVySWQpO1xuICAgICAgfSAvLyBQYWdpbmF0aW9uXG5cblxuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub24oJ2tleWRvd24nLCBjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpLCBzd2lwZXIuYTExeS5vbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbiAmJiBzd2lwZXIuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7XG4gICAgICB2YXIgJG5leHRFbDtcbiAgICAgIHZhciAkcHJldkVsO1xuXG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWw7XG4gICAgICB9XG5cbiAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH0gLy8gUGFnaW5hdGlvblxuXG5cbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9mZigna2V5ZG93bicsIGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcyksIHN3aXBlci5hMTF5Lm9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBBMTF5JDEgPSB7XG4gICAgbmFtZTogJ2ExMXknLFxuICAgIHBhcmFtczoge1xuICAgICAgYTExeToge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgICAgc2xpZGVMYWJlbE1lc3NhZ2U6ICd7e2luZGV4fX0gLyB7e3NsaWRlc0xlbmd0aH19JyxcbiAgICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgICAgY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICAgIHNsaWRlUm9sZTogJ2dyb3VwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBhMTF5OiBfZXh0ZW5kcyh7fSwgQTExeSwge1xuICAgICAgICAgIGxpdmVSZWdpb246ICQoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MgKyBcIlxcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIj48L3NwYW4+XCIpXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uIGFmdGVySW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuYTExeS5pbml0KCk7XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgICB9LFxuICAgICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBwYWdpbmF0aW9uVXBkYXRlOiBmdW5jdGlvbiBwYWdpbmF0aW9uVXBkYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIEhpc3RvcnkgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcblxuICAgICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpc3RvcnkgPSBzd2lwZXIuaGlzdG9yeTtcbiAgICAgIGhpc3RvcnkuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcyhzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgICBpZiAoIWhpc3RvcnkucGF0aHMua2V5ICYmICFoaXN0b3J5LnBhdGhzLnZhbHVlKSByZXR1cm47XG4gICAgICBoaXN0b3J5LnNjcm9sbFRvU2xpZGUoMCwgaGlzdG9yeS5wYXRocy52YWx1ZSwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IGZ1bmN0aW9uIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLmhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICAgIH0sXG4gICAgZ2V0UGF0aFZhbHVlczogZnVuY3Rpb24gZ2V0UGF0aFZhbHVlcyh1cmxPdmVycmlkZSkge1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgdmFyIGxvY2F0aW9uO1xuXG4gICAgICBpZiAodXJsT3ZlcnJpZGUpIHtcbiAgICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHVybE92ZXJyaWRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnQgIT09ICcnO1xuICAgICAgfSk7XG4gICAgICB2YXIgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgICAgdmFyIHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgIH0sXG4gICAgc2V0SGlzdG9yeTogZnVuY3Rpb24gc2V0SGlzdG9yeShrZXksIGluZGV4KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIGlmICghc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgICB2YXIgbG9jYXRpb247XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVybCkge1xuICAgICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgICAgdmFyIHZhbHVlID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJvb3QgPSBzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdDtcbiAgICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgICB2YWx1ZSA9IHJvb3QgKyBcIi9cIiArIGtleSArIFwiL1wiICsgdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIHZhbHVlID0ga2V5ICsgXCIvXCIgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuXG4gICAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9LCBudWxsLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9LCBudWxsLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbHVnaWZ5OiBmdW5jdGlvbiBzbHVnaWZ5KHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKS5yZXBsYWNlKC8tLSsvZywgJy0nKS5yZXBsYWNlKC9eLSsvLCAnJykucmVwbGFjZSgvLSskLywgJycpO1xuICAgIH0sXG4gICAgc2Nyb2xsVG9TbGlkZTogZnVuY3Rpb24gc2Nyb2xsVG9TbGlkZShzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHNsaWRlSGlzdG9yeSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG5cbiAgICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIEhpc3RvcnkkMSA9IHtcbiAgICBuYW1lOiAnaGlzdG9yeScsXG4gICAgcGFyYW1zOiB7XG4gICAgICBoaXN0b3J5OiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByb290OiAnJyxcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgICAga2V5OiAnc2xpZGVzJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBoaXN0b3J5OiBfZXh0ZW5kcyh7fSwgSGlzdG9yeSlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5oaXN0b3J5LmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5oaXN0b3J5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJzogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlKHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIEhhc2hOYXZpZ2F0aW9uID0ge1xuICAgIG9uSGFzaENhbmdlOiBmdW5jdGlvbiBvbkhhc2hDYW5nZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoQ2hhbmdlJyk7XG4gICAgICB2YXIgbmV3SGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICAgIHZhciBhY3RpdmVTbGlkZUhhc2ggPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG5cbiAgICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLWhhc2g9XFxcIlwiICsgbmV3SGFzaCArIFwiXFxcIl1cIikuaW5kZXgoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0SGFzaDogZnVuY3Rpb24gc2V0SGFzaCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGlmICghc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXCIjXCIgKyBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJykgfHwgJycpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnaGFzaFNldCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICB2YXIgaGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2hhc2hTZXQnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCBzd2lwZXIucGFyYW1zLmhpc3RvcnkgJiYgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB2YXIgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcblxuICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgdmFyIHNwZWVkID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHNsaWRlSGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuXG4gICAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAgICQod2luZG93KS5vbignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgSGFzaE5hdmlnYXRpb24kMSA9IHtcbiAgICBuYW1lOiAnaGFzaC1uYXZpZ2F0aW9uJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGhhc2hOYXZpZ2F0aW9uOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgICB3YXRjaFN0YXRlOiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBoYXNoTmF2aWdhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZVxuICAgICAgICB9LCBIYXNoTmF2aWdhdGlvbilcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSc6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgQXV0b3BsYXkgPSB7XG4gICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciAkYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHZhciBkZWxheSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG5cbiAgICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICAgIGRlbGF5ID0gJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSB8fCBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhdXRvcGxheVJlc3VsdDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHN3aXBlci5hdXRvcGxheS5ydW4oKTtlbHNlIGlmIChhdXRvcGxheVJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBwYXVzZTogZnVuY3Rpb24gcGF1c2Uoc3BlZWQpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoc3BlZWQgPT09IDAgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBbJ3RyYW5zaXRpb25lbmQnLCAnd2Via2l0VHJhbnNpdGlvbkVuZCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25WaXNpYmlsaXR5Q2hhbmdlOiBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLiR3cmFwcGVyRWwpIHJldHVybjtcbiAgICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLiR3cmFwcGVyRWxbMF0pIHJldHVybjtcbiAgICAgIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICBbJ3RyYW5zaXRpb25lbmQnLCAnd2Via2l0VHJhbnNpdGlvbkVuZCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9LFxuICAgIGF0dGFjaE1vdXNlRXZlbnRzOiBmdW5jdGlvbiBhdHRhY2hNb3VzZUV2ZW50cygpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5wYXVzZU9uTW91c2VFbnRlcikge1xuICAgICAgICBzd2lwZXIuJGVsLm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLmF1dG9wbGF5Lm9uTW91c2VFbnRlcik7XG4gICAgICAgIHN3aXBlci4kZWwub24oJ21vdXNlbGVhdmUnLCBzd2lwZXIuYXV0b3BsYXkub25Nb3VzZUxlYXZlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRldGFjaE1vdXNlRXZlbnRzOiBmdW5jdGlvbiBkZXRhY2hNb3VzZUV2ZW50cygpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLiRlbC5vZmYoJ21vdXNlZW50ZXInLCBzd2lwZXIuYXV0b3BsYXkub25Nb3VzZUVudGVyKTtcbiAgICAgIHN3aXBlci4kZWwub2ZmKCdtb3VzZWxlYXZlJywgc3dpcGVyLmF1dG9wbGF5Lm9uTW91c2VMZWF2ZSk7XG4gICAgfVxuICB9O1xuICB2YXIgQXV0b3BsYXkkMSA9IHtcbiAgICBuYW1lOiAnYXV0b3BsYXknLFxuICAgIHBhcmFtczoge1xuICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsXG4gICAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgICAgICBwYXVzZU9uTW91c2VFbnRlcjogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgICAgYXV0b3BsYXk6IF9leHRlbmRzKHt9LCBBdXRvcGxheSwge1xuICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgIHBhdXNlZDogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuYXR0YWNoTW91c2VFdmVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJlZm9yZVRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHN3aXBlciwgc3BlZWQsIGludGVybmFsKSB7XG4gICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKHNwZWVkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbGlkZXJGaXJzdE1vdmU6IGZ1bmN0aW9uIHNsaWRlckZpcnN0TW92ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkICYmICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LmRldGFjaE1vdXNlRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIEZhZGUgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB2YXIgdHkgPSAwO1xuXG4gICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgICAkc2xpZGVFbC5jc3Moe1xuICAgICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eVxuICAgICAgICB9KS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIDBweClcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgc2xpZGVzLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgRWZmZWN0RmFkZSA9IHtcbiAgICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICAgIHBhcmFtczoge1xuICAgICAgZmFkZUVmZmVjdDoge1xuICAgICAgICBjcm9zc0ZhZGU6IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIGZhZGVFZmZlY3Q6IF9leHRlbmRzKHt9LCBGYWRlKVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZhZGVcIik7XG4gICAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBleHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgQ3ViZSA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICAgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgICAgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodCxcbiAgICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgICBicm93c2VyID0gc3dpcGVyLmJyb3dzZXI7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0O1xuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIHZhciB3cmFwcGVyUm90YXRlID0gMDtcbiAgICAgIHZhciAkY3ViZVNoYWRvd0VsO1xuXG4gICAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICR3cmFwcGVyRWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGN1YmVTaGFkb3dFbC5jc3Moe1xuICAgICAgICAgICAgaGVpZ2h0OiBzd2lwZXJXaWR0aCArIFwicHhcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgc2xpZGVJbmRleCA9IGk7XG5cbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgICAgdmFyIHJvdW5kID0gTWF0aC5mbG9vcihzbGlkZUFuZ2xlIC8gMzYwKTtcblxuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgICAgdmFyIHR4ID0gMDtcbiAgICAgICAgdmFyIHR5ID0gMDtcbiAgICAgICAgdmFyIHR6ID0gMDtcblxuICAgICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICAgIHR6ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSBzd2lwZXJTaXplICsgcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgICB0eiA9IHN3aXBlclNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IC1zd2lwZXJTaXplO1xuICAgICAgICAgIHR6ID0gMyAqIHN3aXBlclNpemUgKyBzd2lwZXJTaXplICogNCAqIHJvdW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIHR4ID0gLXR4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBcInJvdGF0ZVgoXCIgKyAoaXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKGlzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwKSArIFwiZGVnKSB0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIFwiICsgdHogKyBcInB4KVwiO1xuXG4gICAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgICB3cmFwcGVyUm90YXRlID0gc2xpZGVJbmRleCAqIDkwICsgcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gLXNsaWRlSW5kZXggKiA5MCAtIHByb2dyZXNzICogOTA7XG4gICAgICAgIH1cblxuICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTtcblxuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgIHZhciBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICAgJy1tb3otdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0tb3JpZ2luJzogXCI1MCUgNTAlIC1cIiArIHN3aXBlclNpemUgLyAyICsgXCJweFwiLFxuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIlxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyAoc3dpcGVyV2lkdGggLyAyICsgcGFyYW1zLnNoYWRvd09mZnNldCkgKyBcInB4LCBcIiArIC1zd2lwZXJXaWR0aCAvIDIgKyBcInB4KSByb3RhdGVYKDkwZGVnKSByb3RhdGVaKDBkZWcpIHNjYWxlKFwiICsgcGFyYW1zLnNoYWRvd1NjYWxlICsgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gMS41IC0gKE1hdGguc2luKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMik7XG4gICAgICAgICAgdmFyIHNjYWxlMSA9IHBhcmFtcy5zaGFkb3dTY2FsZTtcbiAgICAgICAgICB2YXIgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShcInNjYWxlM2QoXCIgKyBzY2FsZTEgKyBcIiwgMSwgXCIgKyBzY2FsZTIgKyBcIikgdHJhbnNsYXRlM2QoMHB4LCBcIiArIChzd2lwZXJIZWlnaHQgLyAyICsgb2Zmc2V0KSArIFwicHgsIFwiICsgLXN3aXBlckhlaWdodCAvIDIgLyBzY2FsZTIgKyBcInB4KSByb3RhdGVYKC05MGRlZylcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHpGYWN0b3IgPSBicm93c2VyLmlzU2FmYXJpIHx8IGJyb3dzZXIuaXNXZWJWaWV3ID8gLXN3aXBlclNpemUgLyAyIDogMDtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LDAsXCIgKyB6RmFjdG9yICsgXCJweCkgcm90YXRlWChcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZSkgKyBcImRlZykgcm90YXRlWShcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDApICsgXCJkZWcpXCIpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgRWZmZWN0Q3ViZSA9IHtcbiAgICBuYW1lOiAnZWZmZWN0LWN1YmUnLFxuICAgIHBhcmFtczoge1xuICAgICAgY3ViZUVmZmVjdDoge1xuICAgICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgICAgc2hhZG93U2NhbGU6IDAuOTRcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgICAgY3ViZUVmZmVjdDogX2V4dGVuZHMoe30sIEN1YmUpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiY3ViZVwiKTtcbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLFxuICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBleHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgRmxpcCA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzcztcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICB2YXIgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgICB2YXIgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgICAgdmFyIHJvdGF0ZVggPSAwO1xuICAgICAgICB2YXIgdHggPSAtb2Zmc2V0O1xuICAgICAgICB2YXIgdHkgPSAwO1xuXG4gICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Quc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuXG4gICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIDBweCkgcm90YXRlWChcIiArIHJvdGF0ZVggKyBcImRlZykgcm90YXRlWShcIiArIHJvdGF0ZVkgKyBcImRlZylcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICAgICAgc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47IC8vIGlmICghJCh0aGlzKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKSByZXR1cm47XG5cbiAgICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgRWZmZWN0RmxpcCA9IHtcbiAgICBuYW1lOiAnZWZmZWN0LWZsaXAnLFxuICAgIHBhcmFtczoge1xuICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICAgIGxpbWl0Um90YXRpb246IHRydWVcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgICAgZmxpcEVmZmVjdDogX2V4dGVuZHMoe30sIEZsaXApXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiZmxpcFwiKTtcbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICAgIGV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIENvdmVyZmxvdyA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHN3aXBlcldpZHRoID0gc3dpcGVyLndpZHRoLFxuICAgICAgICAgIHN3aXBlckhlaWdodCA9IHN3aXBlci5oZWlnaHQsXG4gICAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgICBzbGlkZXNTaXplc0dyaWQgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICAgIHZhciByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgICB2YXIgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoOyAvLyBFYWNoIHNsaWRlIG9mZnNldCBmcm9tIGNlbnRlclxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgdmFyIHNsaWRlT2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHZhciBvZmZzZXRNdWx0aXBsaWVyID0gKGNlbnRlciAtIHNsaWRlT2Zmc2V0IC0gc2xpZGVTaXplIC8gMikgLyBzbGlkZVNpemUgKiBwYXJhbXMubW9kaWZpZXI7XG4gICAgICAgIHZhciByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIHZhciByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7IC8vIHZhciByb3RhdGVaID0gMFxuXG4gICAgICAgIHZhciB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgICB2YXIgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoOyAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcblxuICAgICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICAgIHN0cmV0Y2ggPSBwYXJzZUZsb2F0KHBhcmFtcy5zdHJldGNoKSAvIDEwMCAqIHNsaWRlU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9IGlzSG9yaXpvbnRhbCA/IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgdmFyIHNjYWxlID0gMSAtICgxIC0gcGFyYW1zLnNjYWxlKSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpOyAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuXG4gICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHJvdGF0ZVggPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDtcbiAgICAgICAgdmFyIHNsaWRlVHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LFwiICsgdHJhbnNsYXRlWSArIFwicHgsXCIgKyB0cmFuc2xhdGVaICsgXCJweCkgIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpIHNjYWxlKFwiICsgc2NhbGUgKyBcIilcIjtcbiAgICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHNsaWRlVHJhbnNmb3JtKTtcbiAgICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcblxuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgdmFyICRzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgIHZhciAkc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkc2hhZG93QmVmb3JlRWwgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dCZWZvcmVFbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgJHNoYWRvd0FmdGVyRWwgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QWZ0ZXJFbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGgpICRzaGFkb3dCZWZvcmVFbFswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoKSAkc2hhZG93QWZ0ZXJFbFswXS5zdHlsZS5vcGFjaXR5ID0gLW9mZnNldE11bHRpcGxpZXIgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbikuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9O1xuICB2YXIgRWZmZWN0Q292ZXJmbG93ID0ge1xuICAgIG5hbWU6ICdlZmZlY3QtY292ZXJmbG93JyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICByb3RhdGU6IDUwLFxuICAgICAgICBzdHJldGNoOiAwLFxuICAgICAgICBkZXB0aDogMTAwLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgICBjb3ZlcmZsb3dFZmZlY3Q6IF9leHRlbmRzKHt9LCBDb3ZlcmZsb3cpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJjb3ZlcmZsb3dcIik7XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCIzZFwiKTtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIFRodW1icyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgdGh1bWJzUGFyYW1zID0gc3dpcGVyLnBhcmFtcy50aHVtYnM7XG4gICAgICBpZiAoc3dpcGVyLnRodW1icy5pbml0aWFsaXplZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgc3dpcGVyLnRodW1icy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB2YXIgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG5cbiAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgICBleHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBleHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3MoZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIHN3aXBlci50aHVtYnMub25UaHVtYkNsaWNrKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgb25UaHVtYkNsaWNrOiBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB2YXIgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICAgIHZhciBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAkKGNsaWNrZWRTbGlkZSkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgcmV0dXJuO1xuICAgICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHNsaWRlVG9JbmRleDtcblxuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuXG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICB2YXIgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBpZiAodHlwZW9mIHByZXZJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtlbHNlIGlmICh0eXBlb2YgbmV4dEluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O2Vsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O2Vsc2Ugc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoaW5pdGlhbCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgICAgdmFyIHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgdmFyIGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgICAgdmFyIHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcblxuICAgICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXggfHwgdXNlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIHZhciBuZXdUaHVtYnNJbmRleDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbjtcblxuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgaWYgKHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5oYXNDbGFzcyh0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgICAgICAgdGh1bWJzU3dpcGVyLl9jbGllbnRMZWZ0ID0gdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICAgIGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgICB9IC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuXG5cbiAgICAgICAgICB2YXIgcHJldlRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLnByZXZBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc3dpcGVyLnJlYWxJbmRleCArIFwiXFxcIl1cIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgICB2YXIgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLm5leHRBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc3dpcGVyLnJlYWxJbmRleCArIFwiXFxcIl1cIikuZXEoMCkuaW5kZXgoKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgcHJldlRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV4dFRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSA/IG5leHRUaHVtYnNJbmRleCA6IGN1cnJlbnRUaHVtYnNJbmRleDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA8IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gYXV0b1Njcm9sbE9mZnNldCA6IC0xICogYXV0b1Njcm9sbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggKyBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSA7XG5cbiAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICB9IC8vIEFjdGl2YXRlIHRodW1ic1xuXG5cbiAgICAgIHZhciB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICAgIHZhciB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudGh1bWJzLm11bHRpcGxlQWN0aXZlVGh1bWJzKSB7XG4gICAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgICAgfVxuXG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gTWF0aC5mbG9vcih0aHVtYnNUb0FjdGl2YXRlKTtcbiAgICAgIHRodW1ic1N3aXBlci5zbGlkZXMucmVtb3ZlQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXggKyBpKSArIFwiXFxcIl1cIikuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aHVtYnNUb0FjdGl2YXRlOyBfaSArPSAxKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgX2kpLmFkZENsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgVGh1bWJzJDEgPSB7XG4gICAgbmFtZTogJ3RodW1icycsXG4gICAgcGFyYW1zOiB7XG4gICAgICB0aHVtYnM6IHtcbiAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICBtdWx0aXBsZUFjdGl2ZVRodW1iczogdHJ1ZSxcbiAgICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICAgIHRodW1ic0NvbnRhaW5lckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci10aHVtYnMnXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICAgIHRodW1iczogX2V4dGVuZHMoe1xuICAgICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgICBpbml0aWFsaXplZDogZmFsc2VcbiAgICAgICAgfSwgVGh1bWJzKVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgICAgdmFyIHRodW1icyA9IHN3aXBlci5wYXJhbXMudGh1bWJzO1xuICAgICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgICBzd2lwZXIudGh1bWJzLmluaXQoKTtcbiAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICAgIHRodW1ic1N3aXBlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KHN3aXBlcikge1xuICAgICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0aHVtYnNTd2lwZXIpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFN3aXBlciBDbGFzc1xuICB2YXIgY29tcG9uZW50cyA9IFtWaXJ0dWFsJDEsIEtleWJvYXJkJDEsIE1vdXNld2hlZWwkMSwgTmF2aWdhdGlvbiQxLCBQYWdpbmF0aW9uJDEsIFNjcm9sbGJhciQxLCBQYXJhbGxheCQxLCBab29tJDEsIExhenkkMSwgQ29udHJvbGxlciQxLCBBMTF5JDEsIEhpc3RvcnkkMSwgSGFzaE5hdmlnYXRpb24kMSwgQXV0b3BsYXkkMSwgRWZmZWN0RmFkZSwgRWZmZWN0Q3ViZSwgRWZmZWN0RmxpcCwgRWZmZWN0Q292ZXJmbG93LCBUaHVtYnMkMV07XG4gIFN3aXBlci51c2UoY29tcG9uZW50cyk7XG5cbiAgcmV0dXJuIFN3aXBlcjtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXBlci1idW5kbGUuanMubWFwXG5cbmNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoJy5zd2lwZXItY29udGFpbmVyJywge1xuICAgIGxvb3A6IHRydWUsXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgICAgcHJldkVsOiAnLnN3aXBlci1idXR0b24tcHJldidcbiAgICB9XG59KTtcblxuY29uc3QgaW5pdEN1c3RvbVNlbGVjdCA9IChlbCkgPT4ge1xuXG4gICAgY29uc3QgJHNlbGVjdE5hdGl2ZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QtbmF0aXZlJyk7XG4gICAgY29uc3QgJHNlbGVjdEN1c3RvbSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QtY3VzdG9tJyk7XG4gICAgY29uc3QgJHNlbGVjdEN1c3RvbVRyaWdnZXIgPSAkc2VsZWN0Q3VzdG9tLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QtY3VzdG9tX190cmlnZ2VyJyk7XG4gICAgY29uc3QgJHNlbGVjdEN1c3RvbU9wdGlvbnMgPSAkc2VsZWN0Q3VzdG9tLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QtY3VzdG9tX19vcHRpb25zJyk7XG4gICAgY29uc3Qgb3B0aW9uc0NvdW50ID0gJHNlbGVjdEN1c3RvbU9wdGlvbnMuY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgbGV0IG9wdGlvblNlbGVjdGVkID0gJyc7XG5cbiAgICBjb25zdCB3YXRjaENsaWNrT3V0c2lkZSA9IChlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpZENsaWNrZWRPdXRzaWRlID0gISRzZWxlY3RDdXN0b20uY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKGRpZENsaWNrZWRPdXRzaWRlKSB7XG4gICAgICAgICAgICBjbG9zZVNlbGVjdEN1c3RvbSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgb3BlblNlbGVjdEN1c3RvbSA9ICgpID0+IHtcbiAgICAgICAgJHNlbGVjdEN1c3RvbS5jbGFzc0xpc3QuYWRkKCdzZWxlY3QtY3VzdG9tLS1hY3RpdmUnKTtcbiAgICAgICAgJHNlbGVjdEN1c3RvbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuXG4gICAgICAgIGlmIChvcHRpb25TZWxlY3RlZCkge1xuXG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgd2F0Y2hDbGlja091dHNpZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGNsb3NlU2VsZWN0Q3VzdG9tID0gKCkgPT4ge1xuICAgICAgICAkc2VsZWN0Q3VzdG9tLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdC1jdXN0b20tLWFjdGl2ZScpO1xuICAgICAgICAkc2VsZWN0Q3VzdG9tLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgd2F0Y2hDbGlja091dHNpZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZVNlbGVjdE9wdGlvbiA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBwcmV2VmFsdWUgPSBvcHRpb25TZWxlY3RlZDtcbiAgICAgICAgY29uc3QgJHByZXZPcHRpb24gPSAkc2VsZWN0Q3VzdG9tT3B0aW9ucy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYFtkYXRhLXZhbHVlPVwiJHtwcmV2VmFsdWV9XCJgXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0ICRvcHRpb24gPSAkc2VsZWN0Q3VzdG9tT3B0aW9ucy5xdWVyeVNlbGVjdG9yKGBbZGF0YS12YWx1ZT1cIiR7dmFsdWV9XCJgKTtcblxuICAgICAgICBpZiAoJHByZXZPcHRpb24pIHtcbiAgICAgICAgICAgICRwcmV2T3B0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdC1jdXN0b21fX29wdGlvbi0tYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJG9wdGlvbikge1xuICAgICAgICAgICAgJG9wdGlvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3QtY3VzdG9tX19vcHRpb24tLWFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNlbGVjdE5hdGl2ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAkc2VsZWN0Q3VzdG9tVHJpZ2dlci50ZXh0Q29udGVudCA9ICRvcHRpb24udGV4dENvbnRlbnQ7XG4gICAgICAgIG9wdGlvblNlbGVjdGVkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJHNlbGVjdEN1c3RvbVRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBpc1NlbGVjdENsb3NlZCA9ICEkc2VsZWN0Q3VzdG9tLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0LWN1c3RvbS0tYWN0aXZlJyk7XG4gICAgICAgIGlzU2VsZWN0Q2xvc2VkID8gb3BlblNlbGVjdEN1c3RvbSgpIDogY2xvc2VTZWxlY3RDdXN0b20oKTtcbiAgICB9KTtcblxuICAgICRzZWxlY3ROYXRpdmUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgdXBkYXRlQ3VzdG9tU2VsZWN0Q2hlY2tlZChlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAkc2VsZWN0Q3VzdG9tT3B0aW9ucy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5kYXRhc2V0LnZhbHVlKSB7XG4gICAgICAgICAgICB1cGRhdGVTZWxlY3RPcHRpb24oZS50YXJnZXQuZGF0YXNldC52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjbG9zZVNlbGVjdEN1c3RvbSgpO1xuICAgIH0pXG59XG5cbmNvbnN0IHNlbGVjdFRhc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0VGFzaycpO1xuY29uc3Qgc2VsZWN0RGVhZGxpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0RGVhZGxpbmUnKTtcblxuaW5pdEN1c3RvbVNlbGVjdChzZWxlY3RUYXNrKTtcbmluaXRDdXN0b21TZWxlY3Qoc2VsZWN0RGVhZGxpbmUpO1xuXG4iXSwiZmlsZSI6ImFwcC5qcyJ9
